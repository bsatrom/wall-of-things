
/Users/bsatrom/Development/particle/wall-of-things/wot-firmware/wot-controller/target/wot-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e28  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00015ed4  2**0
                  CONTENTS
  3 .data         00000068  2003e32c  000d5e40  0000e32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000045c  2003e394  2003e394  0001e394  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d5ea8  000d5ea8  00015ea8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d5ed0  000d5ed0  00015ed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000971c9  00000000  00000000  00015ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d607  00000000  00000000  000ad09d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013bda  00000000  00000000  000ba6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d60  00000000  00000000  000ce27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000031e0  00000000  00000000  000cffde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002dbdf  00000000  00000000  000d31be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ef6b  00000000  00000000  00100d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d4034  00000000  00000000  0011fd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b2d0  00000000  00000000  001f3d3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	6c 5a 0d 00                                         lZ..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fcd9 	bl	d59e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fcde 	bl	d59fa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e32c 	.word	0x2003e32c
   d4048:	000d5e40 	.word	0x000d5e40
   d404c:	2003e394 	.word	0x2003e394
   d4050:	2003e394 	.word	0x2003e394
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fb2b 	bl	d56b4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5e40 	.word	0x000d5e40
   d4080:	000d5e08 	.word	0x000d5e08

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83c 	b.w	d4100 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f85b 	bl	d4144 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 badd 	b.w	d5650 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba25 	b.w	d44e4 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 ba23 	b.w	d44e4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 ba29 	b.w	d44f4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 ba27 	b.w	d44f4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z12setStripMode6String>:
{
  // The core of your code will likely live here.
}

int setStripMode(String args)
{
   d40b8:	b508      	push	{r3, lr}
  Mesh.publish("setMode", args);
   d40ba:	4903      	ldr	r1, [pc, #12]	; (d40c8 <_Z12setStripMode6String+0x10>)
   d40bc:	6802      	ldr	r2, [r0, #0]
   d40be:	4803      	ldr	r0, [pc, #12]	; (d40cc <_Z12setStripMode6String+0x14>)
   d40c0:	f000 fc60 	bl	d4984 <_ZN5spark11MeshPublish7publishEPKcS2_>

  return 1;
}
   d40c4:	2001      	movs	r0, #1
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d5a80 	.word	0x000d5a80
   d40cc:	2003e404 	.word	0x2003e404

000d40d0 <_Z9setColors6String>:

int setColors(String args)
{
   d40d0:	b508      	push	{r3, lr}
  Mesh.publish("setColors", args);
   d40d2:	4903      	ldr	r1, [pc, #12]	; (d40e0 <_Z9setColors6String+0x10>)
   d40d4:	6802      	ldr	r2, [r0, #0]
   d40d6:	4803      	ldr	r0, [pc, #12]	; (d40e4 <_Z9setColors6String+0x14>)
   d40d8:	f000 fc54 	bl	d4984 <_ZN5spark11MeshPublish7publishEPKcS2_>

  return 1;
}
   d40dc:	2001      	movs	r0, #1
   d40de:	bd08      	pop	{r3, pc}
   d40e0:	000d5a88 	.word	0x000d5a88
   d40e4:	2003e404 	.word	0x2003e404

000d40e8 <_Z10startChase6String>:

int startChase(String args)
{
   d40e8:	b508      	push	{r3, lr}
  Mesh.publish("startOne", args);
   d40ea:	4903      	ldr	r1, [pc, #12]	; (d40f8 <_Z10startChase6String+0x10>)
   d40ec:	6802      	ldr	r2, [r0, #0]
   d40ee:	4803      	ldr	r0, [pc, #12]	; (d40fc <_Z10startChase6String+0x14>)
   d40f0:	f000 fc48 	bl	d4984 <_ZN5spark11MeshPublish7publishEPKcS2_>

  return 1;
   d40f4:	2001      	movs	r0, #1
   d40f6:	bd08      	pop	{r3, pc}
   d40f8:	000d5a92 	.word	0x000d5a92
   d40fc:	2003e404 	.word	0x2003e404

000d4100 <setup>:
int setColors(String args);
int startChase(String args);

// setup() runs once, when the device is first turned on.
void setup()
{
   d4100:	b510      	push	{r4, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4102:	4c09      	ldr	r4, [pc, #36]	; (d4128 <setup+0x28>)
   d4104:	4a09      	ldr	r2, [pc, #36]	; (d412c <setup+0x2c>)
   d4106:	490a      	ldr	r1, [pc, #40]	; (d4130 <setup+0x30>)
   d4108:	4620      	mov	r0, r4
   d410a:	f000 fa76 	bl	d45fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d410e:	4a09      	ldr	r2, [pc, #36]	; (d4134 <setup+0x34>)
   d4110:	4909      	ldr	r1, [pc, #36]	; (d4138 <setup+0x38>)
   d4112:	4620      	mov	r0, r4
   d4114:	f000 fa71 	bl	d45fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4118:	4620      	mov	r0, r4
   d411a:	4a08      	ldr	r2, [pc, #32]	; (d413c <setup+0x3c>)
   d411c:	4908      	ldr	r1, [pc, #32]	; (d4140 <setup+0x40>)
  // Put initialization like pinMode and begin functions here.
  Particle.function("setMode", setStripMode);
  Particle.function("setColors", setColors);
  Particle.function("chase", startChase);
}
   d411e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4122:	f000 ba6a 	b.w	d45fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4126:	bf00      	nop
   d4128:	000d45cf 	.word	0x000d45cf
   d412c:	000d5a80 	.word	0x000d5a80
   d4130:	000d40b9 	.word	0x000d40b9
   d4134:	000d5a88 	.word	0x000d5a88
   d4138:	000d40d1 	.word	0x000d40d1
   d413c:	000d5a9b 	.word	0x000d5a9b
   d4140:	000d40e9 	.word	0x000d40e9

000d4144 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d4144:	4770      	bx	lr

000d4146 <_GLOBAL__sub_I_setup>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4146:	f000 b849 	b.w	d41dc <HAL_Pin_Map>
	...

000d414c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d414c:	b508      	push	{r3, lr}
   d414e:	4b02      	ldr	r3, [pc, #8]	; (d4158 <os_thread_is_current+0xc>)
   d4150:	681b      	ldr	r3, [r3, #0]
   d4152:	689b      	ldr	r3, [r3, #8]
   d4154:	9301      	str	r3, [sp, #4]
   d4156:	bd08      	pop	{r3, pc}
   d4158:	00030248 	.word	0x00030248

000d415c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d415c:	b508      	push	{r3, lr}
   d415e:	4b02      	ldr	r3, [pc, #8]	; (d4168 <os_thread_join+0xc>)
   d4160:	681b      	ldr	r3, [r3, #0]
   d4162:	691b      	ldr	r3, [r3, #16]
   d4164:	9301      	str	r3, [sp, #4]
   d4166:	bd08      	pop	{r3, pc}
   d4168:	00030248 	.word	0x00030248

000d416c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d416c:	b508      	push	{r3, lr}
   d416e:	4b02      	ldr	r3, [pc, #8]	; (d4178 <os_thread_cleanup+0xc>)
   d4170:	681b      	ldr	r3, [r3, #0]
   d4172:	695b      	ldr	r3, [r3, #20]
   d4174:	9301      	str	r3, [sp, #4]
   d4176:	bd08      	pop	{r3, pc}
   d4178:	00030248 	.word	0x00030248

000d417c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d417c:	b508      	push	{r3, lr}
   d417e:	4b02      	ldr	r3, [pc, #8]	; (d4188 <os_mutex_create+0xc>)
   d4180:	681b      	ldr	r3, [r3, #0]
   d4182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4184:	9301      	str	r3, [sp, #4]
   d4186:	bd08      	pop	{r3, pc}
   d4188:	00030248 	.word	0x00030248

000d418c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d418c:	b508      	push	{r3, lr}
   d418e:	4b02      	ldr	r3, [pc, #8]	; (d4198 <os_mutex_recursive_create+0xc>)
   d4190:	681b      	ldr	r3, [r3, #0]
   d4192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4194:	9301      	str	r3, [sp, #4]
   d4196:	bd08      	pop	{r3, pc}
   d4198:	00030248 	.word	0x00030248

000d419c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <os_mutex_recursive_lock+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	00030248 	.word	0x00030248

000d41ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <os_mutex_recursive_unlock+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	00030248 	.word	0x00030248

000d41bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <HAL_RNG_GetRandomNumber+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	685b      	ldr	r3, [r3, #4]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	00030218 	.word	0x00030218

000d41cc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	695b      	ldr	r3, [r3, #20]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	00030218 	.word	0x00030218

000d41dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_Pin_Map+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	681b      	ldr	r3, [r3, #0]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	0003022c 	.word	0x0003022c

000d41ec <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <if_name_to_index+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	691b      	ldr	r3, [r3, #16]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	0003026c 	.word	0x0003026c

000d41fc <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <if_index_to_name+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	695b      	ldr	r3, [r3, #20]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	0003026c 	.word	0x0003026c

000d420c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <if_get_by_index+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	699b      	ldr	r3, [r3, #24]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	0003026c 	.word	0x0003026c

000d421c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <if_get_addrs+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	0003026c 	.word	0x0003026c

000d422c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <if_free_if_addrs+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	0003026c 	.word	0x0003026c

000d423c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <inet_inet_ntop+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	695b      	ldr	r3, [r3, #20]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030264 	.word	0x00030264

000d424c <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <inet_inet_pton+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	699b      	ldr	r3, [r3, #24]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030264 	.word	0x00030264

000d425c <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <inet_htonl+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	6a1b      	ldr	r3, [r3, #32]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030264 	.word	0x00030264

000d426c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <inet_ntohs+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030264 	.word	0x00030264

000d427c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <inet_htons+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030264 	.word	0x00030264

000d428c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <netdb_freeaddrinfo+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	689b      	ldr	r3, [r3, #8]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030268 	.word	0x00030268

000d429c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <netdb_getaddrinfo+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	68db      	ldr	r3, [r3, #12]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030268 	.word	0x00030268

000d42ac <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <sock_bind+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	685b      	ldr	r3, [r3, #4]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030238 	.word	0x00030238

000d42bc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <sock_setsockopt+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	699b      	ldr	r3, [r3, #24]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030238 	.word	0x00030238

000d42cc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <sock_close+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	69db      	ldr	r3, [r3, #28]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030238 	.word	0x00030238

000d42dc <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <sock_recvfrom+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030238 	.word	0x00030238

000d42ec <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <sock_sendto+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030238 	.word	0x00030238

000d42fc <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <sock_socket+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030238 	.word	0x00030238

000d430c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_SPI_Init+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	69db      	ldr	r3, [r3, #28]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030230 	.word	0x00030230

000d431c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_USART_Init+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	681b      	ldr	r3, [r3, #0]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	0003023c 	.word	0x0003023c

000d432c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_USART_Write_Data+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	68db      	ldr	r3, [r3, #12]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	0003023c 	.word	0x0003023c

000d433c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_USART_Available_Data+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	691b      	ldr	r3, [r3, #16]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	0003023c 	.word	0x0003023c

000d434c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_USART_Read_Data+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	695b      	ldr	r3, [r3, #20]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003023c 	.word	0x0003023c

000d435c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_USART_Peek_Data+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	699b      	ldr	r3, [r3, #24]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003023c 	.word	0x0003023c

000d436c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_USART_Flush_Data+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	69db      	ldr	r3, [r3, #28]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003023c 	.word	0x0003023c

000d437c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_USART_Available_Data_For_Write+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003023c 	.word	0x0003023c

000d438c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_USB_USART_Init+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	681b      	ldr	r3, [r3, #0]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003024c 	.word	0x0003024c

000d439c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_USB_USART_Available_Data+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	691b      	ldr	r3, [r3, #16]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003024c 	.word	0x0003024c

000d43ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	695b      	ldr	r3, [r3, #20]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003024c 	.word	0x0003024c

000d43bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_USB_USART_Receive_Data+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	699b      	ldr	r3, [r3, #24]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003024c 	.word	0x0003024c

000d43cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_USB_USART_Send_Data+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	69db      	ldr	r3, [r3, #28]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003024c 	.word	0x0003024c

000d43dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_USB_USART_Flush_Data+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	6a1b      	ldr	r3, [r3, #32]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003024c 	.word	0x0003024c

000d43ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <set_system_mode+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	685b      	ldr	r3, [r3, #4]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030220 	.word	0x00030220

000d43fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b03      	ldr	r3, [pc, #12]	; (d440c <system_ctrl_set_app_request_handler+0x10>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4406:	9301      	str	r3, [sp, #4]
   d4408:	bd08      	pop	{r3, pc}
   d440a:	0000      	.short	0x0000
   d440c:	00030220 	.word	0x00030220

000d4410 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b03      	ldr	r3, [pc, #12]	; (d4420 <system_ctrl_set_result+0x10>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d441a:	9301      	str	r3, [sp, #4]
   d441c:	bd08      	pop	{r3, pc}
   d441e:	0000      	.short	0x0000
   d4420:	00030220 	.word	0x00030220

000d4424 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <spark_function+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	685b      	ldr	r3, [r3, #4]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030244 	.word	0x00030244

000d4434 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030244 	.word	0x00030244

000d4444 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <network_connect+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	685b      	ldr	r3, [r3, #4]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030240 	.word	0x00030240

000d4454 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <network_connecting+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	689b      	ldr	r3, [r3, #8]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030240 	.word	0x00030240

000d4464 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <network_disconnect+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	68db      	ldr	r3, [r3, #12]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030240 	.word	0x00030240

000d4474 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <network_ready+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	691b      	ldr	r3, [r3, #16]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030240 	.word	0x00030240

000d4484 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_on+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	695b      	ldr	r3, [r3, #20]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_off+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	699b      	ldr	r3, [r3, #24]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_listen+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	69db      	ldr	r3, [r3, #28]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_listening+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6a1b      	ldr	r3, [r3, #32]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_set_listen_timeout+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_get_listen_timeout+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <malloc+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	681b      	ldr	r3, [r3, #0]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003021c 	.word	0x0003021c

000d44f4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <free+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	685b      	ldr	r3, [r3, #4]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003021c 	.word	0x0003021c

000d4504 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <realloc+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	689b      	ldr	r3, [r3, #8]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003021c 	.word	0x0003021c

000d4514 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4514:	2200      	movs	r2, #0
   d4516:	4611      	mov	r1, r2
   d4518:	6840      	ldr	r0, [r0, #4]
   d451a:	f7ff bfab 	b.w	d4474 <network_ready>

000d451e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d451e:	2200      	movs	r2, #0
   d4520:	4611      	mov	r1, r2
   d4522:	6840      	ldr	r0, [r0, #4]
   d4524:	f7ff bfc6 	b.w	d44b4 <network_listening>

000d4528 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4528:	2200      	movs	r2, #0
   d452a:	4611      	mov	r1, r2
   d452c:	6840      	ldr	r0, [r0, #4]
   d452e:	f7ff bfd1 	b.w	d44d4 <network_get_listen_timeout>

000d4532 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4532:	2200      	movs	r2, #0
   d4534:	6840      	ldr	r0, [r0, #4]
   d4536:	f7ff bfc5 	b.w	d44c4 <network_set_listen_timeout>

000d453a <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d453a:	2200      	movs	r2, #0
   d453c:	f081 0101 	eor.w	r1, r1, #1
   d4540:	6840      	ldr	r0, [r0, #4]
   d4542:	f7ff bfaf 	b.w	d44a4 <network_listen>

000d4546 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4546:	2300      	movs	r3, #0
   d4548:	461a      	mov	r2, r3
   d454a:	4619      	mov	r1, r3
   d454c:	6840      	ldr	r0, [r0, #4]
   d454e:	f7ff bfa1 	b.w	d4494 <network_off>

000d4552 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4552:	2300      	movs	r3, #0
   d4554:	461a      	mov	r2, r3
   d4556:	4619      	mov	r1, r3
   d4558:	6840      	ldr	r0, [r0, #4]
   d455a:	f7ff bf93 	b.w	d4484 <network_on>

000d455e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d455e:	2200      	movs	r2, #0
   d4560:	4611      	mov	r1, r2
   d4562:	6840      	ldr	r0, [r0, #4]
   d4564:	f7ff bf76 	b.w	d4454 <network_connecting>

000d4568 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4568:	2200      	movs	r2, #0
   d456a:	2102      	movs	r1, #2
   d456c:	6840      	ldr	r0, [r0, #4]
   d456e:	f7ff bf79 	b.w	d4464 <network_disconnect>

000d4572 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4572:	2300      	movs	r3, #0
   d4574:	461a      	mov	r2, r3
   d4576:	6840      	ldr	r0, [r0, #4]
   d4578:	f7ff bf64 	b.w	d4444 <network_connect>

000d457c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d457c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d457e:	4d0c      	ldr	r5, [pc, #48]	; (d45b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d4580:	2428      	movs	r4, #40	; 0x28
   d4582:	4622      	mov	r2, r4
   d4584:	2100      	movs	r1, #0
   d4586:	4628      	mov	r0, r5
   d4588:	f001 fa37 	bl	d59fa <memset>
        cid = -1;
   d458c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4590:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d4592:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4594:	4d07      	ldr	r5, [pc, #28]	; (d45b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d4596:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4598:	4628      	mov	r0, r5
   d459a:	606b      	str	r3, [r5, #4]
   d459c:	4b06      	ldr	r3, [pc, #24]	; (d45b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d459e:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d45a2:	4622      	mov	r2, r4
   d45a4:	2100      	movs	r1, #0
   d45a6:	f001 fa28 	bl	d59fa <memset>
        size = sizeof(*this);
   d45aa:	812c      	strh	r4, [r5, #8]
   d45ac:	bd38      	pop	{r3, r4, r5, pc}
   d45ae:	bf00      	nop
   d45b0:	2003e3c8 	.word	0x2003e3c8
   d45b4:	2003e398 	.word	0x2003e398
   d45b8:	000d5aac 	.word	0x000d5aac

000d45bc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d45bc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d45be:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d45c0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d45c2:	b113      	cbz	r3, d45ca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d45c4:	2203      	movs	r2, #3
   d45c6:	4601      	mov	r1, r0
   d45c8:	4798      	blx	r3
    }
   d45ca:	4620      	mov	r0, r4
   d45cc:	bd10      	pop	{r4, pc}

000d45ce <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d45ce:	b510      	push	{r4, lr}
   d45d0:	b088      	sub	sp, #32
   d45d2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d45d4:	4668      	mov	r0, sp
   d45d6:	f000 fbc2 	bl	d4d5e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d45da:	4669      	mov	r1, sp
   d45dc:	a804      	add	r0, sp, #16
   d45de:	f000 fbe0 	bl	d4da2 <_ZN6StringC1ERKS_>
   d45e2:	a804      	add	r0, sp, #16
   d45e4:	47a0      	blx	r4
   d45e6:	4604      	mov	r4, r0
   d45e8:	a804      	add	r0, sp, #16
   d45ea:	f000 fb71 	bl	d4cd0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d45ee:	4668      	mov	r0, sp
   d45f0:	f000 fb6e 	bl	d4cd0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d45f4:	4620      	mov	r0, r4
   d45f6:	b008      	add	sp, #32
   d45f8:	bd10      	pop	{r4, pc}

000d45fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d45fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d45fc:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d45fe:	b085      	sub	sp, #20
   d4600:	4607      	mov	r7, r0
   d4602:	460e      	mov	r6, r1
   d4604:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4606:	2100      	movs	r1, #0
   d4608:	4622      	mov	r2, r4
   d460a:	4668      	mov	r0, sp
   d460c:	f001 f9f5 	bl	d59fa <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4610:	2200      	movs	r2, #0
   d4612:	4669      	mov	r1, sp
   d4614:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d4616:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d461a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d461c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d461e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4620:	f7ff ff00 	bl	d4424 <spark_function>
}
   d4624:	b005      	add	sp, #20
   d4626:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4628 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4628:	2200      	movs	r2, #0
   d462a:	4611      	mov	r1, r2
   d462c:	6840      	ldr	r0, [r0, #4]
   d462e:	f7ff bf41 	b.w	d44b4 <network_listening>

000d4632 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4632:	2200      	movs	r2, #0
   d4634:	4611      	mov	r1, r2
   d4636:	6840      	ldr	r0, [r0, #4]
   d4638:	f7ff bf4c 	b.w	d44d4 <network_get_listen_timeout>

000d463c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d463c:	2200      	movs	r2, #0
   d463e:	6840      	ldr	r0, [r0, #4]
   d4640:	f7ff bf40 	b.w	d44c4 <network_set_listen_timeout>

000d4644 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4644:	2200      	movs	r2, #0
   d4646:	f081 0101 	eor.w	r1, r1, #1
   d464a:	6840      	ldr	r0, [r0, #4]
   d464c:	f7ff bf2a 	b.w	d44a4 <network_listen>

000d4650 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4650:	2300      	movs	r3, #0
   d4652:	461a      	mov	r2, r3
   d4654:	4619      	mov	r1, r3
   d4656:	6840      	ldr	r0, [r0, #4]
   d4658:	f7ff bf1c 	b.w	d4494 <network_off>

000d465c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d465c:	2300      	movs	r3, #0
   d465e:	461a      	mov	r2, r3
   d4660:	4619      	mov	r1, r3
   d4662:	6840      	ldr	r0, [r0, #4]
   d4664:	f7ff bf0e 	b.w	d4484 <network_on>

000d4668 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4668:	2200      	movs	r2, #0
   d466a:	4611      	mov	r1, r2
   d466c:	6840      	ldr	r0, [r0, #4]
   d466e:	f7ff bf01 	b.w	d4474 <network_ready>

000d4672 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4672:	2200      	movs	r2, #0
   d4674:	4611      	mov	r1, r2
   d4676:	6840      	ldr	r0, [r0, #4]
   d4678:	f7ff beec 	b.w	d4454 <network_connecting>

000d467c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d467c:	2200      	movs	r2, #0
   d467e:	2102      	movs	r1, #2
   d4680:	6840      	ldr	r0, [r0, #4]
   d4682:	f7ff beef 	b.w	d4464 <network_disconnect>

000d4686 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4686:	2300      	movs	r3, #0
   d4688:	461a      	mov	r2, r3
   d468a:	6840      	ldr	r0, [r0, #4]
   d468c:	f7ff beda 	b.w	d4444 <network_connect>

000d4690 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4690:	4b02      	ldr	r3, [pc, #8]	; (d469c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4692:	2203      	movs	r2, #3
   d4694:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4696:	4a02      	ldr	r2, [pc, #8]	; (d46a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4698:	601a      	str	r2, [r3, #0]
   d469a:	4770      	bx	lr
   d469c:	2003e3f0 	.word	0x2003e3f0
   d46a0:	000d5ae0 	.word	0x000d5ae0

000d46a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d46a4:	4770      	bx	lr

000d46a6 <_ZN9IPAddressD0Ev>:
   d46a6:	b510      	push	{r4, lr}
   d46a8:	4604      	mov	r4, r0
   d46aa:	f7ff fcf8 	bl	d409e <_ZdlPv>
   d46ae:	4620      	mov	r0, r4
   d46b0:	bd10      	pop	{r4, pc}

000d46b2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46b2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d46b4:	7d03      	ldrb	r3, [r0, #20]
   d46b6:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46b8:	b08d      	sub	sp, #52	; 0x34
   d46ba:	460e      	mov	r6, r1
   d46bc:	f100 0704 	add.w	r7, r0, #4
   d46c0:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d46c4:	d002      	beq.n	d46cc <_ZNK9IPAddress7printToER5Print+0x1a>
   d46c6:	f100 0508 	add.w	r5, r0, #8
   d46ca:	e018      	b.n	d46fe <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46cc:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46ce:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46d0:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46d4:	232f      	movs	r3, #47	; 0x2f
   d46d6:	462a      	mov	r2, r5
   d46d8:	200a      	movs	r0, #10
   d46da:	f7ff fdaf 	bl	d423c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46de:	4628      	mov	r0, r5
   d46e0:	f001 f9bc 	bl	d5a5c <strlen>
   d46e4:	6833      	ldr	r3, [r6, #0]
   d46e6:	4602      	mov	r2, r0
   d46e8:	68db      	ldr	r3, [r3, #12]
   d46ea:	4629      	mov	r1, r5
   d46ec:	4630      	mov	r0, r6
   d46ee:	4798      	blx	r3
   d46f0:	e00f      	b.n	d4712 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d46f2:	b124      	cbz	r4, d46fe <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d46f4:	212e      	movs	r1, #46	; 0x2e
   d46f6:	4630      	mov	r0, r6
   d46f8:	f000 fa88 	bl	d4c0c <_ZN5Print5printEc>
   d46fc:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d46fe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4702:	220a      	movs	r2, #10
   d4704:	4630      	mov	r0, r6
   d4706:	f000 fab1 	bl	d4c6c <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d470a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d470c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d470e:	d1f0      	bne.n	d46f2 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4710:	4620      	mov	r0, r4
    }
    return n;
}
   d4712:	b00d      	add	sp, #52	; 0x34
   d4714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4718 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4718:	b510      	push	{r4, lr}
   d471a:	4b05      	ldr	r3, [pc, #20]	; (d4730 <_ZN9IPAddressC1Ev+0x18>)
   d471c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d471e:	2211      	movs	r2, #17
   d4720:	f840 3b04 	str.w	r3, [r0], #4
   d4724:	2100      	movs	r1, #0
   d4726:	f001 f968 	bl	d59fa <memset>
{
    clear();
}
   d472a:	4620      	mov	r0, r4
   d472c:	bd10      	pop	{r4, pc}
   d472e:	bf00      	nop
   d4730:	000d5b14 	.word	0x000d5b14

000d4734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4734:	4603      	mov	r3, r0
   d4736:	4a07      	ldr	r2, [pc, #28]	; (d4754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4738:	b510      	push	{r4, lr}
   d473a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d473e:	f101 0210 	add.w	r2, r1, #16
   d4742:	f851 4b04 	ldr.w	r4, [r1], #4
   d4746:	f843 4b04 	str.w	r4, [r3], #4
   d474a:	4291      	cmp	r1, r2
   d474c:	d1f9      	bne.n	d4742 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d474e:	780a      	ldrb	r2, [r1, #0]
   d4750:	701a      	strb	r2, [r3, #0]
}
   d4752:	bd10      	pop	{r4, pc}
   d4754:	000d5b14 	.word	0x000d5b14

000d4758 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4758:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d475a:	2b04      	cmp	r3, #4
   d475c:	d101      	bne.n	d4762 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	e008      	b.n	d4774 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4762:	2b06      	cmp	r3, #6
   d4764:	d10a      	bne.n	d477c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4766:	6843      	ldr	r3, [r0, #4]
   d4768:	b153      	cbz	r3, d4780 <_ZNK9IPAddresscvbEv+0x28>
   d476a:	6883      	ldr	r3, [r0, #8]
   d476c:	b143      	cbz	r3, d4780 <_ZNK9IPAddresscvbEv+0x28>
   d476e:	68c3      	ldr	r3, [r0, #12]
   d4770:	b133      	cbz	r3, d4780 <_ZNK9IPAddresscvbEv+0x28>
   d4772:	6900      	ldr	r0, [r0, #16]
   d4774:	3000      	adds	r0, #0
   d4776:	bf18      	it	ne
   d4778:	2001      	movne	r0, #1
   d477a:	4770      	bx	lr
   d477c:	2000      	movs	r0, #0
   d477e:	4770      	bx	lr
   d4780:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4782:	4770      	bx	lr

000d4784 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4784:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4786:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d478a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d478e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4792:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4796:	2304      	movs	r3, #4
   d4798:	6041      	str	r1, [r0, #4]
   d479a:	7503      	strb	r3, [r0, #20]
   d479c:	bd10      	pop	{r4, pc}

000d479e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d479e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d47a0:	780d      	ldrb	r5, [r1, #0]
   d47a2:	788b      	ldrb	r3, [r1, #2]
   d47a4:	784a      	ldrb	r2, [r1, #1]
   d47a6:	78c9      	ldrb	r1, [r1, #3]
   d47a8:	9100      	str	r1, [sp, #0]
   d47aa:	4629      	mov	r1, r5
   d47ac:	f7ff ffea 	bl	d4784 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d47b0:	b003      	add	sp, #12
   d47b2:	bd30      	pop	{r4, r5, pc}

000d47b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d47b4:	4b01      	ldr	r3, [pc, #4]	; (d47bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d47b6:	4a02      	ldr	r2, [pc, #8]	; (d47c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d47b8:	601a      	str	r2, [r3, #0]
   d47ba:	4770      	bx	lr
   d47bc:	2003e3f8 	.word	0x2003e3f8
   d47c0:	000d5bd5 	.word	0x000d5bd5

000d47c4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47c4:	2200      	movs	r2, #0
   d47c6:	4611      	mov	r1, r2
   d47c8:	6840      	ldr	r0, [r0, #4]
   d47ca:	f7ff be73 	b.w	d44b4 <network_listening>

000d47ce <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d47ce:	2200      	movs	r2, #0
   d47d0:	4611      	mov	r1, r2
   d47d2:	6840      	ldr	r0, [r0, #4]
   d47d4:	f7ff be7e 	b.w	d44d4 <network_get_listen_timeout>

000d47d8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d47d8:	2200      	movs	r2, #0
   d47da:	6840      	ldr	r0, [r0, #4]
   d47dc:	f7ff be72 	b.w	d44c4 <network_set_listen_timeout>

000d47e0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d47e0:	2200      	movs	r2, #0
   d47e2:	f081 0101 	eor.w	r1, r1, #1
   d47e6:	6840      	ldr	r0, [r0, #4]
   d47e8:	f7ff be5c 	b.w	d44a4 <network_listen>

000d47ec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d47ec:	2300      	movs	r3, #0
   d47ee:	461a      	mov	r2, r3
   d47f0:	4619      	mov	r1, r3
   d47f2:	6840      	ldr	r0, [r0, #4]
   d47f4:	f7ff be4e 	b.w	d4494 <network_off>

000d47f8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d47f8:	2300      	movs	r3, #0
   d47fa:	461a      	mov	r2, r3
   d47fc:	4619      	mov	r1, r3
   d47fe:	6840      	ldr	r0, [r0, #4]
   d4800:	f7ff be40 	b.w	d4484 <network_on>

000d4804 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4804:	2200      	movs	r2, #0
   d4806:	4611      	mov	r1, r2
   d4808:	6840      	ldr	r0, [r0, #4]
   d480a:	f7ff be33 	b.w	d4474 <network_ready>

000d480e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d480e:	2200      	movs	r2, #0
   d4810:	4611      	mov	r1, r2
   d4812:	6840      	ldr	r0, [r0, #4]
   d4814:	f7ff be1e 	b.w	d4454 <network_connecting>

000d4818 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4818:	2200      	movs	r2, #0
   d481a:	2102      	movs	r1, #2
   d481c:	6840      	ldr	r0, [r0, #4]
   d481e:	f7ff be21 	b.w	d4464 <network_disconnect>

000d4822 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4822:	2300      	movs	r3, #0
   d4824:	461a      	mov	r2, r3
   d4826:	6840      	ldr	r0, [r0, #4]
   d4828:	f7ff be0c 	b.w	d4444 <network_connect>

000d482c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d482c:	b110      	cbz	r0, d4834 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d482e:	6803      	ldr	r3, [r0, #0]
   d4830:	685b      	ldr	r3, [r3, #4]
   d4832:	4718      	bx	r3
   d4834:	4770      	bx	lr

000d4836 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4836:	b538      	push	{r3, r4, r5, lr}
   d4838:	4604      	mov	r4, r0
   d483a:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d483c:	b1d0      	cbz	r0, d4874 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d483e:	f7ff fc85 	bl	d414c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4842:	b9b8      	cbnz	r0, d4874 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4844:	7c23      	ldrb	r3, [r4, #16]
   d4846:	b91b      	cbnz	r3, d4850 <_ZN6Thread7disposeEv+0x1a>
   d4848:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d484a:	b108      	cbz	r0, d4850 <_ZN6Thread7disposeEv+0x1a>
   d484c:	f7ff fc86 	bl	d415c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4850:	6865      	ldr	r5, [r4, #4]
   d4852:	b155      	cbz	r5, d486a <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4854:	68ab      	ldr	r3, [r5, #8]
   d4856:	b11b      	cbz	r3, d4860 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4858:	2203      	movs	r2, #3
   d485a:	4629      	mov	r1, r5
   d485c:	4628      	mov	r0, r5
   d485e:	4798      	blx	r3
            delete wrapper;
   d4860:	4628      	mov	r0, r5
   d4862:	f7ff fc1c 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d4866:	2300      	movs	r3, #0
   d4868:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d486a:	6820      	ldr	r0, [r4, #0]
   d486c:	f7ff fc7e 	bl	d416c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4870:	2300      	movs	r3, #0
   d4872:	6023      	str	r3, [r4, #0]
   d4874:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4878 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4878:	b538      	push	{r3, r4, r5, lr}
   d487a:	4b0b      	ldr	r3, [pc, #44]	; (d48a8 <_ZN5spark9MeshClassD1Ev+0x30>)
   d487c:	6003      	str	r3, [r0, #0]
   d487e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4880:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4884:	b108      	cbz	r0, d488a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4886:	f7ff fc0c 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d488a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d488e:	b12d      	cbz	r5, d489c <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4890:	4628      	mov	r0, r5
   d4892:	f7ff ffd0 	bl	d4836 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4896:	4628      	mov	r0, r5
   d4898:	f7ff fc01 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d489c:	68a0      	ldr	r0, [r4, #8]
   d489e:	b108      	cbz	r0, d48a4 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d48a0:	f7ff ffc4 	bl	d482c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d48a4:	4620      	mov	r0, r4
   d48a6:	bd38      	pop	{r3, r4, r5, pc}
   d48a8:	000d5c08 	.word	0x000d5c08

000d48ac <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d48ac:	6800      	ldr	r0, [r0, #0]
   d48ae:	f7ff bc75 	b.w	d419c <os_mutex_recursive_lock>
	...

000d48b4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d48b4:	b530      	push	{r4, r5, lr}
   d48b6:	b08d      	sub	sp, #52	; 0x34
   d48b8:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d48ba:	2211      	movs	r2, #17
   d48bc:	2100      	movs	r1, #0
   d48be:	a801      	add	r0, sp, #4
   d48c0:	f001 f89b 	bl	d59fa <memset>
    addr.v = 6;
   d48c4:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d48c6:	aa01      	add	r2, sp, #4
   d48c8:	4909      	ldr	r1, [pc, #36]	; (d48f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d48ca:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d48ce:	200a      	movs	r0, #10
   d48d0:	f7ff fcbc 	bl	d424c <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d48d4:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d48d6:	a901      	add	r1, sp, #4
   d48d8:	a806      	add	r0, sp, #24
   d48da:	f7ff ff2b 	bl	d4734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d48de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48e0:	3404      	adds	r4, #4
   d48e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48e4:	682b      	ldr	r3, [r5, #0]
   d48e6:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d48e8:	2000      	movs	r0, #0
   d48ea:	b00d      	add	sp, #52	; 0x34
   d48ec:	bd30      	pop	{r4, r5, pc}
   d48ee:	bf00      	nop
   d48f0:	000d5c34 	.word	0x000d5c34

000d48f4 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d48f4:	b530      	push	{r4, r5, lr}
   d48f6:	4604      	mov	r4, r0
   d48f8:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d48fa:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d48fe:	f7ff ffd5 	bl	d48ac <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d4902:	6823      	ldr	r3, [r4, #0]
   d4904:	bb83      	cbnz	r3, d4968 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d4906:	204c      	movs	r0, #76	; 0x4c
   d4908:	f7ff fbc5 	bl	d4096 <_Znwj>
   d490c:	4605      	mov	r5, r0
   d490e:	b108      	cbz	r0, d4914 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d4910:	f000 fd0a 	bl	d5328 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4914:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4916:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4918:	b108      	cbz	r0, d491e <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d491a:	f7ff ff87 	bl	d482c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d491e:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d4920:	b320      	cbz	r0, d496c <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d4922:	2200      	movs	r2, #0
   d4924:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d4928:	f000 fd2d 	bl	d5386 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d492c:	a908      	add	r1, sp, #32
   d492e:	2500      	movs	r5, #0
   d4930:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d4934:	4811      	ldr	r0, [pc, #68]	; (d497c <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d4936:	f7ff fc59 	bl	d41ec <if_name_to_index>
   d493a:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d493c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4940:	6803      	ldr	r3, [r0, #0]
   d4942:	f249 0169 	movw	r1, #36969	; 0x9069
   d4946:	6a1b      	ldr	r3, [r3, #32]
   d4948:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d494a:	a802      	add	r0, sp, #8
   d494c:	f7ff fee4 	bl	d4718 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4950:	a802      	add	r0, sp, #8
   d4952:	f7ff ffaf 	bl	d48b4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4956:	2800      	cmp	r0, #0
   d4958:	db04      	blt.n	d4964 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d495a:	a902      	add	r1, sp, #8
   d495c:	6820      	ldr	r0, [r4, #0]
   d495e:	f000 fd7a 	bl	d5456 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d4962:	e004      	b.n	d496e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d4964:	4605      	mov	r5, r0
   d4966:	e002      	b.n	d496e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d4968:	2500      	movs	r5, #0
   d496a:	e000      	b.n	d496e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d496c:	4d04      	ldr	r5, [pc, #16]	; (d4980 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d496e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4972:	f7ff fc1b 	bl	d41ac <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d4976:	4628      	mov	r0, r5
   d4978:	b009      	add	sp, #36	; 0x24
   d497a:	bd30      	pop	{r4, r5, pc}
   d497c:	000d5c41 	.word	0x000d5c41
   d4980:	fffffefc 	.word	0xfffffefc

000d4984 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d4984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4988:	4605      	mov	r5, r0
   d498a:	b08c      	sub	sp, #48	; 0x30
   d498c:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d498e:	460f      	mov	r7, r1
   d4990:	b109      	cbz	r1, d4996 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d4992:	780b      	ldrb	r3, [r1, #0]
   d4994:	b90b      	cbnz	r3, d499a <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d4996:	4c35      	ldr	r4, [pc, #212]	; (d4a6c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d4998:	e064      	b.n	d4a64 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d499a:	4608      	mov	r0, r1
   d499c:	f001 f85e 	bl	d5a5c <strlen>
   d49a0:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d49a2:	2e00      	cmp	r6, #0
   d49a4:	d05c      	beq.n	d4a60 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d49a6:	4630      	mov	r0, r6
   d49a8:	f001 f858 	bl	d5a5c <strlen>
   d49ac:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d49ae:	f108 0302 	add.w	r3, r8, #2
   d49b2:	4423      	add	r3, r4
   d49b4:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d49b8:	d84f      	bhi.n	d4a5a <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d49ba:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d49be:	f7ff ff75 	bl	d48ac <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d49c2:	4628      	mov	r0, r5
   d49c4:	f7ff ff96 	bl	d48f4 <_ZN5spark11MeshPublish14initialize_udpEv>
   d49c8:	2800      	cmp	r0, #0
   d49ca:	db40      	blt.n	d4a4e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d49cc:	4668      	mov	r0, sp
   d49ce:	f7ff fea3 	bl	d4718 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d49d2:	4668      	mov	r0, sp
   d49d4:	f7ff ff6e 	bl	d48b4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d49d8:	2800      	cmp	r0, #0
   d49da:	db38      	blt.n	d4a4e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d49dc:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d49e0:	f8da 3000 	ldr.w	r3, [sl]
   d49e4:	f10d 0c04 	add.w	ip, sp, #4
   d49e8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d49ec:	4b20      	ldr	r3, [pc, #128]	; (d4a70 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d49ee:	9306      	str	r3, [sp, #24]
   d49f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d49f4:	f10d 0e1c 	add.w	lr, sp, #28
   d49f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d49fc:	f8dc 3000 	ldr.w	r3, [ip]
   d4a00:	f88e 3000 	strb.w	r3, [lr]
   d4a04:	f249 0269 	movw	r2, #36969	; 0x9069
   d4a08:	a906      	add	r1, sp, #24
   d4a0a:	4650      	mov	r0, sl
   d4a0c:	47c8      	blx	r9
   d4a0e:	2800      	cmp	r0, #0
   d4a10:	db1d      	blt.n	d4a4e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d4a12:	2300      	movs	r3, #0
   d4a14:	6828      	ldr	r0, [r5, #0]
   d4a16:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d4a1a:	6803      	ldr	r3, [r0, #0]
   d4a1c:	2201      	movs	r2, #1
   d4a1e:	68db      	ldr	r3, [r3, #12]
   d4a20:	a906      	add	r1, sp, #24
   d4a22:	4798      	blx	r3
   d4a24:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d4a26:	6803      	ldr	r3, [r0, #0]
   d4a28:	f108 0201 	add.w	r2, r8, #1
   d4a2c:	68db      	ldr	r3, [r3, #12]
   d4a2e:	4639      	mov	r1, r7
   d4a30:	4798      	blx	r3
    if (dataLen > 0) {
   d4a32:	b12c      	cbz	r4, d4a40 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d4a34:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d4a36:	6803      	ldr	r3, [r0, #0]
   d4a38:	4622      	mov	r2, r4
   d4a3a:	68db      	ldr	r3, [r3, #12]
   d4a3c:	4631      	mov	r1, r6
   d4a3e:	4798      	blx	r3
   d4a40:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d4a42:	6803      	ldr	r3, [r0, #0]
   d4a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a46:	4798      	blx	r3
   d4a48:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d4a4c:	e000      	b.n	d4a50 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d4a4e:	4604      	mov	r4, r0
   d4a50:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4a54:	f7ff fbaa 	bl	d41ac <os_mutex_recursive_unlock>
   d4a58:	e004      	b.n	d4a64 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4a5a:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d4a5e:	e001      	b.n	d4a64 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4a60:	4634      	mov	r4, r6
   d4a62:	e7a4      	b.n	d49ae <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d4a64:	4620      	mov	r0, r4
   d4a66:	b00c      	add	sp, #48	; 0x30
   d4a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a6c:	fffffef2 	.word	0xfffffef2
   d4a70:	000d5b14 	.word	0x000d5b14

000d4a74 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4a74:	b538      	push	{r3, r4, r5, lr}
   d4a76:	4c0d      	ldr	r4, [pc, #52]	; (d4aac <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4a78:	4b0d      	ldr	r3, [pc, #52]	; (d4ab0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4a7a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4a7c:	2500      	movs	r5, #0
   d4a7e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4a80:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4a84:	6063      	str	r3, [r4, #4]
   d4a86:	60a5      	str	r5, [r4, #8]
   d4a88:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a8c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a90:	f7ff fb7c 	bl	d418c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a94:	4b07      	ldr	r3, [pc, #28]	; (d4ab4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4a96:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4a9a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	4a06      	ldr	r2, [pc, #24]	; (d4ab8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4aa0:	4906      	ldr	r1, [pc, #24]	; (d4abc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4aa6:	f000 be41 	b.w	d572c <__aeabi_atexit>
   d4aaa:	bf00      	nop
   d4aac:	2003e3fc 	.word	0x2003e3fc
   d4ab0:	000d5c6c 	.word	0x000d5c6c
   d4ab4:	000d5c08 	.word	0x000d5c08
   d4ab8:	2003e394 	.word	0x2003e394
   d4abc:	000d4879 	.word	0x000d4879

000d4ac0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4ac0:	2300      	movs	r3, #0
   d4ac2:	461a      	mov	r2, r3
   d4ac4:	6840      	ldr	r0, [r0, #4]
   d4ac6:	f7ff bcbd 	b.w	d4444 <network_connect>

000d4aca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4aca:	2200      	movs	r2, #0
   d4acc:	2102      	movs	r1, #2
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	f7ff bcc8 	b.w	d4464 <network_disconnect>

000d4ad4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	4611      	mov	r1, r2
   d4ad8:	6840      	ldr	r0, [r0, #4]
   d4ada:	f7ff bcbb 	b.w	d4454 <network_connecting>

000d4ade <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4ade:	2200      	movs	r2, #0
   d4ae0:	4611      	mov	r1, r2
   d4ae2:	6840      	ldr	r0, [r0, #4]
   d4ae4:	f7ff bcc6 	b.w	d4474 <network_ready>

000d4ae8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4ae8:	2300      	movs	r3, #0
   d4aea:	461a      	mov	r2, r3
   d4aec:	4619      	mov	r1, r3
   d4aee:	6840      	ldr	r0, [r0, #4]
   d4af0:	f7ff bcc8 	b.w	d4484 <network_on>

000d4af4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4af4:	2300      	movs	r3, #0
   d4af6:	461a      	mov	r2, r3
   d4af8:	4619      	mov	r1, r3
   d4afa:	6840      	ldr	r0, [r0, #4]
   d4afc:	f7ff bcca 	b.w	d4494 <network_off>

000d4b00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4b00:	2200      	movs	r2, #0
   d4b02:	f081 0101 	eor.w	r1, r1, #1
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	f7ff bccc 	b.w	d44a4 <network_listen>

000d4b0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4b0c:	2200      	movs	r2, #0
   d4b0e:	6840      	ldr	r0, [r0, #4]
   d4b10:	f7ff bcd8 	b.w	d44c4 <network_set_listen_timeout>

000d4b14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4b14:	2200      	movs	r2, #0
   d4b16:	4611      	mov	r1, r2
   d4b18:	6840      	ldr	r0, [r0, #4]
   d4b1a:	f7ff bcdb 	b.w	d44d4 <network_get_listen_timeout>

000d4b1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4b1e:	2200      	movs	r2, #0
   d4b20:	4611      	mov	r1, r2
   d4b22:	6840      	ldr	r0, [r0, #4]
   d4b24:	f7ff bcc6 	b.w	d44b4 <network_listening>

000d4b28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b28:	b570      	push	{r4, r5, r6, lr}
   d4b2a:	b08c      	sub	sp, #48	; 0x30
   d4b2c:	4614      	mov	r4, r2
   d4b2e:	4606      	mov	r6, r0
    IPAddress addr;
   d4b30:	f7ff fdf2 	bl	d4718 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b34:	ab0c      	add	r3, sp, #48	; 0x30
   d4b36:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4b38:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b3a:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4b3e:	4620      	mov	r0, r4
   d4b40:	f7ff fbac 	bl	d429c <netdb_getaddrinfo>
    if (!r && ai) {
   d4b44:	4601      	mov	r1, r0
   d4b46:	bb58      	cbnz	r0, d4ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d4b48:	9b00      	ldr	r3, [sp, #0]
   d4b4a:	b34b      	cbz	r3, d4ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d4b4c:	685a      	ldr	r2, [r3, #4]
   d4b4e:	2a02      	cmp	r2, #2
   d4b50:	d00e      	beq.n	d4b70 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d4b52:	2a0a      	cmp	r2, #10
   d4b54:	d124      	bne.n	d4ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d4b56:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d4b58:	2211      	movs	r2, #17
   d4b5a:	a801      	add	r0, sp, #4
   d4b5c:	f000 ff4d 	bl	d59fa <memset>
                a.v = 6;
   d4b60:	2306      	movs	r3, #6
   d4b62:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b66:	ad01      	add	r5, sp, #4
   d4b68:	f104 0308 	add.w	r3, r4, #8
   d4b6c:	3418      	adds	r4, #24
   d4b6e:	e005      	b.n	d4b7c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4b70:	6959      	ldr	r1, [r3, #20]
   d4b72:	4630      	mov	r0, r6
   d4b74:	3104      	adds	r1, #4
   d4b76:	f7ff fe12 	bl	d479e <_ZN9IPAddressaSEPKh>
                break;
   d4b7a:	e011      	b.n	d4ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b7c:	6818      	ldr	r0, [r3, #0]
   d4b7e:	6859      	ldr	r1, [r3, #4]
   d4b80:	462a      	mov	r2, r5
   d4b82:	c203      	stmia	r2!, {r0, r1}
   d4b84:	3308      	adds	r3, #8
   d4b86:	42a3      	cmp	r3, r4
   d4b88:	4615      	mov	r5, r2
   d4b8a:	d1f7      	bne.n	d4b7c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d4b8c:	a901      	add	r1, sp, #4
   d4b8e:	a806      	add	r0, sp, #24
   d4b90:	ad07      	add	r5, sp, #28
   d4b92:	f7ff fdcf 	bl	d4734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b98:	1d34      	adds	r4, r6, #4
   d4b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b9c:	682b      	ldr	r3, [r5, #0]
   d4b9e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d4ba0:	9800      	ldr	r0, [sp, #0]
   d4ba2:	f7ff fb73 	bl	d428c <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ba6:	4630      	mov	r0, r6
   d4ba8:	b00c      	add	sp, #48	; 0x30
   d4baa:	bd70      	pop	{r4, r5, r6, pc}

000d4bac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4bac:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4bae:	4a03      	ldr	r2, [pc, #12]	; (d4bbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4bb0:	601a      	str	r2, [r3, #0]
   d4bb2:	2200      	movs	r2, #0
   d4bb4:	605a      	str	r2, [r3, #4]
   d4bb6:	4770      	bx	lr
   d4bb8:	2003e5cc 	.word	0x2003e5cc
   d4bbc:	000d5c6c 	.word	0x000d5c6c

000d4bc0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bc2:	4606      	mov	r6, r0
   d4bc4:	460d      	mov	r5, r1
   d4bc6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4bc8:	2400      	movs	r4, #0
  while (size--) {
   d4bca:	42bd      	cmp	r5, r7
   d4bcc:	d00c      	beq.n	d4be8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4bce:	6833      	ldr	r3, [r6, #0]
   d4bd0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4bd4:	689b      	ldr	r3, [r3, #8]
   d4bd6:	4630      	mov	r0, r6
   d4bd8:	4798      	blx	r3
     if (chunk>=0)
   d4bda:	2800      	cmp	r0, #0
   d4bdc:	db01      	blt.n	d4be2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4bde:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4be0:	e7f3      	b.n	d4bca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4be2:	2c00      	cmp	r4, #0
   d4be4:	bf08      	it	eq
   d4be6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4be8:	4620      	mov	r0, r4
   d4bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4bec:	b570      	push	{r4, r5, r6, lr}
   d4bee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4bf0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4bf2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4bf4:	b149      	cbz	r1, d4c0a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4bf6:	f000 ff31 	bl	d5a5c <strlen>
   d4bfa:	682b      	ldr	r3, [r5, #0]
   d4bfc:	4602      	mov	r2, r0
   d4bfe:	4621      	mov	r1, r4
   d4c00:	4628      	mov	r0, r5
   d4c02:	68db      	ldr	r3, [r3, #12]
    }
   d4c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c08:	4718      	bx	r3
    }
   d4c0a:	bd70      	pop	{r4, r5, r6, pc}

000d4c0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c0c:	6803      	ldr	r3, [r0, #0]
   d4c0e:	689b      	ldr	r3, [r3, #8]
   d4c10:	4718      	bx	r3

000d4c12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c12:	b530      	push	{r4, r5, lr}
   d4c14:	b08b      	sub	sp, #44	; 0x2c
   d4c16:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c18:	2100      	movs	r1, #0
   d4c1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c1e:	2a01      	cmp	r2, #1
   d4c20:	bf98      	it	ls
   d4c22:	220a      	movls	r2, #10
   d4c24:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4c28:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4c2c:	fb05 3312 	mls	r3, r5, r2, r3
   d4c30:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c34:	2b09      	cmp	r3, #9
   d4c36:	bf94      	ite	ls
   d4c38:	3330      	addls	r3, #48	; 0x30
   d4c3a:	3337      	addhi	r3, #55	; 0x37
   d4c3c:	b2db      	uxtb	r3, r3
   d4c3e:	4621      	mov	r1, r4
   d4c40:	f804 3901 	strb.w	r3, [r4], #-1
   d4c44:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4c46:	2d00      	cmp	r5, #0
   d4c48:	d1ee      	bne.n	d4c28 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4c4a:	f7ff ffcf 	bl	d4bec <_ZN5Print5writeEPKc>
}
   d4c4e:	b00b      	add	sp, #44	; 0x2c
   d4c50:	bd30      	pop	{r4, r5, pc}

000d4c52 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4c52:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4c54:	b92a      	cbnz	r2, d4c62 <_ZN5Print5printEmi+0x10>
   d4c56:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4c58:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4c5c:	689b      	ldr	r3, [r3, #8]
   d4c5e:	b2c9      	uxtb	r1, r1
   d4c60:	4718      	bx	r3
  else return printNumber(n, base);
   d4c62:	b2d2      	uxtb	r2, r2
}
   d4c64:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4c68:	f7ff bfd3 	b.w	d4c12 <_ZN5Print11printNumberEmh>

000d4c6c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4c6c:	f7ff bff1 	b.w	d4c52 <_ZN5Print5printEmi>

000d4c70 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c70:	b510      	push	{r4, lr}
   d4c72:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c74:	f7ff fca2 	bl	d45bc <_ZNSt14_Function_baseD1Ev>
   d4c78:	4620      	mov	r0, r4
   d4c7a:	bd10      	pop	{r4, pc}

000d4c7c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c7c:	4803      	ldr	r0, [pc, #12]	; (d4c8c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c7e:	4a04      	ldr	r2, [pc, #16]	; (d4c90 <_GLOBAL__sub_I_RGB+0x14>)
   d4c80:	4904      	ldr	r1, [pc, #16]	; (d4c94 <_GLOBAL__sub_I_RGB+0x18>)
   d4c82:	2300      	movs	r3, #0
   d4c84:	6083      	str	r3, [r0, #8]
   d4c86:	f000 bd51 	b.w	d572c <__aeabi_atexit>
   d4c8a:	bf00      	nop
   d4c8c:	2003e5d4 	.word	0x2003e5d4
   d4c90:	2003e394 	.word	0x2003e394
   d4c94:	000d4c71 	.word	0x000d4c71

000d4c98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4c98:	4770      	bx	lr

000d4c9a <_ZN8SPIClassD0Ev>:
   d4c9a:	b510      	push	{r4, lr}
   d4c9c:	4604      	mov	r4, r0
   d4c9e:	f7ff f9fe 	bl	d409e <_ZdlPv>
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	bd10      	pop	{r4, pc}
	...

000d4ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ca8:	b570      	push	{r4, r5, r6, lr}
   d4caa:	4b08      	ldr	r3, [pc, #32]	; (d4ccc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4cac:	6003      	str	r3, [r0, #0]
   d4cae:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4cb0:	2500      	movs	r5, #0
   d4cb2:	460e      	mov	r6, r1
   d4cb4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4cb8:	f7ff fa60 	bl	d417c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4cbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4cbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4cc0:	f7ff fb24 	bl	d430c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4cc4:	60a5      	str	r5, [r4, #8]
}
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	bd70      	pop	{r4, r5, r6, pc}
   d4cca:	bf00      	nop
   d4ccc:	000d5ca0 	.word	0x000d5ca0

000d4cd0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4cd0:	b510      	push	{r4, lr}
   d4cd2:	4604      	mov	r4, r0
{
	free(buffer);
   d4cd4:	6800      	ldr	r0, [r0, #0]
   d4cd6:	f7ff fc0d 	bl	d44f4 <free>
}
   d4cda:	4620      	mov	r0, r4
   d4cdc:	bd10      	pop	{r4, pc}

000d4cde <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4cde:	b510      	push	{r4, lr}
   d4ce0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4ce2:	6800      	ldr	r0, [r0, #0]
   d4ce4:	b108      	cbz	r0, d4cea <_ZN6String10invalidateEv+0xc>
   d4ce6:	f7ff fc05 	bl	d44f4 <free>
	buffer = NULL;
   d4cea:	2300      	movs	r3, #0
   d4cec:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4cee:	60a3      	str	r3, [r4, #8]
   d4cf0:	6063      	str	r3, [r4, #4]
   d4cf2:	bd10      	pop	{r4, pc}

000d4cf4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4cf4:	b538      	push	{r3, r4, r5, lr}
   d4cf6:	4604      	mov	r4, r0
   d4cf8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4cfa:	6800      	ldr	r0, [r0, #0]
   d4cfc:	3101      	adds	r1, #1
   d4cfe:	f7ff fc01 	bl	d4504 <realloc>
	if (newbuffer) {
   d4d02:	b110      	cbz	r0, d4d0a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4d04:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4d08:	2001      	movs	r0, #1
	}
	return 0;
}
   d4d0a:	bd38      	pop	{r3, r4, r5, pc}

000d4d0c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4d0c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4d0e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4d10:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4d12:	b113      	cbz	r3, d4d1a <_ZN6String7reserveEj+0xe>
   d4d14:	6843      	ldr	r3, [r0, #4]
   d4d16:	428b      	cmp	r3, r1
   d4d18:	d207      	bcs.n	d4d2a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	f7ff ffea 	bl	d4cf4 <_ZN6String12changeBufferEj>
   d4d20:	b120      	cbz	r0, d4d2c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4d22:	68a3      	ldr	r3, [r4, #8]
   d4d24:	b90b      	cbnz	r3, d4d2a <_ZN6String7reserveEj+0x1e>
   d4d26:	6822      	ldr	r2, [r4, #0]
   d4d28:	7013      	strb	r3, [r2, #0]
   d4d2a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4d2c:	bd10      	pop	{r4, pc}

000d4d2e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d2e:	b570      	push	{r4, r5, r6, lr}
   d4d30:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4d32:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d34:	4604      	mov	r4, r0
   d4d36:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4d38:	f7ff ffe8 	bl	d4d0c <_ZN6String7reserveEj>
   d4d3c:	b918      	cbnz	r0, d4d46 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4d3e:	4620      	mov	r0, r4
   d4d40:	f7ff ffcd 	bl	d4cde <_ZN6String10invalidateEv>
		return *this;
   d4d44:	e009      	b.n	d4d5a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4d46:	462a      	mov	r2, r5
   d4d48:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4d4a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4d4c:	6820      	ldr	r0, [r4, #0]
   d4d4e:	f000 fe49 	bl	d59e4 <memcpy>
	buffer[len] = 0;
   d4d52:	6822      	ldr	r2, [r4, #0]
   d4d54:	68a3      	ldr	r3, [r4, #8]
   d4d56:	2100      	movs	r1, #0
   d4d58:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	bd70      	pop	{r4, r5, r6, pc}

000d4d5e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4d5e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4d60:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4d62:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4d64:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4d66:	6043      	str	r3, [r0, #4]
	len = 0;
   d4d68:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4d6a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4d6c:	460d      	mov	r5, r1
   d4d6e:	b139      	cbz	r1, d4d80 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4d70:	4608      	mov	r0, r1
   d4d72:	f000 fe73 	bl	d5a5c <strlen>
   d4d76:	4629      	mov	r1, r5
   d4d78:	4602      	mov	r2, r0
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	f7ff ffd7 	bl	d4d2e <_ZN6String4copyEPKcj>
}
   d4d80:	4620      	mov	r0, r4
   d4d82:	bd38      	pop	{r3, r4, r5, pc}

000d4d84 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4d84:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4d86:	b510      	push	{r4, lr}
   d4d88:	460b      	mov	r3, r1
   d4d8a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4d8c:	d007      	beq.n	d4d9e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4d8e:	6809      	ldr	r1, [r1, #0]
   d4d90:	b119      	cbz	r1, d4d9a <_ZN6StringaSERKS_+0x16>
   d4d92:	689a      	ldr	r2, [r3, #8]
   d4d94:	f7ff ffcb 	bl	d4d2e <_ZN6String4copyEPKcj>
   d4d98:	e001      	b.n	d4d9e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4d9a:	f7ff ffa0 	bl	d4cde <_ZN6String10invalidateEv>

	return *this;
}
   d4d9e:	4620      	mov	r0, r4
   d4da0:	bd10      	pop	{r4, pc}

000d4da2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4da2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4da4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4da6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4da8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4daa:	6043      	str	r3, [r0, #4]
	len = 0;
   d4dac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4dae:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4db0:	f7ff ffe8 	bl	d4d84 <_ZN6StringaSERKS_>
}
   d4db4:	4620      	mov	r0, r4
   d4db6:	bd10      	pop	{r4, pc}

000d4db8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4db8:	4b04      	ldr	r3, [pc, #16]	; (d4dcc <_GLOBAL__sub_I_System+0x14>)
   d4dba:	2000      	movs	r0, #0
   d4dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4dc0:	7018      	strb	r0, [r3, #0]
   d4dc2:	8058      	strh	r0, [r3, #2]
   d4dc4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4dc6:	f7ff bb11 	b.w	d43ec <set_system_mode>
   d4dca:	bf00      	nop
   d4dcc:	2003e5e4 	.word	0x2003e5e4

000d4dd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4dd0:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4dd2:	681a      	ldr	r2, [r3, #0]
   d4dd4:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4dd6:	601a      	str	r2, [r3, #0]
   d4dd8:	4770      	bx	lr
   d4dda:	bf00      	nop
   d4ddc:	2003e32c 	.word	0x2003e32c
   d4de0:	2003e5ec 	.word	0x2003e5ec

000d4de4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4de4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4de6:	6804      	ldr	r4, [r0, #0]
   d4de8:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4dea:	46a4      	mov	ip, r4
    }
   d4dec:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4df0:	4760      	bx	ip

000d4df2 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4df2:	6803      	ldr	r3, [r0, #0]
   d4df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4df6:	4718      	bx	r3

000d4df8 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4df8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4dfa:	4770      	bx	lr

000d4dfc <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4dfc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4dfe:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4e00:	1a10      	subs	r0, r2, r0
   d4e02:	4770      	bx	lr

000d4e04 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4e04:	b513      	push	{r0, r1, r4, lr}
   d4e06:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4e08:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4e0a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4e0e:	68d4      	ldr	r4, [r2, #12]
   d4e10:	4619      	mov	r1, r3
   d4e12:	2201      	movs	r2, #1
   d4e14:	47a0      	blx	r4
}
   d4e16:	b002      	add	sp, #8
   d4e18:	bd10      	pop	{r4, pc}

000d4e1a <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4e1a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4e1c:	6803      	ldr	r3, [r0, #0]
   d4e1e:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4e20:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4e22:	4798      	blx	r3
   d4e24:	b128      	cbz	r0, d4e32 <_ZN3UDP4readEv+0x18>
   d4e26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4e28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4e2a:	1c59      	adds	r1, r3, #1
   d4e2c:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4e2e:	5cd0      	ldrb	r0, [r2, r3]
   d4e30:	bd10      	pop	{r4, pc}
   d4e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4e36:	bd10      	pop	{r4, pc}

000d4e38 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4e38:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4e3a:	6803      	ldr	r3, [r0, #0]
   d4e3c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4e3e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4e40:	4798      	blx	r3
   d4e42:	b118      	cbz	r0, d4e4c <_ZN3UDP4peekEv+0x14>
   d4e44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4e46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4e48:	5cd0      	ldrb	r0, [r2, r3]
   d4e4a:	bd10      	pop	{r4, pc}
   d4e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4e50:	bd10      	pop	{r4, pc}

000d4e52 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4e52:	4770      	bx	lr

000d4e54 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4e54:	b410      	push	{r4}
   d4e56:	4603      	mov	r3, r0
   d4e58:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4e5a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4e5c:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4e5e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4e60:	6803      	ldr	r3, [r0, #0]
   d4e62:	1a52      	subs	r2, r2, r1
   d4e64:	68db      	ldr	r3, [r3, #12]
   d4e66:	4421      	add	r1, r4
}
   d4e68:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4e6c:	4718      	bx	r3

000d4e6e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4e6e:	f1a0 0010 	sub.w	r0, r0, #16
   d4e72:	f7ff bfef 	b.w	d4e54 <_ZNK3UDP7printToER5Print>

000d4e76 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4e76:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4e78:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4e7a:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4e7c:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4e80:	4604      	mov	r4, r0
   d4e82:	460f      	mov	r7, r1
   d4e84:	4615      	mov	r5, r2
    stop();
   d4e86:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4e88:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4e8a:	4632      	mov	r2, r6
   d4e8c:	2100      	movs	r1, #0
   d4e8e:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4e90:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4e92:	f000 fdb2 	bl	d59fa <memset>
    saddr.sin6_len = sizeof(saddr);
   d4e96:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4e9a:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4e9c:	260a      	movs	r6, #10
   d4e9e:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4ea2:	f7ff f9eb 	bl	d427c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4ea6:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4ea8:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4eac:	2102      	movs	r1, #2
   d4eae:	4630      	mov	r0, r6
   d4eb0:	f7ff fa24 	bl	d42fc <sock_socket>

    if (_sock < 0) {
   d4eb4:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4eb6:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4eb8:	db24      	blt.n	d4f04 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4eba:	2204      	movs	r2, #4
   d4ebc:	9200      	str	r2, [sp, #0]
   d4ebe:	ab02      	add	r3, sp, #8
   d4ec0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4ec4:	f7ff f9fa 	bl	d42bc <sock_setsockopt>
   d4ec8:	b9e0      	cbnz	r0, d4f04 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4eca:	b195      	cbz	r5, d4ef2 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4ecc:	9003      	str	r0, [sp, #12]
   d4ece:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4ed2:	a903      	add	r1, sp, #12
   d4ed4:	b2e8      	uxtb	r0, r5
   d4ed6:	f7ff f991 	bl	d41fc <if_index_to_name>
   d4eda:	b998      	cbnz	r0, d4f04 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4edc:	2306      	movs	r3, #6
   d4ede:	9300      	str	r3, [sp, #0]
   d4ee0:	f241 020b 	movw	r2, #4107	; 0x100b
   d4ee4:	ab03      	add	r3, sp, #12
   d4ee6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4eea:	6960      	ldr	r0, [r4, #20]
   d4eec:	f7ff f9e6 	bl	d42bc <sock_setsockopt>
   d4ef0:	b940      	cbnz	r0, d4f04 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4ef2:	221c      	movs	r2, #28
   d4ef4:	a905      	add	r1, sp, #20
   d4ef6:	6960      	ldr	r0, [r4, #20]
   d4ef8:	f7ff f9d8 	bl	d42ac <sock_bind>
   d4efc:	b910      	cbnz	r0, d4f04 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4efe:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4f00:	2001      	movs	r0, #1
   d4f02:	e004      	b.n	d4f0e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4f04:	6823      	ldr	r3, [r4, #0]
   d4f06:	4620      	mov	r0, r4
   d4f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f0a:	4798      	blx	r3
   d4f0c:	2000      	movs	r0, #0
    }
    return bound;
}
   d4f0e:	b00d      	add	sp, #52	; 0x34
   d4f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f12 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4f12:	b510      	push	{r4, lr}
   d4f14:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4f16:	6940      	ldr	r0, [r0, #20]
   d4f18:	2800      	cmp	r0, #0
   d4f1a:	db01      	blt.n	d4f20 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4f1c:	f7ff f9d6 	bl	d42cc <sock_close>
    }

    _sock = -1;
   d4f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4f24:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f26:	2300      	movs	r3, #0
   d4f28:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4f2a:	8723      	strh	r3, [r4, #56]	; 0x38
   d4f2c:	bd10      	pop	{r4, pc}

000d4f2e <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4f2e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4f30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4f32:	4605      	mov	r5, r0
   d4f34:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4f36:	b113      	cbz	r3, d4f3e <_ZN3UDP5writeEPKhj+0x10>
   d4f38:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4f3a:	1a24      	subs	r4, r4, r0
   d4f3c:	e000      	b.n	d4f40 <_ZN3UDP5writeEPKhj+0x12>
   d4f3e:	461c      	mov	r4, r3
   d4f40:	4294      	cmp	r4, r2
   d4f42:	bf28      	it	cs
   d4f44:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4f46:	4622      	mov	r2, r4
   d4f48:	4418      	add	r0, r3
   d4f4a:	f000 fd4b 	bl	d59e4 <memcpy>
    _offset += size;
   d4f4e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4f50:	4423      	add	r3, r4
   d4f52:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4f54:	4620      	mov	r0, r4
   d4f56:	bd38      	pop	{r3, r4, r5, pc}

000d4f58 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4f58:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4f5a:	6803      	ldr	r3, [r0, #0]
   d4f5c:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4f5e:	4604      	mov	r4, r0
   d4f60:	460e      	mov	r6, r1
   d4f62:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4f64:	4798      	blx	r3
   d4f66:	b188      	cbz	r0, d4f8c <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4f68:	6823      	ldr	r3, [r4, #0]
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	691b      	ldr	r3, [r3, #16]
   d4f6e:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4f70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f72:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4f74:	4285      	cmp	r5, r0
   d4f76:	bfa8      	it	ge
   d4f78:	4605      	movge	r5, r0
   d4f7a:	4419      	add	r1, r3
   d4f7c:	462a      	mov	r2, r5
   d4f7e:	4630      	mov	r0, r6
   d4f80:	f000 fd30 	bl	d59e4 <memcpy>
        _offset += read;
   d4f84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f86:	442b      	add	r3, r5
   d4f88:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4f8a:	e001      	b.n	d4f90 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4f8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4f90:	4628      	mov	r0, r5
   d4f92:	bd70      	pop	{r4, r5, r6, pc}

000d4f94 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4f94:	b570      	push	{r4, r5, r6, lr}
   d4f96:	4604      	mov	r4, r0
   d4f98:	4b05      	ldr	r3, [pc, #20]	; (d4fb0 <_ZN3UDP8remoteIPEv+0x1c>)
   d4f9a:	f844 3b04 	str.w	r3, [r4], #4
   d4f9e:	f101 0520 	add.w	r5, r1, #32
   d4fa2:	4606      	mov	r6, r0
   d4fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4fa8:	682b      	ldr	r3, [r5, #0]
   d4faa:	7023      	strb	r3, [r4, #0]
   d4fac:	4630      	mov	r0, r6
   d4fae:	bd70      	pop	{r4, r5, r6, pc}
   d4fb0:	000d5b14 	.word	0x000d5b14

000d4fb4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fb6:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4fb8:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4fba:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4fbc:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4fbe:	4a0a      	ldr	r2, [pc, #40]	; (d4fe8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4fc0:	9202      	str	r2, [sp, #8]
   d4fc2:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4fc4:	468e      	mov	lr, r1
   d4fc6:	4606      	mov	r6, r0
   d4fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4fca:	ac03      	add	r4, sp, #12
   d4fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4fce:	682b      	ldr	r3, [r5, #0]
   d4fd0:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4fd2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4fd6:	9300      	str	r3, [sp, #0]
   d4fd8:	4662      	mov	r2, ip
   d4fda:	ab02      	add	r3, sp, #8
   d4fdc:	4671      	mov	r1, lr
   d4fde:	4630      	mov	r0, r6
   d4fe0:	47b8      	blx	r7
    }
   d4fe2:	b009      	add	sp, #36	; 0x24
   d4fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fe6:	bf00      	nop
   d4fe8:	000d5b14 	.word	0x000d5b14

000d4fec <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4fee:	6803      	ldr	r3, [r0, #0]
   d4ff0:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4ff4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4ff6:	4b0d      	ldr	r3, [pc, #52]	; (d502c <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4ff8:	b089      	sub	sp, #36	; 0x24
   d4ffa:	f100 0620 	add.w	r6, r0, #32
   d4ffe:	4604      	mov	r4, r0
   d5000:	9302      	str	r3, [sp, #8]
   d5002:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5004:	ad03      	add	r5, sp, #12
   d5006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5008:	6833      	ldr	r3, [r6, #0]
   d500a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d500c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d500e:	9300      	str	r3, [sp, #0]
   d5010:	4672      	mov	r2, lr
   d5012:	ab02      	add	r3, sp, #8
   d5014:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5016:	4620      	mov	r0, r4
   d5018:	47b8      	blx	r7
    flush(); // wait for send to complete
   d501a:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d501c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d501e:	69db      	ldr	r3, [r3, #28]
   d5020:	4620      	mov	r0, r4
   d5022:	4798      	blx	r3
    return result;
}
   d5024:	4628      	mov	r0, r5
   d5026:	b009      	add	sp, #36	; 0x24
   d5028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d502a:	bf00      	nop
   d502c:	000d5b14 	.word	0x000d5b14

000d5030 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5030:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5032:	7843      	ldrb	r3, [r0, #1]
   d5034:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5036:	b08d      	sub	sp, #52	; 0x34
   d5038:	4605      	mov	r5, r0
   d503a:	460c      	mov	r4, r1
   d503c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d503e:	d101      	bne.n	d5044 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5040:	1d01      	adds	r1, r0, #4
   d5042:	e033      	b.n	d50ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5044:	2b0a      	cmp	r3, #10
   d5046:	d135      	bne.n	d50b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5048:	2211      	movs	r2, #17
   d504a:	2100      	movs	r1, #0
   d504c:	a801      	add	r0, sp, #4
   d504e:	f000 fcd4 	bl	d59fa <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5052:	68ab      	ldr	r3, [r5, #8]
   d5054:	b943      	cbnz	r3, d5068 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5056:	68eb      	ldr	r3, [r5, #12]
   d5058:	b933      	cbnz	r3, d5068 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d505a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d505e:	692e      	ldr	r6, [r5, #16]
   d5060:	f7ff f8fc 	bl	d425c <inet_htonl>
   d5064:	4286      	cmp	r6, r0
   d5066:	d01f      	beq.n	d50a8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5068:	f105 0308 	add.w	r3, r5, #8
   d506c:	ae01      	add	r6, sp, #4
   d506e:	f105 0e18 	add.w	lr, r5, #24
   d5072:	6818      	ldr	r0, [r3, #0]
   d5074:	6859      	ldr	r1, [r3, #4]
   d5076:	4632      	mov	r2, r6
   d5078:	c203      	stmia	r2!, {r0, r1}
   d507a:	3308      	adds	r3, #8
   d507c:	4573      	cmp	r3, lr
   d507e:	4616      	mov	r6, r2
   d5080:	d1f7      	bne.n	d5072 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5082:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5084:	a901      	add	r1, sp, #4
   d5086:	a806      	add	r0, sp, #24
   d5088:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d508a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d508e:	f7ff fb51 	bl	d4734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5092:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5094:	3404      	adds	r4, #4
   d5096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5098:	6833      	ldr	r3, [r6, #0]
   d509a:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d509c:	b157      	cbz	r7, d50b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d509e:	8868      	ldrh	r0, [r5, #2]
   d50a0:	f7ff f8e4 	bl	d426c <inet_ntohs>
   d50a4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d50a6:	e005      	b.n	d50b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d50a8:	f105 0114 	add.w	r1, r5, #20
   d50ac:	4620      	mov	r0, r4
   d50ae:	f7ff fb76 	bl	d479e <_ZN9IPAddressaSEPKh>
   d50b2:	e7f3      	b.n	d509c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d50b4:	b00d      	add	sp, #52	; 0x34
   d50b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50b8 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d50b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50bc:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d50be:	ab0e      	add	r3, sp, #56	; 0x38
   d50c0:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d50c2:	4606      	mov	r6, r0
   d50c4:	4617      	mov	r7, r2
   d50c6:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d50c8:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d50cc:	462a      	mov	r2, r5
   d50ce:	4629      	mov	r1, r5
   d50d0:	f7ff f8e4 	bl	d429c <netdb_getaddrinfo>
   d50d4:	2800      	cmp	r0, #0
   d50d6:	db1f      	blt.n	d5118 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d50d8:	9b01      	ldr	r3, [sp, #4]
   d50da:	b1fb      	cbz	r3, d511c <_ZN3UDP11beginPacketEPKct+0x64>
   d50dc:	695b      	ldr	r3, [r3, #20]
   d50de:	b1eb      	cbz	r3, d511c <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d50e0:	a802      	add	r0, sp, #8
   d50e2:	f7ff fb19 	bl	d4718 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d50e6:	9b01      	ldr	r3, [sp, #4]
   d50e8:	462a      	mov	r2, r5
   d50ea:	6958      	ldr	r0, [r3, #20]
   d50ec:	a902      	add	r1, sp, #8
   d50ee:	f7ff ff9f 	bl	d5030 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d50f2:	a802      	add	r0, sp, #8
   d50f4:	f7ff fb30 	bl	d4758 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d50f8:	b180      	cbz	r0, d511c <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d50fa:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50fc:	ad03      	add	r5, sp, #12
   d50fe:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5102:	4b0b      	ldr	r3, [pc, #44]	; (d5130 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5104:	9308      	str	r3, [sp, #32]
   d5106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5108:	ac09      	add	r4, sp, #36	; 0x24
   d510a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d510c:	682b      	ldr	r3, [r5, #0]
   d510e:	7023      	strb	r3, [r4, #0]
   d5110:	463a      	mov	r2, r7
   d5112:	a908      	add	r1, sp, #32
   d5114:	4630      	mov	r0, r6
   d5116:	47c0      	blx	r8
   d5118:	4604      	mov	r4, r0
   d511a:	e001      	b.n	d5120 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d511c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5120:	9801      	ldr	r0, [sp, #4]
   d5122:	f7ff f8b3 	bl	d428c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d5126:	4620      	mov	r0, r4
   d5128:	b00e      	add	sp, #56	; 0x38
   d512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d512e:	bf00      	nop
   d5130:	000d5b14 	.word	0x000d5b14

000d5134 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5138:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d513c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5140:	b08c      	sub	sp, #48	; 0x30
   d5142:	4605      	mov	r5, r0
   d5144:	460c      	mov	r4, r1
   d5146:	4617      	mov	r7, r2
   d5148:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d514a:	db00      	blt.n	d514e <_ZN3UDP13receivePacketEPhjm+0x1a>
   d514c:	b911      	cbnz	r1, d5154 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d514e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5152:	e035      	b.n	d51c0 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5154:	f04f 0a1c 	mov.w	sl, #28
   d5158:	ae05      	add	r6, sp, #20
   d515a:	4652      	mov	r2, sl
   d515c:	2100      	movs	r1, #0
   d515e:	4630      	mov	r0, r6
   d5160:	f000 fc4b 	bl	d59fa <memset>
        socklen_t slen = sizeof(saddr);
   d5164:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d5168:	f1b9 0f00 	cmp.w	r9, #0
   d516c:	d014      	beq.n	d5198 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d516e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5172:	fbb9 f1f2 	udiv	r1, r9, r2
   d5176:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5178:	fb02 9111 	mls	r1, r2, r1, r9
   d517c:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d517e:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5180:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5182:	9300      	str	r3, [sp, #0]
   d5184:	f241 0206 	movw	r2, #4102	; 0x1006
   d5188:	ab03      	add	r3, sp, #12
   d518a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d518e:	4640      	mov	r0, r8
   d5190:	f7ff f894 	bl	d42bc <sock_setsockopt>
            if (ret) {
   d5194:	b108      	cbz	r0, d519a <_ZN3UDP13receivePacketEPhjm+0x66>
   d5196:	e013      	b.n	d51c0 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5198:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d519a:	ab02      	add	r3, sp, #8
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	4621      	mov	r1, r4
   d51a0:	4603      	mov	r3, r0
   d51a2:	9600      	str	r6, [sp, #0]
   d51a4:	463a      	mov	r2, r7
   d51a6:	6968      	ldr	r0, [r5, #20]
   d51a8:	f7ff f898 	bl	d42dc <sock_recvfrom>
        if (ret >= 0) {
   d51ac:	1e04      	subs	r4, r0, #0
   d51ae:	db06      	blt.n	d51be <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d51b0:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d51b4:	f105 011c 	add.w	r1, r5, #28
   d51b8:	4630      	mov	r0, r6
   d51ba:	f7ff ff39 	bl	d5030 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d51be:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d51c0:	b00c      	add	sp, #48	; 0x30
   d51c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d51c6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d51c6:	b538      	push	{r3, r4, r5, lr}
   d51c8:	4605      	mov	r5, r0
   d51ca:	4614      	mov	r4, r2
   d51cc:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d51ce:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d51d0:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d51d2:	d111      	bne.n	d51f8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d51d4:	231c      	movs	r3, #28
   d51d6:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d51d8:	230a      	movs	r3, #10
   d51da:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d51dc:	f7ff f84e 	bl	d427c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d51e0:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d51e2:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d51e6:	1d2b      	adds	r3, r5, #4
   d51e8:	3514      	adds	r5, #20
   d51ea:	f853 2b04 	ldr.w	r2, [r3], #4
   d51ee:	f844 2b04 	str.w	r2, [r4], #4
   d51f2:	42ab      	cmp	r3, r5
   d51f4:	d1f9      	bne.n	d51ea <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d51f6:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d51f8:	2b04      	cmp	r3, #4
   d51fa:	d10a      	bne.n	d5212 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d51fc:	2310      	movs	r3, #16
   d51fe:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5200:	2302      	movs	r3, #2
   d5202:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5204:	f7ff f83a 	bl	d427c <inet_htons>
   d5208:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d520a:	6868      	ldr	r0, [r5, #4]
   d520c:	f7ff f826 	bl	d425c <inet_htonl>
   d5210:	6060      	str	r0, [r4, #4]
   d5212:	bd38      	pop	{r3, r4, r5, pc}

000d5214 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5218:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d521a:	ac03      	add	r4, sp, #12
   d521c:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d521e:	4699      	mov	r9, r3
   d5220:	4606      	mov	r6, r0
   d5222:	460f      	mov	r7, r1
   d5224:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d5226:	2100      	movs	r1, #0
   d5228:	462a      	mov	r2, r5
   d522a:	4620      	mov	r0, r4
   d522c:	f000 fbe5 	bl	d59fa <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5230:	4622      	mov	r2, r4
   d5232:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d5236:	4648      	mov	r0, r9
   d5238:	f7ff ffc5 	bl	d51c6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d523c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5240:	b143      	cbz	r3, d5254 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5242:	e88d 0030 	stmia.w	sp, {r4, r5}
   d5246:	2300      	movs	r3, #0
   d5248:	4642      	mov	r2, r8
   d524a:	4639      	mov	r1, r7
   d524c:	6970      	ldr	r0, [r6, #20]
   d524e:	f7ff f84d 	bl	d42ec <sock_sendto>
   d5252:	e001      	b.n	d5258 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5258:	b00b      	add	sp, #44	; 0x2c
   d525a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d525e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d525e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5260:	b091      	sub	sp, #68	; 0x44
   d5262:	460c      	mov	r4, r1
   d5264:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5266:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5268:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d526a:	a809      	add	r0, sp, #36	; 0x24
   d526c:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d526e:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5270:	f000 fbc3 	bl	d59fa <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5274:	aa09      	add	r2, sp, #36	; 0x24
   d5276:	2100      	movs	r1, #0
   d5278:	4620      	mov	r0, r4
   d527a:	f7ff ffa4 	bl	d51c6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d527e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5282:	2b02      	cmp	r3, #2
   d5284:	d12e      	bne.n	d52e4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d5286:	2300      	movs	r3, #0
   d5288:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d528a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d528c:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d528e:	b1dd      	cbz	r5, d52c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5290:	a902      	add	r1, sp, #8
   d5292:	4628      	mov	r0, r5
   d5294:	f7fe ffba 	bl	d420c <if_get_by_index>
   d5298:	b9b0      	cbnz	r0, d52c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d529a:	a910      	add	r1, sp, #64	; 0x40
   d529c:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d52a0:	9802      	ldr	r0, [sp, #8]
   d52a2:	f7fe ffbb 	bl	d421c <if_get_addrs>
   d52a6:	b960      	cbnz	r0, d52c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d52a8:	9b03      	ldr	r3, [sp, #12]
   d52aa:	b153      	cbz	r3, d52c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d52ac:	68da      	ldr	r2, [r3, #12]
   d52ae:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d52b0:	7851      	ldrb	r1, [r2, #1]
   d52b2:	2902      	cmp	r1, #2
   d52b4:	d103      	bne.n	d52be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d52b6:	6852      	ldr	r2, [r2, #4]
   d52b8:	b10a      	cbz	r2, d52be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d52ba:	9205      	str	r2, [sp, #20]
   d52bc:	e001      	b.n	d52c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d52be:	681b      	ldr	r3, [r3, #0]
   d52c0:	e7f3      	b.n	d52aa <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d52c2:	9803      	ldr	r0, [sp, #12]
   d52c4:	f7fe ffb2 	bl	d422c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d52c8:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d52ca:	f04f 0308 	mov.w	r3, #8
   d52ce:	9300      	str	r3, [sp, #0]
   d52d0:	bf18      	it	ne
   d52d2:	2203      	movne	r2, #3
   d52d4:	ab04      	add	r3, sp, #16
   d52d6:	bf08      	it	eq
   d52d8:	2204      	moveq	r2, #4
   d52da:	2100      	movs	r1, #0
   d52dc:	4630      	mov	r0, r6
   d52de:	f7fe ffed 	bl	d42bc <sock_setsockopt>
   d52e2:	e01e      	b.n	d5322 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d52e4:	2b0a      	cmp	r3, #10
   d52e6:	d11a      	bne.n	d531e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d52e8:	ac04      	add	r4, sp, #16
   d52ea:	2214      	movs	r2, #20
   d52ec:	2100      	movs	r1, #0
   d52ee:	4620      	mov	r0, r4
   d52f0:	f000 fb83 	bl	d59fa <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d52f4:	ab0b      	add	r3, sp, #44	; 0x2c
   d52f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d52f8:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d52fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d52fe:	f04f 0314 	mov.w	r3, #20
   d5302:	9300      	str	r3, [sp, #0]
   d5304:	bf18      	it	ne
   d5306:	220c      	movne	r2, #12
   d5308:	4623      	mov	r3, r4
   d530a:	bf08      	it	eq
   d530c:	220d      	moveq	r2, #13
   d530e:	2129      	movs	r1, #41	; 0x29
   d5310:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5312:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5314:	f7fe ffd2 	bl	d42bc <sock_setsockopt>
   d5318:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d531c:	e001      	b.n	d5322 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d531e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5322:	b011      	add	sp, #68	; 0x44
   d5324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5328 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5328:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d532a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d532e:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5330:	4b0b      	ldr	r3, [pc, #44]	; (d5360 <_ZN3UDPC1Ev+0x38>)
   d5332:	f103 0208 	add.w	r2, r3, #8
   d5336:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5338:	2500      	movs	r5, #0
   d533a:	6103      	str	r3, [r0, #16]
   d533c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d5340:	4604      	mov	r4, r0
   d5342:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5344:	6002      	str	r2, [r0, #0]
   d5346:	6143      	str	r3, [r0, #20]
   d5348:	301c      	adds	r0, #28
   d534a:	f7ff f9e5 	bl	d4718 <_ZN9IPAddressC1Ev>
   d534e:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5352:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5354:	8725      	strh	r5, [r4, #56]	; 0x38
   d5356:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5358:	6423      	str	r3, [r4, #64]	; 0x40
   d535a:	6465      	str	r5, [r4, #68]	; 0x44
}
   d535c:	4620      	mov	r0, r4
   d535e:	bd38      	pop	{r3, r4, r5, pc}
   d5360:	000d5cd4 	.word	0x000d5cd4

000d5364 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5364:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5366:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d536a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d536c:	b11b      	cbz	r3, d5376 <_ZN3UDP13releaseBufferEv+0x12>
   d536e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5370:	b108      	cbz	r0, d5376 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5372:	f7fe fe94 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5376:	2300      	movs	r3, #0
   d5378:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d537a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d537e:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5380:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5382:	8723      	strh	r3, [r4, #56]	; 0x38
   d5384:	bd10      	pop	{r4, pc}

000d5386 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5386:	b570      	push	{r4, r5, r6, lr}
   d5388:	4604      	mov	r4, r0
   d538a:	4616      	mov	r6, r2
   d538c:	460d      	mov	r5, r1
    releaseBuffer();
   d538e:	f7ff ffe9 	bl	d5364 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5392:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5394:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5396:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5398:	b93e      	cbnz	r6, d53aa <_ZN3UDP9setBufferEjPh+0x24>
   d539a:	b135      	cbz	r5, d53aa <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d539c:	4628      	mov	r0, r5
   d539e:	f7fe fe7c 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d53a2:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d53a4:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d53a6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d53aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d53ac:	b103      	cbz	r3, d53b0 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d53ae:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d53b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d53b2:	3000      	adds	r0, #0
   d53b4:	bf18      	it	ne
   d53b6:	2001      	movne	r0, #1
   d53b8:	bd70      	pop	{r4, r5, r6, pc}

000d53ba <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d53ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53bc:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d53be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d53c0:	4605      	mov	r5, r0
   d53c2:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d53c4:	b91a      	cbnz	r2, d53ce <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d53c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d53c8:	b109      	cbz	r1, d53ce <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d53ca:	f7ff ffdc 	bl	d5386 <_ZN3UDP9setBufferEjPh>
   d53ce:	3404      	adds	r4, #4
   d53d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d53d2:	f105 0620 	add.w	r6, r5, #32
   d53d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d53d8:	6823      	ldr	r3, [r4, #0]
   d53da:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53dc:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d53de:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53e0:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d53e2:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d53e4:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d53e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e8 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d53e8:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d53ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d53ec:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d53ee:	b91a      	cbnz	r2, d53f8 <_ZN3UDP11parsePacketEm+0x10>
   d53f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d53f2:	b109      	cbz	r1, d53f8 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d53f4:	f7ff ffc7 	bl	d5386 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d53f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53fa:	2300      	movs	r3, #0
   d53fc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d53fe:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5400:	b141      	cbz	r1, d5414 <_ZN3UDP11parsePacketEm+0x2c>
   d5402:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5404:	b132      	cbz	r2, d5414 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d5406:	6820      	ldr	r0, [r4, #0]
   d5408:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d540a:	4620      	mov	r0, r4
   d540c:	47a8      	blx	r5
        if (result > 0) {
   d540e:	2800      	cmp	r0, #0
            _total = result;
   d5410:	bfc8      	it	gt
   d5412:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5414:	6823      	ldr	r3, [r4, #0]
   d5416:	4620      	mov	r0, r4
   d5418:	691b      	ldr	r3, [r3, #16]
}
   d541a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d541e:	4718      	bx	r3

000d5420 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5420:	b510      	push	{r4, lr}
   d5422:	4b07      	ldr	r3, [pc, #28]	; (d5440 <_ZN3UDPD1Ev+0x20>)
   d5424:	f103 0208 	add.w	r2, r3, #8
   d5428:	336c      	adds	r3, #108	; 0x6c
   d542a:	4604      	mov	r4, r0
   d542c:	6002      	str	r2, [r0, #0]
   d542e:	6103      	str	r3, [r0, #16]
   d5430:	f7ff fd6f 	bl	d4f12 <_ZN3UDP4stopEv>
   d5434:	4620      	mov	r0, r4
   d5436:	f7ff ff95 	bl	d5364 <_ZN3UDP13releaseBufferEv>
   d543a:	4620      	mov	r0, r4
   d543c:	bd10      	pop	{r4, pc}
   d543e:	bf00      	nop
   d5440:	000d5cd4 	.word	0x000d5cd4

000d5444 <_ZN3UDPD0Ev>:
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
   d5448:	f7ff ffea 	bl	d5420 <_ZN3UDPD1Ev>
   d544c:	4620      	mov	r0, r4
   d544e:	f7fe fe26 	bl	d409e <_ZdlPv>
   d5452:	4620      	mov	r0, r4
   d5454:	bd10      	pop	{r4, pc}

000d5456 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5456:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5458:	6940      	ldr	r0, [r0, #20]
   d545a:	2800      	cmp	r0, #0
   d545c:	db04      	blt.n	d5468 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d545e:	2301      	movs	r3, #1
   d5460:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5464:	f7ff befb 	b.w	d525e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d5468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d546c:	4770      	bx	lr

000d546e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d546e:	4770      	bx	lr

000d5470 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5470:	7441      	strb	r1, [r0, #17]
   d5472:	4770      	bx	lr

000d5474 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5474:	7c00      	ldrb	r0, [r0, #16]
   d5476:	f7fe bf81 	b.w	d437c <HAL_USART_Available_Data_For_Write>

000d547a <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d547a:	7c00      	ldrb	r0, [r0, #16]
   d547c:	f7fe bf5e 	b.w	d433c <HAL_USART_Available_Data>

000d5480 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5480:	7c00      	ldrb	r0, [r0, #16]
   d5482:	f7fe bf6b 	b.w	d435c <HAL_USART_Peek_Data>

000d5486 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5486:	7c00      	ldrb	r0, [r0, #16]
   d5488:	f7fe bf60 	b.w	d434c <HAL_USART_Read_Data>

000d548c <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d548c:	7c00      	ldrb	r0, [r0, #16]
   d548e:	f7fe bf6d 	b.w	d436c <HAL_USART_Flush_Data>

000d5492 <_ZN11USARTSerialD0Ev>:
   d5492:	b510      	push	{r4, lr}
   d5494:	4604      	mov	r4, r0
   d5496:	f7fe fe02 	bl	d409e <_ZdlPv>
   d549a:	4620      	mov	r0, r4
   d549c:	bd10      	pop	{r4, pc}

000d549e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d549e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d54a2:	4604      	mov	r4, r0
   d54a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54a6:	b925      	cbnz	r5, d54b2 <_ZN11USARTSerial5writeEh+0x14>
   d54a8:	7c00      	ldrb	r0, [r0, #16]
   d54aa:	f7fe ff67 	bl	d437c <HAL_USART_Available_Data_For_Write>
   d54ae:	2800      	cmp	r0, #0
   d54b0:	dd05      	ble.n	d54be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54b2:	4631      	mov	r1, r6
   d54b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54ba:	f7fe bf37 	b.w	d432c <HAL_USART_Write_Data>
  }
  return 0;
}
   d54be:	4628      	mov	r0, r5
   d54c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d54c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d54c4:	b510      	push	{r4, lr}
   d54c6:	4604      	mov	r4, r0
   d54c8:	4608      	mov	r0, r1
   d54ca:	4611      	mov	r1, r2
   d54cc:	2200      	movs	r2, #0
   d54ce:	6062      	str	r2, [r4, #4]
   d54d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54d4:	60a2      	str	r2, [r4, #8]
   d54d6:	4a05      	ldr	r2, [pc, #20]	; (d54ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54e0:	461a      	mov	r2, r3
   d54e2:	f7fe ff1b 	bl	d431c <HAL_USART_Init>
}
   d54e6:	4620      	mov	r0, r4
   d54e8:	bd10      	pop	{r4, pc}
   d54ea:	bf00      	nop
   d54ec:	000d5d4c 	.word	0x000d5d4c

000d54f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54f2:	4d0c      	ldr	r5, [pc, #48]	; (d5524 <_Z22__fetch_global_Serial1v+0x34>)
   d54f4:	6829      	ldr	r1, [r5, #0]
   d54f6:	f011 0401 	ands.w	r4, r1, #1
   d54fa:	d111      	bne.n	d5520 <_Z22__fetch_global_Serial1v+0x30>
   d54fc:	4628      	mov	r0, r5
   d54fe:	f7fe fdd2 	bl	d40a6 <__cxa_guard_acquire>
   d5502:	b168      	cbz	r0, d5520 <_Z22__fetch_global_Serial1v+0x30>
   d5504:	4a08      	ldr	r2, [pc, #32]	; (d5528 <_Z22__fetch_global_Serial1v+0x38>)
   d5506:	4b09      	ldr	r3, [pc, #36]	; (d552c <_Z22__fetch_global_Serial1v+0x3c>)
   d5508:	4809      	ldr	r0, [pc, #36]	; (d5530 <_Z22__fetch_global_Serial1v+0x40>)
   d550a:	4621      	mov	r1, r4
   d550c:	f7ff ffda 	bl	d54c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5510:	4628      	mov	r0, r5
   d5512:	f7fe fdcd 	bl	d40b0 <__cxa_guard_release>
   d5516:	4a07      	ldr	r2, [pc, #28]	; (d5534 <_Z22__fetch_global_Serial1v+0x44>)
   d5518:	4907      	ldr	r1, [pc, #28]	; (d5538 <_Z22__fetch_global_Serial1v+0x48>)
   d551a:	4805      	ldr	r0, [pc, #20]	; (d5530 <_Z22__fetch_global_Serial1v+0x40>)
   d551c:	f000 f906 	bl	d572c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5520:	4803      	ldr	r0, [pc, #12]	; (d5530 <_Z22__fetch_global_Serial1v+0x40>)
   d5522:	bd38      	pop	{r3, r4, r5, pc}
   d5524:	2003e688 	.word	0x2003e688
   d5528:	2003e68c 	.word	0x2003e68c
   d552c:	2003e604 	.word	0x2003e604
   d5530:	2003e5f0 	.word	0x2003e5f0
   d5534:	2003e394 	.word	0x2003e394
   d5538:	000d546f 	.word	0x000d546f

000d553c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d553c:	7441      	strb	r1, [r0, #17]
   d553e:	4770      	bx	lr

000d5540 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5540:	4770      	bx	lr

000d5542 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5542:	2100      	movs	r1, #0
   d5544:	7c00      	ldrb	r0, [r0, #16]
   d5546:	f7fe bf39 	b.w	d43bc <HAL_USB_USART_Receive_Data>

000d554a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d554a:	2101      	movs	r1, #1
   d554c:	7c00      	ldrb	r0, [r0, #16]
   d554e:	f7fe bf35 	b.w	d43bc <HAL_USB_USART_Receive_Data>

000d5552 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5552:	7c00      	ldrb	r0, [r0, #16]
   d5554:	f7fe bf2a 	b.w	d43ac <HAL_USB_USART_Available_Data_For_Write>

000d5558 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5558:	7c00      	ldrb	r0, [r0, #16]
   d555a:	f7fe bf1f 	b.w	d439c <HAL_USB_USART_Available_Data>

000d555e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d555e:	b538      	push	{r3, r4, r5, lr}
   d5560:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5562:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5564:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5566:	f7fe ff21 	bl	d43ac <HAL_USB_USART_Available_Data_For_Write>
   d556a:	2800      	cmp	r0, #0
   d556c:	dc01      	bgt.n	d5572 <_ZN9USBSerial5writeEh+0x14>
   d556e:	7c60      	ldrb	r0, [r4, #17]
   d5570:	b120      	cbz	r0, d557c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5572:	4629      	mov	r1, r5
   d5574:	7c20      	ldrb	r0, [r4, #16]
   d5576:	f7fe ff29 	bl	d43cc <HAL_USB_USART_Send_Data>
    return 1;
   d557a:	2001      	movs	r0, #1
  }
  return 0;
}
   d557c:	bd38      	pop	{r3, r4, r5, pc}

000d557e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d557e:	7c00      	ldrb	r0, [r0, #16]
   d5580:	f7fe bf2c 	b.w	d43dc <HAL_USB_USART_Flush_Data>

000d5584 <_ZN9USBSerialD0Ev>:
   d5584:	b510      	push	{r4, lr}
   d5586:	4604      	mov	r4, r0
   d5588:	f7fe fd89 	bl	d409e <_ZdlPv>
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5590:	b510      	push	{r4, lr}
   d5592:	4604      	mov	r4, r0
   d5594:	2300      	movs	r3, #0
   d5596:	6063      	str	r3, [r4, #4]
   d5598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d559c:	60a3      	str	r3, [r4, #8]
   d559e:	4b05      	ldr	r3, [pc, #20]	; (d55b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55a0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d55a2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55a4:	4608      	mov	r0, r1
{
  _serial = serial;
   d55a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d55a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d55aa:	4611      	mov	r1, r2
   d55ac:	f7fe feee 	bl	d438c <HAL_USB_USART_Init>
}
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd10      	pop	{r4, pc}
   d55b4:	000d5d7c 	.word	0x000d5d7c

000d55b8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55ba:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55be:	2100      	movs	r1, #0
   d55c0:	f000 fa1b 	bl	d59fa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55c4:	4620      	mov	r0, r4
   d55c6:	bd10      	pop	{r4, pc}

000d55c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55ca:	4d0e      	ldr	r5, [pc, #56]	; (d5604 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d55cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55ce:	a801      	add	r0, sp, #4
   d55d0:	f7ff fff2 	bl	d55b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55d4:	6829      	ldr	r1, [r5, #0]
   d55d6:	f011 0401 	ands.w	r4, r1, #1
   d55da:	d110      	bne.n	d55fe <_Z16_fetch_usbserialv+0x36>
   d55dc:	4628      	mov	r0, r5
   d55de:	f7fe fd62 	bl	d40a6 <__cxa_guard_acquire>
   d55e2:	b160      	cbz	r0, d55fe <_Z16_fetch_usbserialv+0x36>
   d55e4:	aa01      	add	r2, sp, #4
   d55e6:	4621      	mov	r1, r4
   d55e8:	4807      	ldr	r0, [pc, #28]	; (d5608 <_Z16_fetch_usbserialv+0x40>)
   d55ea:	f7ff ffd1 	bl	d5590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55ee:	4628      	mov	r0, r5
   d55f0:	f7fe fd5e 	bl	d40b0 <__cxa_guard_release>
   d55f4:	4a05      	ldr	r2, [pc, #20]	; (d560c <_Z16_fetch_usbserialv+0x44>)
   d55f6:	4906      	ldr	r1, [pc, #24]	; (d5610 <_Z16_fetch_usbserialv+0x48>)
   d55f8:	4803      	ldr	r0, [pc, #12]	; (d5608 <_Z16_fetch_usbserialv+0x40>)
   d55fa:	f000 f897 	bl	d572c <__aeabi_atexit>
	return _usbserial;
}
   d55fe:	4802      	ldr	r0, [pc, #8]	; (d5608 <_Z16_fetch_usbserialv+0x40>)
   d5600:	b007      	add	sp, #28
   d5602:	bd30      	pop	{r4, r5, pc}
   d5604:	2003e710 	.word	0x2003e710
   d5608:	2003e714 	.word	0x2003e714
   d560c:	2003e394 	.word	0x2003e394
   d5610:	000d5541 	.word	0x000d5541

000d5614 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5614:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5616:	4b0c      	ldr	r3, [pc, #48]	; (d5648 <serialEventRun+0x34>)
   d5618:	b133      	cbz	r3, d5628 <serialEventRun+0x14>
   d561a:	f7ff ffd5 	bl	d55c8 <_Z16_fetch_usbserialv>
   d561e:	6803      	ldr	r3, [r0, #0]
   d5620:	691b      	ldr	r3, [r3, #16]
   d5622:	4798      	blx	r3
   d5624:	2800      	cmp	r0, #0
   d5626:	dc09      	bgt.n	d563c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5628:	4b08      	ldr	r3, [pc, #32]	; (d564c <serialEventRun+0x38>)
   d562a:	b163      	cbz	r3, d5646 <serialEventRun+0x32>
   d562c:	f7ff ff60 	bl	d54f0 <_Z22__fetch_global_Serial1v>
   d5630:	6803      	ldr	r3, [r0, #0]
   d5632:	691b      	ldr	r3, [r3, #16]
   d5634:	4798      	blx	r3
   d5636:	2800      	cmp	r0, #0
   d5638:	dc03      	bgt.n	d5642 <serialEventRun+0x2e>
   d563a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d563c:	f3af 8000 	nop.w
   d5640:	e7f2      	b.n	d5628 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5642:	f3af 8000 	nop.w
   d5646:	bd08      	pop	{r3, pc}
	...

000d5650 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5650:	b508      	push	{r3, lr}
	serialEventRun();
   d5652:	f7ff ffdf 	bl	d5614 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5656:	f7fe fdb9 	bl	d41cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d565a:	4b01      	ldr	r3, [pc, #4]	; (d5660 <_post_loop+0x10>)
   d565c:	6018      	str	r0, [r3, #0]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	2003e72c 	.word	0x2003e72c

000d5664 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5664:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5666:	2300      	movs	r3, #0
   d5668:	9300      	str	r3, [sp, #0]
   d566a:	461a      	mov	r2, r3
   d566c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5670:	f7fe fece 	bl	d4410 <system_ctrl_set_result>
}
   d5674:	b003      	add	sp, #12
   d5676:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d567c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d567c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d567e:	8843      	ldrh	r3, [r0, #2]
   d5680:	2b0a      	cmp	r3, #10
   d5682:	d008      	beq.n	d5696 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5684:	2b50      	cmp	r3, #80	; 0x50
   d5686:	d109      	bne.n	d569c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5688:	4b09      	ldr	r3, [pc, #36]	; (d56b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d568a:	681b      	ldr	r3, [r3, #0]
   d568c:	b13b      	cbz	r3, d569e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d568e:	b003      	add	sp, #12
   d5690:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5694:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5696:	f7ff ffe5 	bl	d5664 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d569a:	e006      	b.n	d56aa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d569c:	2300      	movs	r3, #0
   d569e:	9300      	str	r3, [sp, #0]
   d56a0:	461a      	mov	r2, r3
   d56a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56a6:	f7fe feb3 	bl	d4410 <system_ctrl_set_result>
        break;
    }
}
   d56aa:	b003      	add	sp, #12
   d56ac:	f85d fb04 	ldr.w	pc, [sp], #4
   d56b0:	2003e728 	.word	0x2003e728

000d56b4 <module_user_init_hook>:

void module_user_init_hook()
{
   d56b4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d56b6:	f7fe fd81 	bl	d41bc <HAL_RNG_GetRandomNumber>
   d56ba:	4604      	mov	r4, r0
    srand(seed);
   d56bc:	f000 f9a6 	bl	d5a0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d56c0:	4b07      	ldr	r3, [pc, #28]	; (d56e0 <module_user_init_hook+0x2c>)
   d56c2:	b113      	cbz	r3, d56ca <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d56c4:	4620      	mov	r0, r4
   d56c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d56ca:	2100      	movs	r1, #0
   d56cc:	4804      	ldr	r0, [pc, #16]	; (d56e0 <module_user_init_hook+0x2c>)
   d56ce:	f7fe feb1 	bl	d4434 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d56d2:	2100      	movs	r1, #0
   d56d4:	4803      	ldr	r0, [pc, #12]	; (d56e4 <module_user_init_hook+0x30>)
}
   d56d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d56da:	f7fe be8f 	b.w	d43fc <system_ctrl_set_app_request_handler>
   d56de:	bf00      	nop
   d56e0:	00000000 	.word	0x00000000
   d56e4:	000d567d 	.word	0x000d567d

000d56e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d56e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d56ea:	4c0c      	ldr	r4, [pc, #48]	; (d571c <_GLOBAL__sub_I_SPI+0x34>)
   d56ec:	4e0c      	ldr	r6, [pc, #48]	; (d5720 <_GLOBAL__sub_I_SPI+0x38>)
   d56ee:	4d0d      	ldr	r5, [pc, #52]	; (d5724 <_GLOBAL__sub_I_SPI+0x3c>)
   d56f0:	2100      	movs	r1, #0
   d56f2:	4620      	mov	r0, r4
   d56f4:	f7ff fad8 	bl	d4ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d56f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d56fa:	4c0b      	ldr	r4, [pc, #44]	; (d5728 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d56fc:	4632      	mov	r2, r6
   d56fe:	4629      	mov	r1, r5
   d5700:	f000 f814 	bl	d572c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5704:	2101      	movs	r1, #1
   d5706:	4620      	mov	r0, r4
   d5708:	f7ff face 	bl	d4ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d570c:	4632      	mov	r2, r6
   d570e:	4629      	mov	r1, r5
   d5710:	4620      	mov	r0, r4
   d5712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5716:	f000 b809 	b.w	d572c <__aeabi_atexit>
   d571a:	bf00      	nop
   d571c:	2003e730 	.word	0x2003e730
   d5720:	2003e394 	.word	0x2003e394
   d5724:	000d4c99 	.word	0x000d4c99
   d5728:	2003e740 	.word	0x2003e740

000d572c <__aeabi_atexit>:
   d572c:	460b      	mov	r3, r1
   d572e:	4601      	mov	r1, r0
   d5730:	4618      	mov	r0, r3
   d5732:	f000 b949 	b.w	d59c8 <__cxa_atexit>
	...

000d5738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5738:	4b24      	ldr	r3, [pc, #144]	; (d57cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d573a:	681a      	ldr	r2, [r3, #0]
   d573c:	07d0      	lsls	r0, r2, #31
   d573e:	bf5c      	itt	pl
   d5740:	2201      	movpl	r2, #1
   d5742:	601a      	strpl	r2, [r3, #0]
   d5744:	4b22      	ldr	r3, [pc, #136]	; (d57d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5746:	681a      	ldr	r2, [r3, #0]
   d5748:	07d1      	lsls	r1, r2, #31
   d574a:	bf5c      	itt	pl
   d574c:	2201      	movpl	r2, #1
   d574e:	601a      	strpl	r2, [r3, #0]
   d5750:	4b20      	ldr	r3, [pc, #128]	; (d57d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5752:	681a      	ldr	r2, [r3, #0]
   d5754:	07d2      	lsls	r2, r2, #31
   d5756:	bf5c      	itt	pl
   d5758:	2201      	movpl	r2, #1
   d575a:	601a      	strpl	r2, [r3, #0]
   d575c:	4b1e      	ldr	r3, [pc, #120]	; (d57d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d575e:	681a      	ldr	r2, [r3, #0]
   d5760:	07d0      	lsls	r0, r2, #31
   d5762:	bf5c      	itt	pl
   d5764:	2201      	movpl	r2, #1
   d5766:	601a      	strpl	r2, [r3, #0]
   d5768:	4b1c      	ldr	r3, [pc, #112]	; (d57dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d576a:	681a      	ldr	r2, [r3, #0]
   d576c:	07d1      	lsls	r1, r2, #31
   d576e:	bf5c      	itt	pl
   d5770:	2201      	movpl	r2, #1
   d5772:	601a      	strpl	r2, [r3, #0]
   d5774:	4b1a      	ldr	r3, [pc, #104]	; (d57e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5776:	681a      	ldr	r2, [r3, #0]
   d5778:	07d2      	lsls	r2, r2, #31
   d577a:	bf5c      	itt	pl
   d577c:	2201      	movpl	r2, #1
   d577e:	601a      	strpl	r2, [r3, #0]
   d5780:	4b18      	ldr	r3, [pc, #96]	; (d57e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5782:	681a      	ldr	r2, [r3, #0]
   d5784:	07d0      	lsls	r0, r2, #31
   d5786:	bf5c      	itt	pl
   d5788:	2201      	movpl	r2, #1
   d578a:	601a      	strpl	r2, [r3, #0]
   d578c:	4b16      	ldr	r3, [pc, #88]	; (d57e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d578e:	681a      	ldr	r2, [r3, #0]
   d5790:	07d1      	lsls	r1, r2, #31
   d5792:	bf5c      	itt	pl
   d5794:	2201      	movpl	r2, #1
   d5796:	601a      	strpl	r2, [r3, #0]
   d5798:	4b14      	ldr	r3, [pc, #80]	; (d57ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d579a:	681a      	ldr	r2, [r3, #0]
   d579c:	07d2      	lsls	r2, r2, #31
   d579e:	bf5c      	itt	pl
   d57a0:	2201      	movpl	r2, #1
   d57a2:	601a      	strpl	r2, [r3, #0]
   d57a4:	4b12      	ldr	r3, [pc, #72]	; (d57f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d57a6:	681a      	ldr	r2, [r3, #0]
   d57a8:	07d0      	lsls	r0, r2, #31
   d57aa:	bf5c      	itt	pl
   d57ac:	2201      	movpl	r2, #1
   d57ae:	601a      	strpl	r2, [r3, #0]
   d57b0:	4b10      	ldr	r3, [pc, #64]	; (d57f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d57b2:	681a      	ldr	r2, [r3, #0]
   d57b4:	07d1      	lsls	r1, r2, #31
   d57b6:	bf5c      	itt	pl
   d57b8:	2201      	movpl	r2, #1
   d57ba:	601a      	strpl	r2, [r3, #0]
   d57bc:	4b0e      	ldr	r3, [pc, #56]	; (d57f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d57be:	681a      	ldr	r2, [r3, #0]
   d57c0:	07d2      	lsls	r2, r2, #31
   d57c2:	bf5c      	itt	pl
   d57c4:	2201      	movpl	r2, #1
   d57c6:	601a      	strpl	r2, [r3, #0]
   d57c8:	4770      	bx	lr
   d57ca:	bf00      	nop
   d57cc:	2003e77c 	.word	0x2003e77c
   d57d0:	2003e778 	.word	0x2003e778
   d57d4:	2003e774 	.word	0x2003e774
   d57d8:	2003e770 	.word	0x2003e770
   d57dc:	2003e76c 	.word	0x2003e76c
   d57e0:	2003e768 	.word	0x2003e768
   d57e4:	2003e764 	.word	0x2003e764
   d57e8:	2003e760 	.word	0x2003e760
   d57ec:	2003e75c 	.word	0x2003e75c
   d57f0:	2003e758 	.word	0x2003e758
   d57f4:	2003e754 	.word	0x2003e754
   d57f8:	2003e750 	.word	0x2003e750

000d57fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d57fc:	4b18      	ldr	r3, [pc, #96]	; (d5860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d57fe:	681a      	ldr	r2, [r3, #0]
   d5800:	07d1      	lsls	r1, r2, #31
   d5802:	bf5c      	itt	pl
   d5804:	2201      	movpl	r2, #1
   d5806:	601a      	strpl	r2, [r3, #0]
   d5808:	4b16      	ldr	r3, [pc, #88]	; (d5864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d580a:	681a      	ldr	r2, [r3, #0]
   d580c:	07d2      	lsls	r2, r2, #31
   d580e:	bf5c      	itt	pl
   d5810:	2201      	movpl	r2, #1
   d5812:	601a      	strpl	r2, [r3, #0]
   d5814:	4b14      	ldr	r3, [pc, #80]	; (d5868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5816:	681a      	ldr	r2, [r3, #0]
   d5818:	07d0      	lsls	r0, r2, #31
   d581a:	bf5c      	itt	pl
   d581c:	2201      	movpl	r2, #1
   d581e:	601a      	strpl	r2, [r3, #0]
   d5820:	4b12      	ldr	r3, [pc, #72]	; (d586c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5822:	681a      	ldr	r2, [r3, #0]
   d5824:	07d1      	lsls	r1, r2, #31
   d5826:	bf5c      	itt	pl
   d5828:	2201      	movpl	r2, #1
   d582a:	601a      	strpl	r2, [r3, #0]
   d582c:	4b10      	ldr	r3, [pc, #64]	; (d5870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d582e:	681a      	ldr	r2, [r3, #0]
   d5830:	07d2      	lsls	r2, r2, #31
   d5832:	bf5c      	itt	pl
   d5834:	2201      	movpl	r2, #1
   d5836:	601a      	strpl	r2, [r3, #0]
   d5838:	4b0e      	ldr	r3, [pc, #56]	; (d5874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d583a:	681a      	ldr	r2, [r3, #0]
   d583c:	07d0      	lsls	r0, r2, #31
   d583e:	bf5c      	itt	pl
   d5840:	2201      	movpl	r2, #1
   d5842:	601a      	strpl	r2, [r3, #0]
   d5844:	4b0c      	ldr	r3, [pc, #48]	; (d5878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5846:	681a      	ldr	r2, [r3, #0]
   d5848:	07d1      	lsls	r1, r2, #31
   d584a:	bf5c      	itt	pl
   d584c:	2201      	movpl	r2, #1
   d584e:	601a      	strpl	r2, [r3, #0]
   d5850:	4b0a      	ldr	r3, [pc, #40]	; (d587c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5852:	681a      	ldr	r2, [r3, #0]
   d5854:	07d2      	lsls	r2, r2, #31
   d5856:	bf5c      	itt	pl
   d5858:	2201      	movpl	r2, #1
   d585a:	601a      	strpl	r2, [r3, #0]
   d585c:	4770      	bx	lr
   d585e:	bf00      	nop
   d5860:	2003e79c 	.word	0x2003e79c
   d5864:	2003e798 	.word	0x2003e798
   d5868:	2003e794 	.word	0x2003e794
   d586c:	2003e790 	.word	0x2003e790
   d5870:	2003e78c 	.word	0x2003e78c
   d5874:	2003e788 	.word	0x2003e788
   d5878:	2003e784 	.word	0x2003e784
   d587c:	2003e780 	.word	0x2003e780

000d5880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5880:	4b18      	ldr	r3, [pc, #96]	; (d58e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5882:	681a      	ldr	r2, [r3, #0]
   d5884:	07d1      	lsls	r1, r2, #31
   d5886:	bf5c      	itt	pl
   d5888:	2201      	movpl	r2, #1
   d588a:	601a      	strpl	r2, [r3, #0]
   d588c:	4b16      	ldr	r3, [pc, #88]	; (d58e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d588e:	681a      	ldr	r2, [r3, #0]
   d5890:	07d2      	lsls	r2, r2, #31
   d5892:	bf5c      	itt	pl
   d5894:	2201      	movpl	r2, #1
   d5896:	601a      	strpl	r2, [r3, #0]
   d5898:	4b14      	ldr	r3, [pc, #80]	; (d58ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d589a:	681a      	ldr	r2, [r3, #0]
   d589c:	07d0      	lsls	r0, r2, #31
   d589e:	bf5c      	itt	pl
   d58a0:	2201      	movpl	r2, #1
   d58a2:	601a      	strpl	r2, [r3, #0]
   d58a4:	4b12      	ldr	r3, [pc, #72]	; (d58f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d58a6:	681a      	ldr	r2, [r3, #0]
   d58a8:	07d1      	lsls	r1, r2, #31
   d58aa:	bf5c      	itt	pl
   d58ac:	2201      	movpl	r2, #1
   d58ae:	601a      	strpl	r2, [r3, #0]
   d58b0:	4b10      	ldr	r3, [pc, #64]	; (d58f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d58b2:	681a      	ldr	r2, [r3, #0]
   d58b4:	07d2      	lsls	r2, r2, #31
   d58b6:	bf5c      	itt	pl
   d58b8:	2201      	movpl	r2, #1
   d58ba:	601a      	strpl	r2, [r3, #0]
   d58bc:	4b0e      	ldr	r3, [pc, #56]	; (d58f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d58be:	681a      	ldr	r2, [r3, #0]
   d58c0:	07d0      	lsls	r0, r2, #31
   d58c2:	bf5c      	itt	pl
   d58c4:	2201      	movpl	r2, #1
   d58c6:	601a      	strpl	r2, [r3, #0]
   d58c8:	4b0c      	ldr	r3, [pc, #48]	; (d58fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d58ca:	681a      	ldr	r2, [r3, #0]
   d58cc:	07d1      	lsls	r1, r2, #31
   d58ce:	bf5c      	itt	pl
   d58d0:	2201      	movpl	r2, #1
   d58d2:	601a      	strpl	r2, [r3, #0]
   d58d4:	4b0a      	ldr	r3, [pc, #40]	; (d5900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d58d6:	681a      	ldr	r2, [r3, #0]
   d58d8:	07d2      	lsls	r2, r2, #31
   d58da:	bf5c      	itt	pl
   d58dc:	2201      	movpl	r2, #1
   d58de:	601a      	strpl	r2, [r3, #0]
   d58e0:	4770      	bx	lr
   d58e2:	bf00      	nop
   d58e4:	2003e7bc 	.word	0x2003e7bc
   d58e8:	2003e7b8 	.word	0x2003e7b8
   d58ec:	2003e7b4 	.word	0x2003e7b4
   d58f0:	2003e7b0 	.word	0x2003e7b0
   d58f4:	2003e7ac 	.word	0x2003e7ac
   d58f8:	2003e7a8 	.word	0x2003e7a8
   d58fc:	2003e7a4 	.word	0x2003e7a4
   d5900:	2003e7a0 	.word	0x2003e7a0

000d5904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5904:	4b24      	ldr	r3, [pc, #144]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5906:	681a      	ldr	r2, [r3, #0]
   d5908:	07d0      	lsls	r0, r2, #31
   d590a:	bf5c      	itt	pl
   d590c:	2201      	movpl	r2, #1
   d590e:	601a      	strpl	r2, [r3, #0]
   d5910:	4b22      	ldr	r3, [pc, #136]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5912:	681a      	ldr	r2, [r3, #0]
   d5914:	07d1      	lsls	r1, r2, #31
   d5916:	bf5c      	itt	pl
   d5918:	2201      	movpl	r2, #1
   d591a:	601a      	strpl	r2, [r3, #0]
   d591c:	4b20      	ldr	r3, [pc, #128]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d591e:	681a      	ldr	r2, [r3, #0]
   d5920:	07d2      	lsls	r2, r2, #31
   d5922:	bf5c      	itt	pl
   d5924:	2201      	movpl	r2, #1
   d5926:	601a      	strpl	r2, [r3, #0]
   d5928:	4b1e      	ldr	r3, [pc, #120]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d592a:	681a      	ldr	r2, [r3, #0]
   d592c:	07d0      	lsls	r0, r2, #31
   d592e:	bf5c      	itt	pl
   d5930:	2201      	movpl	r2, #1
   d5932:	601a      	strpl	r2, [r3, #0]
   d5934:	4b1c      	ldr	r3, [pc, #112]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5936:	681a      	ldr	r2, [r3, #0]
   d5938:	07d1      	lsls	r1, r2, #31
   d593a:	bf5c      	itt	pl
   d593c:	2201      	movpl	r2, #1
   d593e:	601a      	strpl	r2, [r3, #0]
   d5940:	4b1a      	ldr	r3, [pc, #104]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5942:	681a      	ldr	r2, [r3, #0]
   d5944:	07d2      	lsls	r2, r2, #31
   d5946:	bf5c      	itt	pl
   d5948:	2201      	movpl	r2, #1
   d594a:	601a      	strpl	r2, [r3, #0]
   d594c:	4b18      	ldr	r3, [pc, #96]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d594e:	681a      	ldr	r2, [r3, #0]
   d5950:	07d0      	lsls	r0, r2, #31
   d5952:	bf5c      	itt	pl
   d5954:	2201      	movpl	r2, #1
   d5956:	601a      	strpl	r2, [r3, #0]
   d5958:	4b16      	ldr	r3, [pc, #88]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d595a:	681a      	ldr	r2, [r3, #0]
   d595c:	07d1      	lsls	r1, r2, #31
   d595e:	bf5c      	itt	pl
   d5960:	2201      	movpl	r2, #1
   d5962:	601a      	strpl	r2, [r3, #0]
   d5964:	4b14      	ldr	r3, [pc, #80]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5966:	681a      	ldr	r2, [r3, #0]
   d5968:	07d2      	lsls	r2, r2, #31
   d596a:	bf5c      	itt	pl
   d596c:	2201      	movpl	r2, #1
   d596e:	601a      	strpl	r2, [r3, #0]
   d5970:	4b12      	ldr	r3, [pc, #72]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5972:	681a      	ldr	r2, [r3, #0]
   d5974:	07d0      	lsls	r0, r2, #31
   d5976:	bf5c      	itt	pl
   d5978:	2201      	movpl	r2, #1
   d597a:	601a      	strpl	r2, [r3, #0]
   d597c:	4b10      	ldr	r3, [pc, #64]	; (d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d597e:	681a      	ldr	r2, [r3, #0]
   d5980:	07d1      	lsls	r1, r2, #31
   d5982:	bf5c      	itt	pl
   d5984:	2201      	movpl	r2, #1
   d5986:	601a      	strpl	r2, [r3, #0]
   d5988:	4b0e      	ldr	r3, [pc, #56]	; (d59c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d598a:	681a      	ldr	r2, [r3, #0]
   d598c:	07d2      	lsls	r2, r2, #31
   d598e:	bf5c      	itt	pl
   d5990:	2201      	movpl	r2, #1
   d5992:	601a      	strpl	r2, [r3, #0]
   d5994:	4770      	bx	lr
   d5996:	bf00      	nop
   d5998:	2003e7ec 	.word	0x2003e7ec
   d599c:	2003e7e8 	.word	0x2003e7e8
   d59a0:	2003e7e4 	.word	0x2003e7e4
   d59a4:	2003e7e0 	.word	0x2003e7e0
   d59a8:	2003e7dc 	.word	0x2003e7dc
   d59ac:	2003e7d8 	.word	0x2003e7d8
   d59b0:	2003e7d4 	.word	0x2003e7d4
   d59b4:	2003e7d0 	.word	0x2003e7d0
   d59b8:	2003e7cc 	.word	0x2003e7cc
   d59bc:	2003e7c8 	.word	0x2003e7c8
   d59c0:	2003e7c4 	.word	0x2003e7c4
   d59c4:	2003e7c0 	.word	0x2003e7c0

000d59c8 <__cxa_atexit>:
   d59c8:	b510      	push	{r4, lr}
   d59ca:	4c05      	ldr	r4, [pc, #20]	; (d59e0 <__cxa_atexit+0x18>)
   d59cc:	4613      	mov	r3, r2
   d59ce:	b12c      	cbz	r4, d59dc <__cxa_atexit+0x14>
   d59d0:	460a      	mov	r2, r1
   d59d2:	4601      	mov	r1, r0
   d59d4:	2002      	movs	r0, #2
   d59d6:	f3af 8000 	nop.w
   d59da:	bd10      	pop	{r4, pc}
   d59dc:	4620      	mov	r0, r4
   d59de:	bd10      	pop	{r4, pc}
   d59e0:	00000000 	.word	0x00000000

000d59e4 <memcpy>:
   d59e4:	b510      	push	{r4, lr}
   d59e6:	1e43      	subs	r3, r0, #1
   d59e8:	440a      	add	r2, r1
   d59ea:	4291      	cmp	r1, r2
   d59ec:	d004      	beq.n	d59f8 <memcpy+0x14>
   d59ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d59f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d59f6:	e7f8      	b.n	d59ea <memcpy+0x6>
   d59f8:	bd10      	pop	{r4, pc}

000d59fa <memset>:
   d59fa:	4402      	add	r2, r0
   d59fc:	4603      	mov	r3, r0
   d59fe:	4293      	cmp	r3, r2
   d5a00:	d002      	beq.n	d5a08 <memset+0xe>
   d5a02:	f803 1b01 	strb.w	r1, [r3], #1
   d5a06:	e7fa      	b.n	d59fe <memset+0x4>
   d5a08:	4770      	bx	lr
	...

000d5a0c <srand>:
   d5a0c:	b538      	push	{r3, r4, r5, lr}
   d5a0e:	4b12      	ldr	r3, [pc, #72]	; (d5a58 <srand+0x4c>)
   d5a10:	681c      	ldr	r4, [r3, #0]
   d5a12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5a14:	4605      	mov	r5, r0
   d5a16:	b9d3      	cbnz	r3, d5a4e <srand+0x42>
   d5a18:	2018      	movs	r0, #24
   d5a1a:	f7fe fd63 	bl	d44e4 <malloc>
   d5a1e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5a22:	63a0      	str	r0, [r4, #56]	; 0x38
   d5a24:	8003      	strh	r3, [r0, #0]
   d5a26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5a2a:	8043      	strh	r3, [r0, #2]
   d5a2c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5a30:	8083      	strh	r3, [r0, #4]
   d5a32:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5a36:	80c3      	strh	r3, [r0, #6]
   d5a38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5a3c:	8103      	strh	r3, [r0, #8]
   d5a3e:	2305      	movs	r3, #5
   d5a40:	8143      	strh	r3, [r0, #10]
   d5a42:	230b      	movs	r3, #11
   d5a44:	8183      	strh	r3, [r0, #12]
   d5a46:	2201      	movs	r2, #1
   d5a48:	2300      	movs	r3, #0
   d5a4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5a50:	2200      	movs	r2, #0
   d5a52:	611d      	str	r5, [r3, #16]
   d5a54:	615a      	str	r2, [r3, #20]
   d5a56:	bd38      	pop	{r3, r4, r5, pc}
   d5a58:	2003e390 	.word	0x2003e390

000d5a5c <strlen>:
   d5a5c:	4603      	mov	r3, r0
   d5a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5a62:	2a00      	cmp	r2, #0
   d5a64:	d1fb      	bne.n	d5a5e <strlen+0x2>
   d5a66:	1a18      	subs	r0, r3, r0
   d5a68:	3801      	subs	r0, #1
   d5a6a:	4770      	bx	lr

000d5a6c <dynalib_user>:
   d5a6c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5a7c:	0000 0000 6573 4d74 646f 0065 6573 4374     ....setMode.setC
   d5a8c:	6c6f 726f 0073 7473 7261 4f74 656e 6300     olors.startOne.c
   d5a9c:	6168 6573 0000 0000                         hase....

000d5aa4 <_ZTVN5spark13CellularClassE>:
	...
   d5aac:	4573 000d 4569 000d 455f 000d 4515 000d     sE..iE.._E...E..
   d5abc:	4553 000d 4547 000d 453b 000d 4533 000d     SE..GE..;E..3E..
   d5acc:	4529 000d 451f 000d 4b29 000d               )E...E..)K..

000d5ad8 <_ZTVN5spark13EthernetClassE>:
	...
   d5ae0:	4687 000d 467d 000d 4673 000d 4669 000d     .F..}F..sF..iF..
   d5af0:	465d 000d 4651 000d 4645 000d 463d 000d     ]F..QF..EF..=F..
   d5b00:	4633 000d 4629 000d 4b29 000d               3F..)F..)K..

000d5b0c <_ZTV9IPAddress>:
	...
   d5b14:	46b3 000d 46a5 000d 46a7 000d 0066 6e6c     .F...F...F..f.ln
   d5b24:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d5b34:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d5b44:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d5b54:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d5b64:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d5b74:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d5b84:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d5b94:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d5ba4:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d5bb4:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d5bc4:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d5bd4:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d5be4:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d5bf4:	6170 696e 0063 6c61 006c 0000               panic.all...

000d5c00 <_ZTVN5spark9MeshClassE>:
	...
   d5c08:	4823 000d 4819 000d 480f 000d 4805 000d     #H...H...H...H..
   d5c18:	47f9 000d 47ed 000d 47e1 000d 47d9 000d     .G...G...G...G..
   d5c28:	47cf 000d 47c5 000d 4b29 000d 6666 3330     .G...G..)K..ff03
   d5c38:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d5c48:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d5c58:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d5c64 <_ZTVN5spark12NetworkClassE>:
	...
   d5c6c:	4ac1 000d 4acb 000d 4ad5 000d 4adf 000d     .J...J...J...J..
   d5c7c:	4ae9 000d 4af5 000d 4b01 000d 4b0d 000d     .J...J...K...K..
   d5c8c:	4b15 000d 4b1f 000d 4b29 000d               .K...K..)K..

000d5c98 <_ZTV8SPIClass>:
	...
   d5ca0:	4c99 000d 4c9b 000d 005a 2b25 3330 3a64     .L...L..Z.%+03d:
   d5cb0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d5cc0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d5cd0:	0000 0000                                   ....

000d5cd4 <_ZTV3UDP>:
	...
   d5cdc:	5421 000d 5445 000d 4e05 000d 4f2f 000d     !T..ET...N../O..
   d5cec:	4dfd 000d 4e1b 000d 4e39 000d 4e53 000d     .M...N..9N..SN..
   d5cfc:	4e77 000d 4f13 000d 5215 000d 4fb5 000d     wN...O...R...O..
   d5d0c:	5135 000d 4de5 000d 53bb 000d 50b9 000d     5Q...M...S...P..
   d5d1c:	4fed 000d 53e9 000d 4f59 000d 4df3 000d     .O...S..YO...M..
   d5d2c:	4f95 000d 4df9 000d 4e55 000d fff0 ffff     .O...M..UN......
   d5d3c:	0000 0000 4e6f 000d                         ....oN..

000d5d44 <_ZTV11USARTSerial>:
	...
   d5d4c:	546f 000d 5493 000d 549f 000d 4bc1 000d     oT...T...T...K..
   d5d5c:	547b 000d 5487 000d 5481 000d 548d 000d     {T...T...T...T..
   d5d6c:	5471 000d 5475 000d                         qT..uT..

000d5d74 <_ZTV9USBSerial>:
	...
   d5d7c:	5541 000d 5585 000d 555f 000d 4bc1 000d     AU...U.._U...K..
   d5d8c:	5559 000d 5543 000d 554b 000d 557f 000d     YU..CU..KU...U..
   d5d9c:	5553 000d 553d 000d                         SU..=U..

000d5da4 <__sf_fake_stdin>:
	...

000d5dc4 <__sf_fake_stdout>:
	...

000d5de4 <__sf_fake_stderr>:
	...
   d5e04:	0043                                        C.

000d5e06 <link_const_variable_data_end>:
	...

000d5e08 <link_constructors_location>:
   d5e08:	000d4147 	.word	0x000d4147
   d5e0c:	000d457d 	.word	0x000d457d
   d5e10:	000d4691 	.word	0x000d4691
   d5e14:	000d47b5 	.word	0x000d47b5
   d5e18:	000d4a75 	.word	0x000d4a75
   d5e1c:	000d4bad 	.word	0x000d4bad
   d5e20:	000d4c7d 	.word	0x000d4c7d
   d5e24:	000d4db9 	.word	0x000d4db9
   d5e28:	000d4dd1 	.word	0x000d4dd1
   d5e2c:	000d56e9 	.word	0x000d56e9
   d5e30:	000d5739 	.word	0x000d5739
   d5e34:	000d57fd 	.word	0x000d57fd
   d5e38:	000d5881 	.word	0x000d5881
   d5e3c:	000d5905 	.word	0x000d5905
