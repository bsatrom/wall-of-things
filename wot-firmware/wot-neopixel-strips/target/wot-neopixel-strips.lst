
/Users/bsatrom/Development/particle/wall-of-things/wot-firmware/wot-neopixel-strips/target/wot-neopixel-strips.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001ade4  2**0
                  CONTENTS
  3 .data         000000c8  2003e2e8  000dacf0  0000e2e8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000444  2003e3b0  2003e3b0  0001e3b0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000dadb8  000dadb8  0001adb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000dade0  000dade0  0001ade0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000abaf0  00000000  00000000  0001ade4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fef4  00000000  00000000  000c68d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000166f5  00000000  00000000  000d67c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002210  00000000  00000000  000ecebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003808  00000000  00000000  000ef0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031e71  00000000  00000000  000f28d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025f61  00000000  00000000  00124746  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d452d  00000000  00000000  0014a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c8b8  00000000  00000000  0021ebd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	30 a6 0d 00                                         0...

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fcb0 	bl	d8992 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fcb5 	bl	d89a8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2e8 	.word	0x2003e2e8
   d4048:	000dacf0 	.word	0x000dacf0
   d404c:	2003e3b0 	.word	0x2003e3b0
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fc25 	bl	d68a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dacec 	.word	0x000dacec
   d4080:	000dacb4 	.word	0x000dacb4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b914 	b.w	d42b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f981 	bl	d4390 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bbd7 	b.w	d6844 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b907 	b.w	d52a8 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 b905 	b.w	d52a8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b90b 	b.w	d52b8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b909 	b.w	d52b8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z8stopTonePKcS0_>:
  }
}

void stopTone(const char *event, const char *data)
{
  lightUp = false;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z8stopTonePKcS0_+0x8>)
   d40ba:	2200      	movs	r2, #0
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e3b9 	.word	0x2003e3b9

000d40c4 <_Z7setMode6String>:
  }
  strip.show();
}

int setMode(String args)
{
   d40c4:	b508      	push	{r3, lr}
  int mode = args.toInt();
   d40c6:	f001 feee 	bl	d5ea6 <_ZNK6String5toIntEv>

  animationMode = mode;
   d40ca:	4b02      	ldr	r3, [pc, #8]	; (d40d4 <_Z7setMode6String+0x10>)
   d40cc:	6018      	str	r0, [r3, #0]

  return 1;
}
   d40ce:	2001      	movs	r0, #1
   d40d0:	bd08      	pop	{r3, pc}
   d40d2:	bf00      	nop
   d40d4:	2003e3d0 	.word	0x2003e3d0

000d40d8 <_Z16playColorOfSoundPKc>:

void rainbow(uint8_t wait);
uint32_t Wheel(byte WheelPos);

void playColorOfSound(const char *data)
{
   d40d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d40da:	ed2d 8b02 	vpush	{d8}
   d40de:	b085      	sub	sp, #20
  char *ptr;
  double freq = strtod(data, &ptr);
   d40e0:	4669      	mov	r1, sp

void rainbow(uint8_t wait);
uint32_t Wheel(byte WheelPos);

void playColorOfSound(const char *data)
{
   d40e2:	4607      	mov	r7, r0
  char *ptr;
  double freq = strtod(data, &ptr);
   d40e4:	f005 faf0 	bl	d96c8 <strtod>

  useWheel = false;
   d40e8:	4b1a      	ldr	r3, [pc, #104]	; (d4154 <_Z16playColorOfSoundPKc+0x7c>)
uint32_t Wheel(byte WheelPos);

void playColorOfSound(const char *data)
{
  char *ptr;
  double freq = strtod(data, &ptr);
   d40ea:	eeb0 8a40 	vmov.f32	s16, s0
   d40ee:	eef0 8a60 	vmov.f32	s17, s1

  useWheel = false;
   d40f2:	2200      	movs	r2, #0
   d40f4:	701a      	strb	r2, [r3, #0]
   d40f6:	4d18      	ldr	r5, [pc, #96]	; (d4158 <_Z16playColorOfSoundPKc+0x80>)
   d40f8:	4e18      	ldr	r6, [pc, #96]	; (d415c <_Z16playColorOfSoundPKc+0x84>)
   d40fa:	4c19      	ldr	r4, [pc, #100]	; (d4160 <_Z16playColorOfSoundPKc+0x88>)

  if (data && freq != 0)
   d40fc:	b1a7      	cbz	r7, d4128 <_Z16playColorOfSoundPKc+0x50>
   d40fe:	2200      	movs	r2, #0
   d4100:	2300      	movs	r3, #0
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	f004 fb8b 	bl	d8820 <__aeabi_dcmpeq>
   d410a:	b968      	cbnz	r0, d4128 <_Z16playColorOfSoundPKc+0x50>
  {
    struct color noteColors;

    noteColors = mapNoteToColor(freq);
   d410c:	eeb0 0a48 	vmov.f32	s0, s16
   d4110:	eef0 0a68 	vmov.f32	s1, s17
   d4114:	a801      	add	r0, sp, #4
   d4116:	f000 fb63 	bl	d47e0 <_Z14mapNoteToColord>

    redValue = noteColors.Red;
   d411a:	9b01      	ldr	r3, [sp, #4]
   d411c:	602b      	str	r3, [r5, #0]
    greenValue = noteColors.Green;
   d411e:	9b02      	ldr	r3, [sp, #8]
   d4120:	6033      	str	r3, [r6, #0]
    blueValue = noteColors.Blue;
   d4122:	9b03      	ldr	r3, [sp, #12]
   d4124:	6023      	str	r3, [r4, #0]
   d4126:	e011      	b.n	d414c <_Z16playColorOfSoundPKc+0x74>
  }
  else
  {
    greenValue = random(1, 256);
   d4128:	f44f 7180 	mov.w	r1, #256	; 0x100
   d412c:	2001      	movs	r0, #1
   d412e:	f001 fdce 	bl	d5cce <_Z6randomii>
    redValue = random(1, 256);
   d4132:	f44f 7180 	mov.w	r1, #256	; 0x100
    greenValue = noteColors.Green;
    blueValue = noteColors.Blue;
  }
  else
  {
    greenValue = random(1, 256);
   d4136:	6030      	str	r0, [r6, #0]
    redValue = random(1, 256);
   d4138:	2001      	movs	r0, #1
   d413a:	f001 fdc8 	bl	d5cce <_Z6randomii>
    blueValue = random(1, 256);
   d413e:	f44f 7180 	mov.w	r1, #256	; 0x100
    blueValue = noteColors.Blue;
  }
  else
  {
    greenValue = random(1, 256);
    redValue = random(1, 256);
   d4142:	6028      	str	r0, [r5, #0]
    blueValue = random(1, 256);
   d4144:	2001      	movs	r0, #1
   d4146:	f001 fdc2 	bl	d5cce <_Z6randomii>
   d414a:	6020      	str	r0, [r4, #0]
  }
}
   d414c:	b005      	add	sp, #20
   d414e:	ecbd 8b02 	vpop	{d8}
   d4152:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4154:	2003e3b8 	.word	0x2003e3b8
   d4158:	2003e2e8 	.word	0x2003e2e8
   d415c:	2003e2ec 	.word	0x2003e2ec
   d4160:	2003e2f0 	.word	0x2003e2f0

000d4164 <_Z11playTrellisPKc>:

void playTrellis(const char *data)
{
   d4164:	b508      	push	{r3, lr}
  wheelPos = atoi(data);
   d4166:	f004 fbeb 	bl	d8940 <atoi>
   d416a:	4b03      	ldr	r3, [pc, #12]	; (d4178 <_Z11playTrellisPKc+0x14>)
   d416c:	6018      	str	r0, [r3, #0]

  useWheel = true;
   d416e:	4b03      	ldr	r3, [pc, #12]	; (d417c <_Z11playTrellisPKc+0x18>)
   d4170:	2201      	movs	r2, #1
   d4172:	701a      	strb	r2, [r3, #0]
   d4174:	bd08      	pop	{r3, pc}
   d4176:	bf00      	nop
   d4178:	2003e3b4 	.word	0x2003e3b4
   d417c:	2003e3b8 	.word	0x2003e3b8

000d4180 <_Z10playRandomv>:
}

void playRandom()
{
   d4180:	b508      	push	{r3, lr}
  useWheel = false;
   d4182:	4b0c      	ldr	r3, [pc, #48]	; (d41b4 <_Z10playRandomv+0x34>)
   d4184:	2200      	movs	r2, #0

  greenValue = random(1, 256);
   d4186:	f44f 7180 	mov.w	r1, #256	; 0x100
   d418a:	2001      	movs	r0, #1
  useWheel = true;
}

void playRandom()
{
  useWheel = false;
   d418c:	701a      	strb	r2, [r3, #0]

  greenValue = random(1, 256);
   d418e:	f001 fd9e 	bl	d5cce <_Z6randomii>
   d4192:	4b09      	ldr	r3, [pc, #36]	; (d41b8 <_Z10playRandomv+0x38>)
  redValue = random(1, 256);
   d4194:	f44f 7180 	mov.w	r1, #256	; 0x100

void playRandom()
{
  useWheel = false;

  greenValue = random(1, 256);
   d4198:	6018      	str	r0, [r3, #0]
  redValue = random(1, 256);
   d419a:	2001      	movs	r0, #1
   d419c:	f001 fd97 	bl	d5cce <_Z6randomii>
   d41a0:	4b06      	ldr	r3, [pc, #24]	; (d41bc <_Z10playRandomv+0x3c>)
  blueValue = random(1, 256);
   d41a2:	f44f 7180 	mov.w	r1, #256	; 0x100
void playRandom()
{
  useWheel = false;

  greenValue = random(1, 256);
  redValue = random(1, 256);
   d41a6:	6018      	str	r0, [r3, #0]
  blueValue = random(1, 256);
   d41a8:	2001      	movs	r0, #1
   d41aa:	f001 fd90 	bl	d5cce <_Z6randomii>
   d41ae:	4b04      	ldr	r3, [pc, #16]	; (d41c0 <_Z10playRandomv+0x40>)
   d41b0:	6018      	str	r0, [r3, #0]
   d41b2:	bd08      	pop	{r3, pc}
   d41b4:	2003e3b8 	.word	0x2003e3b8
   d41b8:	2003e2ec 	.word	0x2003e2ec
   d41bc:	2003e2e8 	.word	0x2003e2e8
   d41c0:	2003e2f0 	.word	0x2003e2f0

000d41c4 <_Z8playTonePKcS0_>:
}

void playTone(const char *event, const char *data)
{
  lightUp = true;
   d41c4:	4b07      	ldr	r3, [pc, #28]	; (d41e4 <_Z8playTonePKcS0_+0x20>)
   d41c6:	2201      	movs	r2, #1
   d41c8:	701a      	strb	r2, [r3, #0]

  switch (animationMode)
   d41ca:	4b07      	ldr	r3, [pc, #28]	; (d41e8 <_Z8playTonePKcS0_+0x24>)
   d41cc:	681b      	ldr	r3, [r3, #0]
   d41ce:	4293      	cmp	r3, r2
  redValue = random(1, 256);
  blueValue = random(1, 256);
}

void playTone(const char *event, const char *data)
{
   d41d0:	4608      	mov	r0, r1
  lightUp = true;

  switch (animationMode)
   d41d2:	d003      	beq.n	d41dc <_Z8playTonePKcS0_+0x18>
   d41d4:	2b02      	cmp	r3, #2
   d41d6:	d103      	bne.n	d41e0 <_Z8playTonePKcS0_+0x1c>
    break;
  case 1:
    playColorOfSound(data);
    break;
  case 2:
    playTrellis(data);
   d41d8:	f7ff bfc4 	b.w	d4164 <_Z11playTrellisPKc>
  {
  case 0:
    playRandom();
    break;
  case 1:
    playColorOfSound(data);
   d41dc:	f7ff bf7c 	b.w	d40d8 <_Z16playColorOfSoundPKc>
    break;
  case 2:
    playTrellis(data);
    break;
  default:
    playRandom();
   d41e0:	f7ff bfce 	b.w	d4180 <_Z10playRandomv>
   d41e4:	2003e3b9 	.word	0x2003e3b9
   d41e8:	2003e3d0 	.word	0x2003e3d0

000d41ec <_Z5Wheelh>:
  }
}

uint32_t Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
   d41ec:	43c0      	mvns	r0, r0
   d41ee:	b2c0      	uxtb	r0, r0

  if (WheelPos < 85)
   d41f0:	2854      	cmp	r0, #84	; 0x54
   d41f2:	d809      	bhi.n	d4208 <_Z5Wheelh+0x1c>
  {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   d41f4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   d41f8:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d41fc:	3801      	subs	r0, #1
   d41fe:	b2d2      	uxtb	r2, r2
   d4200:	2100      	movs	r1, #0
   d4202:	b2c0      	uxtb	r0, r0
   d4204:	f000 bda2 	b.w	d4d4c <_ZN17Adafruit_NeoPixel5ColorEhhh>
  }

  if (WheelPos < 170)
   d4208:	28a9      	cmp	r0, #169	; 0xa9
   d420a:	d80b      	bhi.n	d4224 <_Z5Wheelh+0x38>
  {
    WheelPos -= 85;
   d420c:	3855      	subs	r0, #85	; 0x55
   d420e:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   d4210:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
   d4214:	3a01      	subs	r2, #1
   d4216:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d421a:	b2d2      	uxtb	r2, r2
   d421c:	b2c9      	uxtb	r1, r1
   d421e:	2000      	movs	r0, #0
   d4220:	f000 bd94 	b.w	d4d4c <_ZN17Adafruit_NeoPixel5ColorEhhh>
  }

  WheelPos -= 170;
   d4224:	3056      	adds	r0, #86	; 0x56
   d4226:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   d4228:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
   d422c:	3901      	subs	r1, #1
   d422e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d4232:	2200      	movs	r2, #0
   d4234:	b2c9      	uxtb	r1, r1
   d4236:	b2c0      	uxtb	r0, r0
   d4238:	f000 bd88 	b.w	d4d4c <_ZN17Adafruit_NeoPixel5ColorEhhh>

000d423c <_Z12setAllPixelsv>:
{
  lightUp = false;
}

void setAllPixels()
{
   d423c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (int i = 0; i < strip.numPixels(); i++)
  {
    if (useWheel && lightUp)
   d423e:	4e15      	ldr	r6, [pc, #84]	; (d4294 <_Z12setAllPixelsv+0x58>)
    {
      strip.setPixelColor(i, Wheel(wheelPos));
    }
    else
    {
      strip.setPixelColor(i, redValue, greenValue, blueValue);
   d4240:	4f15      	ldr	r7, [pc, #84]	; (d4298 <_Z12setAllPixelsv+0x5c>)
  lightUp = false;
}

void setAllPixels()
{
  for (int i = 0; i < strip.numPixels(); i++)
   d4242:	2400      	movs	r4, #0
   d4244:	4815      	ldr	r0, [pc, #84]	; (d429c <_Z12setAllPixelsv+0x60>)
   d4246:	f000 fd86 	bl	d4d56 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d424a:	4284      	cmp	r4, r0
   d424c:	da1b      	bge.n	d4286 <_Z12setAllPixelsv+0x4a>
  {
    if (useWheel && lightUp)
   d424e:	7833      	ldrb	r3, [r6, #0]
   d4250:	b2a5      	uxth	r5, r4
   d4252:	b163      	cbz	r3, d426e <_Z12setAllPixelsv+0x32>
   d4254:	4b12      	ldr	r3, [pc, #72]	; (d42a0 <_Z12setAllPixelsv+0x64>)
   d4256:	781b      	ldrb	r3, [r3, #0]
   d4258:	b14b      	cbz	r3, d426e <_Z12setAllPixelsv+0x32>
    {
      strip.setPixelColor(i, Wheel(wheelPos));
   d425a:	4b12      	ldr	r3, [pc, #72]	; (d42a4 <_Z12setAllPixelsv+0x68>)
   d425c:	7818      	ldrb	r0, [r3, #0]
   d425e:	f7ff ffc5 	bl	d41ec <_Z5Wheelh>
   d4262:	4629      	mov	r1, r5
   d4264:	4602      	mov	r2, r0
   d4266:	480d      	ldr	r0, [pc, #52]	; (d429c <_Z12setAllPixelsv+0x60>)
   d4268:	f000 fd25 	bl	d4cb6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   d426c:	e009      	b.n	d4282 <_Z12setAllPixelsv+0x46>
    }
    else
    {
      strip.setPixelColor(i, redValue, greenValue, blueValue);
   d426e:	490e      	ldr	r1, [pc, #56]	; (d42a8 <_Z12setAllPixelsv+0x6c>)
   d4270:	4a0e      	ldr	r2, [pc, #56]	; (d42ac <_Z12setAllPixelsv+0x70>)
   d4272:	7809      	ldrb	r1, [r1, #0]
   d4274:	783b      	ldrb	r3, [r7, #0]
   d4276:	7812      	ldrb	r2, [r2, #0]
   d4278:	4808      	ldr	r0, [pc, #32]	; (d429c <_Z12setAllPixelsv+0x60>)
   d427a:	9100      	str	r1, [sp, #0]
   d427c:	4629      	mov	r1, r5
   d427e:	f000 fceb 	bl	d4c58 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  lightUp = false;
}

void setAllPixels()
{
  for (int i = 0; i < strip.numPixels(); i++)
   d4282:	3401      	adds	r4, #1
   d4284:	e7de      	b.n	d4244 <_Z12setAllPixelsv+0x8>
    else
    {
      strip.setPixelColor(i, redValue, greenValue, blueValue);
    }
  }
  strip.show();
   d4286:	4805      	ldr	r0, [pc, #20]	; (d429c <_Z12setAllPixelsv+0x60>)
}
   d4288:	b003      	add	sp, #12
   d428a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else
    {
      strip.setPixelColor(i, redValue, greenValue, blueValue);
    }
  }
  strip.show();
   d428e:	f000 bb41 	b.w	d4914 <_ZN17Adafruit_NeoPixel4showEv>
   d4292:	bf00      	nop
   d4294:	2003e3b8 	.word	0x2003e3b8
   d4298:	2003e2ec 	.word	0x2003e2ec
   d429c:	2003e3bc 	.word	0x2003e3bc
   d42a0:	2003e3b9 	.word	0x2003e3b9
   d42a4:	2003e3b4 	.word	0x2003e3b4
   d42a8:	2003e2f0 	.word	0x2003e2f0
   d42ac:	2003e2e8 	.word	0x2003e2e8

000d42b0 <setup>:

  return 1;
}

void setup()
{
   d42b0:	b510      	push	{r4, lr}
  Serial.begin(9600);

  strip.setBrightness(BRIGHTNESS);
   d42b2:	4c19      	ldr	r4, [pc, #100]	; (d4318 <setup+0x68>)
  return 1;
}

void setup()
{
  Serial.begin(9600);
   d42b4:	f002 fa82 	bl	d67bc <_Z16_fetch_usbserialv>
   d42b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42bc:	f002 fa72 	bl	d67a4 <_ZN9USBSerial5beginEl>

  strip.setBrightness(BRIGHTNESS);
   d42c0:	2196      	movs	r1, #150	; 0x96
   d42c2:	4620      	mov	r0, r4
   d42c4:	f000 fd49 	bl	d4d5a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
   d42c8:	4620      	mov	r0, r4
   d42ca:	f000 faec 	bl	d48a6 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
   d42ce:	4620      	mov	r0, r4
   d42d0:	f000 fb20 	bl	d4914 <_ZN17Adafruit_NeoPixel4showEv>

  redValue = 255;
   d42d4:	4b11      	ldr	r3, [pc, #68]	; (d431c <setup+0x6c>)
  setAllPixels();
  delay(1000);

  Mesh.subscribe("tone", playTone);
   d42d6:	4c12      	ldr	r4, [pc, #72]	; (d4320 <setup+0x70>)

  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();

  redValue = 255;
   d42d8:	22ff      	movs	r2, #255	; 0xff
   d42da:	601a      	str	r2, [r3, #0]
  setAllPixels();
   d42dc:	f7ff ffae 	bl	d423c <_Z12setAllPixelsv>
  delay(1000);
   d42e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42e4:	f001 f810 	bl	d5308 <delay>

  Mesh.subscribe("tone", playTone);
   d42e8:	4a0e      	ldr	r2, [pc, #56]	; (d4324 <setup+0x74>)
   d42ea:	490f      	ldr	r1, [pc, #60]	; (d4328 <setup+0x78>)
   d42ec:	4620      	mov	r0, r4
   d42ee:	f001 fb0d 	bl	d590c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("no-tone", stopTone);
   d42f2:	4a0e      	ldr	r2, [pc, #56]	; (d432c <setup+0x7c>)
   d42f4:	490e      	ldr	r1, [pc, #56]	; (d4330 <setup+0x80>)
   d42f6:	4620      	mov	r0, r4
   d42f8:	f001 fb08 	bl	d590c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d42fc:	4a0d      	ldr	r2, [pc, #52]	; (d4334 <setup+0x84>)
   d42fe:	490e      	ldr	r1, [pc, #56]	; (d4338 <setup+0x88>)
   d4300:	480e      	ldr	r0, [pc, #56]	; (d433c <setup+0x8c>)
   d4302:	f001 f823 	bl	d534c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4306:	2300      	movs	r3, #0
   d4308:	2202      	movs	r2, #2
   d430a:	490d      	ldr	r1, [pc, #52]	; (d4340 <setup+0x90>)
   d430c:	480d      	ldr	r0, [pc, #52]	; (d4344 <setup+0x94>)

  Particle.function("setMode", setMode);
  Particle.variable("mode", animationMode);
}
   d430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4312:	f000 bf61 	b.w	d51d8 <spark_variable>
   d4316:	bf00      	nop
   d4318:	2003e3bc 	.word	0x2003e3bc
   d431c:	2003e2e8 	.word	0x2003e2e8
   d4320:	2003e3ec 	.word	0x2003e3ec
   d4324:	000d41c5 	.word	0x000d41c5
   d4328:	000da647 	.word	0x000da647
   d432c:	000d40b9 	.word	0x000d40b9
   d4330:	000da644 	.word	0x000da644
   d4334:	000da64c 	.word	0x000da64c
   d4338:	000d40c5 	.word	0x000d40c5
   d433c:	000d5321 	.word	0x000d5321
   d4340:	2003e3d0 	.word	0x2003e3d0
   d4344:	000da654 	.word	0x000da654

000d4348 <_Z7rainbowh>:
    rainbow(20);
  }
}

void rainbow(uint8_t wait)
{
   d4348:	b570      	push	{r4, r5, r6, lr}
   d434a:	4606      	mov	r6, r0
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d434c:	2500      	movs	r5, #0
   d434e:	2400      	movs	r4, #0
  {
    for (i = 0; i < strip.numPixels(); i++)
   d4350:	480e      	ldr	r0, [pc, #56]	; (d438c <_Z7rainbowh+0x44>)
   d4352:	f000 fd00 	bl	d4d56 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d4356:	4284      	cmp	r4, r0
   d4358:	d20b      	bcs.n	d4372 <_Z7rainbowh+0x2a>
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
   d435a:	1960      	adds	r0, r4, r5
   d435c:	b2c0      	uxtb	r0, r0
   d435e:	f7ff ff45 	bl	d41ec <_Z5Wheelh>
   d4362:	4621      	mov	r1, r4
   d4364:	4602      	mov	r2, r0
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
  {
    for (i = 0; i < strip.numPixels(); i++)
   d4366:	3401      	adds	r4, #1
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
   d4368:	4808      	ldr	r0, [pc, #32]	; (d438c <_Z7rainbowh+0x44>)
   d436a:	f000 fca4 	bl	d4cb6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
  {
    for (i = 0; i < strip.numPixels(); i++)
   d436e:	b2a4      	uxth	r4, r4
   d4370:	e7ee      	b.n	d4350 <_Z7rainbowh+0x8>
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
   d4372:	4806      	ldr	r0, [pc, #24]	; (d438c <_Z7rainbowh+0x44>)

void rainbow(uint8_t wait)
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d4374:	3501      	adds	r5, #1
  {
    for (i = 0; i < strip.numPixels(); i++)
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
   d4376:	f000 facd 	bl	d4914 <_ZN17Adafruit_NeoPixel4showEv>

void rainbow(uint8_t wait)
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d437a:	b2ad      	uxth	r5, r5
    for (i = 0; i < strip.numPixels(); i++)
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
   d437c:	4630      	mov	r0, r6
   d437e:	f000 ffc3 	bl	d5308 <delay>

void rainbow(uint8_t wait)
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d4382:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   d4386:	d1e2      	bne.n	d434e <_Z7rainbowh+0x6>
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
   d4388:	bd70      	pop	{r4, r5, r6, pc}
   d438a:	bf00      	nop
   d438c:	2003e3bc 	.word	0x2003e3bc

000d4390 <loop>:
  Particle.variable("mode", animationMode);
}

void loop()
{
  if (animationMode != 4)
   d4390:	4b08      	ldr	r3, [pc, #32]	; (d43b4 <loop+0x24>)
   d4392:	681b      	ldr	r3, [r3, #0]
   d4394:	2b04      	cmp	r3, #4
   d4396:	d00a      	beq.n	d43ae <loop+0x1e>
  {
    if (!lightUp)
   d4398:	4b07      	ldr	r3, [pc, #28]	; (d43b8 <loop+0x28>)
   d439a:	781b      	ldrb	r3, [r3, #0]
   d439c:	b92b      	cbnz	r3, d43aa <loop+0x1a>
    {
      redValue = 0;
   d439e:	4a07      	ldr	r2, [pc, #28]	; (d43bc <loop+0x2c>)
   d43a0:	6013      	str	r3, [r2, #0]
      greenValue = 0;
   d43a2:	4a07      	ldr	r2, [pc, #28]	; (d43c0 <loop+0x30>)
   d43a4:	6013      	str	r3, [r2, #0]
      blueValue = 0;
   d43a6:	4a07      	ldr	r2, [pc, #28]	; (d43c4 <loop+0x34>)
   d43a8:	6013      	str	r3, [r2, #0]
    }

    setAllPixels();
   d43aa:	f7ff bf47 	b.w	d423c <_Z12setAllPixelsv>
  }
  else
  {
    rainbow(20);
   d43ae:	2014      	movs	r0, #20
   d43b0:	f7ff bfca 	b.w	d4348 <_Z7rainbowh>
   d43b4:	2003e3d0 	.word	0x2003e3d0
   d43b8:	2003e3b9 	.word	0x2003e3b9
   d43bc:	2003e2e8 	.word	0x2003e2e8
   d43c0:	2003e2ec 	.word	0x2003e2ec
   d43c4:	2003e2f0 	.word	0x2003e2f0

000d43c8 <_GLOBAL__sub_I_animationMode>:
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }

  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   d43c8:	b510      	push	{r4, lr}

int animationMode = 0; // 0 = RANDOM, 1 = COLOR_OF_SOUND, 2 = TRELLIS, 3 = TRELLIS_PIXEL, 4 = RAINBOW
bool useWheel = false;
int wheelPos;

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d43ca:	4c08      	ldr	r4, [pc, #32]	; (d43ec <_GLOBAL__sub_I_animationMode+0x24>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43cc:	f000 fd5e 	bl	d4e8c <HAL_Pin_Map>
   d43d0:	2302      	movs	r3, #2
   d43d2:	461a      	mov	r2, r3
   d43d4:	211e      	movs	r1, #30
   d43d6:	4620      	mov	r0, r4
   d43d8:	f000 fa8a 	bl	d48f0 <_ZN17Adafruit_NeoPixelC1Ethh>
   d43dc:	4620      	mov	r0, r4
   d43de:	4a04      	ldr	r2, [pc, #16]	; (d43f0 <_GLOBAL__sub_I_animationMode+0x28>)
   d43e0:	4904      	ldr	r1, [pc, #16]	; (d43f4 <_GLOBAL__sub_I_animationMode+0x2c>)
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }

  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   d43e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

int animationMode = 0; // 0 = RANDOM, 1 = COLOR_OF_SOUND, 2 = TRELLIS, 3 = TRELLIS_PIXEL, 4 = RAINBOW
bool useWheel = false;
int wheelPos;

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d43e6:	f002 baff 	b.w	d69e8 <__aeabi_atexit>
   d43ea:	bf00      	nop
   d43ec:	2003e3bc 	.word	0x2003e3bc
   d43f0:	2003e3b0 	.word	0x2003e3b0
   d43f4:	000d4851 	.word	0x000d4851

000d43f8 <_Z12factorAdjustidid>:

  return RGBVals;
}

double factorAdjust(int color, double factor, int intensityMax, double gamma)
{
   d43f8:	b5d0      	push	{r4, r6, r7, lr}
   d43fa:	ed2d 8b02 	vpush	{d8}
   d43fe:	eeb0 8a41 	vmov.f32	s16, s2
   d4402:	eef0 8a61 	vmov.f32	s17, s3
   d4406:	b082      	sub	sp, #8
   d4408:	ed8d 0b00 	vstr	d0, [sp]
   d440c:	460c      	mov	r4, r1
  if (color == 0.0)
   d440e:	f003 ff39 	bl	d8284 <__aeabi_i2d>
   d4412:	2200      	movs	r2, #0
   d4414:	2300      	movs	r3, #0
   d4416:	4606      	mov	r6, r0
   d4418:	460f      	mov	r7, r1
   d441a:	f004 fa01 	bl	d8820 <__aeabi_dcmpeq>
   d441e:	ed9d 0b00 	vldr	d0, [sp]
   d4422:	bb08      	cbnz	r0, d4468 <_Z12factorAdjustidid+0x70>
  {
    return 0;
  }
  else
  {
    return round(intensityMax * pow(color * factor, gamma));
   d4424:	ec53 2b10 	vmov	r2, r3, d0
   d4428:	4630      	mov	r0, r6
   d442a:	4639      	mov	r1, r7
   d442c:	f003 ff90 	bl	d8350 <__aeabi_dmul>
   d4430:	eeb0 1a48 	vmov.f32	s2, s16
   d4434:	eef0 1a68 	vmov.f32	s3, s17
   d4438:	ec41 0b10 	vmov	d0, r0, r1
   d443c:	f002 fc98 	bl	d6d70 <pow>
   d4440:	ec53 2b10 	vmov	r2, r3, d0
   d4444:	4620      	mov	r0, r4
   d4446:	e9cd 2300 	strd	r2, r3, [sp]
   d444a:	f003 ff1b 	bl	d8284 <__aeabi_i2d>
   d444e:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4452:	f003 ff7d 	bl	d8350 <__aeabi_dmul>
   d4456:	ec41 0b10 	vmov	d0, r0, r1
  }
}
   d445a:	b002      	add	sp, #8
   d445c:	ecbd 8b02 	vpop	{d8}
   d4460:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
  {
    return 0;
  }
  else
  {
    return round(intensityMax * pow(color * factor, gamma));
   d4464:	f002 bc2a 	b.w	d6cbc <round>
  }
}
   d4468:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4478 <_Z12factorAdjustidid+0x80>
   d446c:	b002      	add	sp, #8
   d446e:	ecbd 8b02 	vpop	{d8}
   d4472:	bdd0      	pop	{r4, r6, r7, pc}
   d4474:	f3af 8000 	nop.w
	...

000d4480 <_Z22getColorFromWavelengthd>:

  return noteColor;
}

color getColorFromWavelength(double wavelength)
{
   d4480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4484:	ed2d 8b02 	vpush	{d8}
   d4488:	ec55 4b10 	vmov	r4, r5, d0
   d448c:	b083      	sub	sp, #12
  int intensityMax = 255;
  double factor;

  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
   d448e:	a3b8      	add	r3, pc, #736	; (adr r3, d4770 <_Z22getColorFromWavelengthd+0x2f0>)
   d4490:	e9d3 2300 	ldrd	r2, r3, [r3]

  return noteColor;
}

color getColorFromWavelength(double wavelength)
{
   d4494:	9001      	str	r0, [sp, #4]
  int intensityMax = 255;
  double factor;

  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
   d4496:	4629      	mov	r1, r5
   d4498:	ee10 0a10 	vmov	r0, s0
   d449c:	f004 f9de 	bl	d885c <__aeabi_dcmpge>
   d44a0:	b1d8      	cbz	r0, d44da <_Z22getColorFromWavelengthd+0x5a>
   d44a2:	2200      	movs	r2, #0
   d44a4:	4bc2      	ldr	r3, [pc, #776]	; (d47b0 <_Z22getColorFromWavelengthd+0x330>)
   d44a6:	4620      	mov	r0, r4
   d44a8:	4629      	mov	r1, r5
   d44aa:	f004 f9c3 	bl	d8834 <__aeabi_dcmplt>
   d44ae:	b1a0      	cbz	r0, d44da <_Z22getColorFromWavelengthd+0x5a>
  {
    // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
    Red = -(wavelength - 440) / (440 - 350);
   d44b0:	2200      	movs	r2, #0
   d44b2:	4bbf      	ldr	r3, [pc, #764]	; (d47b0 <_Z22getColorFromWavelengthd+0x330>)
    Green = 0.0;
    Blue = 1.0;
   d44b4:	4fbf      	ldr	r7, [pc, #764]	; (d47b4 <_Z22getColorFromWavelengthd+0x334>)
  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
  {
    // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
    Red = -(wavelength - 440) / (440 - 350);
   d44b6:	4620      	mov	r0, r4
   d44b8:	4629      	mov	r1, r5
   d44ba:	f003 fd95 	bl	d7fe8 <__aeabi_dsub>
   d44be:	2200      	movs	r2, #0
   d44c0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d44c4:	4bbc      	ldr	r3, [pc, #752]	; (d47b8 <_Z22getColorFromWavelengthd+0x338>)
   d44c6:	f004 f86d 	bl	d85a4 <__aeabi_ddiv>
    Green = 0.0;
    Blue = 1.0;
   d44ca:	2600      	movs	r6, #0
  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
  {
    // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
    Red = -(wavelength - 440) / (440 - 350);
   d44cc:	4680      	mov	r8, r0
   d44ce:	4689      	mov	r9, r1
    Green = 0.0;
   d44d0:	f04f 0a00 	mov.w	sl, #0
   d44d4:	f04f 0b00 	mov.w	fp, #0
   d44d8:	e0ac      	b.n	d4634 <_Z22getColorFromWavelengthd+0x1b4>
    Blue = 1.0;
  }
  else if (wavelength >= 440 && wavelength < 490)
   d44da:	2200      	movs	r2, #0
   d44dc:	4bb4      	ldr	r3, [pc, #720]	; (d47b0 <_Z22getColorFromWavelengthd+0x330>)
   d44de:	4620      	mov	r0, r4
   d44e0:	4629      	mov	r1, r5
   d44e2:	f004 f9bb 	bl	d885c <__aeabi_dcmpge>
   d44e6:	b1b0      	cbz	r0, d4516 <_Z22getColorFromWavelengthd+0x96>
   d44e8:	a39d      	add	r3, pc, #628	; (adr r3, d4760 <_Z22getColorFromWavelengthd+0x2e0>)
   d44ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ee:	4620      	mov	r0, r4
   d44f0:	4629      	mov	r1, r5
   d44f2:	f004 f99f 	bl	d8834 <__aeabi_dcmplt>
   d44f6:	b170      	cbz	r0, d4516 <_Z22getColorFromWavelengthd+0x96>
  {
    // From Blue (0, 0, 1) to Cyan (0, 1, 1)
    Red = 0.0;
    Green = (wavelength - 440) / (490 - 440);
   d44f8:	2200      	movs	r2, #0
   d44fa:	4bad      	ldr	r3, [pc, #692]	; (d47b0 <_Z22getColorFromWavelengthd+0x330>)
    Blue = 1.0;
   d44fc:	4fad      	ldr	r7, [pc, #692]	; (d47b4 <_Z22getColorFromWavelengthd+0x334>)
  }
  else if (wavelength >= 440 && wavelength < 490)
  {
    // From Blue (0, 0, 1) to Cyan (0, 1, 1)
    Red = 0.0;
    Green = (wavelength - 440) / (490 - 440);
   d44fe:	4620      	mov	r0, r4
   d4500:	4629      	mov	r1, r5
   d4502:	f003 fd71 	bl	d7fe8 <__aeabi_dsub>
   d4506:	2200      	movs	r2, #0
   d4508:	4bac      	ldr	r3, [pc, #688]	; (d47bc <_Z22getColorFromWavelengthd+0x33c>)
   d450a:	f004 f84b 	bl	d85a4 <__aeabi_ddiv>
    Blue = 1.0;
   d450e:	2600      	movs	r6, #0
  }
  else if (wavelength >= 440 && wavelength < 490)
  {
    // From Blue (0, 0, 1) to Cyan (0, 1, 1)
    Red = 0.0;
    Green = (wavelength - 440) / (490 - 440);
   d4510:	4682      	mov	sl, r0
   d4512:	468b      	mov	fp, r1
   d4514:	e022      	b.n	d455c <_Z22getColorFromWavelengthd+0xdc>
    Blue = 1.0;
  }
  else if (wavelength >= 490 && wavelength < 510)
   d4516:	a392      	add	r3, pc, #584	; (adr r3, d4760 <_Z22getColorFromWavelengthd+0x2e0>)
   d4518:	e9d3 2300 	ldrd	r2, r3, [r3]
   d451c:	4620      	mov	r0, r4
   d451e:	4629      	mov	r1, r5
   d4520:	f004 f99c 	bl	d885c <__aeabi_dcmpge>
   d4524:	b1f8      	cbz	r0, d4566 <_Z22getColorFromWavelengthd+0xe6>
   d4526:	a390      	add	r3, pc, #576	; (adr r3, d4768 <_Z22getColorFromWavelengthd+0x2e8>)
   d4528:	e9d3 2300 	ldrd	r2, r3, [r3]
   d452c:	4620      	mov	r0, r4
   d452e:	4629      	mov	r1, r5
   d4530:	f004 f980 	bl	d8834 <__aeabi_dcmplt>
   d4534:	b1b8      	cbz	r0, d4566 <_Z22getColorFromWavelengthd+0xe6>
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
    Green = 1.0;
    Blue = -(wavelength - 510) / (510 - 490);
   d4536:	a38c      	add	r3, pc, #560	; (adr r3, d4768 <_Z22getColorFromWavelengthd+0x2e8>)
   d4538:	e9d3 2300 	ldrd	r2, r3, [r3]
   d453c:	4620      	mov	r0, r4
   d453e:	4629      	mov	r1, r5
   d4540:	f003 fd52 	bl	d7fe8 <__aeabi_dsub>
   d4544:	2200      	movs	r2, #0
   d4546:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d454a:	4b9d      	ldr	r3, [pc, #628]	; (d47c0 <_Z22getColorFromWavelengthd+0x340>)
  }
  else if (wavelength >= 490 && wavelength < 510)
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
    Green = 1.0;
   d454c:	f8df b264 	ldr.w	fp, [pc, #612]	; d47b4 <_Z22getColorFromWavelengthd+0x334>
    Blue = -(wavelength - 510) / (510 - 490);
   d4550:	f004 f828 	bl	d85a4 <__aeabi_ddiv>
  }
  else if (wavelength >= 490 && wavelength < 510)
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
    Green = 1.0;
   d4554:	f04f 0a00 	mov.w	sl, #0
    Blue = -(wavelength - 510) / (510 - 490);
   d4558:	4606      	mov	r6, r0
   d455a:	460f      	mov	r7, r1
    Blue = 1.0;
  }
  else if (wavelength >= 490 && wavelength < 510)
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
   d455c:	f04f 0800 	mov.w	r8, #0
   d4560:	f04f 0900 	mov.w	r9, #0
    Green = 1.0;
    Blue = -(wavelength - 510) / (510 - 490);
   d4564:	e05e      	b.n	d4624 <_Z22getColorFromWavelengthd+0x1a4>
  }
  else if (wavelength >= 510 && wavelength < 580)
   d4566:	a380      	add	r3, pc, #512	; (adr r3, d4768 <_Z22getColorFromWavelengthd+0x2e8>)
   d4568:	e9d3 2300 	ldrd	r2, r3, [r3]
   d456c:	4620      	mov	r0, r4
   d456e:	4629      	mov	r1, r5
   d4570:	f004 f974 	bl	d885c <__aeabi_dcmpge>
   d4574:	b1d0      	cbz	r0, d45ac <_Z22getColorFromWavelengthd+0x12c>
   d4576:	2200      	movs	r2, #0
   d4578:	4b92      	ldr	r3, [pc, #584]	; (d47c4 <_Z22getColorFromWavelengthd+0x344>)
   d457a:	4620      	mov	r0, r4
   d457c:	4629      	mov	r1, r5
   d457e:	f004 f959 	bl	d8834 <__aeabi_dcmplt>
   d4582:	b198      	cbz	r0, d45ac <_Z22getColorFromWavelengthd+0x12c>
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
   d4584:	a378      	add	r3, pc, #480	; (adr r3, d4768 <_Z22getColorFromWavelengthd+0x2e8>)
   d4586:	e9d3 2300 	ldrd	r2, r3, [r3]
   d458a:	4620      	mov	r0, r4
   d458c:	4629      	mov	r1, r5
   d458e:	f003 fd2b 	bl	d7fe8 <__aeabi_dsub>
   d4592:	2200      	movs	r2, #0
   d4594:	4b8c      	ldr	r3, [pc, #560]	; (d47c8 <_Z22getColorFromWavelengthd+0x348>)
    Green = 1.0;
   d4596:	f8df b21c 	ldr.w	fp, [pc, #540]	; d47b4 <_Z22getColorFromWavelengthd+0x334>
    Blue = -(wavelength - 510) / (510 - 490);
  }
  else if (wavelength >= 510 && wavelength < 580)
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
   d459a:	f004 f803 	bl	d85a4 <__aeabi_ddiv>
    Green = 1.0;
    Blue = 0.0;
   d459e:	2600      	movs	r6, #0
    Blue = -(wavelength - 510) / (510 - 490);
  }
  else if (wavelength >= 510 && wavelength < 580)
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
   d45a0:	4680      	mov	r8, r0
   d45a2:	4689      	mov	r9, r1
    Green = 1.0;
    Blue = 0.0;
   d45a4:	2700      	movs	r7, #0
  }
  else if (wavelength >= 510 && wavelength < 580)
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
    Green = 1.0;
   d45a6:	f04f 0a00 	mov.w	sl, #0
    Blue = 0.0;
   d45aa:	e03b      	b.n	d4624 <_Z22getColorFromWavelengthd+0x1a4>
  }
  else if (wavelength >= 580 && wavelength < 645)
   d45ac:	2200      	movs	r2, #0
   d45ae:	4b85      	ldr	r3, [pc, #532]	; (d47c4 <_Z22getColorFromWavelengthd+0x344>)
   d45b0:	4620      	mov	r0, r4
   d45b2:	4629      	mov	r1, r5
   d45b4:	f004 f952 	bl	d885c <__aeabi_dcmpge>
   d45b8:	b1b8      	cbz	r0, d45ea <_Z22getColorFromWavelengthd+0x16a>
   d45ba:	2200      	movs	r2, #0
   d45bc:	4b83      	ldr	r3, [pc, #524]	; (d47cc <_Z22getColorFromWavelengthd+0x34c>)
   d45be:	4620      	mov	r0, r4
   d45c0:	4629      	mov	r1, r5
   d45c2:	f004 f937 	bl	d8834 <__aeabi_dcmplt>
   d45c6:	b180      	cbz	r0, d45ea <_Z22getColorFromWavelengthd+0x16a>
  {
    // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
    Red = 1.0;
    Green = -(wavelength - 645) / (645 - 580);
   d45c8:	2200      	movs	r2, #0
   d45ca:	4b80      	ldr	r3, [pc, #512]	; (d47cc <_Z22getColorFromWavelengthd+0x34c>)
   d45cc:	4620      	mov	r0, r4
   d45ce:	4629      	mov	r1, r5
   d45d0:	f003 fd0a 	bl	d7fe8 <__aeabi_dsub>
   d45d4:	2200      	movs	r2, #0
   d45d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d45da:	4b7d      	ldr	r3, [pc, #500]	; (d47d0 <_Z22getColorFromWavelengthd+0x350>)
   d45dc:	f003 ffe2 	bl	d85a4 <__aeabi_ddiv>
    Blue = 0.0;
   d45e0:	2600      	movs	r6, #0
  }
  else if (wavelength >= 580 && wavelength < 645)
  {
    // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
    Red = 1.0;
    Green = -(wavelength - 645) / (645 - 580);
   d45e2:	4682      	mov	sl, r0
   d45e4:	468b      	mov	fp, r1
    Blue = 0.0;
   d45e6:	2700      	movs	r7, #0
   d45e8:	e011      	b.n	d460e <_Z22getColorFromWavelengthd+0x18e>
  }
  else if (wavelength >= 645 && wavelength <= 780)
   d45ea:	2200      	movs	r2, #0
   d45ec:	4b77      	ldr	r3, [pc, #476]	; (d47cc <_Z22getColorFromWavelengthd+0x34c>)
   d45ee:	4620      	mov	r0, r4
   d45f0:	4629      	mov	r1, r5
   d45f2:	f004 f933 	bl	d885c <__aeabi_dcmpge>
   d45f6:	b178      	cbz	r0, d4618 <_Z22getColorFromWavelengthd+0x198>
   d45f8:	2200      	movs	r2, #0
   d45fa:	4b76      	ldr	r3, [pc, #472]	; (d47d4 <_Z22getColorFromWavelengthd+0x354>)
   d45fc:	4620      	mov	r0, r4
   d45fe:	4629      	mov	r1, r5
   d4600:	f004 f922 	bl	d8848 <__aeabi_dcmple>
  {
    // Solid Red (1, 0, 0), with decreasing intensity (set below)
    Red = 1.0;
    Green = 0.0;
    Blue = 0.0;
   d4604:	2600      	movs	r6, #0
   d4606:	2700      	movs	r7, #0
  }
  else if (wavelength >= 645 && wavelength <= 780)
  {
    // Solid Red (1, 0, 0), with decreasing intensity (set below)
    Red = 1.0;
    Green = 0.0;
   d4608:	46b2      	mov	sl, r6
   d460a:	46bb      	mov	fp, r7
    // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
    Red = 1.0;
    Green = -(wavelength - 645) / (645 - 580);
    Blue = 0.0;
  }
  else if (wavelength >= 645 && wavelength <= 780)
   d460c:	b140      	cbz	r0, d4620 <_Z22getColorFromWavelengthd+0x1a0>
  {
    // Solid Red (1, 0, 0), with decreasing intensity (set below)
    Red = 1.0;
   d460e:	f04f 0800 	mov.w	r8, #0
   d4612:	f8df 91a0 	ldr.w	r9, [pc, #416]	; d47b4 <_Z22getColorFromWavelengthd+0x334>
   d4616:	e005      	b.n	d4624 <_Z22getColorFromWavelengthd+0x1a4>
  }
  else
  {
    Red = 0.0;
    Green = 0.0;
    Blue = 0.0;
   d4618:	2600      	movs	r6, #0
   d461a:	2700      	movs	r7, #0
    Blue = 0.0;
  }
  else
  {
    Red = 0.0;
    Green = 0.0;
   d461c:	46b2      	mov	sl, r6
   d461e:	46bb      	mov	fp, r7
    Green = 0.0;
    Blue = 0.0;
  }
  else
  {
    Red = 0.0;
   d4620:	46b0      	mov	r8, r6
   d4622:	46b9      	mov	r9, r7
    Blue = 0.0;
  }

  // Intensity factor goes through the range:
  // 0.1 (350-420 nm) 1.0 (420-645 nm) 1.0 (645-780 nm) 0.2
  if (wavelength >= 350 && wavelength < 420)
   d4624:	a352      	add	r3, pc, #328	; (adr r3, d4770 <_Z22getColorFromWavelengthd+0x2f0>)
   d4626:	e9d3 2300 	ldrd	r2, r3, [r3]
   d462a:	4620      	mov	r0, r4
   d462c:	4629      	mov	r1, r5
   d462e:	f004 f915 	bl	d885c <__aeabi_dcmpge>
   d4632:	b1d0      	cbz	r0, d466a <_Z22getColorFromWavelengthd+0x1ea>
   d4634:	2200      	movs	r2, #0
   d4636:	4b68      	ldr	r3, [pc, #416]	; (d47d8 <_Z22getColorFromWavelengthd+0x358>)
   d4638:	4620      	mov	r0, r4
   d463a:	4629      	mov	r1, r5
   d463c:	f004 f8fa 	bl	d8834 <__aeabi_dcmplt>
   d4640:	b198      	cbz	r0, d466a <_Z22getColorFromWavelengthd+0x1ea>
  {
    factor = 0.1 + 0.9 * (wavelength - 350) / (420 - 350);
   d4642:	a34b      	add	r3, pc, #300	; (adr r3, d4770 <_Z22getColorFromWavelengthd+0x2f0>)
   d4644:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4648:	4620      	mov	r0, r4
   d464a:	4629      	mov	r1, r5
   d464c:	f003 fccc 	bl	d7fe8 <__aeabi_dsub>
   d4650:	a349      	add	r3, pc, #292	; (adr r3, d4778 <_Z22getColorFromWavelengthd+0x2f8>)
   d4652:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4656:	f003 fe7b 	bl	d8350 <__aeabi_dmul>
   d465a:	2200      	movs	r2, #0
   d465c:	4b5a      	ldr	r3, [pc, #360]	; (d47c8 <_Z22getColorFromWavelengthd+0x348>)
   d465e:	f003 ffa1 	bl	d85a4 <__aeabi_ddiv>
   d4662:	a347      	add	r3, pc, #284	; (adr r3, d4780 <_Z22getColorFromWavelengthd+0x300>)
   d4664:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4668:	e02e      	b.n	d46c8 <_Z22getColorFromWavelengthd+0x248>
  }
  else if (wavelength >= 420 && wavelength < 645)
   d466a:	2200      	movs	r2, #0
   d466c:	4b5a      	ldr	r3, [pc, #360]	; (d47d8 <_Z22getColorFromWavelengthd+0x358>)
   d466e:	4620      	mov	r0, r4
   d4670:	4629      	mov	r1, r5
   d4672:	f004 f8f3 	bl	d885c <__aeabi_dcmpge>
   d4676:	b130      	cbz	r0, d4686 <_Z22getColorFromWavelengthd+0x206>
   d4678:	2200      	movs	r2, #0
   d467a:	4b54      	ldr	r3, [pc, #336]	; (d47cc <_Z22getColorFromWavelengthd+0x34c>)
   d467c:	4620      	mov	r0, r4
   d467e:	4629      	mov	r1, r5
   d4680:	f004 f8d8 	bl	d8834 <__aeabi_dcmplt>
   d4684:	bb28      	cbnz	r0, d46d2 <_Z22getColorFromWavelengthd+0x252>
  {
    factor = 1.0;
  }
  else if (wavelength >= 645 && wavelength <= 780)
   d4686:	2200      	movs	r2, #0
   d4688:	4b50      	ldr	r3, [pc, #320]	; (d47cc <_Z22getColorFromWavelengthd+0x34c>)
   d468a:	4620      	mov	r0, r4
   d468c:	4629      	mov	r1, r5
   d468e:	f004 f8e5 	bl	d885c <__aeabi_dcmpge>
   d4692:	b308      	cbz	r0, d46d8 <_Z22getColorFromWavelengthd+0x258>
   d4694:	2200      	movs	r2, #0
   d4696:	4b4f      	ldr	r3, [pc, #316]	; (d47d4 <_Z22getColorFromWavelengthd+0x354>)
   d4698:	4620      	mov	r0, r4
   d469a:	4629      	mov	r1, r5
   d469c:	f004 f8d4 	bl	d8848 <__aeabi_dcmple>
   d46a0:	b1d0      	cbz	r0, d46d8 <_Z22getColorFromWavelengthd+0x258>
  {
    factor = 0.2 + 0.8 * (780 - wavelength) / (780 - 645);
   d46a2:	4622      	mov	r2, r4
   d46a4:	462b      	mov	r3, r5
   d46a6:	2000      	movs	r0, #0
   d46a8:	494a      	ldr	r1, [pc, #296]	; (d47d4 <_Z22getColorFromWavelengthd+0x354>)
   d46aa:	f003 fc9d 	bl	d7fe8 <__aeabi_dsub>
   d46ae:	a336      	add	r3, pc, #216	; (adr r3, d4788 <_Z22getColorFromWavelengthd+0x308>)
   d46b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46b4:	f003 fe4c 	bl	d8350 <__aeabi_dmul>
   d46b8:	a335      	add	r3, pc, #212	; (adr r3, d4790 <_Z22getColorFromWavelengthd+0x310>)
   d46ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46be:	f003 ff71 	bl	d85a4 <__aeabi_ddiv>
   d46c2:	a335      	add	r3, pc, #212	; (adr r3, d4798 <_Z22getColorFromWavelengthd+0x318>)
   d46c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c8:	f003 fc90 	bl	d7fec <__adddf3>
   d46cc:	ec41 0b18 	vmov	d8, r0, r1
   d46d0:	e004      	b.n	d46dc <_Z22getColorFromWavelengthd+0x25c>
  {
    factor = 0.1 + 0.9 * (wavelength - 350) / (420 - 350);
  }
  else if (wavelength >= 420 && wavelength < 645)
  {
    factor = 1.0;
   d46d2:	ed9f 8b33 	vldr	d8, [pc, #204]	; d47a0 <_Z22getColorFromWavelengthd+0x320>
   d46d6:	e001      	b.n	d46dc <_Z22getColorFromWavelengthd+0x25c>
  {
    factor = 0.2 + 0.8 * (780 - wavelength) / (780 - 645);
  }
  else
  {
    factor = 0.0;
   d46d8:	ed9f 8b33 	vldr	d8, [pc, #204]	; d47a8 <_Z22getColorFromWavelengthd+0x328>
  }

  RGBVals.Red = factorAdjust(Red, factor, intensityMax, gamma);
   d46dc:	4649      	mov	r1, r9
   d46de:	4640      	mov	r0, r8
   d46e0:	f004 f8e6 	bl	d88b0 <__aeabi_d2iz>
   d46e4:	eeb0 0a48 	vmov.f32	s0, s16
   d46e8:	eef0 0a68 	vmov.f32	s1, s17
   d46ec:	ed9f 1b2c 	vldr	d1, [pc, #176]	; d47a0 <_Z22getColorFromWavelengthd+0x320>
   d46f0:	21ff      	movs	r1, #255	; 0xff
   d46f2:	f7ff fe81 	bl	d43f8 <_Z12factorAdjustidid>
   d46f6:	ec51 0b10 	vmov	r0, r1, d0
   d46fa:	f004 f901 	bl	d8900 <__aeabi_d2uiz>
   d46fe:	9b01      	ldr	r3, [sp, #4]
  RGBVals.Green = factorAdjust(Green, factor, intensityMax, gamma);
   d4700:	4659      	mov	r1, fp
  else
  {
    factor = 0.0;
  }

  RGBVals.Red = factorAdjust(Red, factor, intensityMax, gamma);
   d4702:	6018      	str	r0, [r3, #0]
  RGBVals.Green = factorAdjust(Green, factor, intensityMax, gamma);
   d4704:	4650      	mov	r0, sl
   d4706:	f004 f8d3 	bl	d88b0 <__aeabi_d2iz>
   d470a:	eeb0 0a48 	vmov.f32	s0, s16
   d470e:	eef0 0a68 	vmov.f32	s1, s17
   d4712:	ed9f 1b23 	vldr	d1, [pc, #140]	; d47a0 <_Z22getColorFromWavelengthd+0x320>
   d4716:	21ff      	movs	r1, #255	; 0xff
   d4718:	f7ff fe6e 	bl	d43f8 <_Z12factorAdjustidid>
   d471c:	ec51 0b10 	vmov	r0, r1, d0
   d4720:	f004 f8ee 	bl	d8900 <__aeabi_d2uiz>
   d4724:	9b01      	ldr	r3, [sp, #4]
  RGBVals.Blue = factorAdjust(Blue, factor, intensityMax, gamma);
   d4726:	4639      	mov	r1, r7
  {
    factor = 0.0;
  }

  RGBVals.Red = factorAdjust(Red, factor, intensityMax, gamma);
  RGBVals.Green = factorAdjust(Green, factor, intensityMax, gamma);
   d4728:	6058      	str	r0, [r3, #4]
  RGBVals.Blue = factorAdjust(Blue, factor, intensityMax, gamma);
   d472a:	4630      	mov	r0, r6
   d472c:	f004 f8c0 	bl	d88b0 <__aeabi_d2iz>
   d4730:	eeb0 0a48 	vmov.f32	s0, s16
   d4734:	eef0 0a68 	vmov.f32	s1, s17
   d4738:	ed9f 1b19 	vldr	d1, [pc, #100]	; d47a0 <_Z22getColorFromWavelengthd+0x320>
   d473c:	21ff      	movs	r1, #255	; 0xff
   d473e:	f7ff fe5b 	bl	d43f8 <_Z12factorAdjustidid>
   d4742:	ec51 0b10 	vmov	r0, r1, d0
   d4746:	f004 f8db 	bl	d8900 <__aeabi_d2uiz>
   d474a:	9b01      	ldr	r3, [sp, #4]
   d474c:	6098      	str	r0, [r3, #8]

  return RGBVals;
}
   d474e:	4618      	mov	r0, r3
   d4750:	b003      	add	sp, #12
   d4752:	ecbd 8b02 	vpop	{d8}
   d4756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d475a:	bf00      	nop
   d475c:	f3af 8000 	nop.w
   d4760:	00000000 	.word	0x00000000
   d4764:	407ea000 	.word	0x407ea000
   d4768:	00000000 	.word	0x00000000
   d476c:	407fe000 	.word	0x407fe000
   d4770:	00000000 	.word	0x00000000
   d4774:	4075e000 	.word	0x4075e000
   d4778:	cccccccd 	.word	0xcccccccd
   d477c:	3feccccc 	.word	0x3feccccc
   d4780:	9999999a 	.word	0x9999999a
   d4784:	3fb99999 	.word	0x3fb99999
   d4788:	9999999a 	.word	0x9999999a
   d478c:	3fe99999 	.word	0x3fe99999
   d4790:	00000000 	.word	0x00000000
   d4794:	4060e000 	.word	0x4060e000
   d4798:	9999999a 	.word	0x9999999a
   d479c:	3fc99999 	.word	0x3fc99999
   d47a0:	00000000 	.word	0x00000000
   d47a4:	3ff00000 	.word	0x3ff00000
	...
   d47b0:	407b8000 	.word	0x407b8000
   d47b4:	3ff00000 	.word	0x3ff00000
   d47b8:	40568000 	.word	0x40568000
   d47bc:	40490000 	.word	0x40490000
   d47c0:	40340000 	.word	0x40340000
   d47c4:	40822000 	.word	0x40822000
   d47c8:	40518000 	.word	0x40518000
   d47cc:	40842800 	.word	0x40842800
   d47d0:	40504000 	.word	0x40504000
   d47d4:	40886000 	.word	0x40886000
   d47d8:	407a4000 	.word	0x407a4000
   d47dc:	00000000 	.word	0x00000000

000d47e0 <_Z14mapNoteToColord>:
double frequency(double wavelength, double speedOfLight);
color getColorFromWavelength(double wavelength);
double factorAdjust(int color, double factor, int intensityMax, double gamma);

color mapNoteToColor(double soundFrequency)
{
   d47e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d47e4:	4b16      	ldr	r3, [pc, #88]	; (d4840 <_Z14mapNoteToColord+0x60>)
   d47e6:	e9d3 8900 	ldrd	r8, r9, [r3]
double frequency(double wavelength, double speedOfLight);
color getColorFromWavelength(double wavelength);
double factorAdjust(int color, double factor, int intensityMax, double gamma);

color mapNoteToColor(double soundFrequency)
{
   d47ea:	ec55 4b10 	vmov	r4, r5, d0
   d47ee:	4606      	mov	r6, r0
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d47f0:	4642      	mov	r2, r8
   d47f2:	464b      	mov	r3, r9
   d47f4:	4620      	mov	r0, r4
   d47f6:	4629      	mov	r1, r5
   d47f8:	f004 f81c 	bl	d8834 <__aeabi_dcmplt>
  {
    lightFrequency *= 2;
   d47fc:	4622      	mov	r2, r4
   d47fe:	462b      	mov	r3, r5
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d4800:	b130      	cbz	r0, d4810 <_Z14mapNoteToColord+0x30>
  {
    lightFrequency *= 2;
   d4802:	4620      	mov	r0, r4
   d4804:	4629      	mov	r1, r5
   d4806:	f003 fbf1 	bl	d7fec <__adddf3>
   d480a:	4604      	mov	r4, r0
   d480c:	460d      	mov	r5, r1
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d480e:	e7ef      	b.n	d47f0 <_Z14mapNoteToColord+0x10>
  }

  lightWavelength = wavelength(lightFrequency, speedOfLightVacuum);
  lightWavelengthNM = lightWavelength * 1000000000;

  noteColor = getColorFromWavelength(lightWavelengthNM);
   d4810:	490c      	ldr	r1, [pc, #48]	; (d4844 <_Z14mapNoteToColord+0x64>)
   d4812:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4816:	f003 fec5 	bl	d85a4 <__aeabi_ddiv>
   d481a:	a307      	add	r3, pc, #28	; (adr r3, d4838 <_Z14mapNoteToColord+0x58>)
   d481c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4820:	f003 fd96 	bl	d8350 <__aeabi_dmul>
   d4824:	ec41 0b10 	vmov	d0, r0, r1
   d4828:	4630      	mov	r0, r6
   d482a:	f7ff fe29 	bl	d4480 <_Z22getColorFromWavelengthd>

  return noteColor;
}
   d482e:	4630      	mov	r0, r6
   d4830:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d4834:	f3af 8000 	nop.w
   d4838:	00000000 	.word	0x00000000
   d483c:	41cdcd65 	.word	0x41cdcd65
   d4840:	2003e300 	.word	0x2003e300
   d4844:	2003e2f8 	.word	0x2003e2f8

000d4848 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4848:	f000 bb10 	b.w	d4e6c <HAL_Timer_Get_Micro_Seconds>

000d484c <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d484c:	f000 bb06 	b.w	d4e5c <HAL_Delay_Microseconds>

000d4850 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4850:	b510      	push	{r4, lr}
   d4852:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4854:	68c0      	ldr	r0, [r0, #12]
   d4856:	b108      	cbz	r0, d485c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4858:	f000 fd2e 	bl	d52b8 <free>
  if (begun) pinMode(pin, INPUT);
   d485c:	7823      	ldrb	r3, [r4, #0]
   d485e:	b11b      	cbz	r3, d4868 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4860:	2100      	movs	r1, #0
   d4862:	79e0      	ldrb	r0, [r4, #7]
   d4864:	f002 f854 	bl	d6910 <pinMode>
}
   d4868:	4620      	mov	r0, r4
   d486a:	bd10      	pop	{r4, pc}

000d486c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d486c:	b538      	push	{r3, r4, r5, lr}
   d486e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4870:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4872:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4874:	b108      	cbz	r0, d487a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4876:	f000 fd1f 	bl	d52b8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d487a:	79a3      	ldrb	r3, [r4, #6]
   d487c:	2b06      	cmp	r3, #6
   d487e:	bf0c      	ite	eq
   d4880:	2004      	moveq	r0, #4
   d4882:	2003      	movne	r0, #3
   d4884:	fb10 f005 	smulbb	r0, r0, r5
   d4888:	b280      	uxth	r0, r0
   d488a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d488c:	f000 fd0c 	bl	d52a8 <malloc>
   d4890:	60e0      	str	r0, [r4, #12]
   d4892:	b128      	cbz	r0, d48a0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4894:	88a2      	ldrh	r2, [r4, #4]
   d4896:	2100      	movs	r1, #0
   d4898:	f004 f886 	bl	d89a8 <memset>
    numLEDs = n;
   d489c:	8065      	strh	r5, [r4, #2]
   d489e:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d48a0:	80a0      	strh	r0, [r4, #4]
   d48a2:	8060      	strh	r0, [r4, #2]
   d48a4:	bd38      	pop	{r3, r4, r5, pc}

000d48a6 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d48a6:	b510      	push	{r4, lr}
   d48a8:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d48aa:	2101      	movs	r1, #1
   d48ac:	79c0      	ldrb	r0, [r0, #7]
   d48ae:	f002 f82f 	bl	d6910 <pinMode>
  digitalWrite(pin, LOW);
   d48b2:	2100      	movs	r1, #0
   d48b4:	79e0      	ldrb	r0, [r4, #7]
   d48b6:	f002 f83c 	bl	d6932 <digitalWrite>
  begun = true;
   d48ba:	2301      	movs	r3, #1
   d48bc:	7023      	strb	r3, [r4, #0]
   d48be:	bd10      	pop	{r4, pc}

000d48c0 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d48c0:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d48c2:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d48c4:	4605      	mov	r5, r0
   d48c6:	460c      	mov	r4, r1
    if (begun) {
   d48c8:	b11b      	cbz	r3, d48d2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d48ca:	2100      	movs	r1, #0
   d48cc:	79c0      	ldrb	r0, [r0, #7]
   d48ce:	f002 f81f 	bl	d6910 <pinMode>
    }
    pin = p;
    if (begun) {
   d48d2:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d48d4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d48d6:	b153      	cbz	r3, d48ee <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d48d8:	b2a4      	uxth	r4, r4
   d48da:	4620      	mov	r0, r4
   d48dc:	2101      	movs	r1, #1
   d48de:	f002 f817 	bl	d6910 <pinMode>
        digitalWrite(p, LOW);
   d48e2:	4620      	mov	r0, r4
   d48e4:	2100      	movs	r1, #0
    }
}
   d48e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d48ea:	f002 b822 	b.w	d6932 <digitalWrite>
   d48ee:	bd38      	pop	{r3, r4, r5, pc}

000d48f0 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d48f0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d48f2:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d48f4:	4604      	mov	r4, r0
   d48f6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d48f8:	7183      	strb	r3, [r0, #6]
   d48fa:	7005      	strb	r5, [r0, #0]
   d48fc:	7205      	strb	r5, [r0, #8]
   d48fe:	60c5      	str	r5, [r0, #12]
   d4900:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4902:	f7ff ffb3 	bl	d486c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4906:	4620      	mov	r0, r4
   d4908:	4631      	mov	r1, r6
   d490a:	f7ff ffd9 	bl	d48c0 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d490e:	4620      	mov	r0, r4
   d4910:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4914 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4914:	68c3      	ldr	r3, [r0, #12]
   d4916:	2b00      	cmp	r3, #0
   d4918:	f000 818b 	beq.w	d4c32 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4920:	7983      	ldrb	r3, [r0, #6]
   d4922:	3b02      	subs	r3, #2
   d4924:	b2db      	uxtb	r3, r3
   d4926:	2b04      	cmp	r3, #4
   d4928:	bf9c      	itt	ls
   d492a:	4ac4      	ldrls	r2, [pc, #784]	; (d4c3c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d492c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4930:	b087      	sub	sp, #28
   d4932:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4934:	bf88      	it	hi
   d4936:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4938:	f7ff ff86 	bl	d4848 <micros>
   d493c:	692b      	ldr	r3, [r5, #16]
   d493e:	1ac0      	subs	r0, r0, r3
   d4940:	42a0      	cmp	r0, r4
   d4942:	d3f9      	bcc.n	d4938 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4944:	4abe      	ldr	r2, [pc, #760]	; (d4c40 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4946:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4948:	ca07      	ldmia	r2, {r0, r1, r2}
   d494a:	ac06      	add	r4, sp, #24
   d494c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4950:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4952:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4954:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4958:	3304      	adds	r3, #4
   d495a:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d495c:	b922      	cbnz	r2, d4968 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d495e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4962:	2b00      	cmp	r3, #0
   d4964:	f2c0 8155 	blt.w	d4c12 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4968:	9c04      	ldr	r4, [sp, #16]
   d496a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d496e:	b923      	cbnz	r3, d497a <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4970:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4974:	2b00      	cmp	r3, #0
   d4976:	f2c0 813c 	blt.w	d4bf2 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d497a:	9c05      	ldr	r4, [sp, #20]
   d497c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4980:	b91b      	cbnz	r3, d498a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4982:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4986:	2b00      	cmp	r3, #0
   d4988:	db6e      	blt.n	d4a68 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d498a:	4bae      	ldr	r3, [pc, #696]	; (d4c44 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d498c:	79ea      	ldrb	r2, [r5, #7]
   d498e:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4990:	4cad      	ldr	r4, [pc, #692]	; (d4c48 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4992:	49ae      	ldr	r1, [pc, #696]	; (d4c4c <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4994:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4996:	0112      	lsls	r2, r2, #4
   d4998:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d499a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d499e:	785b      	ldrb	r3, [r3, #1]
   d49a0:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d49a2:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d49a4:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d49a6:	f003 031f 	and.w	r3, r3, #31
   d49aa:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d49ae:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d49b0:	433a      	orrs	r2, r7
   d49b2:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d49b4:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d49b6:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d49b8:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d49bc:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d49c0:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d49c2:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d49c4:	2800      	cmp	r0, #0
   d49c6:	d044      	beq.n	d4a52 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d49c8:	46cc      	mov	ip, r9
   d49ca:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d49cc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d49d0:	f81c eb01 	ldrb.w	lr, [ip], #1
   d49d4:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d49d6:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d49d8:	6863      	ldr	r3, [r4, #4]
   d49da:	1a9b      	subs	r3, r3, r2
   d49dc:	2b46      	cmp	r3, #70	; 0x46
   d49de:	d9fb      	bls.n	d49d8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d49e0:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d49e4:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d49e8:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d49ec:	ea43 0307 	orr.w	r3, r3, r7
   d49f0:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d49f4:	d02f      	beq.n	d4a56 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d49f6:	6863      	ldr	r3, [r4, #4]
   d49f8:	1a9b      	subs	r3, r3, r2
   d49fa:	2b28      	cmp	r3, #40	; 0x28
   d49fc:	d9fb      	bls.n	d49f6 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d49fe:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4a02:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4a04:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4a08:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4a0c:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4a10:	d1e2      	bne.n	d49d8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4a12:	ebc9 030c 	rsb	r3, r9, ip
   d4a16:	88a8      	ldrh	r0, [r5, #4]
   d4a18:	b29b      	uxth	r3, r3
   d4a1a:	4298      	cmp	r0, r3
   d4a1c:	d8d8      	bhi.n	d49d0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4a1e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4a22:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4a26:	6863      	ldr	r3, [r4, #4]
   d4a28:	1a9b      	subs	r3, r3, r2
   d4a2a:	2b46      	cmp	r3, #70	; 0x46
   d4a2c:	d9fb      	bls.n	d4a26 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4a2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4a32:	ebca 0a03 	rsb	sl, sl, r3
   d4a36:	4582      	cmp	sl, r0
   d4a38:	f0c0 80d5 	bcc.w	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4a3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4a40:	f7ff ff04 	bl	d484c <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4a44:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4a46:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4a4a:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4a4e:	2800      	cmp	r0, #0
   d4a50:	d1ba      	bne.n	d49c8 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4a52:	4602      	mov	r2, r0
   d4a54:	e7e7      	b.n	d4a26 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4a56:	6863      	ldr	r3, [r4, #4]
   d4a58:	1a9b      	subs	r3, r3, r2
   d4a5a:	2b11      	cmp	r3, #17
   d4a5c:	d8cf      	bhi.n	d49fe <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4a5e:	6863      	ldr	r3, [r4, #4]
   d4a60:	1a9b      	subs	r3, r3, r2
   d4a62:	2b11      	cmp	r3, #17
   d4a64:	d9f7      	bls.n	d4a56 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4a66:	e7ca      	b.n	d49fe <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a68:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a6c:	2b00      	cmp	r3, #0
   d4a6e:	da8c      	bge.n	d498a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a70:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a74:	2b00      	cmp	r3, #0
   d4a76:	da88      	bge.n	d498a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4a78:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a7c:	2b00      	cmp	r3, #0
   d4a7e:	da84      	bge.n	d498a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4a80:	9801      	ldr	r0, [sp, #4]
   d4a82:	f000 fc11 	bl	d52a8 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4a86:	2800      	cmp	r0, #0
   d4a88:	f43f af7f 	beq.w	d498a <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4a8c:	88ab      	ldrh	r3, [r5, #4]
   d4a8e:	2b00      	cmp	r3, #0
   d4a90:	f000 80d0 	beq.w	d4c34 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4a94:	2700      	movs	r7, #0
   d4a96:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4a98:	4e6d      	ldr	r6, [pc, #436]	; (d4c50 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4a9a:	496e      	ldr	r1, [pc, #440]	; (d4c54 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4a9c:	e000      	b.n	d4aa0 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4a9e:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4aa0:	68ea      	ldr	r2, [r5, #12]
   d4aa2:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4aa4:	f103 0e01 	add.w	lr, r3, #1
   d4aa8:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4aac:	bf14      	ite	ne
   d4aae:	46b0      	movne	r8, r6
   d4ab0:	4688      	moveq	r8, r1
   d4ab2:	fa1f fe8e 	uxth.w	lr, lr
   d4ab6:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4aba:	bf14      	ite	ne
   d4abc:	46b1      	movne	r9, r6
   d4abe:	4689      	moveq	r9, r1
   d4ac0:	f012 0f20 	tst.w	r2, #32
   d4ac4:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4ac8:	bf18      	it	ne
   d4aca:	46b2      	movne	sl, r6
   d4acc:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4ad0:	bf08      	it	eq
   d4ad2:	468a      	moveq	sl, r1
   d4ad4:	f103 0802 	add.w	r8, r3, #2
   d4ad8:	f012 0f10 	tst.w	r2, #16
   d4adc:	f103 0e03 	add.w	lr, r3, #3
   d4ae0:	bf14      	ite	ne
   d4ae2:	46b4      	movne	ip, r6
   d4ae4:	468c      	moveq	ip, r1
   d4ae6:	fa1f f888 	uxth.w	r8, r8
   d4aea:	f012 0f08 	tst.w	r2, #8
   d4aee:	fa1f fe8e 	uxth.w	lr, lr
   d4af2:	f103 0904 	add.w	r9, r3, #4
   d4af6:	fa1f f989 	uxth.w	r9, r9
   d4afa:	bf14      	ite	ne
   d4afc:	46b3      	movne	fp, r6
   d4afe:	468b      	moveq	fp, r1
   d4b00:	f012 0f04 	tst.w	r2, #4
   d4b04:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4b08:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4b0c:	bf14      	ite	ne
   d4b0e:	46b2      	movne	sl, r6
   d4b10:	468a      	moveq	sl, r1
   d4b12:	f103 0805 	add.w	r8, r3, #5
   d4b16:	f012 0f02 	tst.w	r2, #2
   d4b1a:	f103 0c06 	add.w	ip, r3, #6
   d4b1e:	f103 0e07 	add.w	lr, r3, #7
   d4b22:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4b26:	fa1f fe8e 	uxth.w	lr, lr
   d4b2a:	bf14      	ite	ne
   d4b2c:	46b1      	movne	r9, r6
   d4b2e:	4689      	moveq	r9, r1
   d4b30:	fa1f f888 	uxth.w	r8, r8
   d4b34:	f012 0f01 	tst.w	r2, #1
   d4b38:	fa1f fc8c 	uxth.w	ip, ip
   d4b3c:	bf14      	ite	ne
   d4b3e:	4632      	movne	r2, r6
   d4b40:	460a      	moveq	r2, r1
   d4b42:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4b46:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4b4a:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4b4e:	3701      	adds	r7, #1
   d4b50:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4b54:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4b56:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4b5a:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4b5c:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4b5e:	d89e      	bhi.n	d4a9e <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4b60:	f103 0209 	add.w	r2, r3, #9
   d4b64:	330a      	adds	r3, #10
   d4b66:	b292      	uxth	r2, r2
   d4b68:	b29b      	uxth	r3, r3
   d4b6a:	0052      	lsls	r2, r2, #1
   d4b6c:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4b6e:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4b70:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4b74:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4b76:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4b78:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4b7a:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4b7c:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4b7e:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b82:	4e30      	ldr	r6, [pc, #192]	; (d4c44 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4b84:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4b88:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4b8c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4b90:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4b94:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4b98:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4b9c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4ba0:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ba4:	79eb      	ldrb	r3, [r5, #7]
   d4ba6:	6831      	ldr	r1, [r6, #0]
   d4ba8:	011b      	lsls	r3, r3, #4
   d4baa:	18ce      	adds	r6, r1, r3
   d4bac:	5cc9      	ldrb	r1, [r1, r3]
   d4bae:	7873      	ldrb	r3, [r6, #1]
   d4bb0:	f003 031f 	and.w	r3, r3, #31
   d4bb4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4bb8:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4bba:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4bbe:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4bc2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4bc6:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4bc8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4bcc:	2b00      	cmp	r3, #0
   d4bce:	d0fb      	beq.n	d4bc8 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4bd0:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4bd6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4bda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4bde:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4be2:	f000 fb69 	bl	d52b8 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4be6:	f7ff fe2f 	bl	d4848 <micros>
   d4bea:	6128      	str	r0, [r5, #16]
}
   d4bec:	b007      	add	sp, #28
   d4bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bf2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bf6:	2b00      	cmp	r3, #0
   d4bf8:	f6bf aebf 	bge.w	d497a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bfc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c00:	2b00      	cmp	r3, #0
   d4c02:	f6bf aeba 	bge.w	d497a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4c06:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c0a:	2b00      	cmp	r3, #0
   d4c0c:	f6bf aeb5 	bge.w	d497a <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4c10:	e736      	b.n	d4a80 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c12:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c16:	2b00      	cmp	r3, #0
   d4c18:	f6bf aea6 	bge.w	d4968 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c1c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c20:	2b00      	cmp	r3, #0
   d4c22:	f6bf aea1 	bge.w	d4968 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4c26:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c2a:	2b00      	cmp	r3, #0
   d4c2c:	f6bf ae9c 	bge.w	d4968 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4c30:	e726      	b.n	d4a80 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4c32:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4c34:	2304      	movs	r3, #4
   d4c36:	2202      	movs	r2, #2
   d4c38:	e799      	b.n	d4b6e <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4c3a:	bf00      	nop
   d4c3c:	000da668 	.word	0x000da668
   d4c40:	000da65c 	.word	0x000da65c
   d4c44:	2003e3d4 	.word	0x2003e3d4
   d4c48:	e000edf0 	.word	0xe000edf0
   d4c4c:	e0001000 	.word	0xe0001000
   d4c50:	ffff800d 	.word	0xffff800d
   d4c54:	ffff8006 	.word	0xffff8006

000d4c58 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4c58:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4c5a:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4c5c:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d4c60:	428c      	cmp	r4, r1
   d4c62:	d927      	bls.n	d4cb4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d4c64:	7a04      	ldrb	r4, [r0, #8]
   d4c66:	b144      	cbz	r4, d4c7a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d4c68:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d4c6c:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d4c70:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4c74:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d4c76:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d4c78:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d4c7a:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d4c7c:	68c6      	ldr	r6, [r0, #12]
   d4c7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4c82:	2f08      	cmp	r7, #8
   d4c84:	eb06 0401 	add.w	r4, r6, r1
   d4c88:	d811      	bhi.n	d4cae <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d4c8a:	2001      	movs	r0, #1
   d4c8c:	40b8      	lsls	r0, r7
   d4c8e:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d4c92:	d108      	bne.n	d4ca6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d4c94:	06c0      	lsls	r0, r0, #27
   d4c96:	d50a      	bpl.n	d4cae <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4c98:	2aff      	cmp	r2, #255	; 0xff
   d4c9a:	bf08      	it	eq
   d4c9c:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d4c9e:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d4ca0:	7065      	strb	r5, [r4, #1]
          *p = g;
   d4ca2:	70a3      	strb	r3, [r4, #2]
   d4ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4ca6:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d4ca8:	7062      	strb	r2, [r4, #1]
          *p = b;
   d4caa:	70a5      	strb	r5, [r4, #2]
   d4cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4cae:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d4cb0:	7063      	strb	r3, [r4, #1]
          *p = b;
   d4cb2:	70a5      	strb	r5, [r4, #2]
   d4cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cb6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4cb6:	8843      	ldrh	r3, [r0, #2]
   d4cb8:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d4cba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4cbc:	d945      	bls.n	d4d4a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4cbe:	7a05      	ldrb	r5, [r0, #8]
   d4cc0:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4cc4:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d4cc8:	b2d6      	uxtb	r6, r2
   d4cca:	b145      	cbz	r5, d4cde <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d4ccc:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4cce:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d4cd0:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4cd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4cd6:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d4cda:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4cde:	f890 c006 	ldrb.w	ip, [r0, #6]
   d4ce2:	68c7      	ldr	r7, [r0, #12]
   d4ce4:	f1bc 0f06 	cmp.w	ip, #6
   d4ce8:	bf0c      	ite	eq
   d4cea:	2504      	moveq	r5, #4
   d4cec:	2503      	movne	r5, #3
   d4cee:	4369      	muls	r1, r5
   d4cf0:	f1bc 0f08 	cmp.w	ip, #8
   d4cf4:	eb07 0501 	add.w	r5, r7, r1
   d4cf8:	d824      	bhi.n	d4d44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d4cfa:	f04f 0e01 	mov.w	lr, #1
   d4cfe:	fa0e fe0c 	lsl.w	lr, lr, ip
   d4d02:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d4d06:	d10c      	bne.n	d4d22 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d4d08:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d4d0c:	d10d      	bne.n	d4d2a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d4d0e:	f01e 0f10 	tst.w	lr, #16
   d4d12:	d017      	beq.n	d4d44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4d14:	2bff      	cmp	r3, #255	; 0xff
   d4d16:	bf08      	it	eq
   d4d18:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d4d1a:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4d1c:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4d1e:	70ac      	strb	r4, [r5, #2]
        } break;
   d4d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4d22:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4d24:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4d26:	70ae      	strb	r6, [r5, #2]
        } break;
   d4d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d4d2a:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4d2c:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d4d2e:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4d30:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4d32:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4d34:	b90b      	cbnz	r3, d4d3a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4d36:	b2d2      	uxtb	r2, r2
   d4d38:	e002      	b.n	d4d40 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4d3a:	435a      	muls	r2, r3
   d4d3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d4d40:	70ea      	strb	r2, [r5, #3]
        } break;
   d4d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4d44:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4d46:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4d48:	70ae      	strb	r6, [r5, #2]
   d4d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d4c <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d4d4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d4d50:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d4d54:	4770      	bx	lr

000d4d56 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
   d4d56:	8840      	ldrh	r0, [r0, #2]
   d4d58:	4770      	bx	lr

000d4d5a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4d5a:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d4d5c:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4d5e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d4d60:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d4d62:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d4d64:	d01e      	beq.n	d4da4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d4d66:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4d68:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4d6c:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4d6e:	d00c      	beq.n	d4d8a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d4d70:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d4d72:	bf1f      	itttt	ne
   d4d74:	0211      	lslne	r1, r2, #8
   d4d76:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   d4d7a:	fb91 f3f3 	sdivne	r3, r1, r3
   d4d7e:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d4d80:	bf04      	itt	eq
   d4d82:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d4d86:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4d8a:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4d8c:	1b29      	subs	r1, r5, r4
   d4d8e:	8886      	ldrh	r6, [r0, #4]
   d4d90:	b289      	uxth	r1, r1
   d4d92:	428e      	cmp	r6, r1
   d4d94:	d905      	bls.n	d4da2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d4d96:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d4d98:	4359      	muls	r1, r3
   d4d9a:	1209      	asrs	r1, r1, #8
   d4d9c:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4da0:	e7f4      	b.n	d4d8c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d4da2:	7202      	strb	r2, [r0, #8]
   d4da4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4da8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4da8:	b508      	push	{r3, lr}
   d4daa:	f000 f86f 	bl	d4e8c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4dae:	f000 f86d 	bl	d4e8c <HAL_Pin_Map>
   d4db2:	4b01      	ldr	r3, [pc, #4]	; (d4db8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4db4:	6018      	str	r0, [r3, #0]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	2003e3d4 	.word	0x2003e3d4

000d4dbc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <os_thread_create+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	685b      	ldr	r3, [r3, #4]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030248 	.word	0x00030248

000d4dcc <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <os_thread_is_current+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	689b      	ldr	r3, [r3, #8]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030248 	.word	0x00030248

000d4ddc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <os_thread_join+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	691b      	ldr	r3, [r3, #16]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030248 	.word	0x00030248

000d4dec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <os_thread_cleanup+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	695b      	ldr	r3, [r3, #20]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030248 	.word	0x00030248

000d4dfc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <os_mutex_create+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030248 	.word	0x00030248

000d4e0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <os_mutex_recursive_create+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030248 	.word	0x00030248

000d4e1c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <os_mutex_recursive_lock+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030248 	.word	0x00030248

000d4e2c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <os_mutex_recursive_unlock+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030248 	.word	0x00030248

000d4e3c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <os_thread_exit+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030248 	.word	0x00030248

000d4e4c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_Delay_Milliseconds+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	689b      	ldr	r3, [r3, #8]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030218 	.word	0x00030218

000d4e5c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_Delay_Microseconds+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	68db      	ldr	r3, [r3, #12]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030218 	.word	0x00030218

000d4e6c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	691b      	ldr	r3, [r3, #16]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030218 	.word	0x00030218

000d4e7c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	695b      	ldr	r3, [r3, #20]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030218 	.word	0x00030218

000d4e8c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_Pin_Map+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	681b      	ldr	r3, [r3, #0]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	0003022c 	.word	0x0003022c

000d4e9c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_Pin_Mode+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	689b      	ldr	r3, [r3, #8]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	0003022c 	.word	0x0003022c

000d4eac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <HAL_Get_Pin_Mode+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	68db      	ldr	r3, [r3, #12]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	0003022c 	.word	0x0003022c

000d4ebc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <HAL_GPIO_Write+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	691b      	ldr	r3, [r3, #16]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	0003022c 	.word	0x0003022c

000d4ecc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_I2C_Write_Data+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6a1b      	ldr	r3, [r3, #32]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030228 	.word	0x00030228

000d4edc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_I2C_Available_Data+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030228 	.word	0x00030228

000d4eec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <HAL_I2C_Read_Data+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030228 	.word	0x00030228

000d4efc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <HAL_I2C_Peek_Data+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030228 	.word	0x00030228

000d4f0c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <HAL_I2C_Flush_Data+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030228 	.word	0x00030228

000d4f1c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <HAL_I2C_Is_Enabled+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030228 	.word	0x00030228

000d4f2c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <HAL_I2C_Init+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030228 	.word	0x00030228

000d4f3c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <if_name_to_index+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	691b      	ldr	r3, [r3, #16]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003026c 	.word	0x0003026c

000d4f4c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <if_index_to_name+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	695b      	ldr	r3, [r3, #20]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003026c 	.word	0x0003026c

000d4f5c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <if_get_by_index+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	699b      	ldr	r3, [r3, #24]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003026c 	.word	0x0003026c

000d4f6c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <if_get_addrs+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003026c 	.word	0x0003026c

000d4f7c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <if_free_if_addrs+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	0003026c 	.word	0x0003026c

000d4f8c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <inet_inet_ntop+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	695b      	ldr	r3, [r3, #20]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030264 	.word	0x00030264

000d4f9c <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <inet_inet_pton+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	699b      	ldr	r3, [r3, #24]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030264 	.word	0x00030264

000d4fac <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <inet_htonl+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	6a1b      	ldr	r3, [r3, #32]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030264 	.word	0x00030264

000d4fbc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <inet_ntohs+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030264 	.word	0x00030264

000d4fcc <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <inet_htons+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030264 	.word	0x00030264

000d4fdc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <netdb_freeaddrinfo+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	689b      	ldr	r3, [r3, #8]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030268 	.word	0x00030268

000d4fec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <netdb_getaddrinfo+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	68db      	ldr	r3, [r3, #12]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030268 	.word	0x00030268

000d4ffc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <sock_bind+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	685b      	ldr	r3, [r3, #4]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030238 	.word	0x00030238

000d500c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <sock_setsockopt+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	699b      	ldr	r3, [r3, #24]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030238 	.word	0x00030238

000d501c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <sock_close+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	69db      	ldr	r3, [r3, #28]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030238 	.word	0x00030238

000d502c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <sock_recvfrom+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030238 	.word	0x00030238

000d503c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <sock_sendto+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030238 	.word	0x00030238

000d504c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <sock_socket+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030238 	.word	0x00030238

000d505c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_SPI_Init+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	69db      	ldr	r3, [r3, #28]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030230 	.word	0x00030230

000d506c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_SPI_Is_Enabled+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6a1b      	ldr	r3, [r3, #32]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030230 	.word	0x00030230

000d507c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_USART_Init+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	681b      	ldr	r3, [r3, #0]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003023c 	.word	0x0003023c

000d508c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_USART_Write_Data+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	68db      	ldr	r3, [r3, #12]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003023c 	.word	0x0003023c

000d509c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_USART_Available_Data+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	691b      	ldr	r3, [r3, #16]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003023c 	.word	0x0003023c

000d50ac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <HAL_USART_Read_Data+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	695b      	ldr	r3, [r3, #20]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003023c 	.word	0x0003023c

000d50bc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <HAL_USART_Peek_Data+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	699b      	ldr	r3, [r3, #24]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003023c 	.word	0x0003023c

000d50cc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <HAL_USART_Flush_Data+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	69db      	ldr	r3, [r3, #28]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	0003023c 	.word	0x0003023c

000d50dc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <HAL_USART_Is_Enabled+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6a1b      	ldr	r3, [r3, #32]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	0003023c 	.word	0x0003023c

000d50ec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <HAL_USART_Available_Data_For_Write+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	0003023c 	.word	0x0003023c

000d50fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <HAL_USB_USART_Init+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	681b      	ldr	r3, [r3, #0]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	0003024c 	.word	0x0003024c

000d510c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <HAL_USB_USART_Begin+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	685b      	ldr	r3, [r3, #4]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	0003024c 	.word	0x0003024c

000d511c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <HAL_USB_USART_Available_Data+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	691b      	ldr	r3, [r3, #16]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003024c 	.word	0x0003024c

000d512c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	695b      	ldr	r3, [r3, #20]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003024c 	.word	0x0003024c

000d513c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <HAL_USB_USART_Receive_Data+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	699b      	ldr	r3, [r3, #24]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003024c 	.word	0x0003024c

000d514c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <HAL_USB_USART_Send_Data+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	69db      	ldr	r3, [r3, #28]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003024c 	.word	0x0003024c

000d515c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <HAL_USB_USART_Flush_Data+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6a1b      	ldr	r3, [r3, #32]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003024c 	.word	0x0003024c

000d516c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <log_message+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030260 	.word	0x00030260

000d517c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <set_system_mode+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	685b      	ldr	r3, [r3, #4]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030220 	.word	0x00030220

000d518c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <system_delay_ms+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	695b      	ldr	r3, [r3, #20]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030220 	.word	0x00030220

000d519c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b03      	ldr	r3, [pc, #12]	; (d51ac <system_ctrl_set_app_request_handler+0x10>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d51a6:	9301      	str	r3, [sp, #4]
   d51a8:	bd08      	pop	{r3, pc}
   d51aa:	0000      	.short	0x0000
   d51ac:	00030220 	.word	0x00030220

000d51b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b03      	ldr	r3, [pc, #12]	; (d51c0 <system_ctrl_set_result+0x10>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d51ba:	9301      	str	r3, [sp, #4]
   d51bc:	bd08      	pop	{r3, pc}
   d51be:	0000      	.short	0x0000
   d51c0:	00030220 	.word	0x00030220

000d51c4 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int32_t(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b03      	ldr	r3, [pc, #12]	; (d51d4 <system_invoke_event_handler+0x10>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d51ce:	9301      	str	r3, [sp, #4]
   d51d0:	bd08      	pop	{r3, pc}
   d51d2:	0000      	.short	0x0000
   d51d4:	00030220 	.word	0x00030220

000d51d8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <spark_variable+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	681b      	ldr	r3, [r3, #0]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	00030244 	.word	0x00030244

000d51e8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <spark_function+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	685b      	ldr	r3, [r3, #4]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	00030244 	.word	0x00030244

000d51f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <spark_set_random_seed_from_cloud_handler+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030244 	.word	0x00030244

000d5208 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <network_connect+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	685b      	ldr	r3, [r3, #4]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030240 	.word	0x00030240

000d5218 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <network_connecting+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	689b      	ldr	r3, [r3, #8]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030240 	.word	0x00030240

000d5228 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <network_disconnect+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	68db      	ldr	r3, [r3, #12]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030240 	.word	0x00030240

000d5238 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <network_ready+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	691b      	ldr	r3, [r3, #16]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030240 	.word	0x00030240

000d5248 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <network_on+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	695b      	ldr	r3, [r3, #20]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030240 	.word	0x00030240

000d5258 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <network_off+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	699b      	ldr	r3, [r3, #24]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030240 	.word	0x00030240

000d5268 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <network_listen+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	69db      	ldr	r3, [r3, #28]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030240 	.word	0x00030240

000d5278 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <network_listening+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6a1b      	ldr	r3, [r3, #32]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030240 	.word	0x00030240

000d5288 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <network_set_listen_timeout+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030240 	.word	0x00030240

000d5298 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <network_get_listen_timeout+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030240 	.word	0x00030240

000d52a8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <malloc+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	681b      	ldr	r3, [r3, #0]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	0003021c 	.word	0x0003021c

000d52b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <free+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	685b      	ldr	r3, [r3, #4]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	0003021c 	.word	0x0003021c

000d52c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <realloc+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	689b      	ldr	r3, [r3, #8]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	0003021c 	.word	0x0003021c

000d52d8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <abort+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	0003021c 	.word	0x0003021c

000d52e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <_malloc_r+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	0003021c 	.word	0x0003021c

000d52f8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <__errno+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	0003021c 	.word	0x0003021c

000d5308 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5308:	2100      	movs	r1, #0
   d530a:	f7ff bf3f 	b.w	d518c <system_delay_ms>

000d530e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d530e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5310:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5312:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5314:	b113      	cbz	r3, d531c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5316:	2203      	movs	r2, #3
   d5318:	4601      	mov	r1, r0
   d531a:	4798      	blx	r3
    }
   d531c:	4620      	mov	r0, r4
   d531e:	bd10      	pop	{r4, pc}

000d5320 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5320:	b510      	push	{r4, lr}
   d5322:	b088      	sub	sp, #32
   d5324:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5326:	4668      	mov	r0, sp
   d5328:	f000 fd5d 	bl	d5de6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d532c:	4669      	mov	r1, sp
   d532e:	a804      	add	r0, sp, #16
   d5330:	f000 fd7b 	bl	d5e2a <_ZN6StringC1ERKS_>
   d5334:	a804      	add	r0, sp, #16
   d5336:	47a0      	blx	r4
   d5338:	4604      	mov	r4, r0
   d533a:	a804      	add	r0, sp, #16
   d533c:	f000 fd0c 	bl	d5d58 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5340:	4668      	mov	r0, sp
   d5342:	f000 fd09 	bl	d5d58 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5346:	4620      	mov	r0, r4
   d5348:	b008      	add	sp, #32
   d534a:	bd10      	pop	{r4, pc}

000d534c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d534c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d534e:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5350:	b085      	sub	sp, #20
   d5352:	4607      	mov	r7, r0
   d5354:	460e      	mov	r6, r1
   d5356:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5358:	2100      	movs	r1, #0
   d535a:	4622      	mov	r2, r4
   d535c:	4668      	mov	r0, sp
   d535e:	f003 fb23 	bl	d89a8 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5362:	2200      	movs	r2, #0
   d5364:	4669      	mov	r1, sp
   d5366:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5368:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d536c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d536e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5370:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5372:	f7ff ff39 	bl	d51e8 <spark_function>
}
   d5376:	b005      	add	sp, #20
   d5378:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d537a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d537a:	2200      	movs	r2, #0
   d537c:	4611      	mov	r1, r2
   d537e:	6840      	ldr	r0, [r0, #4]
   d5380:	f7ff bf7a 	b.w	d5278 <network_listening>

000d5384 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5384:	2200      	movs	r2, #0
   d5386:	4611      	mov	r1, r2
   d5388:	6840      	ldr	r0, [r0, #4]
   d538a:	f7ff bf85 	b.w	d5298 <network_get_listen_timeout>

000d538e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d538e:	2200      	movs	r2, #0
   d5390:	6840      	ldr	r0, [r0, #4]
   d5392:	f7ff bf79 	b.w	d5288 <network_set_listen_timeout>

000d5396 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5396:	2200      	movs	r2, #0
   d5398:	f081 0101 	eor.w	r1, r1, #1
   d539c:	6840      	ldr	r0, [r0, #4]
   d539e:	f7ff bf63 	b.w	d5268 <network_listen>

000d53a2 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d53a2:	2300      	movs	r3, #0
   d53a4:	461a      	mov	r2, r3
   d53a6:	4619      	mov	r1, r3
   d53a8:	6840      	ldr	r0, [r0, #4]
   d53aa:	f7ff bf55 	b.w	d5258 <network_off>

000d53ae <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d53ae:	2300      	movs	r3, #0
   d53b0:	461a      	mov	r2, r3
   d53b2:	4619      	mov	r1, r3
   d53b4:	6840      	ldr	r0, [r0, #4]
   d53b6:	f7ff bf47 	b.w	d5248 <network_on>

000d53ba <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d53ba:	2200      	movs	r2, #0
   d53bc:	4611      	mov	r1, r2
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	f7ff bf3a 	b.w	d5238 <network_ready>

000d53c4 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53c4:	2200      	movs	r2, #0
   d53c6:	4611      	mov	r1, r2
   d53c8:	6840      	ldr	r0, [r0, #4]
   d53ca:	f7ff bf25 	b.w	d5218 <network_connecting>

000d53ce <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53ce:	2200      	movs	r2, #0
   d53d0:	2102      	movs	r1, #2
   d53d2:	6840      	ldr	r0, [r0, #4]
   d53d4:	f7ff bf28 	b.w	d5228 <network_disconnect>

000d53d8 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53d8:	2300      	movs	r3, #0
   d53da:	461a      	mov	r2, r3
   d53dc:	6840      	ldr	r0, [r0, #4]
   d53de:	f7ff bf13 	b.w	d5208 <network_connect>
	...

000d53e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d53e4:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d53e6:	2203      	movs	r2, #3
   d53e8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d53ea:	4a02      	ldr	r2, [pc, #8]	; (d53f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d53ec:	601a      	str	r2, [r3, #0]
   d53ee:	4770      	bx	lr
   d53f0:	2003e3d8 	.word	0x2003e3d8
   d53f4:	000da684 	.word	0x000da684

000d53f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d53f8:	4770      	bx	lr

000d53fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53fc:	4606      	mov	r6, r0
   d53fe:	4615      	mov	r5, r2
   d5400:	460c      	mov	r4, r1
   d5402:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5404:	42bc      	cmp	r4, r7
   d5406:	d006      	beq.n	d5416 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5408:	6833      	ldr	r3, [r6, #0]
   d540a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d540e:	689b      	ldr	r3, [r3, #8]
   d5410:	4630      	mov	r0, r6
   d5412:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5414:	e7f6      	b.n	d5404 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5416:	4628      	mov	r0, r5
   d5418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d541a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d541a:	2200      	movs	r2, #0
   d541c:	7c00      	ldrb	r0, [r0, #16]
   d541e:	f7ff bd55 	b.w	d4ecc <HAL_I2C_Write_Data>

000d5422 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5422:	2100      	movs	r1, #0
   d5424:	7c00      	ldrb	r0, [r0, #16]
   d5426:	f7ff bd59 	b.w	d4edc <HAL_I2C_Available_Data>

000d542a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d542a:	2100      	movs	r1, #0
   d542c:	7c00      	ldrb	r0, [r0, #16]
   d542e:	f7ff bd5d 	b.w	d4eec <HAL_I2C_Read_Data>

000d5432 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5432:	2100      	movs	r1, #0
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7ff bd61 	b.w	d4efc <HAL_I2C_Peek_Data>

000d543a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d543a:	2100      	movs	r1, #0
   d543c:	7c00      	ldrb	r0, [r0, #16]
   d543e:	f7ff bd65 	b.w	d4f0c <HAL_I2C_Flush_Data>

000d5442 <_ZN7TwoWireD0Ev>:
   d5442:	b510      	push	{r4, lr}
   d5444:	4604      	mov	r4, r0
   d5446:	f7fe fe2a 	bl	d409e <_ZdlPv>
   d544a:	4620      	mov	r0, r4
   d544c:	bd10      	pop	{r4, pc}
	...

000d5450 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5450:	b510      	push	{r4, lr}
   d5452:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5458:	4608      	mov	r0, r1
   d545a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d545c:	2100      	movs	r1, #0
   d545e:	4b04      	ldr	r3, [pc, #16]	; (d5470 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5460:	7420      	strb	r0, [r4, #16]
   d5462:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5464:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5466:	f7ff fd61 	bl	d4f2c <HAL_I2C_Init>

}
   d546a:	4620      	mov	r0, r4
   d546c:	bd10      	pop	{r4, pc}
   d546e:	bf00      	nop
   d5470:	000da6b8 	.word	0x000da6b8

000d5474 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5474:	2100      	movs	r1, #0
   d5476:	7c00      	ldrb	r0, [r0, #16]
   d5478:	f7ff bd50 	b.w	d4f1c <HAL_I2C_Is_Enabled>

000d547c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d547c:	4770      	bx	lr

000d547e <_ZN9IPAddressD0Ev>:
   d547e:	b510      	push	{r4, lr}
   d5480:	4604      	mov	r4, r0
   d5482:	f7fe fe0c 	bl	d409e <_ZdlPv>
   d5486:	4620      	mov	r0, r4
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d548a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d548c:	7d03      	ldrb	r3, [r0, #20]
   d548e:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5490:	b08d      	sub	sp, #52	; 0x34
   d5492:	460e      	mov	r6, r1
   d5494:	f100 0704 	add.w	r7, r0, #4
   d5498:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d549c:	d002      	beq.n	d54a4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d549e:	f100 0508 	add.w	r5, r0, #8
   d54a2:	e018      	b.n	d54d6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54a4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54a6:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54a8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54ac:	232f      	movs	r3, #47	; 0x2f
   d54ae:	462a      	mov	r2, r5
   d54b0:	200a      	movs	r0, #10
   d54b2:	f7ff fd6b 	bl	d4f8c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54b6:	4628      	mov	r0, r5
   d54b8:	f003 fac0 	bl	d8a3c <strlen>
   d54bc:	6833      	ldr	r3, [r6, #0]
   d54be:	4602      	mov	r2, r0
   d54c0:	68db      	ldr	r3, [r3, #12]
   d54c2:	4629      	mov	r1, r5
   d54c4:	4630      	mov	r0, r6
   d54c6:	4798      	blx	r3
   d54c8:	e00f      	b.n	d54ea <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d54ca:	b124      	cbz	r4, d54d6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d54cc:	212e      	movs	r1, #46	; 0x2e
   d54ce:	4630      	mov	r0, r6
   d54d0:	f000 fbc0 	bl	d5c54 <_ZN5Print5printEc>
   d54d4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d54d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54da:	220a      	movs	r2, #10
   d54dc:	4630      	mov	r0, r6
   d54de:	f000 fbe9 	bl	d5cb4 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54e2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54e4:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54e6:	d1f0      	bne.n	d54ca <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54e8:	4620      	mov	r0, r4
    }
    return n;
}
   d54ea:	b00d      	add	sp, #52	; 0x34
   d54ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d54f0 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d54f0:	b510      	push	{r4, lr}
   d54f2:	4b05      	ldr	r3, [pc, #20]	; (d5508 <_ZN9IPAddressC1Ev+0x18>)
   d54f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54f6:	2211      	movs	r2, #17
   d54f8:	f840 3b04 	str.w	r3, [r0], #4
   d54fc:	2100      	movs	r1, #0
   d54fe:	f003 fa53 	bl	d89a8 <memset>
{
    clear();
}
   d5502:	4620      	mov	r0, r4
   d5504:	bd10      	pop	{r4, pc}
   d5506:	bf00      	nop
   d5508:	000da6e0 	.word	0x000da6e0

000d550c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d550c:	4603      	mov	r3, r0
   d550e:	4a07      	ldr	r2, [pc, #28]	; (d552c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5510:	b510      	push	{r4, lr}
   d5512:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5516:	f101 0210 	add.w	r2, r1, #16
   d551a:	f851 4b04 	ldr.w	r4, [r1], #4
   d551e:	f843 4b04 	str.w	r4, [r3], #4
   d5522:	4291      	cmp	r1, r2
   d5524:	d1f9      	bne.n	d551a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5526:	780a      	ldrb	r2, [r1, #0]
   d5528:	701a      	strb	r2, [r3, #0]
}
   d552a:	bd10      	pop	{r4, pc}
   d552c:	000da6e0 	.word	0x000da6e0

000d5530 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5530:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5532:	2b04      	cmp	r3, #4
   d5534:	d101      	bne.n	d553a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	e008      	b.n	d554c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d553a:	2b06      	cmp	r3, #6
   d553c:	d10a      	bne.n	d5554 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d553e:	6843      	ldr	r3, [r0, #4]
   d5540:	b153      	cbz	r3, d5558 <_ZNK9IPAddresscvbEv+0x28>
   d5542:	6883      	ldr	r3, [r0, #8]
   d5544:	b143      	cbz	r3, d5558 <_ZNK9IPAddresscvbEv+0x28>
   d5546:	68c3      	ldr	r3, [r0, #12]
   d5548:	b133      	cbz	r3, d5558 <_ZNK9IPAddresscvbEv+0x28>
   d554a:	6900      	ldr	r0, [r0, #16]
   d554c:	3000      	adds	r0, #0
   d554e:	bf18      	it	ne
   d5550:	2001      	movne	r0, #1
   d5552:	4770      	bx	lr
   d5554:	2000      	movs	r0, #0
   d5556:	4770      	bx	lr
   d5558:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d555a:	4770      	bx	lr

000d555c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d555c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d555e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5562:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5566:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d556a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d556e:	2304      	movs	r3, #4
   d5570:	6041      	str	r1, [r0, #4]
   d5572:	7503      	strb	r3, [r0, #20]
   d5574:	bd10      	pop	{r4, pc}

000d5576 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5576:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5578:	780d      	ldrb	r5, [r1, #0]
   d557a:	788b      	ldrb	r3, [r1, #2]
   d557c:	784a      	ldrb	r2, [r1, #1]
   d557e:	78c9      	ldrb	r1, [r1, #3]
   d5580:	9100      	str	r1, [sp, #0]
   d5582:	4629      	mov	r1, r5
   d5584:	f7ff ffea 	bl	d555c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5588:	b003      	add	sp, #12
   d558a:	bd30      	pop	{r4, r5, pc}

000d558c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d558c:	4b01      	ldr	r3, [pc, #4]	; (d5594 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d558e:	4a02      	ldr	r2, [pc, #8]	; (d5598 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5590:	601a      	str	r2, [r3, #0]
   d5592:	4770      	bx	lr
   d5594:	2003e3e0 	.word	0x2003e3e0
   d5598:	000da79f 	.word	0x000da79f

000d559c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d559c:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d559e:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d55a0:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d55a2:	b10b      	cbz	r3, d55a8 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d55a4:	68c0      	ldr	r0, [r0, #12]
   d55a6:	e006      	b.n	d55b6 <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d55a8:	6840      	ldr	r0, [r0, #4]
   d55aa:	b128      	cbz	r0, d55b8 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55ac:	6883      	ldr	r3, [r0, #8]
   d55ae:	b90b      	cbnz	r3, d55b4 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d55b0:	f001 fa39 	bl	d6a26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55b4:	68c3      	ldr	r3, [r0, #12]
   d55b6:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d55b8:	2301      	movs	r3, #1
   d55ba:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d55bc:	2000      	movs	r0, #0
    }
   d55be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d55c2:	f7ff bc3b 	b.w	d4e3c <os_thread_exit>

000d55c6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55c6:	2200      	movs	r2, #0
   d55c8:	4611      	mov	r1, r2
   d55ca:	6840      	ldr	r0, [r0, #4]
   d55cc:	f7ff be54 	b.w	d5278 <network_listening>

000d55d0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55d0:	2200      	movs	r2, #0
   d55d2:	4611      	mov	r1, r2
   d55d4:	6840      	ldr	r0, [r0, #4]
   d55d6:	f7ff be5f 	b.w	d5298 <network_get_listen_timeout>

000d55da <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55da:	2200      	movs	r2, #0
   d55dc:	6840      	ldr	r0, [r0, #4]
   d55de:	f7ff be53 	b.w	d5288 <network_set_listen_timeout>

000d55e2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55e2:	2200      	movs	r2, #0
   d55e4:	f081 0101 	eor.w	r1, r1, #1
   d55e8:	6840      	ldr	r0, [r0, #4]
   d55ea:	f7ff be3d 	b.w	d5268 <network_listen>

000d55ee <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55ee:	2300      	movs	r3, #0
   d55f0:	461a      	mov	r2, r3
   d55f2:	4619      	mov	r1, r3
   d55f4:	6840      	ldr	r0, [r0, #4]
   d55f6:	f7ff be2f 	b.w	d5258 <network_off>

000d55fa <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55fa:	2300      	movs	r3, #0
   d55fc:	461a      	mov	r2, r3
   d55fe:	4619      	mov	r1, r3
   d5600:	6840      	ldr	r0, [r0, #4]
   d5602:	f7ff be21 	b.w	d5248 <network_on>

000d5606 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5606:	2200      	movs	r2, #0
   d5608:	4611      	mov	r1, r2
   d560a:	6840      	ldr	r0, [r0, #4]
   d560c:	f7ff be14 	b.w	d5238 <network_ready>

000d5610 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5610:	2200      	movs	r2, #0
   d5612:	4611      	mov	r1, r2
   d5614:	6840      	ldr	r0, [r0, #4]
   d5616:	f7ff bdff 	b.w	d5218 <network_connecting>

000d561a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d561a:	2200      	movs	r2, #0
   d561c:	2102      	movs	r1, #2
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	f7ff be02 	b.w	d5228 <network_disconnect>

000d5624 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5624:	2300      	movs	r3, #0
   d5626:	461a      	mov	r2, r3
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	f7ff bded 	b.w	d5208 <network_connect>

000d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d562e:	b110      	cbz	r0, d5636 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5630:	6803      	ldr	r3, [r0, #0]
   d5632:	685b      	ldr	r3, [r3, #4]
   d5634:	4718      	bx	r3
   d5636:	4770      	bx	lr

000d5638 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5638:	b538      	push	{r3, r4, r5, lr}
   d563a:	4604      	mov	r4, r0
   d563c:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d563e:	b1d0      	cbz	r0, d5676 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d5640:	f7ff fbc4 	bl	d4dcc <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5644:	b9b8      	cbnz	r0, d5676 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5646:	7c23      	ldrb	r3, [r4, #16]
   d5648:	b91b      	cbnz	r3, d5652 <_ZN6Thread7disposeEv+0x1a>
   d564a:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d564c:	b108      	cbz	r0, d5652 <_ZN6Thread7disposeEv+0x1a>
   d564e:	f7ff fbc5 	bl	d4ddc <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d5652:	6865      	ldr	r5, [r4, #4]
   d5654:	b155      	cbz	r5, d566c <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5656:	68ab      	ldr	r3, [r5, #8]
   d5658:	b11b      	cbz	r3, d5662 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d565a:	2203      	movs	r2, #3
   d565c:	4629      	mov	r1, r5
   d565e:	4628      	mov	r0, r5
   d5660:	4798      	blx	r3
            delete wrapper;
   d5662:	4628      	mov	r0, r5
   d5664:	f7fe fd1b 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d5668:	2300      	movs	r3, #0
   d566a:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d566c:	6820      	ldr	r0, [r4, #0]
   d566e:	f7ff fbbd 	bl	d4dec <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5672:	2300      	movs	r3, #0
   d5674:	6023      	str	r3, [r4, #0]
   d5676:	bd38      	pop	{r3, r4, r5, pc}

000d5678 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5678:	b538      	push	{r3, r4, r5, lr}
   d567a:	4b0b      	ldr	r3, [pc, #44]	; (d56a8 <_ZN5spark9MeshClassD1Ev+0x30>)
   d567c:	6003      	str	r3, [r0, #0]
   d567e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5680:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5684:	b108      	cbz	r0, d568a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5686:	f7fe fd0c 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d568a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d568e:	b12d      	cbz	r5, d569c <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d5690:	4628      	mov	r0, r5
   d5692:	f7ff ffd1 	bl	d5638 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5696:	4628      	mov	r0, r5
   d5698:	f7fe fd01 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d569c:	68a0      	ldr	r0, [r4, #8]
   d569e:	b108      	cbz	r0, d56a4 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d56a0:	f7ff ffc5 	bl	d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d56a4:	4620      	mov	r0, r4
   d56a6:	bd38      	pop	{r3, r4, r5, pc}
   d56a8:	000da7d0 	.word	0x000da7d0

000d56ac <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d56ac:	6800      	ldr	r0, [r0, #0]
   d56ae:	f7ff bbb5 	b.w	d4e1c <os_mutex_recursive_lock>

000d56b2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d56b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56b6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d56b8:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d56bc:	4606      	mov	r6, r0
   d56be:	4688      	mov	r8, r1
   d56c0:	4691      	mov	r9, r2
   d56c2:	469a      	mov	sl, r3
   d56c4:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d56c6:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d56c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d56ca:	454b      	cmp	r3, r9
   d56cc:	d129      	bne.n	d5722 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d56ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d56d0:	4553      	cmp	r3, sl
   d56d2:	d126      	bne.n	d5722 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d56d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d56d8:	455b      	cmp	r3, fp
   d56da:	d122      	bne.n	d5722 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d56dc:	2140      	movs	r1, #64	; 0x40
   d56de:	4640      	mov	r0, r8
   d56e0:	f003 f9c9 	bl	d8a76 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d56e4:	4641      	mov	r1, r8
   d56e6:	4602      	mov	r2, r0
   d56e8:	4620      	mov	r0, r4
   d56ea:	f003 f9af 	bl	d8a4c <strncmp>
   d56ee:	b9c0      	cbnz	r0, d5722 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d56f0:	b16f      	cbz	r7, d570e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d56f2:	210c      	movs	r1, #12
   d56f4:	4638      	mov	r0, r7
   d56f6:	f003 f9be 	bl	d8a76 <strnlen>
                if (id_len)
   d56fa:	4602      	mov	r2, r0
   d56fc:	b138      	cbz	r0, d570e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d56fe:	2358      	movs	r3, #88	; 0x58
   d5700:	fb03 6005 	mla	r0, r3, r5, r6
   d5704:	4639      	mov	r1, r7
   d5706:	3049      	adds	r0, #73	; 0x49
   d5708:	f003 f9a0 	bl	d8a4c <strncmp>
   d570c:	e004      	b.n	d5718 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d570e:	2058      	movs	r0, #88	; 0x58
   d5710:	fb00 6505 	mla	r5, r0, r5, r6
   d5714:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d5718:	fab0 f080 	clz	r0, r0
   d571c:	0940      	lsrs	r0, r0, #5
   d571e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5722:	3501      	adds	r5, #1
   d5724:	2d05      	cmp	r5, #5
   d5726:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d572a:	d1cd      	bne.n	d56c8 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d572c:	2000      	movs	r0, #0
}
   d572e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5734 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5738:	b085      	sub	sp, #20
   d573a:	4607      	mov	r7, r0
   d573c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5740:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5742:	9601      	str	r6, [sp, #4]
   d5744:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5748:	4689      	mov	r9, r1
   d574a:	9202      	str	r2, [sp, #8]
   d574c:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d574e:	f7ff ffb0 	bl	d56b2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d5752:	2800      	cmp	r0, #0
   d5754:	d13c      	bne.n	d57d0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d5756:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5758:	2358      	movs	r3, #88	; 0x58
   d575a:	fb03 7504 	mla	r5, r3, r4, r7
   d575e:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d5762:	f1b8 0f00 	cmp.w	r8, #0
   d5766:	d12e      	bne.n	d57c6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5768:	2140      	movs	r1, #64	; 0x40
   d576a:	4648      	mov	r0, r9
   d576c:	f003 f983 	bl	d8a76 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5770:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5772:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5774:	4602      	mov	r2, r0
   d5776:	4628      	mov	r0, r5
   d5778:	f003 f90b 	bl	d8992 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d577c:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d5780:	4641      	mov	r1, r8
   d5782:	eb05 000b 	add.w	r0, r5, fp
   d5786:	f003 f90f 	bl	d89a8 <memset>
            event_handlers[i].handler = handler;
   d578a:	9b02      	ldr	r3, [sp, #8]
   d578c:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d578e:	9b03      	ldr	r3, [sp, #12]
   d5790:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d5792:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5796:	b12e      	cbz	r6, d57a4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d5798:	210c      	movs	r1, #12
   d579a:	4630      	mov	r0, r6
   d579c:	f003 f96b 	bl	d8a76 <strnlen>
   d57a0:	4605      	mov	r5, r0
   d57a2:	e000      	b.n	d57a6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d57a4:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d57a6:	2058      	movs	r0, #88	; 0x58
   d57a8:	4344      	muls	r4, r0
   d57aa:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d57ac:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d57ae:	462a      	mov	r2, r5
   d57b0:	4631      	mov	r1, r6
   d57b2:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d57b4:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d57b6:	f003 f8ec 	bl	d8992 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d57ba:	2000      	movs	r0, #0
   d57bc:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d57c0:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d57c4:	e005      	b.n	d57d2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d57c6:	3401      	adds	r4, #1
   d57c8:	2c05      	cmp	r4, #5
   d57ca:	d1c6      	bne.n	d575a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d57cc:	4802      	ldr	r0, [pc, #8]	; (d57d8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d57ce:	e000      	b.n	d57d2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d57d0:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d57d2:	b005      	add	sp, #20
   d57d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57d8:	fffffefc 	.word	0xfffffefc

000d57dc <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d57dc:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d57de:	2300      	movs	r3, #0
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	9300      	str	r3, [sp, #0]
   d57e4:	f7ff ffa6 	bl	d5734 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d57e8:	b003      	add	sp, #12
   d57ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d57ee <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d57ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d57f2:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d57f4:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d57f6:	460d      	mov	r5, r1
   d57f8:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d57fa:	f003 f91f 	bl	d8a3c <strlen>
   d57fe:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d5802:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5804:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5806:	b1ab      	cbz	r3, d5834 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5808:	2140      	movs	r1, #64	; 0x40
   d580a:	4620      	mov	r0, r4
   d580c:	f003 f933 	bl	d8a76 <strnlen>

        if (event_name_length < filter_length)
   d5810:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5812:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d5814:	d30b      	bcc.n	d582e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d5816:	4629      	mov	r1, r5
   d5818:	4620      	mov	r0, r4
   d581a:	f003 f8ab 	bl	d8974 <memcmp>
        if (0 == cmp)
   d581e:	b930      	cbnz	r0, d582e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d5820:	9000      	str	r0, [sp, #0]
   d5822:	4643      	mov	r3, r8
   d5824:	462a      	mov	r2, r5
   d5826:	4621      	mov	r1, r4
   d5828:	2058      	movs	r0, #88	; 0x58
   d582a:	f7ff fccb 	bl	d51c4 <system_invoke_event_handler>
   d582e:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5830:	42b4      	cmp	r4, r6
   d5832:	d1e7      	bne.n	d5804 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5834:	b002      	add	sp, #8
   d5836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d583c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d583c:	b530      	push	{r4, r5, lr}
   d583e:	b08d      	sub	sp, #52	; 0x34
   d5840:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5842:	2211      	movs	r2, #17
   d5844:	2100      	movs	r1, #0
   d5846:	a801      	add	r0, sp, #4
   d5848:	f003 f8ae 	bl	d89a8 <memset>
    addr.v = 6;
   d584c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d584e:	aa01      	add	r2, sp, #4
   d5850:	4909      	ldr	r1, [pc, #36]	; (d5878 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5852:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5856:	200a      	movs	r0, #10
   d5858:	f7ff fba0 	bl	d4f9c <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d585c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d585e:	a901      	add	r1, sp, #4
   d5860:	a806      	add	r0, sp, #24
   d5862:	f7ff fe53 	bl	d550c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5868:	3404      	adds	r4, #4
   d586a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d586c:	682b      	ldr	r3, [r5, #0]
   d586e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5870:	2000      	movs	r0, #0
   d5872:	b00d      	add	sp, #52	; 0x34
   d5874:	bd30      	pop	{r4, r5, pc}
   d5876:	bf00      	nop
   d5878:	000da7fc 	.word	0x000da7fc

000d587c <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d587c:	b530      	push	{r4, r5, lr}
   d587e:	4604      	mov	r4, r0
   d5880:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5882:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5886:	f7ff ff11 	bl	d56ac <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d588a:	6823      	ldr	r3, [r4, #0]
   d588c:	bb83      	cbnz	r3, d58f0 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d588e:	204c      	movs	r0, #76	; 0x4c
   d5890:	f7fe fc01 	bl	d4096 <_Znwj>
   d5894:	4605      	mov	r5, r0
   d5896:	b108      	cbz	r0, d589c <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5898:	f000 fe1a 	bl	d64d0 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d589c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d589e:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d58a0:	b108      	cbz	r0, d58a6 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d58a2:	f7ff fec4 	bl	d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58a6:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d58a8:	b320      	cbz	r0, d58f4 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d58aa:	2200      	movs	r2, #0
   d58ac:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d58b0:	f000 fe3d 	bl	d652e <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d58b4:	a908      	add	r1, sp, #32
   d58b6:	2500      	movs	r5, #0
   d58b8:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d58bc:	4811      	ldr	r0, [pc, #68]	; (d5904 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d58be:	f7ff fb3d 	bl	d4f3c <if_name_to_index>
   d58c2:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d58c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d58c8:	6803      	ldr	r3, [r0, #0]
   d58ca:	f249 0169 	movw	r1, #36969	; 0x9069
   d58ce:	6a1b      	ldr	r3, [r3, #32]
   d58d0:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d58d2:	a802      	add	r0, sp, #8
   d58d4:	f7ff fe0c 	bl	d54f0 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d58d8:	a802      	add	r0, sp, #8
   d58da:	f7ff ffaf 	bl	d583c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d58de:	2800      	cmp	r0, #0
   d58e0:	db04      	blt.n	d58ec <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d58e2:	a902      	add	r1, sp, #8
   d58e4:	6820      	ldr	r0, [r4, #0]
   d58e6:	f000 fea8 	bl	d663a <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d58ea:	e004      	b.n	d58f6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d58ec:	4605      	mov	r5, r0
   d58ee:	e002      	b.n	d58f6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d58f0:	2500      	movs	r5, #0
   d58f2:	e000      	b.n	d58f6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d58f4:	4d04      	ldr	r5, [pc, #16]	; (d5908 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d58f6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d58fa:	f7ff fa97 	bl	d4e2c <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d58fe:	4628      	mov	r0, r5
   d5900:	b009      	add	sp, #36	; 0x24
   d5902:	bd30      	pop	{r4, r5, pc}
   d5904:	000da809 	.word	0x000da809
   d5908:	fffffefc 	.word	0xfffffefc

000d590c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d590c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5910:	4604      	mov	r4, r0
   d5912:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5916:	460f      	mov	r7, r1
   d5918:	4690      	mov	r8, r2
   d591a:	f7ff fec7 	bl	d56ac <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d591e:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d5922:	b9fe      	cbnz	r6, d5964 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5924:	491a      	ldr	r1, [pc, #104]	; (d5990 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x84>)
   d5926:	2014      	movs	r0, #20
   d5928:	f001 f86c 	bl	d6a04 <_ZnwjRKSt9nothrow_t>
   d592c:	4605      	mov	r5, r0
   d592e:	b170      	cbz	r0, d594e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x42>

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5930:	4b18      	ldr	r3, [pc, #96]	; (d5994 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x88>)
   d5932:	6083      	str	r3, [r0, #8]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5934:	f44f 6340 	mov.w	r3, #3072	; 0xc00

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5938:	6006      	str	r6, [r0, #0]
   d593a:	6046      	str	r6, [r0, #4]
   d593c:	60c4      	str	r4, [r0, #12]
   d593e:	7406      	strb	r6, [r0, #16]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5940:	2203      	movs	r2, #3
   d5942:	9301      	str	r3, [sp, #4]
   d5944:	9000      	str	r0, [sp, #0]
   d5946:	4b14      	ldr	r3, [pc, #80]	; (d5998 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8c>)
   d5948:	4914      	ldr	r1, [pc, #80]	; (d599c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>)
   d594a:	f7ff fa37 	bl	d4dbc <os_thread_create>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d594e:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d5952:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5956:	b12e      	cbz	r6, d5964 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        }
    }

    ~Thread()
    {
        dispose();
   d5958:	4630      	mov	r0, r6
   d595a:	f7ff fe6d 	bl	d5638 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d595e:	4630      	mov	r0, r6
   d5960:	f7fe fb9d 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5964:	4620      	mov	r0, r4
   d5966:	f7ff ff89 	bl	d587c <_ZN5spark11MeshPublish14initialize_udpEv>
   d596a:	2800      	cmp	r0, #0
   d596c:	db07      	blt.n	d597e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x72>
    CHECK(subscriptions.add(prefix, handler));
   d596e:	4642      	mov	r2, r8
   d5970:	4639      	mov	r1, r7
   d5972:	1d20      	adds	r0, r4, #4
   d5974:	f7ff ff32 	bl	d57dc <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5978:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d597c:	e000      	b.n	d5980 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x74>
   d597e:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5980:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5984:	f7ff fa52 	bl	d4e2c <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5988:	4628      	mov	r0, r5
   d598a:	b002      	add	sp, #8
   d598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5990:	000da9cc 	.word	0x000da9cc
   d5994:	000d5ab1 	.word	0x000d5ab1
   d5998:	000d559d 	.word	0x000d559d
   d599c:	000da80d 	.word	0x000da80d

000d59a0 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d59a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59a4:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d59a6:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d59aa:	b08a      	sub	sp, #40	; 0x28
   d59ac:	4630      	mov	r0, r6
   d59ae:	f7ff fe7d 	bl	d56ac <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d59b2:	682c      	ldr	r4, [r5, #0]
   d59b4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d59b8:	f7ff fa38 	bl	d4e2c <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d59bc:	2c00      	cmp	r4, #0
   d59be:	d063      	beq.n	d5a88 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d59c0:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d59c4:	b163      	cbz	r3, d59e0 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d59c6:	6823      	ldr	r3, [r4, #0]
   d59c8:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d59cc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d59ce:	4620      	mov	r0, r4
   d59d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59d4:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d59d8:	47b8      	blx	r7
        if (len > 0) {
   d59da:	1e04      	subs	r4, r0, #0
   d59dc:	dc13      	bgt.n	d5a06 <_ZN5spark11MeshPublish4pollEv+0x66>
   d59de:	e056      	b.n	d5a8e <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d59e0:	492d      	ldr	r1, [pc, #180]	; (d5a98 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d59e2:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d59e6:	f001 f81c 	bl	d6a22 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59ea:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d59ee:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d59f2:	b113      	cbz	r3, d59fa <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d59f4:	4618      	mov	r0, r3
   d59f6:	f7fe fb54 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d59fa:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d59fe:	2b00      	cmp	r3, #0
   d5a00:	d1e1      	bne.n	d59c6 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5a02:	4826      	ldr	r0, [pc, #152]	; (d5a9c <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5a04:	e044      	b.n	d5a90 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5a06:	2320      	movs	r3, #32
   d5a08:	4a25      	ldr	r2, [pc, #148]	; (d5aa0 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5a0a:	9302      	str	r3, [sp, #8]
   d5a0c:	9200      	str	r2, [sp, #0]
   d5a0e:	2300      	movs	r3, #0
   d5a10:	9401      	str	r4, [sp, #4]
   d5a12:	aa02      	add	r2, sp, #8
   d5a14:	4923      	ldr	r1, [pc, #140]	; (d5aa4 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5a16:	9303      	str	r3, [sp, #12]
   d5a18:	2001      	movs	r0, #1
   d5a1a:	f7ff fba7 	bl	d516c <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a1e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5a22:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5a24:	781b      	ldrb	r3, [r3, #0]
   d5a26:	bb6b      	cbnz	r3, d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5a28:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5a2a:	4621      	mov	r1, r4
   d5a2c:	4638      	mov	r0, r7
   d5a2e:	f003 f822 	bl	d8a76 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5a32:	b338      	cbz	r0, d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5a34:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5a36:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5a38:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5a3c:	dd22      	ble.n	d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5a3e:	5c3b      	ldrb	r3, [r7, r0]
   d5a40:	bb03      	cbnz	r3, d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5a42:	3c01      	subs	r4, #1
   d5a44:	d00e      	beq.n	d5a64 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5a46:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5a4a:	4621      	mov	r1, r4
   d5a4c:	4640      	mov	r0, r8
   d5a4e:	f003 f812 	bl	d8a76 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5a52:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5a54:	2c00      	cmp	r4, #0
   d5a56:	dd15      	ble.n	d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5a58:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5a5c:	b993      	cbnz	r3, d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5a5e:	2c01      	cmp	r4, #1
   d5a60:	d002      	beq.n	d5a68 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5a62:	e00f      	b.n	d5a84 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5a64:	f8df 8044 	ldr.w	r8, [pc, #68]	; d5aac <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5a68:	4630      	mov	r0, r6
   d5a6a:	f7ff fe1f 	bl	d56ac <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d5a6e:	4642      	mov	r2, r8
   d5a70:	4639      	mov	r1, r7
   d5a72:	1d28      	adds	r0, r5, #4
   d5a74:	f7ff febb 	bl	d57ee <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5a78:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5a7c:	f7ff f9d6 	bl	d4e2c <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5a80:	2000      	movs	r0, #0
   d5a82:	e005      	b.n	d5a90 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5a84:	4808      	ldr	r0, [pc, #32]	; (d5aa8 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5a86:	e003      	b.n	d5a90 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5a88:	2064      	movs	r0, #100	; 0x64
   d5a8a:	f7ff f9df 	bl	d4e4c <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5a8e:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d5a90:	b00a      	add	sp, #40	; 0x28
   d5a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a96:	bf00      	nop
   d5a98:	000da9cc 	.word	0x000da9cc
   d5a9c:	fffffefc 	.word	0xfffffefc
   d5aa0:	000da81c 	.word	0x000da81c
   d5aa4:	000da815 	.word	0x000da815
   d5aa8:	fffffee8 	.word	0xfffffee8
   d5aac:	000da700 	.word	0x000da700

000d5ab0 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	f7ff ff73 	bl	d59a0 <_ZN5spark11MeshPublish4pollEv>
   d5aba:	e7fb      	b.n	d5ab4 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d5abc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5abc:	b538      	push	{r3, r4, r5, lr}
   d5abe:	4c0d      	ldr	r4, [pc, #52]	; (d5af4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5ac0:	4b0d      	ldr	r3, [pc, #52]	; (d5af8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5ac2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ac4:	2500      	movs	r5, #0
   d5ac6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ac8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5acc:	6063      	str	r3, [r4, #4]
   d5ace:	60a5      	str	r5, [r4, #8]
   d5ad0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ad4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5ad8:	f7ff f998 	bl	d4e0c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5adc:	4b07      	ldr	r3, [pc, #28]	; (d5afc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5ade:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5ae2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	4a06      	ldr	r2, [pc, #24]	; (d5b00 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5ae8:	4906      	ldr	r1, [pc, #24]	; (d5b04 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5aee:	f000 bf7b 	b.w	d69e8 <__aeabi_atexit>
   d5af2:	bf00      	nop
   d5af4:	2003e3e4 	.word	0x2003e3e4
   d5af8:	000da834 	.word	0x000da834
   d5afc:	000da7d0 	.word	0x000da7d0
   d5b00:	2003e3b0 	.word	0x2003e3b0
   d5b04:	000d5679 	.word	0x000d5679

000d5b08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5b08:	2300      	movs	r3, #0
   d5b0a:	461a      	mov	r2, r3
   d5b0c:	6840      	ldr	r0, [r0, #4]
   d5b0e:	f7ff bb7b 	b.w	d5208 <network_connect>

000d5b12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5b12:	2200      	movs	r2, #0
   d5b14:	2102      	movs	r1, #2
   d5b16:	6840      	ldr	r0, [r0, #4]
   d5b18:	f7ff bb86 	b.w	d5228 <network_disconnect>

000d5b1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5b1c:	2200      	movs	r2, #0
   d5b1e:	4611      	mov	r1, r2
   d5b20:	6840      	ldr	r0, [r0, #4]
   d5b22:	f7ff bb79 	b.w	d5218 <network_connecting>

000d5b26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5b26:	2200      	movs	r2, #0
   d5b28:	4611      	mov	r1, r2
   d5b2a:	6840      	ldr	r0, [r0, #4]
   d5b2c:	f7ff bb84 	b.w	d5238 <network_ready>

000d5b30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5b30:	2300      	movs	r3, #0
   d5b32:	461a      	mov	r2, r3
   d5b34:	4619      	mov	r1, r3
   d5b36:	6840      	ldr	r0, [r0, #4]
   d5b38:	f7ff bb86 	b.w	d5248 <network_on>

000d5b3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5b3c:	2300      	movs	r3, #0
   d5b3e:	461a      	mov	r2, r3
   d5b40:	4619      	mov	r1, r3
   d5b42:	6840      	ldr	r0, [r0, #4]
   d5b44:	f7ff bb88 	b.w	d5258 <network_off>

000d5b48 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5b48:	2200      	movs	r2, #0
   d5b4a:	f081 0101 	eor.w	r1, r1, #1
   d5b4e:	6840      	ldr	r0, [r0, #4]
   d5b50:	f7ff bb8a 	b.w	d5268 <network_listen>

000d5b54 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5b54:	2200      	movs	r2, #0
   d5b56:	6840      	ldr	r0, [r0, #4]
   d5b58:	f7ff bb96 	b.w	d5288 <network_set_listen_timeout>

000d5b5c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5b5c:	2200      	movs	r2, #0
   d5b5e:	4611      	mov	r1, r2
   d5b60:	6840      	ldr	r0, [r0, #4]
   d5b62:	f7ff bb99 	b.w	d5298 <network_get_listen_timeout>

000d5b66 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5b66:	2200      	movs	r2, #0
   d5b68:	4611      	mov	r1, r2
   d5b6a:	6840      	ldr	r0, [r0, #4]
   d5b6c:	f7ff bb84 	b.w	d5278 <network_listening>

000d5b70 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b70:	b570      	push	{r4, r5, r6, lr}
   d5b72:	b08c      	sub	sp, #48	; 0x30
   d5b74:	4614      	mov	r4, r2
   d5b76:	4606      	mov	r6, r0
    IPAddress addr;
   d5b78:	f7ff fcba 	bl	d54f0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b7c:	ab0c      	add	r3, sp, #48	; 0x30
   d5b7e:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5b80:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b82:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5b86:	4620      	mov	r0, r4
   d5b88:	f7ff fa30 	bl	d4fec <netdb_getaddrinfo>
    if (!r && ai) {
   d5b8c:	4601      	mov	r1, r0
   d5b8e:	bb58      	cbnz	r0, d5be8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5b90:	9b00      	ldr	r3, [sp, #0]
   d5b92:	b34b      	cbz	r3, d5be8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5b94:	685a      	ldr	r2, [r3, #4]
   d5b96:	2a02      	cmp	r2, #2
   d5b98:	d00e      	beq.n	d5bb8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5b9a:	2a0a      	cmp	r2, #10
   d5b9c:	d124      	bne.n	d5be8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5b9e:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5ba0:	2211      	movs	r2, #17
   d5ba2:	a801      	add	r0, sp, #4
   d5ba4:	f002 ff00 	bl	d89a8 <memset>
                a.v = 6;
   d5ba8:	2306      	movs	r3, #6
   d5baa:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5bae:	ad01      	add	r5, sp, #4
   d5bb0:	f104 0308 	add.w	r3, r4, #8
   d5bb4:	3418      	adds	r4, #24
   d5bb6:	e005      	b.n	d5bc4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5bb8:	6959      	ldr	r1, [r3, #20]
   d5bba:	4630      	mov	r0, r6
   d5bbc:	3104      	adds	r1, #4
   d5bbe:	f7ff fcda 	bl	d5576 <_ZN9IPAddressaSEPKh>
                break;
   d5bc2:	e011      	b.n	d5be8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5bc4:	6818      	ldr	r0, [r3, #0]
   d5bc6:	6859      	ldr	r1, [r3, #4]
   d5bc8:	462a      	mov	r2, r5
   d5bca:	c203      	stmia	r2!, {r0, r1}
   d5bcc:	3308      	adds	r3, #8
   d5bce:	42a3      	cmp	r3, r4
   d5bd0:	4615      	mov	r5, r2
   d5bd2:	d1f7      	bne.n	d5bc4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5bd4:	a901      	add	r1, sp, #4
   d5bd6:	a806      	add	r0, sp, #24
   d5bd8:	ad07      	add	r5, sp, #28
   d5bda:	f7ff fc97 	bl	d550c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5be0:	1d34      	adds	r4, r6, #4
   d5be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5be4:	682b      	ldr	r3, [r5, #0]
   d5be6:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5be8:	9800      	ldr	r0, [sp, #0]
   d5bea:	f7ff f9f7 	bl	d4fdc <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5bee:	4630      	mov	r0, r6
   d5bf0:	b00c      	add	sp, #48	; 0x30
   d5bf2:	bd70      	pop	{r4, r5, r6, pc}

000d5bf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5bf4:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5bf6:	4a03      	ldr	r2, [pc, #12]	; (d5c04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5bf8:	601a      	str	r2, [r3, #0]
   d5bfa:	2200      	movs	r2, #0
   d5bfc:	605a      	str	r2, [r3, #4]
   d5bfe:	4770      	bx	lr
   d5c00:	2003e5b4 	.word	0x2003e5b4
   d5c04:	000da834 	.word	0x000da834

000d5c08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c0a:	4606      	mov	r6, r0
   d5c0c:	460d      	mov	r5, r1
   d5c0e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c10:	2400      	movs	r4, #0
  while (size--) {
   d5c12:	42bd      	cmp	r5, r7
   d5c14:	d00c      	beq.n	d5c30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c16:	6833      	ldr	r3, [r6, #0]
   d5c18:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c1c:	689b      	ldr	r3, [r3, #8]
   d5c1e:	4630      	mov	r0, r6
   d5c20:	4798      	blx	r3
     if (chunk>=0)
   d5c22:	2800      	cmp	r0, #0
   d5c24:	db01      	blt.n	d5c2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c26:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c28:	e7f3      	b.n	d5c12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c2a:	2c00      	cmp	r4, #0
   d5c2c:	bf08      	it	eq
   d5c2e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c30:	4620      	mov	r0, r4
   d5c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c34:	b570      	push	{r4, r5, r6, lr}
   d5c36:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c38:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c3a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c3c:	b149      	cbz	r1, d5c52 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c3e:	f002 fefd 	bl	d8a3c <strlen>
   d5c42:	682b      	ldr	r3, [r5, #0]
   d5c44:	4602      	mov	r2, r0
   d5c46:	4621      	mov	r1, r4
   d5c48:	4628      	mov	r0, r5
   d5c4a:	68db      	ldr	r3, [r3, #12]
    }
   d5c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c50:	4718      	bx	r3
    }
   d5c52:	bd70      	pop	{r4, r5, r6, pc}

000d5c54 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c54:	6803      	ldr	r3, [r0, #0]
   d5c56:	689b      	ldr	r3, [r3, #8]
   d5c58:	4718      	bx	r3

000d5c5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c5a:	b530      	push	{r4, r5, lr}
   d5c5c:	b08b      	sub	sp, #44	; 0x2c
   d5c5e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c60:	2100      	movs	r1, #0
   d5c62:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c66:	2a01      	cmp	r2, #1
   d5c68:	bf98      	it	ls
   d5c6a:	220a      	movls	r2, #10
   d5c6c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5c70:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5c74:	fb05 3312 	mls	r3, r5, r2, r3
   d5c78:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c7c:	2b09      	cmp	r3, #9
   d5c7e:	bf94      	ite	ls
   d5c80:	3330      	addls	r3, #48	; 0x30
   d5c82:	3337      	addhi	r3, #55	; 0x37
   d5c84:	b2db      	uxtb	r3, r3
   d5c86:	4621      	mov	r1, r4
   d5c88:	f804 3901 	strb.w	r3, [r4], #-1
   d5c8c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5c8e:	2d00      	cmp	r5, #0
   d5c90:	d1ee      	bne.n	d5c70 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5c92:	f7ff ffcf 	bl	d5c34 <_ZN5Print5writeEPKc>
}
   d5c96:	b00b      	add	sp, #44	; 0x2c
   d5c98:	bd30      	pop	{r4, r5, pc}

000d5c9a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5c9a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5c9c:	b92a      	cbnz	r2, d5caa <_ZN5Print5printEmi+0x10>
   d5c9e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5ca4:	689b      	ldr	r3, [r3, #8]
   d5ca6:	b2c9      	uxtb	r1, r1
   d5ca8:	4718      	bx	r3
  else return printNumber(n, base);
   d5caa:	b2d2      	uxtb	r2, r2
}
   d5cac:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5cb0:	f7ff bfd3 	b.w	d5c5a <_ZN5Print11printNumberEmh>

000d5cb4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5cb4:	f7ff bff1 	b.w	d5c9a <_ZN5Print5printEmi>

000d5cb8 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5cb8:	b510      	push	{r4, lr}
  if (0 == max) {
   d5cba:	4604      	mov	r4, r0
   d5cbc:	b130      	cbz	r0, d5ccc <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d5cbe:	f002 fe7b 	bl	d89b8 <rand>
   d5cc2:	fb90 f3f4 	sdiv	r3, r0, r4
   d5cc6:	fb03 0014 	mls	r0, r3, r4, r0
   d5cca:	bd10      	pop	{r4, pc}
}
   d5ccc:	bd10      	pop	{r4, pc}

000d5cce <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d5cce:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d5cd0:	b510      	push	{r4, lr}
   d5cd2:	4604      	mov	r4, r0
  if (min >= max) {
   d5cd4:	da04      	bge.n	d5ce0 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d5cd6:	1a08      	subs	r0, r1, r0
   d5cd8:	f7ff ffee 	bl	d5cb8 <_Z6randomi>
   d5cdc:	4420      	add	r0, r4
   d5cde:	bd10      	pop	{r4, pc}
}
   d5ce0:	bd10      	pop	{r4, pc}

000d5ce2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5ce2:	b510      	push	{r4, lr}
   d5ce4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ce6:	f7ff fb12 	bl	d530e <_ZNSt14_Function_baseD1Ev>
   d5cea:	4620      	mov	r0, r4
   d5cec:	bd10      	pop	{r4, pc}
	...

000d5cf0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5cf0:	4803      	ldr	r0, [pc, #12]	; (d5d00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5cf2:	4a04      	ldr	r2, [pc, #16]	; (d5d04 <_GLOBAL__sub_I_RGB+0x14>)
   d5cf4:	4904      	ldr	r1, [pc, #16]	; (d5d08 <_GLOBAL__sub_I_RGB+0x18>)
   d5cf6:	2300      	movs	r3, #0
   d5cf8:	6083      	str	r3, [r0, #8]
   d5cfa:	f000 be75 	b.w	d69e8 <__aeabi_atexit>
   d5cfe:	bf00      	nop
   d5d00:	2003e5bc 	.word	0x2003e5bc
   d5d04:	2003e3b0 	.word	0x2003e3b0
   d5d08:	000d5ce3 	.word	0x000d5ce3

000d5d0c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5d0c:	4770      	bx	lr

000d5d0e <_ZN8SPIClassD0Ev>:
   d5d0e:	b510      	push	{r4, lr}
   d5d10:	4604      	mov	r4, r0
   d5d12:	f7fe f9c4 	bl	d409e <_ZdlPv>
   d5d16:	4620      	mov	r0, r4
   d5d18:	bd10      	pop	{r4, pc}
	...

000d5d1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5d1c:	b570      	push	{r4, r5, r6, lr}
   d5d1e:	4b08      	ldr	r3, [pc, #32]	; (d5d40 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5d20:	6003      	str	r3, [r0, #0]
   d5d22:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5d24:	2500      	movs	r5, #0
   d5d26:	460e      	mov	r6, r1
   d5d28:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5d2c:	f7ff f866 	bl	d4dfc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5d30:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5d32:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5d34:	f7ff f992 	bl	d505c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5d38:	60a5      	str	r5, [r4, #8]
}
   d5d3a:	4620      	mov	r0, r4
   d5d3c:	bd70      	pop	{r4, r5, r6, pc}
   d5d3e:	bf00      	nop
   d5d40:	000da868 	.word	0x000da868

000d5d44 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5d44:	7900      	ldrb	r0, [r0, #4]
   d5d46:	f7ff b991 	b.w	d506c <HAL_SPI_Is_Enabled>

000d5d4a <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d5d4a:	4770      	bx	lr

000d5d4c <_ZN21StringPrintableHelperD0Ev>:
   d5d4c:	b510      	push	{r4, lr}
   d5d4e:	4604      	mov	r4, r0
   d5d50:	f7fe f9a5 	bl	d409e <_ZdlPv>
   d5d54:	4620      	mov	r0, r4
   d5d56:	bd10      	pop	{r4, pc}

000d5d58 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5d58:	b510      	push	{r4, lr}
   d5d5a:	4604      	mov	r4, r0
{
	free(buffer);
   d5d5c:	6800      	ldr	r0, [r0, #0]
   d5d5e:	f7ff faab 	bl	d52b8 <free>
}
   d5d62:	4620      	mov	r0, r4
   d5d64:	bd10      	pop	{r4, pc}

000d5d66 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5d66:	b510      	push	{r4, lr}
   d5d68:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5d6a:	6800      	ldr	r0, [r0, #0]
   d5d6c:	b108      	cbz	r0, d5d72 <_ZN6String10invalidateEv+0xc>
   d5d6e:	f7ff faa3 	bl	d52b8 <free>
	buffer = NULL;
   d5d72:	2300      	movs	r3, #0
   d5d74:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5d76:	60a3      	str	r3, [r4, #8]
   d5d78:	6063      	str	r3, [r4, #4]
   d5d7a:	bd10      	pop	{r4, pc}

000d5d7c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5d7c:	b538      	push	{r3, r4, r5, lr}
   d5d7e:	4604      	mov	r4, r0
   d5d80:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5d82:	6800      	ldr	r0, [r0, #0]
   d5d84:	3101      	adds	r1, #1
   d5d86:	f7ff fa9f 	bl	d52c8 <realloc>
	if (newbuffer) {
   d5d8a:	b110      	cbz	r0, d5d92 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5d8c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5d90:	2001      	movs	r0, #1
	}
	return 0;
}
   d5d92:	bd38      	pop	{r3, r4, r5, pc}

000d5d94 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d94:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5d96:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d98:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5d9a:	b113      	cbz	r3, d5da2 <_ZN6String7reserveEj+0xe>
   d5d9c:	6843      	ldr	r3, [r0, #4]
   d5d9e:	428b      	cmp	r3, r1
   d5da0:	d207      	bcs.n	d5db2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5da2:	4620      	mov	r0, r4
   d5da4:	f7ff ffea 	bl	d5d7c <_ZN6String12changeBufferEj>
   d5da8:	b120      	cbz	r0, d5db4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5daa:	68a3      	ldr	r3, [r4, #8]
   d5dac:	b90b      	cbnz	r3, d5db2 <_ZN6String7reserveEj+0x1e>
   d5dae:	6822      	ldr	r2, [r4, #0]
   d5db0:	7013      	strb	r3, [r2, #0]
   d5db2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5db4:	bd10      	pop	{r4, pc}

000d5db6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5db6:	b570      	push	{r4, r5, r6, lr}
   d5db8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5dba:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5dbc:	4604      	mov	r4, r0
   d5dbe:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5dc0:	f7ff ffe8 	bl	d5d94 <_ZN6String7reserveEj>
   d5dc4:	b918      	cbnz	r0, d5dce <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	f7ff ffcd 	bl	d5d66 <_ZN6String10invalidateEv>
		return *this;
   d5dcc:	e009      	b.n	d5de2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5dce:	462a      	mov	r2, r5
   d5dd0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5dd2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5dd4:	6820      	ldr	r0, [r4, #0]
   d5dd6:	f002 fddc 	bl	d8992 <memcpy>
	buffer[len] = 0;
   d5dda:	6822      	ldr	r2, [r4, #0]
   d5ddc:	68a3      	ldr	r3, [r4, #8]
   d5dde:	2100      	movs	r1, #0
   d5de0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5de2:	4620      	mov	r0, r4
   d5de4:	bd70      	pop	{r4, r5, r6, pc}

000d5de6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5de6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5de8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5dea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5dec:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5dee:	6043      	str	r3, [r0, #4]
	len = 0;
   d5df0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5df2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5df4:	460d      	mov	r5, r1
   d5df6:	b139      	cbz	r1, d5e08 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5df8:	4608      	mov	r0, r1
   d5dfa:	f002 fe1f 	bl	d8a3c <strlen>
   d5dfe:	4629      	mov	r1, r5
   d5e00:	4602      	mov	r2, r0
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff ffd7 	bl	d5db6 <_ZN6String4copyEPKcj>
}
   d5e08:	4620      	mov	r0, r4
   d5e0a:	bd38      	pop	{r3, r4, r5, pc}

000d5e0c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5e0c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5e0e:	b510      	push	{r4, lr}
   d5e10:	460b      	mov	r3, r1
   d5e12:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5e14:	d007      	beq.n	d5e26 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5e16:	6809      	ldr	r1, [r1, #0]
   d5e18:	b119      	cbz	r1, d5e22 <_ZN6StringaSERKS_+0x16>
   d5e1a:	689a      	ldr	r2, [r3, #8]
   d5e1c:	f7ff ffcb 	bl	d5db6 <_ZN6String4copyEPKcj>
   d5e20:	e001      	b.n	d5e26 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5e22:	f7ff ffa0 	bl	d5d66 <_ZN6String10invalidateEv>

	return *this;
}
   d5e26:	4620      	mov	r0, r4
   d5e28:	bd10      	pop	{r4, pc}

000d5e2a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e2a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e2c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e2e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e30:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e32:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e34:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e36:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5e38:	f7ff ffe8 	bl	d5e0c <_ZN6StringaSERKS_>
}
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	bd10      	pop	{r4, pc}

000d5e40 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5e40:	b570      	push	{r4, r5, r6, lr}
   d5e42:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5e44:	460e      	mov	r6, r1
   d5e46:	b909      	cbnz	r1, d5e4c <_ZN6String6concatEPKcj+0xc>
   d5e48:	2000      	movs	r0, #0
   d5e4a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5e4c:	b16a      	cbz	r2, d5e6a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5e4e:	6883      	ldr	r3, [r0, #8]
   d5e50:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5e52:	4629      	mov	r1, r5
   d5e54:	f7ff ff9e 	bl	d5d94 <_ZN6String7reserveEj>
   d5e58:	2800      	cmp	r0, #0
   d5e5a:	d0f5      	beq.n	d5e48 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5e5c:	6820      	ldr	r0, [r4, #0]
   d5e5e:	68a3      	ldr	r3, [r4, #8]
   d5e60:	4631      	mov	r1, r6
   d5e62:	4418      	add	r0, r3
   d5e64:	f002 fde2 	bl	d8a2c <strcpy>
	len = newlen;
   d5e68:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5e6a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5e6c:	bd70      	pop	{r4, r5, r6, pc}

000d5e6e <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d5e6e:	b538      	push	{r3, r4, r5, lr}
   d5e70:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d5e72:	6880      	ldr	r0, [r0, #8]
   d5e74:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d5e76:	f7ff ffe3 	bl	d5e40 <_ZN6String6concatEPKcj>
   d5e7a:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d5e7c:	6898      	ldr	r0, [r3, #8]
    }
   d5e7e:	1b40      	subs	r0, r0, r5
   d5e80:	bd38      	pop	{r3, r4, r5, pc}

000d5e82 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5e82:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5e84:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5e86:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5e8a:	2201      	movs	r2, #1
   d5e8c:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5e8e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5e92:	f7ff ffd5 	bl	d5e40 <_ZN6String6concatEPKcj>
}
   d5e96:	b003      	add	sp, #12
   d5e98:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e9c <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d5e9c:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d5e9e:	6880      	ldr	r0, [r0, #8]
   d5ea0:	f7ff ffef 	bl	d5e82 <_ZN6String6concatEc>
    }
   d5ea4:	bd08      	pop	{r3, pc}

000d5ea6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5ea6:	6800      	ldr	r0, [r0, #0]
   d5ea8:	b108      	cbz	r0, d5eae <_ZNK6String5toIntEv+0x8>
   d5eaa:	f002 bd4d 	b.w	d8948 <atol>
	return 0;
}
   d5eae:	4770      	bx	lr

000d5eb0 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5eb0:	b530      	push	{r4, r5, lr}
   d5eb2:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eb4:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5eb6:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5eb8:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eba:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5ebc:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ebe:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ec0:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d5ec2:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5ec4:	4b06      	ldr	r3, [pc, #24]	; (d5ee0 <_ZN6StringC1ERK9Printable+0x30>)
   d5ec6:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5ec8:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5eca:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d5ecc:	f7ff ff62 	bl	d5d94 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d5ed0:	682b      	ldr	r3, [r5, #0]
   d5ed2:	a901      	add	r1, sp, #4
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	4628      	mov	r0, r5
   d5ed8:	4798      	blx	r3
}
   d5eda:	4620      	mov	r0, r4
   d5edc:	b005      	add	sp, #20
   d5ede:	bd30      	pop	{r4, r5, pc}
   d5ee0:	000da878 	.word	0x000da878

000d5ee4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5ee4:	4b05      	ldr	r3, [pc, #20]	; (d5efc <_GLOBAL__sub_I_System+0x18>)
   d5ee6:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5eea:	2000      	movs	r0, #0
   d5eec:	805a      	strh	r2, [r3, #2]
   d5eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5ef2:	7018      	strb	r0, [r3, #0]
   d5ef4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ef6:	f7ff b941 	b.w	d517c <set_system_mode>
   d5efa:	bf00      	nop
   d5efc:	2003e5cc 	.word	0x2003e5cc

000d5f00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f00:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f02:	681a      	ldr	r2, [r3, #0]
   d5f04:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f06:	601a      	str	r2, [r3, #0]
   d5f08:	4770      	bx	lr
   d5f0a:	bf00      	nop
   d5f0c:	2003e308 	.word	0x2003e308
   d5f10:	2003e5d4 	.word	0x2003e5d4

000d5f14 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5f14:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5f16:	6804      	ldr	r4, [r0, #0]
   d5f18:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5f1a:	46a4      	mov	ip, r4
    }
   d5f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5f20:	4760      	bx	ip

000d5f22 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5f22:	6803      	ldr	r3, [r0, #0]
   d5f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f26:	4718      	bx	r3

000d5f28 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5f28:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5f2a:	4770      	bx	lr

000d5f2c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5f2c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5f2e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5f30:	1a10      	subs	r0, r2, r0
   d5f32:	4770      	bx	lr

000d5f34 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5f34:	b513      	push	{r0, r1, r4, lr}
   d5f36:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5f38:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5f3a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5f3e:	68d4      	ldr	r4, [r2, #12]
   d5f40:	4619      	mov	r1, r3
   d5f42:	2201      	movs	r2, #1
   d5f44:	47a0      	blx	r4
}
   d5f46:	b002      	add	sp, #8
   d5f48:	bd10      	pop	{r4, pc}

000d5f4a <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d5f4a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5f4c:	6803      	ldr	r3, [r0, #0]
   d5f4e:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5f50:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5f52:	4798      	blx	r3
   d5f54:	b128      	cbz	r0, d5f62 <_ZN3UDP4readEv+0x18>
   d5f56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5f5a:	1c59      	adds	r1, r3, #1
   d5f5c:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5f5e:	5cd0      	ldrb	r0, [r2, r3]
   d5f60:	bd10      	pop	{r4, pc}
   d5f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5f66:	bd10      	pop	{r4, pc}

000d5f68 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5f68:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5f6a:	6803      	ldr	r3, [r0, #0]
   d5f6c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5f6e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5f70:	4798      	blx	r3
   d5f72:	b118      	cbz	r0, d5f7c <_ZN3UDP4peekEv+0x14>
   d5f74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5f76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5f78:	5cd0      	ldrb	r0, [r2, r3]
   d5f7a:	bd10      	pop	{r4, pc}
   d5f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5f80:	bd10      	pop	{r4, pc}

000d5f82 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5f82:	4770      	bx	lr

000d5f84 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5f84:	b410      	push	{r4}
   d5f86:	4603      	mov	r3, r0
   d5f88:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5f8a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5f8c:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5f8e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5f90:	6803      	ldr	r3, [r0, #0]
   d5f92:	1a52      	subs	r2, r2, r1
   d5f94:	68db      	ldr	r3, [r3, #12]
   d5f96:	4421      	add	r1, r4
}
   d5f98:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5f9c:	4718      	bx	r3

000d5f9e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5f9e:	f1a0 0010 	sub.w	r0, r0, #16
   d5fa2:	f7ff bfef 	b.w	d5f84 <_ZNK3UDP7printToER5Print>

000d5fa6 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5fa8:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5faa:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5fac:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5fb0:	4604      	mov	r4, r0
   d5fb2:	460f      	mov	r7, r1
   d5fb4:	4615      	mov	r5, r2
    stop();
   d5fb6:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5fb8:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5fba:	4632      	mov	r2, r6
   d5fbc:	2100      	movs	r1, #0
   d5fbe:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5fc0:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5fc2:	f002 fcf1 	bl	d89a8 <memset>
    saddr.sin6_len = sizeof(saddr);
   d5fc6:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5fca:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5fcc:	260a      	movs	r6, #10
   d5fce:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5fd2:	f7fe fffb 	bl	d4fcc <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5fd6:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5fd8:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5fdc:	2102      	movs	r1, #2
   d5fde:	4630      	mov	r0, r6
   d5fe0:	f7ff f834 	bl	d504c <sock_socket>

    if (_sock < 0) {
   d5fe4:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5fe6:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5fe8:	db24      	blt.n	d6034 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5fea:	2204      	movs	r2, #4
   d5fec:	9200      	str	r2, [sp, #0]
   d5fee:	ab02      	add	r3, sp, #8
   d5ff0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5ff4:	f7ff f80a 	bl	d500c <sock_setsockopt>
   d5ff8:	b9e0      	cbnz	r0, d6034 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5ffa:	b195      	cbz	r5, d6022 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5ffc:	9003      	str	r0, [sp, #12]
   d5ffe:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6002:	a903      	add	r1, sp, #12
   d6004:	b2e8      	uxtb	r0, r5
   d6006:	f7fe ffa1 	bl	d4f4c <if_index_to_name>
   d600a:	b998      	cbnz	r0, d6034 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d600c:	2306      	movs	r3, #6
   d600e:	9300      	str	r3, [sp, #0]
   d6010:	f241 020b 	movw	r2, #4107	; 0x100b
   d6014:	ab03      	add	r3, sp, #12
   d6016:	f640 71ff 	movw	r1, #4095	; 0xfff
   d601a:	6960      	ldr	r0, [r4, #20]
   d601c:	f7fe fff6 	bl	d500c <sock_setsockopt>
   d6020:	b940      	cbnz	r0, d6034 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6022:	221c      	movs	r2, #28
   d6024:	a905      	add	r1, sp, #20
   d6026:	6960      	ldr	r0, [r4, #20]
   d6028:	f7fe ffe8 	bl	d4ffc <sock_bind>
   d602c:	b910      	cbnz	r0, d6034 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d602e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6030:	2001      	movs	r0, #1
   d6032:	e004      	b.n	d603e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6034:	6823      	ldr	r3, [r4, #0]
   d6036:	4620      	mov	r0, r4
   d6038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d603a:	4798      	blx	r3
   d603c:	2000      	movs	r0, #0
    }
    return bound;
}
   d603e:	b00d      	add	sp, #52	; 0x34
   d6040:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6042 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d6042:	b510      	push	{r4, lr}
   d6044:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6046:	6940      	ldr	r0, [r0, #20]
   d6048:	2800      	cmp	r0, #0
   d604a:	db01      	blt.n	d6050 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d604c:	f7fe ffe6 	bl	d501c <sock_close>
    }

    _sock = -1;
   d6050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6054:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6056:	2300      	movs	r3, #0
   d6058:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d605a:	8723      	strh	r3, [r4, #56]	; 0x38
   d605c:	bd10      	pop	{r4, pc}

000d605e <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d605e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6060:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6062:	4605      	mov	r5, r0
   d6064:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6066:	b113      	cbz	r3, d606e <_ZN3UDP5writeEPKhj+0x10>
   d6068:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d606a:	1a24      	subs	r4, r4, r0
   d606c:	e000      	b.n	d6070 <_ZN3UDP5writeEPKhj+0x12>
   d606e:	461c      	mov	r4, r3
   d6070:	4294      	cmp	r4, r2
   d6072:	bf28      	it	cs
   d6074:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d6076:	4622      	mov	r2, r4
   d6078:	4418      	add	r0, r3
   d607a:	f002 fc8a 	bl	d8992 <memcpy>
    _offset += size;
   d607e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6080:	4423      	add	r3, r4
   d6082:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d6084:	4620      	mov	r0, r4
   d6086:	bd38      	pop	{r3, r4, r5, pc}

000d6088 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6088:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d608a:	6803      	ldr	r3, [r0, #0]
   d608c:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d608e:	4604      	mov	r4, r0
   d6090:	460e      	mov	r6, r1
   d6092:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6094:	4798      	blx	r3
   d6096:	b188      	cbz	r0, d60bc <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d6098:	6823      	ldr	r3, [r4, #0]
   d609a:	4620      	mov	r0, r4
   d609c:	691b      	ldr	r3, [r3, #16]
   d609e:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d60a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d60a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d60a4:	4285      	cmp	r5, r0
   d60a6:	bfa8      	it	ge
   d60a8:	4605      	movge	r5, r0
   d60aa:	4419      	add	r1, r3
   d60ac:	462a      	mov	r2, r5
   d60ae:	4630      	mov	r0, r6
   d60b0:	f002 fc6f 	bl	d8992 <memcpy>
        _offset += read;
   d60b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d60b6:	442b      	add	r3, r5
   d60b8:	86e3      	strh	r3, [r4, #54]	; 0x36
   d60ba:	e001      	b.n	d60c0 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d60bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d60c0:	4628      	mov	r0, r5
   d60c2:	bd70      	pop	{r4, r5, r6, pc}

000d60c4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d60c4:	b570      	push	{r4, r5, r6, lr}
   d60c6:	4604      	mov	r4, r0
   d60c8:	4b05      	ldr	r3, [pc, #20]	; (d60e0 <_ZN3UDP8remoteIPEv+0x1c>)
   d60ca:	f844 3b04 	str.w	r3, [r4], #4
   d60ce:	f101 0520 	add.w	r5, r1, #32
   d60d2:	4606      	mov	r6, r0
   d60d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60d8:	682b      	ldr	r3, [r5, #0]
   d60da:	7023      	strb	r3, [r4, #0]
   d60dc:	4630      	mov	r0, r6
   d60de:	bd70      	pop	{r4, r5, r6, pc}
   d60e0:	000da6e0 	.word	0x000da6e0

000d60e4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d60e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60e6:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d60e8:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d60ea:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d60ec:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d60ee:	4a0a      	ldr	r2, [pc, #40]	; (d6118 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d60f0:	9202      	str	r2, [sp, #8]
   d60f2:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d60f4:	468e      	mov	lr, r1
   d60f6:	4606      	mov	r6, r0
   d60f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60fa:	ac03      	add	r4, sp, #12
   d60fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60fe:	682b      	ldr	r3, [r5, #0]
   d6100:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6102:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6106:	9300      	str	r3, [sp, #0]
   d6108:	4662      	mov	r2, ip
   d610a:	ab02      	add	r3, sp, #8
   d610c:	4671      	mov	r1, lr
   d610e:	4630      	mov	r0, r6
   d6110:	47b8      	blx	r7
    }
   d6112:	b009      	add	sp, #36	; 0x24
   d6114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6116:	bf00      	nop
   d6118:	000da6e0 	.word	0x000da6e0

000d611c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d611c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d611e:	6803      	ldr	r3, [r0, #0]
   d6120:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6124:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6126:	4b0d      	ldr	r3, [pc, #52]	; (d615c <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6128:	b089      	sub	sp, #36	; 0x24
   d612a:	f100 0620 	add.w	r6, r0, #32
   d612e:	4604      	mov	r4, r0
   d6130:	9302      	str	r3, [sp, #8]
   d6132:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6134:	ad03      	add	r5, sp, #12
   d6136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6138:	6833      	ldr	r3, [r6, #0]
   d613a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d613c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d613e:	9300      	str	r3, [sp, #0]
   d6140:	4672      	mov	r2, lr
   d6142:	ab02      	add	r3, sp, #8
   d6144:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6146:	4620      	mov	r0, r4
   d6148:	47b8      	blx	r7
    flush(); // wait for send to complete
   d614a:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d614c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d614e:	69db      	ldr	r3, [r3, #28]
   d6150:	4620      	mov	r0, r4
   d6152:	4798      	blx	r3
    return result;
}
   d6154:	4628      	mov	r0, r5
   d6156:	b009      	add	sp, #36	; 0x24
   d6158:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d615a:	bf00      	nop
   d615c:	000da6e0 	.word	0x000da6e0

000d6160 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6160:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6162:	7843      	ldrb	r3, [r0, #1]
   d6164:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6166:	b08d      	sub	sp, #52	; 0x34
   d6168:	4605      	mov	r5, r0
   d616a:	460c      	mov	r4, r1
   d616c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d616e:	d101      	bne.n	d6174 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6170:	1d01      	adds	r1, r0, #4
   d6172:	e033      	b.n	d61dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6174:	2b0a      	cmp	r3, #10
   d6176:	d135      	bne.n	d61e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6178:	2211      	movs	r2, #17
   d617a:	2100      	movs	r1, #0
   d617c:	a801      	add	r0, sp, #4
   d617e:	f002 fc13 	bl	d89a8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6182:	68ab      	ldr	r3, [r5, #8]
   d6184:	b943      	cbnz	r3, d6198 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6186:	68eb      	ldr	r3, [r5, #12]
   d6188:	b933      	cbnz	r3, d6198 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d618a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d618e:	692e      	ldr	r6, [r5, #16]
   d6190:	f7fe ff0c 	bl	d4fac <inet_htonl>
   d6194:	4286      	cmp	r6, r0
   d6196:	d01f      	beq.n	d61d8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6198:	f105 0308 	add.w	r3, r5, #8
   d619c:	ae01      	add	r6, sp, #4
   d619e:	f105 0e18 	add.w	lr, r5, #24
   d61a2:	6818      	ldr	r0, [r3, #0]
   d61a4:	6859      	ldr	r1, [r3, #4]
   d61a6:	4632      	mov	r2, r6
   d61a8:	c203      	stmia	r2!, {r0, r1}
   d61aa:	3308      	adds	r3, #8
   d61ac:	4573      	cmp	r3, lr
   d61ae:	4616      	mov	r6, r2
   d61b0:	d1f7      	bne.n	d61a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d61b2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d61b4:	a901      	add	r1, sp, #4
   d61b6:	a806      	add	r0, sp, #24
   d61b8:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d61ba:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d61be:	f7ff f9a5 	bl	d550c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d61c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d61c4:	3404      	adds	r4, #4
   d61c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61c8:	6833      	ldr	r3, [r6, #0]
   d61ca:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d61cc:	b157      	cbz	r7, d61e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d61ce:	8868      	ldrh	r0, [r5, #2]
   d61d0:	f7fe fef4 	bl	d4fbc <inet_ntohs>
   d61d4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d61d6:	e005      	b.n	d61e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d61d8:	f105 0114 	add.w	r1, r5, #20
   d61dc:	4620      	mov	r0, r4
   d61de:	f7ff f9ca 	bl	d5576 <_ZN9IPAddressaSEPKh>
   d61e2:	e7f3      	b.n	d61cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d61e4:	b00d      	add	sp, #52	; 0x34
   d61e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61e8 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d61e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61ec:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d61ee:	ab0e      	add	r3, sp, #56	; 0x38
   d61f0:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d61f2:	4606      	mov	r6, r0
   d61f4:	4617      	mov	r7, r2
   d61f6:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d61f8:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d61fc:	462a      	mov	r2, r5
   d61fe:	4629      	mov	r1, r5
   d6200:	f7fe fef4 	bl	d4fec <netdb_getaddrinfo>
   d6204:	2800      	cmp	r0, #0
   d6206:	db1f      	blt.n	d6248 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6208:	9b01      	ldr	r3, [sp, #4]
   d620a:	b1fb      	cbz	r3, d624c <_ZN3UDP11beginPacketEPKct+0x64>
   d620c:	695b      	ldr	r3, [r3, #20]
   d620e:	b1eb      	cbz	r3, d624c <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6210:	a802      	add	r0, sp, #8
   d6212:	f7ff f96d 	bl	d54f0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6216:	9b01      	ldr	r3, [sp, #4]
   d6218:	462a      	mov	r2, r5
   d621a:	6958      	ldr	r0, [r3, #20]
   d621c:	a902      	add	r1, sp, #8
   d621e:	f7ff ff9f 	bl	d6160 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6222:	a802      	add	r0, sp, #8
   d6224:	f7ff f984 	bl	d5530 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6228:	b180      	cbz	r0, d624c <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d622a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d622c:	ad03      	add	r5, sp, #12
   d622e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6232:	4b0b      	ldr	r3, [pc, #44]	; (d6260 <_ZN3UDP11beginPacketEPKct+0x78>)
   d6234:	9308      	str	r3, [sp, #32]
   d6236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6238:	ac09      	add	r4, sp, #36	; 0x24
   d623a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d623c:	682b      	ldr	r3, [r5, #0]
   d623e:	7023      	strb	r3, [r4, #0]
   d6240:	463a      	mov	r2, r7
   d6242:	a908      	add	r1, sp, #32
   d6244:	4630      	mov	r0, r6
   d6246:	47c0      	blx	r8
   d6248:	4604      	mov	r4, r0
   d624a:	e001      	b.n	d6250 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d624c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6250:	9801      	ldr	r0, [sp, #4]
   d6252:	f7fe fec3 	bl	d4fdc <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6256:	4620      	mov	r0, r4
   d6258:	b00e      	add	sp, #56	; 0x38
   d625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d625e:	bf00      	nop
   d6260:	000da6e0 	.word	0x000da6e0

000d6264 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6268:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d626c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6270:	b098      	sub	sp, #96	; 0x60
   d6272:	4605      	mov	r5, r0
   d6274:	460c      	mov	r4, r1
   d6276:	4617      	mov	r7, r2
   d6278:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d627a:	db00      	blt.n	d627e <_ZN3UDP13receivePacketEPhjm+0x1a>
   d627c:	b911      	cbnz	r1, d6284 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d627e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6282:	e04e      	b.n	d6322 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d6284:	f04f 0a1c 	mov.w	sl, #28
   d6288:	ae09      	add	r6, sp, #36	; 0x24
   d628a:	4652      	mov	r2, sl
   d628c:	2100      	movs	r1, #0
   d628e:	4630      	mov	r0, r6
   d6290:	f002 fb8a 	bl	d89a8 <memset>
        socklen_t slen = sizeof(saddr);
   d6294:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d6298:	f1b9 0f00 	cmp.w	r9, #0
   d629c:	d014      	beq.n	d62c8 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d629e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d62a2:	fbb9 f1f2 	udiv	r1, r9, r2
   d62a6:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d62a8:	fb02 9111 	mls	r1, r2, r1, r9
   d62ac:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d62ae:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d62b0:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d62b2:	9300      	str	r3, [sp, #0]
   d62b4:	f241 0206 	movw	r2, #4102	; 0x1006
   d62b8:	ab10      	add	r3, sp, #64	; 0x40
   d62ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   d62be:	4640      	mov	r0, r8
   d62c0:	f7fe fea4 	bl	d500c <sock_setsockopt>
            if (ret) {
   d62c4:	b108      	cbz	r0, d62ca <_ZN3UDP13receivePacketEPhjm+0x66>
   d62c6:	e02c      	b.n	d6322 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d62c8:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d62ca:	ab04      	add	r3, sp, #16
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	4621      	mov	r1, r4
   d62d0:	4603      	mov	r3, r0
   d62d2:	9600      	str	r6, [sp, #0]
   d62d4:	463a      	mov	r2, r7
   d62d6:	6968      	ldr	r0, [r5, #20]
   d62d8:	f7fe fea8 	bl	d502c <sock_recvfrom>
        if (ret >= 0) {
   d62dc:	1e04      	subs	r4, r0, #0
   d62de:	db1f      	blt.n	d6320 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d62e0:	f105 071c 	add.w	r7, r5, #28
   d62e4:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d62e8:	4630      	mov	r0, r6
   d62ea:	4639      	mov	r1, r7
   d62ec:	f7ff ff38 	bl	d6160 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d62f0:	2600      	movs	r6, #0
   d62f2:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d62f4:	4639      	mov	r1, r7
   d62f6:	a805      	add	r0, sp, #20
   d62f8:	9310      	str	r3, [sp, #64]	; 0x40
   d62fa:	9611      	str	r6, [sp, #68]	; 0x44
   d62fc:	f7ff fdd8 	bl	d5eb0 <_ZN6StringC1ERK9Printable>
   d6300:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d6302:	9303      	str	r3, [sp, #12]
   d6304:	9b05      	ldr	r3, [sp, #20]
   d6306:	9302      	str	r3, [sp, #8]
   d6308:	4b07      	ldr	r3, [pc, #28]	; (d6328 <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d630a:	9300      	str	r3, [sp, #0]
   d630c:	2001      	movs	r0, #1
   d630e:	9401      	str	r4, [sp, #4]
   d6310:	4633      	mov	r3, r6
   d6312:	aa10      	add	r2, sp, #64	; 0x40
   d6314:	4905      	ldr	r1, [pc, #20]	; (d632c <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d6316:	f7fe ff29 	bl	d516c <log_message>
   d631a:	a805      	add	r0, sp, #20
   d631c:	f7ff fd1c 	bl	d5d58 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6320:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6322:	b018      	add	sp, #96	; 0x60
   d6324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6328:	000da8b1 	.word	0x000da8b1
   d632c:	000da815 	.word	0x000da815

000d6330 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6330:	b538      	push	{r3, r4, r5, lr}
   d6332:	4605      	mov	r5, r0
   d6334:	4614      	mov	r4, r2
   d6336:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6338:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d633a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d633c:	d111      	bne.n	d6362 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d633e:	231c      	movs	r3, #28
   d6340:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6342:	230a      	movs	r3, #10
   d6344:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6346:	f7fe fe41 	bl	d4fcc <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d634a:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d634c:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6350:	1d2b      	adds	r3, r5, #4
   d6352:	3514      	adds	r5, #20
   d6354:	f853 2b04 	ldr.w	r2, [r3], #4
   d6358:	f844 2b04 	str.w	r2, [r4], #4
   d635c:	42ab      	cmp	r3, r5
   d635e:	d1f9      	bne.n	d6354 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6360:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6362:	2b04      	cmp	r3, #4
   d6364:	d10a      	bne.n	d637c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6366:	2310      	movs	r3, #16
   d6368:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d636a:	2302      	movs	r3, #2
   d636c:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d636e:	f7fe fe2d 	bl	d4fcc <inet_htons>
   d6372:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6374:	6868      	ldr	r0, [r5, #4]
   d6376:	f7fe fe19 	bl	d4fac <inet_htonl>
   d637a:	6060      	str	r0, [r4, #4]
   d637c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6380 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6384:	4698      	mov	r8, r3
   d6386:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d6388:	2320      	movs	r3, #32
   d638a:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d638c:	4682      	mov	sl, r0
   d638e:	468b      	mov	fp, r1
   d6390:	a804      	add	r0, sp, #16
   d6392:	4641      	mov	r1, r8
   d6394:	4616      	mov	r6, r2
   d6396:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d639a:	9308      	str	r3, [sp, #32]
   d639c:	9409      	str	r4, [sp, #36]	; 0x24
   d639e:	f7ff fd87 	bl	d5eb0 <_ZN6StringC1ERK9Printable>
   d63a2:	9b04      	ldr	r3, [sp, #16]
   d63a4:	9302      	str	r3, [sp, #8]
   d63a6:	ad08      	add	r5, sp, #32
   d63a8:	4b15      	ldr	r3, [pc, #84]	; (d6400 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d63aa:	4916      	ldr	r1, [pc, #88]	; (d6404 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d63ac:	9300      	str	r3, [sp, #0]
   d63ae:	462a      	mov	r2, r5
   d63b0:	4623      	mov	r3, r4
   d63b2:	2001      	movs	r0, #1
   d63b4:	f8cd 900c 	str.w	r9, [sp, #12]
   d63b8:	9601      	str	r6, [sp, #4]
   d63ba:	f7fe fed7 	bl	d516c <log_message>
	sockaddr_storage s = {};
   d63be:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d63c0:	a804      	add	r0, sp, #16
   d63c2:	f7ff fcc9 	bl	d5d58 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d63c6:	463a      	mov	r2, r7
   d63c8:	4621      	mov	r1, r4
   d63ca:	4628      	mov	r0, r5
   d63cc:	f002 faec 	bl	d89a8 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d63d0:	462a      	mov	r2, r5
   d63d2:	4649      	mov	r1, r9
   d63d4:	4640      	mov	r0, r8
   d63d6:	f7ff ffab 	bl	d6330 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d63da:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d63de:	b14b      	cbz	r3, d63f4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d63e0:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d63e4:	4623      	mov	r3, r4
   d63e6:	4632      	mov	r2, r6
   d63e8:	4659      	mov	r1, fp
   d63ea:	f8da 0014 	ldr.w	r0, [sl, #20]
   d63ee:	f7fe fe25 	bl	d503c <sock_sendto>
   d63f2:	e001      	b.n	d63f8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d63f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d63f8:	b011      	add	sp, #68	; 0x44
   d63fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63fe:	bf00      	nop
   d6400:	000da8ce 	.word	0x000da8ce
   d6404:	000da815 	.word	0x000da815

000d6408 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6408:	b5f0      	push	{r4, r5, r6, r7, lr}
   d640a:	b091      	sub	sp, #68	; 0x44
   d640c:	460c      	mov	r4, r1
   d640e:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d6410:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6412:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d6414:	a809      	add	r0, sp, #36	; 0x24
   d6416:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6418:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d641a:	f002 fac5 	bl	d89a8 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d641e:	aa09      	add	r2, sp, #36	; 0x24
   d6420:	2100      	movs	r1, #0
   d6422:	4620      	mov	r0, r4
   d6424:	f7ff ff84 	bl	d6330 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d6428:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d642c:	2b02      	cmp	r3, #2
   d642e:	d12e      	bne.n	d648e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d6430:	2300      	movs	r3, #0
   d6432:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d6434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6436:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d6438:	b1dd      	cbz	r5, d6472 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d643a:	a902      	add	r1, sp, #8
   d643c:	4628      	mov	r0, r5
   d643e:	f7fe fd8d 	bl	d4f5c <if_get_by_index>
   d6442:	b9b0      	cbnz	r0, d6472 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d6444:	a910      	add	r1, sp, #64	; 0x40
   d6446:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d644a:	9802      	ldr	r0, [sp, #8]
   d644c:	f7fe fd8e 	bl	d4f6c <if_get_addrs>
   d6450:	b960      	cbnz	r0, d646c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d6452:	9b03      	ldr	r3, [sp, #12]
   d6454:	b153      	cbz	r3, d646c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d6456:	68da      	ldr	r2, [r3, #12]
   d6458:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d645a:	7851      	ldrb	r1, [r2, #1]
   d645c:	2902      	cmp	r1, #2
   d645e:	d103      	bne.n	d6468 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d6460:	6852      	ldr	r2, [r2, #4]
   d6462:	b10a      	cbz	r2, d6468 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d6464:	9205      	str	r2, [sp, #20]
   d6466:	e001      	b.n	d646c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	e7f3      	b.n	d6454 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d646c:	9803      	ldr	r0, [sp, #12]
   d646e:	f7fe fd85 	bl	d4f7c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d6472:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d6474:	f04f 0308 	mov.w	r3, #8
   d6478:	9300      	str	r3, [sp, #0]
   d647a:	bf18      	it	ne
   d647c:	2203      	movne	r2, #3
   d647e:	ab04      	add	r3, sp, #16
   d6480:	bf08      	it	eq
   d6482:	2204      	moveq	r2, #4
   d6484:	2100      	movs	r1, #0
   d6486:	4630      	mov	r0, r6
   d6488:	f7fe fdc0 	bl	d500c <sock_setsockopt>
   d648c:	e01e      	b.n	d64cc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d648e:	2b0a      	cmp	r3, #10
   d6490:	d11a      	bne.n	d64c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d6492:	ac04      	add	r4, sp, #16
   d6494:	2214      	movs	r2, #20
   d6496:	2100      	movs	r1, #0
   d6498:	4620      	mov	r0, r4
   d649a:	f002 fa85 	bl	d89a8 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d649e:	ab0b      	add	r3, sp, #44	; 0x2c
   d64a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d64a2:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d64a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d64a8:	f04f 0314 	mov.w	r3, #20
   d64ac:	9300      	str	r3, [sp, #0]
   d64ae:	bf18      	it	ne
   d64b0:	220c      	movne	r2, #12
   d64b2:	4623      	mov	r3, r4
   d64b4:	bf08      	it	eq
   d64b6:	220d      	moveq	r2, #13
   d64b8:	2129      	movs	r1, #41	; 0x29
   d64ba:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d64bc:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d64be:	f7fe fda5 	bl	d500c <sock_setsockopt>
   d64c2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d64c6:	e001      	b.n	d64cc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d64c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d64cc:	b011      	add	sp, #68	; 0x44
   d64ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64d0 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d64d0:	b538      	push	{r3, r4, r5, lr}
   d64d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64d6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d64d8:	4b0b      	ldr	r3, [pc, #44]	; (d6508 <_ZN3UDPC1Ev+0x38>)
   d64da:	f103 0208 	add.w	r2, r3, #8
   d64de:	336c      	adds	r3, #108	; 0x6c
   d64e0:	2500      	movs	r5, #0
   d64e2:	6103      	str	r3, [r0, #16]
   d64e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d64e8:	4604      	mov	r4, r0
   d64ea:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d64ec:	6002      	str	r2, [r0, #0]
   d64ee:	6143      	str	r3, [r0, #20]
   d64f0:	301c      	adds	r0, #28
   d64f2:	f7fe fffd 	bl	d54f0 <_ZN9IPAddressC1Ev>
   d64f6:	f44f 7300 	mov.w	r3, #512	; 0x200
   d64fa:	86e5      	strh	r5, [r4, #54]	; 0x36
   d64fc:	8725      	strh	r5, [r4, #56]	; 0x38
   d64fe:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6500:	6423      	str	r3, [r4, #64]	; 0x40
   d6502:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6504:	4620      	mov	r0, r4
   d6506:	bd38      	pop	{r3, r4, r5, pc}
   d6508:	000da8fc 	.word	0x000da8fc

000d650c <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d650c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d650e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6512:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6514:	b11b      	cbz	r3, d651e <_ZN3UDP13releaseBufferEv+0x12>
   d6516:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6518:	b108      	cbz	r0, d651e <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d651a:	f7fd fdc0 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d651e:	2300      	movs	r3, #0
   d6520:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d6522:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6526:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6528:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d652a:	8723      	strh	r3, [r4, #56]	; 0x38
   d652c:	bd10      	pop	{r4, pc}

000d652e <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d652e:	b570      	push	{r4, r5, r6, lr}
   d6530:	4604      	mov	r4, r0
   d6532:	4616      	mov	r6, r2
   d6534:	460d      	mov	r5, r1
    releaseBuffer();
   d6536:	f7ff ffe9 	bl	d650c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d653a:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d653c:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d653e:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d6540:	b93e      	cbnz	r6, d6552 <_ZN3UDP9setBufferEjPh+0x24>
   d6542:	b135      	cbz	r5, d6552 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d6544:	4628      	mov	r0, r5
   d6546:	f7fd fda8 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d654a:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d654c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d654e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d6552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6554:	b103      	cbz	r3, d6558 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6556:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6558:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d655a:	3000      	adds	r0, #0
   d655c:	bf18      	it	ne
   d655e:	2001      	movne	r0, #1
   d6560:	bd70      	pop	{r4, r5, r6, pc}

000d6562 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6562:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d6564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6566:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d6568:	b91a      	cbnz	r2, d6572 <_ZN3UDP11parsePacketEm+0x10>
   d656a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d656c:	b109      	cbz	r1, d6572 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d656e:	f7ff ffde 	bl	d652e <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6572:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6574:	2300      	movs	r3, #0
   d6576:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6578:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d657a:	b141      	cbz	r1, d658e <_ZN3UDP11parsePacketEm+0x2c>
   d657c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d657e:	b132      	cbz	r2, d658e <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d6580:	6820      	ldr	r0, [r4, #0]
   d6582:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d6584:	4620      	mov	r0, r4
   d6586:	47a8      	blx	r5
        if (result > 0) {
   d6588:	2800      	cmp	r0, #0
            _total = result;
   d658a:	bfc8      	it	gt
   d658c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d658e:	6823      	ldr	r3, [r4, #0]
   d6590:	4620      	mov	r0, r4
   d6592:	691b      	ldr	r3, [r3, #16]
}
   d6594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d6598:	4718      	bx	r3
	...

000d659c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d659c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d659e:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d65a0:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d65a2:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d65a4:	2600      	movs	r6, #0
   d65a6:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d65a8:	4617      	mov	r7, r2
   d65aa:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d65ac:	9308      	str	r3, [sp, #32]
   d65ae:	9609      	str	r6, [sp, #36]	; 0x24
   d65b0:	f7ff fc7e 	bl	d5eb0 <_ZN6StringC1ERK9Printable>
   d65b4:	9b04      	ldr	r3, [sp, #16]
   d65b6:	9301      	str	r3, [sp, #4]
   d65b8:	4b10      	ldr	r3, [pc, #64]	; (d65fc <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d65ba:	9300      	str	r3, [sp, #0]
   d65bc:	aa08      	add	r2, sp, #32
   d65be:	4633      	mov	r3, r6
   d65c0:	490f      	ldr	r1, [pc, #60]	; (d6600 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d65c2:	9702      	str	r7, [sp, #8]
   d65c4:	2001      	movs	r0, #1
   d65c6:	f7fe fdd1 	bl	d516c <log_message>
   d65ca:	a804      	add	r0, sp, #16
   d65cc:	f7ff fbc4 	bl	d5d58 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d65d0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d65d2:	b922      	cbnz	r2, d65de <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d65d4:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d65d6:	b111      	cbz	r1, d65de <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d65d8:	4628      	mov	r0, r5
   d65da:	f7ff ffa8 	bl	d652e <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d65de:	3404      	adds	r4, #4
   d65e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d65e2:	f105 0620 	add.w	r6, r5, #32
   d65e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d65e8:	6823      	ldr	r3, [r4, #0]
   d65ea:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d65ec:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d65ee:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d65f0:	2300      	movs	r3, #0
   d65f2:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d65f4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d65f6:	b011      	add	sp, #68	; 0x44
   d65f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65fa:	bf00      	nop
   d65fc:	000da8e8 	.word	0x000da8e8
   d6600:	000da815 	.word	0x000da815

000d6604 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d6604:	b510      	push	{r4, lr}
   d6606:	4b07      	ldr	r3, [pc, #28]	; (d6624 <_ZN3UDPD1Ev+0x20>)
   d6608:	f103 0208 	add.w	r2, r3, #8
   d660c:	336c      	adds	r3, #108	; 0x6c
   d660e:	4604      	mov	r4, r0
   d6610:	6002      	str	r2, [r0, #0]
   d6612:	6103      	str	r3, [r0, #16]
   d6614:	f7ff fd15 	bl	d6042 <_ZN3UDP4stopEv>
   d6618:	4620      	mov	r0, r4
   d661a:	f7ff ff77 	bl	d650c <_ZN3UDP13releaseBufferEv>
   d661e:	4620      	mov	r0, r4
   d6620:	bd10      	pop	{r4, pc}
   d6622:	bf00      	nop
   d6624:	000da8fc 	.word	0x000da8fc

000d6628 <_ZN3UDPD0Ev>:
   d6628:	b510      	push	{r4, lr}
   d662a:	4604      	mov	r4, r0
   d662c:	f7ff ffea 	bl	d6604 <_ZN3UDPD1Ev>
   d6630:	4620      	mov	r0, r4
   d6632:	f7fd fd34 	bl	d409e <_ZdlPv>
   d6636:	4620      	mov	r0, r4
   d6638:	bd10      	pop	{r4, pc}

000d663a <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d663a:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d663c:	6940      	ldr	r0, [r0, #20]
   d663e:	2800      	cmp	r0, #0
   d6640:	db04      	blt.n	d664c <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d6642:	2301      	movs	r3, #1
   d6644:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d6648:	f7ff bede 	b.w	d6408 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d664c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6650:	4770      	bx	lr

000d6652 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6652:	4770      	bx	lr

000d6654 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6654:	7441      	strb	r1, [r0, #17]
   d6656:	4770      	bx	lr

000d6658 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d6658:	7c00      	ldrb	r0, [r0, #16]
   d665a:	f7fe bd47 	b.w	d50ec <HAL_USART_Available_Data_For_Write>

000d665e <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d665e:	7c00      	ldrb	r0, [r0, #16]
   d6660:	f7fe bd1c 	b.w	d509c <HAL_USART_Available_Data>

000d6664 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d6664:	7c00      	ldrb	r0, [r0, #16]
   d6666:	f7fe bd29 	b.w	d50bc <HAL_USART_Peek_Data>

000d666a <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d666a:	7c00      	ldrb	r0, [r0, #16]
   d666c:	f7fe bd1e 	b.w	d50ac <HAL_USART_Read_Data>

000d6670 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6670:	7c00      	ldrb	r0, [r0, #16]
   d6672:	f7fe bd2b 	b.w	d50cc <HAL_USART_Flush_Data>

000d6676 <_ZN11USARTSerialD0Ev>:
   d6676:	b510      	push	{r4, lr}
   d6678:	4604      	mov	r4, r0
   d667a:	f7fd fd10 	bl	d409e <_ZdlPv>
   d667e:	4620      	mov	r0, r4
   d6680:	bd10      	pop	{r4, pc}

000d6682 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6682:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6684:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6686:	4604      	mov	r4, r0
   d6688:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d668a:	b925      	cbnz	r5, d6696 <_ZN11USARTSerial5writeEh+0x14>
   d668c:	7c00      	ldrb	r0, [r0, #16]
   d668e:	f7fe fd2d 	bl	d50ec <HAL_USART_Available_Data_For_Write>
   d6692:	2800      	cmp	r0, #0
   d6694:	dd05      	ble.n	d66a2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6696:	4631      	mov	r1, r6
   d6698:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d669a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d669e:	f7fe bcf5 	b.w	d508c <HAL_USART_Write_Data>
  }
  return 0;
}
   d66a2:	4628      	mov	r0, r5
   d66a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d66a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d66a8:	b510      	push	{r4, lr}
   d66aa:	4604      	mov	r4, r0
   d66ac:	4608      	mov	r0, r1
   d66ae:	4611      	mov	r1, r2
   d66b0:	2200      	movs	r2, #0
   d66b2:	6062      	str	r2, [r4, #4]
   d66b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66b8:	60a2      	str	r2, [r4, #8]
   d66ba:	4a05      	ldr	r2, [pc, #20]	; (d66d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d66bc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d66be:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d66c0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d66c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d66c4:	461a      	mov	r2, r3
   d66c6:	f7fe fcd9 	bl	d507c <HAL_USART_Init>
}
   d66ca:	4620      	mov	r0, r4
   d66cc:	bd10      	pop	{r4, pc}
   d66ce:	bf00      	nop
   d66d0:	000da974 	.word	0x000da974

000d66d4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d66d4:	7c00      	ldrb	r0, [r0, #16]
   d66d6:	f7fe bd01 	b.w	d50dc <HAL_USART_Is_Enabled>
	...

000d66dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d66de:	4d0c      	ldr	r5, [pc, #48]	; (d6710 <_Z22__fetch_global_Serial1v+0x34>)
   d66e0:	6829      	ldr	r1, [r5, #0]
   d66e2:	f011 0401 	ands.w	r4, r1, #1
   d66e6:	d111      	bne.n	d670c <_Z22__fetch_global_Serial1v+0x30>
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7fd fcdc 	bl	d40a6 <__cxa_guard_acquire>
   d66ee:	b168      	cbz	r0, d670c <_Z22__fetch_global_Serial1v+0x30>
   d66f0:	4a08      	ldr	r2, [pc, #32]	; (d6714 <_Z22__fetch_global_Serial1v+0x38>)
   d66f2:	4b09      	ldr	r3, [pc, #36]	; (d6718 <_Z22__fetch_global_Serial1v+0x3c>)
   d66f4:	4809      	ldr	r0, [pc, #36]	; (d671c <_Z22__fetch_global_Serial1v+0x40>)
   d66f6:	4621      	mov	r1, r4
   d66f8:	f7ff ffd6 	bl	d66a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d66fc:	4628      	mov	r0, r5
   d66fe:	f7fd fcd7 	bl	d40b0 <__cxa_guard_release>
   d6702:	4a07      	ldr	r2, [pc, #28]	; (d6720 <_Z22__fetch_global_Serial1v+0x44>)
   d6704:	4907      	ldr	r1, [pc, #28]	; (d6724 <_Z22__fetch_global_Serial1v+0x48>)
   d6706:	4805      	ldr	r0, [pc, #20]	; (d671c <_Z22__fetch_global_Serial1v+0x40>)
   d6708:	f000 f96e 	bl	d69e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d670c:	4803      	ldr	r0, [pc, #12]	; (d671c <_Z22__fetch_global_Serial1v+0x40>)
   d670e:	bd38      	pop	{r3, r4, r5, pc}
   d6710:	2003e670 	.word	0x2003e670
   d6714:	2003e674 	.word	0x2003e674
   d6718:	2003e5ec 	.word	0x2003e5ec
   d671c:	2003e5d8 	.word	0x2003e5d8
   d6720:	2003e3b0 	.word	0x2003e3b0
   d6724:	000d6653 	.word	0x000d6653

000d6728 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6728:	7441      	strb	r1, [r0, #17]
   d672a:	4770      	bx	lr

000d672c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d672c:	4770      	bx	lr

000d672e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d672e:	2100      	movs	r1, #0
   d6730:	7c00      	ldrb	r0, [r0, #16]
   d6732:	f7fe bd03 	b.w	d513c <HAL_USB_USART_Receive_Data>

000d6736 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d6736:	2101      	movs	r1, #1
   d6738:	7c00      	ldrb	r0, [r0, #16]
   d673a:	f7fe bcff 	b.w	d513c <HAL_USB_USART_Receive_Data>

000d673e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d673e:	7c00      	ldrb	r0, [r0, #16]
   d6740:	f7fe bcf4 	b.w	d512c <HAL_USB_USART_Available_Data_For_Write>

000d6744 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d6744:	7c00      	ldrb	r0, [r0, #16]
   d6746:	f7fe bce9 	b.w	d511c <HAL_USB_USART_Available_Data>

000d674a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d674a:	b538      	push	{r3, r4, r5, lr}
   d674c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d674e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d6750:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6752:	f7fe fceb 	bl	d512c <HAL_USB_USART_Available_Data_For_Write>
   d6756:	2800      	cmp	r0, #0
   d6758:	dc01      	bgt.n	d675e <_ZN9USBSerial5writeEh+0x14>
   d675a:	7c60      	ldrb	r0, [r4, #17]
   d675c:	b120      	cbz	r0, d6768 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d675e:	4629      	mov	r1, r5
   d6760:	7c20      	ldrb	r0, [r4, #16]
   d6762:	f7fe fcf3 	bl	d514c <HAL_USB_USART_Send_Data>
    return 1;
   d6766:	2001      	movs	r0, #1
  }
  return 0;
}
   d6768:	bd38      	pop	{r3, r4, r5, pc}

000d676a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d676a:	7c00      	ldrb	r0, [r0, #16]
   d676c:	f7fe bcf6 	b.w	d515c <HAL_USB_USART_Flush_Data>

000d6770 <_ZN9USBSerialD0Ev>:
   d6770:	b510      	push	{r4, lr}
   d6772:	4604      	mov	r4, r0
   d6774:	f7fd fc93 	bl	d409e <_ZdlPv>
   d6778:	4620      	mov	r0, r4
   d677a:	bd10      	pop	{r4, pc}

000d677c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d677c:	b510      	push	{r4, lr}
   d677e:	4604      	mov	r4, r0
   d6780:	2300      	movs	r3, #0
   d6782:	6063      	str	r3, [r4, #4]
   d6784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6788:	60a3      	str	r3, [r4, #8]
   d678a:	4b05      	ldr	r3, [pc, #20]	; (d67a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d678c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d678e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6790:	4608      	mov	r0, r1
{
  _serial = serial;
   d6792:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6794:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6796:	4611      	mov	r1, r2
   d6798:	f7fe fcb0 	bl	d50fc <HAL_USB_USART_Init>
}
   d679c:	4620      	mov	r0, r4
   d679e:	bd10      	pop	{r4, pc}
   d67a0:	000da9a4 	.word	0x000da9a4

000d67a4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d67a4:	2200      	movs	r2, #0
   d67a6:	7c00      	ldrb	r0, [r0, #16]
   d67a8:	f7fe bcb0 	b.w	d510c <HAL_USB_USART_Begin>

000d67ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d67ae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d67b2:	2100      	movs	r1, #0
   d67b4:	f002 f8f8 	bl	d89a8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d67b8:	4620      	mov	r0, r4
   d67ba:	bd10      	pop	{r4, pc}

000d67bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d67bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67be:	4d0e      	ldr	r5, [pc, #56]	; (d67f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d67c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d67c2:	a801      	add	r0, sp, #4
   d67c4:	f7ff fff2 	bl	d67ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67c8:	6829      	ldr	r1, [r5, #0]
   d67ca:	f011 0401 	ands.w	r4, r1, #1
   d67ce:	d110      	bne.n	d67f2 <_Z16_fetch_usbserialv+0x36>
   d67d0:	4628      	mov	r0, r5
   d67d2:	f7fd fc68 	bl	d40a6 <__cxa_guard_acquire>
   d67d6:	b160      	cbz	r0, d67f2 <_Z16_fetch_usbserialv+0x36>
   d67d8:	aa01      	add	r2, sp, #4
   d67da:	4621      	mov	r1, r4
   d67dc:	4807      	ldr	r0, [pc, #28]	; (d67fc <_Z16_fetch_usbserialv+0x40>)
   d67de:	f7ff ffcd 	bl	d677c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d67e2:	4628      	mov	r0, r5
   d67e4:	f7fd fc64 	bl	d40b0 <__cxa_guard_release>
   d67e8:	4a05      	ldr	r2, [pc, #20]	; (d6800 <_Z16_fetch_usbserialv+0x44>)
   d67ea:	4906      	ldr	r1, [pc, #24]	; (d6804 <_Z16_fetch_usbserialv+0x48>)
   d67ec:	4803      	ldr	r0, [pc, #12]	; (d67fc <_Z16_fetch_usbserialv+0x40>)
   d67ee:	f000 f8fb 	bl	d69e8 <__aeabi_atexit>
	return _usbserial;
}
   d67f2:	4802      	ldr	r0, [pc, #8]	; (d67fc <_Z16_fetch_usbserialv+0x40>)
   d67f4:	b007      	add	sp, #28
   d67f6:	bd30      	pop	{r4, r5, pc}
   d67f8:	2003e6f8 	.word	0x2003e6f8
   d67fc:	2003e6fc 	.word	0x2003e6fc
   d6800:	2003e3b0 	.word	0x2003e3b0
   d6804:	000d672d 	.word	0x000d672d

000d6808 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6808:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d680a:	4b0c      	ldr	r3, [pc, #48]	; (d683c <serialEventRun+0x34>)
   d680c:	b133      	cbz	r3, d681c <serialEventRun+0x14>
   d680e:	f7ff ffd5 	bl	d67bc <_Z16_fetch_usbserialv>
   d6812:	6803      	ldr	r3, [r0, #0]
   d6814:	691b      	ldr	r3, [r3, #16]
   d6816:	4798      	blx	r3
   d6818:	2800      	cmp	r0, #0
   d681a:	dc09      	bgt.n	d6830 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d681c:	4b08      	ldr	r3, [pc, #32]	; (d6840 <serialEventRun+0x38>)
   d681e:	b163      	cbz	r3, d683a <serialEventRun+0x32>
   d6820:	f7ff ff5c 	bl	d66dc <_Z22__fetch_global_Serial1v>
   d6824:	6803      	ldr	r3, [r0, #0]
   d6826:	691b      	ldr	r3, [r3, #16]
   d6828:	4798      	blx	r3
   d682a:	2800      	cmp	r0, #0
   d682c:	dc03      	bgt.n	d6836 <serialEventRun+0x2e>
   d682e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6830:	f3af 8000 	nop.w
   d6834:	e7f2      	b.n	d681c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6836:	f3af 8000 	nop.w
   d683a:	bd08      	pop	{r3, pc}
	...

000d6844 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6844:	b508      	push	{r3, lr}
	serialEventRun();
   d6846:	f7ff ffdf 	bl	d6808 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d684a:	f7fe fb17 	bl	d4e7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d684e:	4b01      	ldr	r3, [pc, #4]	; (d6854 <_post_loop+0x10>)
   d6850:	6018      	str	r0, [r3, #0]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	2003e714 	.word	0x2003e714

000d6858 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6858:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d685a:	2300      	movs	r3, #0
   d685c:	9300      	str	r3, [sp, #0]
   d685e:	461a      	mov	r2, r3
   d6860:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6864:	f7fe fca4 	bl	d51b0 <system_ctrl_set_result>
}
   d6868:	b003      	add	sp, #12
   d686a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6870 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6870:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6872:	8843      	ldrh	r3, [r0, #2]
   d6874:	2b0a      	cmp	r3, #10
   d6876:	d008      	beq.n	d688a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6878:	2b50      	cmp	r3, #80	; 0x50
   d687a:	d109      	bne.n	d6890 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d687c:	4b09      	ldr	r3, [pc, #36]	; (d68a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d687e:	681b      	ldr	r3, [r3, #0]
   d6880:	b13b      	cbz	r3, d6892 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6882:	b003      	add	sp, #12
   d6884:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6888:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d688a:	f7ff ffe5 	bl	d6858 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d688e:	e006      	b.n	d689e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6890:	2300      	movs	r3, #0
   d6892:	9300      	str	r3, [sp, #0]
   d6894:	461a      	mov	r2, r3
   d6896:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d689a:	f7fe fc89 	bl	d51b0 <system_ctrl_set_result>
        break;
    }
}
   d689e:	b003      	add	sp, #12
   d68a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d68a4:	2003e710 	.word	0x2003e710

000d68a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d68a8:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d68aa:	2100      	movs	r1, #0
   d68ac:	4804      	ldr	r0, [pc, #16]	; (d68c0 <module_user_init_hook+0x18>)
   d68ae:	f7fe fca3 	bl	d51f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d68b2:	2100      	movs	r1, #0
   d68b4:	4803      	ldr	r0, [pc, #12]	; (d68c4 <module_user_init_hook+0x1c>)
}
   d68b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d68ba:	f7fe bc6f 	b.w	d519c <system_ctrl_set_app_request_handler>
   d68be:	bf00      	nop
   d68c0:	00000000 	.word	0x00000000
   d68c4:	000d6871 	.word	0x000d6871

000d68c8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d68c8:	b510      	push	{r4, lr}
   d68ca:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d68cc:	480f      	ldr	r0, [pc, #60]	; (d690c <pinAvailable+0x44>)
   d68ce:	f7ff fa39 	bl	d5d44 <_ZN8SPIClass9isEnabledEv>
   d68d2:	b128      	cbz	r0, d68e0 <pinAvailable+0x18>
   d68d4:	f1a4 030b 	sub.w	r3, r4, #11
   d68d8:	2b02      	cmp	r3, #2
   d68da:	d801      	bhi.n	d68e0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d68dc:	2000      	movs	r0, #0
   d68de:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d68e0:	f000 f840 	bl	d6964 <_Z19__fetch_global_Wirev>
   d68e4:	f7fe fdc6 	bl	d5474 <_ZN7TwoWire9isEnabledEv>
   d68e8:	b108      	cbz	r0, d68ee <pinAvailable+0x26>
   d68ea:	2c01      	cmp	r4, #1
   d68ec:	d9f6      	bls.n	d68dc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d68ee:	f7ff fef5 	bl	d66dc <_Z22__fetch_global_Serial1v>
   d68f2:	f7ff feef 	bl	d66d4 <_ZN11USARTSerial9isEnabledEv>
   d68f6:	b118      	cbz	r0, d6900 <pinAvailable+0x38>
   d68f8:	f1a4 0309 	sub.w	r3, r4, #9
   d68fc:	2b01      	cmp	r3, #1
   d68fe:	d9ed      	bls.n	d68dc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6900:	2c1e      	cmp	r4, #30
   d6902:	bf8c      	ite	hi
   d6904:	2000      	movhi	r0, #0
   d6906:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6908:	bd10      	pop	{r4, pc}
   d690a:	bf00      	nop
   d690c:	2003e730 	.word	0x2003e730

000d6910 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6910:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6912:	b538      	push	{r3, r4, r5, lr}
   d6914:	4604      	mov	r4, r0
   d6916:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6918:	d80a      	bhi.n	d6930 <pinMode+0x20>
   d691a:	29ff      	cmp	r1, #255	; 0xff
   d691c:	d008      	beq.n	d6930 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d691e:	f7ff ffd3 	bl	d68c8 <pinAvailable>
   d6922:	b128      	cbz	r0, d6930 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6924:	4629      	mov	r1, r5
   d6926:	4620      	mov	r0, r4
}
   d6928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d692c:	f7fe bab6 	b.w	d4e9c <HAL_Pin_Mode>
   d6930:	bd38      	pop	{r3, r4, r5, pc}

000d6932 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6932:	b538      	push	{r3, r4, r5, lr}
   d6934:	4604      	mov	r4, r0
   d6936:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6938:	f7fe fab8 	bl	d4eac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d693c:	28ff      	cmp	r0, #255	; 0xff
   d693e:	d010      	beq.n	d6962 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6940:	2806      	cmp	r0, #6
   d6942:	d804      	bhi.n	d694e <digitalWrite+0x1c>
   d6944:	234d      	movs	r3, #77	; 0x4d
   d6946:	fa23 f000 	lsr.w	r0, r3, r0
   d694a:	07c3      	lsls	r3, r0, #31
   d694c:	d409      	bmi.n	d6962 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d694e:	4620      	mov	r0, r4
   d6950:	f7ff ffba 	bl	d68c8 <pinAvailable>
   d6954:	b128      	cbz	r0, d6962 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6956:	4629      	mov	r1, r5
   d6958:	4620      	mov	r0, r4
}
   d695a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d695e:	f7fe baad 	b.w	d4ebc <HAL_GPIO_Write>
   d6962:	bd38      	pop	{r3, r4, r5, pc}

000d6964 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6964:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6966:	4d0b      	ldr	r5, [pc, #44]	; (d6994 <_Z19__fetch_global_Wirev+0x30>)
   d6968:	6829      	ldr	r1, [r5, #0]
   d696a:	f011 0401 	ands.w	r4, r1, #1
   d696e:	d10f      	bne.n	d6990 <_Z19__fetch_global_Wirev+0x2c>
   d6970:	4628      	mov	r0, r5
   d6972:	f7fd fb98 	bl	d40a6 <__cxa_guard_acquire>
   d6976:	b158      	cbz	r0, d6990 <_Z19__fetch_global_Wirev+0x2c>
   d6978:	4621      	mov	r1, r4
   d697a:	4807      	ldr	r0, [pc, #28]	; (d6998 <_Z19__fetch_global_Wirev+0x34>)
   d697c:	f7fe fd68 	bl	d5450 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6980:	4628      	mov	r0, r5
   d6982:	f7fd fb95 	bl	d40b0 <__cxa_guard_release>
   d6986:	4a05      	ldr	r2, [pc, #20]	; (d699c <_Z19__fetch_global_Wirev+0x38>)
   d6988:	4905      	ldr	r1, [pc, #20]	; (d69a0 <_Z19__fetch_global_Wirev+0x3c>)
   d698a:	4803      	ldr	r0, [pc, #12]	; (d6998 <_Z19__fetch_global_Wirev+0x34>)
   d698c:	f000 f82c 	bl	d69e8 <__aeabi_atexit>
	return wire;
}
   d6990:	4801      	ldr	r0, [pc, #4]	; (d6998 <_Z19__fetch_global_Wirev+0x34>)
   d6992:	bd38      	pop	{r3, r4, r5, pc}
   d6994:	2003e718 	.word	0x2003e718
   d6998:	2003e71c 	.word	0x2003e71c
   d699c:	2003e3b0 	.word	0x2003e3b0
   d69a0:	000d53f9 	.word	0x000d53f9

000d69a4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69a4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d69a6:	4c0c      	ldr	r4, [pc, #48]	; (d69d8 <_GLOBAL__sub_I_SPI+0x34>)
   d69a8:	4e0c      	ldr	r6, [pc, #48]	; (d69dc <_GLOBAL__sub_I_SPI+0x38>)
   d69aa:	4d0d      	ldr	r5, [pc, #52]	; (d69e0 <_GLOBAL__sub_I_SPI+0x3c>)
   d69ac:	2100      	movs	r1, #0
   d69ae:	4620      	mov	r0, r4
   d69b0:	f7ff f9b4 	bl	d5d1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d69b4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69b6:	4c0b      	ldr	r4, [pc, #44]	; (d69e4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d69b8:	4632      	mov	r2, r6
   d69ba:	4629      	mov	r1, r5
   d69bc:	f000 f814 	bl	d69e8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69c0:	2101      	movs	r1, #1
   d69c2:	4620      	mov	r0, r4
   d69c4:	f7ff f9aa 	bl	d5d1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d69c8:	4632      	mov	r2, r6
   d69ca:	4629      	mov	r1, r5
   d69cc:	4620      	mov	r0, r4
   d69ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d69d2:	f000 b809 	b.w	d69e8 <__aeabi_atexit>
   d69d6:	bf00      	nop
   d69d8:	2003e730 	.word	0x2003e730
   d69dc:	2003e3b0 	.word	0x2003e3b0
   d69e0:	000d5d0d 	.word	0x000d5d0d
   d69e4:	2003e740 	.word	0x2003e740

000d69e8 <__aeabi_atexit>:
   d69e8:	460b      	mov	r3, r1
   d69ea:	4601      	mov	r1, r0
   d69ec:	4618      	mov	r0, r3
   d69ee:	f001 bfaf 	b.w	d8950 <__cxa_atexit>
	...

000d69f4 <_ZSt15get_new_handlerv>:
   d69f4:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <_ZSt15get_new_handlerv+0xc>)
   d69f6:	6818      	ldr	r0, [r3, #0]
   d69f8:	f3bf 8f5f 	dmb	sy
   d69fc:	4770      	bx	lr
   d69fe:	bf00      	nop
   d6a00:	2003e750 	.word	0x2003e750

000d6a04 <_ZnwjRKSt9nothrow_t>:
   d6a04:	b510      	push	{r4, lr}
   d6a06:	2800      	cmp	r0, #0
   d6a08:	bf14      	ite	ne
   d6a0a:	4604      	movne	r4, r0
   d6a0c:	2401      	moveq	r4, #1
   d6a0e:	4620      	mov	r0, r4
   d6a10:	f7fe fc4a 	bl	d52a8 <malloc>
   d6a14:	b920      	cbnz	r0, d6a20 <_ZnwjRKSt9nothrow_t+0x1c>
   d6a16:	f7ff ffed 	bl	d69f4 <_ZSt15get_new_handlerv>
   d6a1a:	b108      	cbz	r0, d6a20 <_ZnwjRKSt9nothrow_t+0x1c>
   d6a1c:	4780      	blx	r0
   d6a1e:	e7f6      	b.n	d6a0e <_ZnwjRKSt9nothrow_t+0xa>
   d6a20:	bd10      	pop	{r4, pc}

000d6a22 <_ZnajRKSt9nothrow_t>:
   d6a22:	f7ff bfef 	b.w	d6a04 <_ZnwjRKSt9nothrow_t>

000d6a26 <_ZSt25__throw_bad_function_callv>:
   d6a26:	b508      	push	{r3, lr}
   d6a28:	f7fe fc56 	bl	d52d8 <abort>

000d6a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6a2c:	4b24      	ldr	r3, [pc, #144]	; (d6ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6a2e:	681a      	ldr	r2, [r3, #0]
   d6a30:	07d0      	lsls	r0, r2, #31
   d6a32:	bf5c      	itt	pl
   d6a34:	2201      	movpl	r2, #1
   d6a36:	601a      	strpl	r2, [r3, #0]
   d6a38:	4b22      	ldr	r3, [pc, #136]	; (d6ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6a3a:	681a      	ldr	r2, [r3, #0]
   d6a3c:	07d1      	lsls	r1, r2, #31
   d6a3e:	bf5c      	itt	pl
   d6a40:	2201      	movpl	r2, #1
   d6a42:	601a      	strpl	r2, [r3, #0]
   d6a44:	4b20      	ldr	r3, [pc, #128]	; (d6ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6a46:	681a      	ldr	r2, [r3, #0]
   d6a48:	07d2      	lsls	r2, r2, #31
   d6a4a:	bf5c      	itt	pl
   d6a4c:	2201      	movpl	r2, #1
   d6a4e:	601a      	strpl	r2, [r3, #0]
   d6a50:	4b1e      	ldr	r3, [pc, #120]	; (d6acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6a52:	681a      	ldr	r2, [r3, #0]
   d6a54:	07d0      	lsls	r0, r2, #31
   d6a56:	bf5c      	itt	pl
   d6a58:	2201      	movpl	r2, #1
   d6a5a:	601a      	strpl	r2, [r3, #0]
   d6a5c:	4b1c      	ldr	r3, [pc, #112]	; (d6ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6a5e:	681a      	ldr	r2, [r3, #0]
   d6a60:	07d1      	lsls	r1, r2, #31
   d6a62:	bf5c      	itt	pl
   d6a64:	2201      	movpl	r2, #1
   d6a66:	601a      	strpl	r2, [r3, #0]
   d6a68:	4b1a      	ldr	r3, [pc, #104]	; (d6ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6a6a:	681a      	ldr	r2, [r3, #0]
   d6a6c:	07d2      	lsls	r2, r2, #31
   d6a6e:	bf5c      	itt	pl
   d6a70:	2201      	movpl	r2, #1
   d6a72:	601a      	strpl	r2, [r3, #0]
   d6a74:	4b18      	ldr	r3, [pc, #96]	; (d6ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6a76:	681a      	ldr	r2, [r3, #0]
   d6a78:	07d0      	lsls	r0, r2, #31
   d6a7a:	bf5c      	itt	pl
   d6a7c:	2201      	movpl	r2, #1
   d6a7e:	601a      	strpl	r2, [r3, #0]
   d6a80:	4b16      	ldr	r3, [pc, #88]	; (d6adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6a82:	681a      	ldr	r2, [r3, #0]
   d6a84:	07d1      	lsls	r1, r2, #31
   d6a86:	bf5c      	itt	pl
   d6a88:	2201      	movpl	r2, #1
   d6a8a:	601a      	strpl	r2, [r3, #0]
   d6a8c:	4b14      	ldr	r3, [pc, #80]	; (d6ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6a8e:	681a      	ldr	r2, [r3, #0]
   d6a90:	07d2      	lsls	r2, r2, #31
   d6a92:	bf5c      	itt	pl
   d6a94:	2201      	movpl	r2, #1
   d6a96:	601a      	strpl	r2, [r3, #0]
   d6a98:	4b12      	ldr	r3, [pc, #72]	; (d6ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6a9a:	681a      	ldr	r2, [r3, #0]
   d6a9c:	07d0      	lsls	r0, r2, #31
   d6a9e:	bf5c      	itt	pl
   d6aa0:	2201      	movpl	r2, #1
   d6aa2:	601a      	strpl	r2, [r3, #0]
   d6aa4:	4b10      	ldr	r3, [pc, #64]	; (d6ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6aa6:	681a      	ldr	r2, [r3, #0]
   d6aa8:	07d1      	lsls	r1, r2, #31
   d6aaa:	bf5c      	itt	pl
   d6aac:	2201      	movpl	r2, #1
   d6aae:	601a      	strpl	r2, [r3, #0]
   d6ab0:	4b0e      	ldr	r3, [pc, #56]	; (d6aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6ab2:	681a      	ldr	r2, [r3, #0]
   d6ab4:	07d2      	lsls	r2, r2, #31
   d6ab6:	bf5c      	itt	pl
   d6ab8:	2201      	movpl	r2, #1
   d6aba:	601a      	strpl	r2, [r3, #0]
   d6abc:	4770      	bx	lr
   d6abe:	bf00      	nop
   d6ac0:	2003e780 	.word	0x2003e780
   d6ac4:	2003e77c 	.word	0x2003e77c
   d6ac8:	2003e778 	.word	0x2003e778
   d6acc:	2003e774 	.word	0x2003e774
   d6ad0:	2003e770 	.word	0x2003e770
   d6ad4:	2003e76c 	.word	0x2003e76c
   d6ad8:	2003e768 	.word	0x2003e768
   d6adc:	2003e764 	.word	0x2003e764
   d6ae0:	2003e760 	.word	0x2003e760
   d6ae4:	2003e75c 	.word	0x2003e75c
   d6ae8:	2003e758 	.word	0x2003e758
   d6aec:	2003e754 	.word	0x2003e754

000d6af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6af0:	4b18      	ldr	r3, [pc, #96]	; (d6b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6af2:	681a      	ldr	r2, [r3, #0]
   d6af4:	07d1      	lsls	r1, r2, #31
   d6af6:	bf5c      	itt	pl
   d6af8:	2201      	movpl	r2, #1
   d6afa:	601a      	strpl	r2, [r3, #0]
   d6afc:	4b16      	ldr	r3, [pc, #88]	; (d6b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6afe:	681a      	ldr	r2, [r3, #0]
   d6b00:	07d2      	lsls	r2, r2, #31
   d6b02:	bf5c      	itt	pl
   d6b04:	2201      	movpl	r2, #1
   d6b06:	601a      	strpl	r2, [r3, #0]
   d6b08:	4b14      	ldr	r3, [pc, #80]	; (d6b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b0a:	681a      	ldr	r2, [r3, #0]
   d6b0c:	07d0      	lsls	r0, r2, #31
   d6b0e:	bf5c      	itt	pl
   d6b10:	2201      	movpl	r2, #1
   d6b12:	601a      	strpl	r2, [r3, #0]
   d6b14:	4b12      	ldr	r3, [pc, #72]	; (d6b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b16:	681a      	ldr	r2, [r3, #0]
   d6b18:	07d1      	lsls	r1, r2, #31
   d6b1a:	bf5c      	itt	pl
   d6b1c:	2201      	movpl	r2, #1
   d6b1e:	601a      	strpl	r2, [r3, #0]
   d6b20:	4b10      	ldr	r3, [pc, #64]	; (d6b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b22:	681a      	ldr	r2, [r3, #0]
   d6b24:	07d2      	lsls	r2, r2, #31
   d6b26:	bf5c      	itt	pl
   d6b28:	2201      	movpl	r2, #1
   d6b2a:	601a      	strpl	r2, [r3, #0]
   d6b2c:	4b0e      	ldr	r3, [pc, #56]	; (d6b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b2e:	681a      	ldr	r2, [r3, #0]
   d6b30:	07d0      	lsls	r0, r2, #31
   d6b32:	bf5c      	itt	pl
   d6b34:	2201      	movpl	r2, #1
   d6b36:	601a      	strpl	r2, [r3, #0]
   d6b38:	4b0c      	ldr	r3, [pc, #48]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b3a:	681a      	ldr	r2, [r3, #0]
   d6b3c:	07d1      	lsls	r1, r2, #31
   d6b3e:	bf5c      	itt	pl
   d6b40:	2201      	movpl	r2, #1
   d6b42:	601a      	strpl	r2, [r3, #0]
   d6b44:	4b0a      	ldr	r3, [pc, #40]	; (d6b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b46:	681a      	ldr	r2, [r3, #0]
   d6b48:	07d2      	lsls	r2, r2, #31
   d6b4a:	bf5c      	itt	pl
   d6b4c:	2201      	movpl	r2, #1
   d6b4e:	601a      	strpl	r2, [r3, #0]
   d6b50:	4770      	bx	lr
   d6b52:	bf00      	nop
   d6b54:	2003e7a0 	.word	0x2003e7a0
   d6b58:	2003e79c 	.word	0x2003e79c
   d6b5c:	2003e798 	.word	0x2003e798
   d6b60:	2003e794 	.word	0x2003e794
   d6b64:	2003e790 	.word	0x2003e790
   d6b68:	2003e78c 	.word	0x2003e78c
   d6b6c:	2003e788 	.word	0x2003e788
   d6b70:	2003e784 	.word	0x2003e784

000d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6b74:	4b18      	ldr	r3, [pc, #96]	; (d6bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6b76:	681a      	ldr	r2, [r3, #0]
   d6b78:	07d1      	lsls	r1, r2, #31
   d6b7a:	bf5c      	itt	pl
   d6b7c:	2201      	movpl	r2, #1
   d6b7e:	601a      	strpl	r2, [r3, #0]
   d6b80:	4b16      	ldr	r3, [pc, #88]	; (d6bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b82:	681a      	ldr	r2, [r3, #0]
   d6b84:	07d2      	lsls	r2, r2, #31
   d6b86:	bf5c      	itt	pl
   d6b88:	2201      	movpl	r2, #1
   d6b8a:	601a      	strpl	r2, [r3, #0]
   d6b8c:	4b14      	ldr	r3, [pc, #80]	; (d6be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b8e:	681a      	ldr	r2, [r3, #0]
   d6b90:	07d0      	lsls	r0, r2, #31
   d6b92:	bf5c      	itt	pl
   d6b94:	2201      	movpl	r2, #1
   d6b96:	601a      	strpl	r2, [r3, #0]
   d6b98:	4b12      	ldr	r3, [pc, #72]	; (d6be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b9a:	681a      	ldr	r2, [r3, #0]
   d6b9c:	07d1      	lsls	r1, r2, #31
   d6b9e:	bf5c      	itt	pl
   d6ba0:	2201      	movpl	r2, #1
   d6ba2:	601a      	strpl	r2, [r3, #0]
   d6ba4:	4b10      	ldr	r3, [pc, #64]	; (d6be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6ba6:	681a      	ldr	r2, [r3, #0]
   d6ba8:	07d2      	lsls	r2, r2, #31
   d6baa:	bf5c      	itt	pl
   d6bac:	2201      	movpl	r2, #1
   d6bae:	601a      	strpl	r2, [r3, #0]
   d6bb0:	4b0e      	ldr	r3, [pc, #56]	; (d6bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6bb2:	681a      	ldr	r2, [r3, #0]
   d6bb4:	07d0      	lsls	r0, r2, #31
   d6bb6:	bf5c      	itt	pl
   d6bb8:	2201      	movpl	r2, #1
   d6bba:	601a      	strpl	r2, [r3, #0]
   d6bbc:	4b0c      	ldr	r3, [pc, #48]	; (d6bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6bbe:	681a      	ldr	r2, [r3, #0]
   d6bc0:	07d1      	lsls	r1, r2, #31
   d6bc2:	bf5c      	itt	pl
   d6bc4:	2201      	movpl	r2, #1
   d6bc6:	601a      	strpl	r2, [r3, #0]
   d6bc8:	4b0a      	ldr	r3, [pc, #40]	; (d6bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6bca:	681a      	ldr	r2, [r3, #0]
   d6bcc:	07d2      	lsls	r2, r2, #31
   d6bce:	bf5c      	itt	pl
   d6bd0:	2201      	movpl	r2, #1
   d6bd2:	601a      	strpl	r2, [r3, #0]
   d6bd4:	4770      	bx	lr
   d6bd6:	bf00      	nop
   d6bd8:	2003e7c0 	.word	0x2003e7c0
   d6bdc:	2003e7bc 	.word	0x2003e7bc
   d6be0:	2003e7b8 	.word	0x2003e7b8
   d6be4:	2003e7b4 	.word	0x2003e7b4
   d6be8:	2003e7b0 	.word	0x2003e7b0
   d6bec:	2003e7ac 	.word	0x2003e7ac
   d6bf0:	2003e7a8 	.word	0x2003e7a8
   d6bf4:	2003e7a4 	.word	0x2003e7a4

000d6bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6bf8:	4b24      	ldr	r3, [pc, #144]	; (d6c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6bfa:	681a      	ldr	r2, [r3, #0]
   d6bfc:	07d0      	lsls	r0, r2, #31
   d6bfe:	bf5c      	itt	pl
   d6c00:	2201      	movpl	r2, #1
   d6c02:	601a      	strpl	r2, [r3, #0]
   d6c04:	4b22      	ldr	r3, [pc, #136]	; (d6c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6c06:	681a      	ldr	r2, [r3, #0]
   d6c08:	07d1      	lsls	r1, r2, #31
   d6c0a:	bf5c      	itt	pl
   d6c0c:	2201      	movpl	r2, #1
   d6c0e:	601a      	strpl	r2, [r3, #0]
   d6c10:	4b20      	ldr	r3, [pc, #128]	; (d6c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6c12:	681a      	ldr	r2, [r3, #0]
   d6c14:	07d2      	lsls	r2, r2, #31
   d6c16:	bf5c      	itt	pl
   d6c18:	2201      	movpl	r2, #1
   d6c1a:	601a      	strpl	r2, [r3, #0]
   d6c1c:	4b1e      	ldr	r3, [pc, #120]	; (d6c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6c1e:	681a      	ldr	r2, [r3, #0]
   d6c20:	07d0      	lsls	r0, r2, #31
   d6c22:	bf5c      	itt	pl
   d6c24:	2201      	movpl	r2, #1
   d6c26:	601a      	strpl	r2, [r3, #0]
   d6c28:	4b1c      	ldr	r3, [pc, #112]	; (d6c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6c2a:	681a      	ldr	r2, [r3, #0]
   d6c2c:	07d1      	lsls	r1, r2, #31
   d6c2e:	bf5c      	itt	pl
   d6c30:	2201      	movpl	r2, #1
   d6c32:	601a      	strpl	r2, [r3, #0]
   d6c34:	4b1a      	ldr	r3, [pc, #104]	; (d6ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	07d2      	lsls	r2, r2, #31
   d6c3a:	bf5c      	itt	pl
   d6c3c:	2201      	movpl	r2, #1
   d6c3e:	601a      	strpl	r2, [r3, #0]
   d6c40:	4b18      	ldr	r3, [pc, #96]	; (d6ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6c42:	681a      	ldr	r2, [r3, #0]
   d6c44:	07d0      	lsls	r0, r2, #31
   d6c46:	bf5c      	itt	pl
   d6c48:	2201      	movpl	r2, #1
   d6c4a:	601a      	strpl	r2, [r3, #0]
   d6c4c:	4b16      	ldr	r3, [pc, #88]	; (d6ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6c4e:	681a      	ldr	r2, [r3, #0]
   d6c50:	07d1      	lsls	r1, r2, #31
   d6c52:	bf5c      	itt	pl
   d6c54:	2201      	movpl	r2, #1
   d6c56:	601a      	strpl	r2, [r3, #0]
   d6c58:	4b14      	ldr	r3, [pc, #80]	; (d6cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6c5a:	681a      	ldr	r2, [r3, #0]
   d6c5c:	07d2      	lsls	r2, r2, #31
   d6c5e:	bf5c      	itt	pl
   d6c60:	2201      	movpl	r2, #1
   d6c62:	601a      	strpl	r2, [r3, #0]
   d6c64:	4b12      	ldr	r3, [pc, #72]	; (d6cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6c66:	681a      	ldr	r2, [r3, #0]
   d6c68:	07d0      	lsls	r0, r2, #31
   d6c6a:	bf5c      	itt	pl
   d6c6c:	2201      	movpl	r2, #1
   d6c6e:	601a      	strpl	r2, [r3, #0]
   d6c70:	4b10      	ldr	r3, [pc, #64]	; (d6cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6c72:	681a      	ldr	r2, [r3, #0]
   d6c74:	07d1      	lsls	r1, r2, #31
   d6c76:	bf5c      	itt	pl
   d6c78:	2201      	movpl	r2, #1
   d6c7a:	601a      	strpl	r2, [r3, #0]
   d6c7c:	4b0e      	ldr	r3, [pc, #56]	; (d6cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6c7e:	681a      	ldr	r2, [r3, #0]
   d6c80:	07d2      	lsls	r2, r2, #31
   d6c82:	bf5c      	itt	pl
   d6c84:	2201      	movpl	r2, #1
   d6c86:	601a      	strpl	r2, [r3, #0]
   d6c88:	4770      	bx	lr
   d6c8a:	bf00      	nop
   d6c8c:	2003e7f0 	.word	0x2003e7f0
   d6c90:	2003e7ec 	.word	0x2003e7ec
   d6c94:	2003e7e8 	.word	0x2003e7e8
   d6c98:	2003e7e4 	.word	0x2003e7e4
   d6c9c:	2003e7e0 	.word	0x2003e7e0
   d6ca0:	2003e7dc 	.word	0x2003e7dc
   d6ca4:	2003e7d8 	.word	0x2003e7d8
   d6ca8:	2003e7d4 	.word	0x2003e7d4
   d6cac:	2003e7d0 	.word	0x2003e7d0
   d6cb0:	2003e7cc 	.word	0x2003e7cc
   d6cb4:	2003e7c8 	.word	0x2003e7c8
   d6cb8:	2003e7c4 	.word	0x2003e7c4

000d6cbc <round>:
   d6cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cbe:	ec53 2b10 	vmov	r2, r3, d0
   d6cc2:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d6cc6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   d6cca:	2813      	cmp	r0, #19
   d6ccc:	4619      	mov	r1, r3
   d6cce:	ee10 7a10 	vmov	r7, s0
   d6cd2:	dc12      	bgt.n	d6cfa <round+0x3e>
   d6cd4:	2800      	cmp	r0, #0
   d6cd6:	db32      	blt.n	d6d3e <round+0x82>
   d6cd8:	4e23      	ldr	r6, [pc, #140]	; (d6d68 <round+0xac>)
   d6cda:	4106      	asrs	r6, r0
   d6cdc:	4233      	tst	r3, r6
   d6cde:	461d      	mov	r5, r3
   d6ce0:	d02a      	beq.n	d6d38 <round+0x7c>
   d6ce2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d6ce6:	4101      	asrs	r1, r0
   d6ce8:	4429      	add	r1, r5
   d6cea:	ea21 0106 	bic.w	r1, r1, r6
   d6cee:	2400      	movs	r4, #0
   d6cf0:	460b      	mov	r3, r1
   d6cf2:	4622      	mov	r2, r4
   d6cf4:	ec43 2b10 	vmov	d0, r2, r3
   d6cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6cfa:	2833      	cmp	r0, #51	; 0x33
   d6cfc:	dd05      	ble.n	d6d0a <round+0x4e>
   d6cfe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d6d02:	d022      	beq.n	d6d4a <round+0x8e>
   d6d04:	ec43 2b10 	vmov	d0, r2, r3
   d6d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6d0a:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   d6d0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d6d12:	fa25 f404 	lsr.w	r4, r5, r4
   d6d16:	4222      	tst	r2, r4
   d6d18:	d0f4      	beq.n	d6d04 <round+0x48>
   d6d1a:	2301      	movs	r3, #1
   d6d1c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   d6d20:	fa03 f000 	lsl.w	r0, r3, r0
   d6d24:	19c0      	adds	r0, r0, r7
   d6d26:	bf28      	it	cs
   d6d28:	18c9      	addcs	r1, r1, r3
   d6d2a:	ea20 0404 	bic.w	r4, r0, r4
   d6d2e:	460b      	mov	r3, r1
   d6d30:	4622      	mov	r2, r4
   d6d32:	ec43 2b10 	vmov	d0, r2, r3
   d6d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6d38:	2a00      	cmp	r2, #0
   d6d3a:	d1d2      	bne.n	d6ce2 <round+0x26>
   d6d3c:	e7e2      	b.n	d6d04 <round+0x48>
   d6d3e:	3001      	adds	r0, #1
   d6d40:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   d6d44:	d009      	beq.n	d6d5a <round+0x9e>
   d6d46:	2400      	movs	r4, #0
   d6d48:	e7d2      	b.n	d6cf0 <round+0x34>
   d6d4a:	ee10 0a10 	vmov	r0, s0
   d6d4e:	4619      	mov	r1, r3
   d6d50:	f001 f94c 	bl	d7fec <__adddf3>
   d6d54:	ec41 0b10 	vmov	d0, r0, r1
   d6d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6d5a:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   d6d5e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   d6d62:	2400      	movs	r4, #0
   d6d64:	e7c4      	b.n	d6cf0 <round+0x34>
   d6d66:	bf00      	nop
   d6d68:	000fffff 	.word	0x000fffff
   d6d6c:	00000000 	.word	0x00000000

000d6d70 <pow>:
   d6d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d74:	ed2d 8b02 	vpush	{d8}
   d6d78:	f8df a324 	ldr.w	sl, [pc, #804]	; d70a0 <pow+0x330>
   d6d7c:	b08b      	sub	sp, #44	; 0x2c
   d6d7e:	ec57 6b10 	vmov	r6, r7, d0
   d6d82:	ec55 4b11 	vmov	r4, r5, d1
   d6d86:	f000 f98f 	bl	d70a8 <__ieee754_pow>
   d6d8a:	f99a 8000 	ldrsb.w	r8, [sl]
   d6d8e:	eeb0 8a40 	vmov.f32	s16, s0
   d6d92:	eef0 8a60 	vmov.f32	s17, s1
   d6d96:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d6d9a:	d048      	beq.n	d6e2e <pow+0xbe>
   d6d9c:	4622      	mov	r2, r4
   d6d9e:	462b      	mov	r3, r5
   d6da0:	4620      	mov	r0, r4
   d6da2:	4629      	mov	r1, r5
   d6da4:	f001 fd6e 	bl	d8884 <__aeabi_dcmpun>
   d6da8:	4683      	mov	fp, r0
   d6daa:	2800      	cmp	r0, #0
   d6dac:	d13f      	bne.n	d6e2e <pow+0xbe>
   d6dae:	4632      	mov	r2, r6
   d6db0:	463b      	mov	r3, r7
   d6db2:	4630      	mov	r0, r6
   d6db4:	4639      	mov	r1, r7
   d6db6:	f001 fd65 	bl	d8884 <__aeabi_dcmpun>
   d6dba:	4681      	mov	r9, r0
   d6dbc:	2800      	cmp	r0, #0
   d6dbe:	f040 8090 	bne.w	d6ee2 <pow+0x172>
   d6dc2:	4630      	mov	r0, r6
   d6dc4:	4639      	mov	r1, r7
   d6dc6:	2200      	movs	r2, #0
   d6dc8:	2300      	movs	r3, #0
   d6dca:	f001 fd29 	bl	d8820 <__aeabi_dcmpeq>
   d6dce:	2800      	cmp	r0, #0
   d6dd0:	d036      	beq.n	d6e40 <pow+0xd0>
   d6dd2:	2200      	movs	r2, #0
   d6dd4:	2300      	movs	r3, #0
   d6dd6:	4620      	mov	r0, r4
   d6dd8:	4629      	mov	r1, r5
   d6dda:	f001 fd21 	bl	d8820 <__aeabi_dcmpeq>
   d6dde:	4683      	mov	fp, r0
   d6de0:	b1b8      	cbz	r0, d6e12 <pow+0xa2>
   d6de2:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7078 <pow+0x308>
   d6de6:	2201      	movs	r2, #1
   d6de8:	4ba9      	ldr	r3, [pc, #676]	; (d7090 <pow+0x320>)
   d6dea:	f8cd 9020 	str.w	r9, [sp, #32]
   d6dee:	9200      	str	r2, [sp, #0]
   d6df0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6df4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6df8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6dfc:	9301      	str	r3, [sp, #4]
   d6dfe:	f1b8 0f00 	cmp.w	r8, #0
   d6e02:	d05b      	beq.n	d6ebc <pow+0x14c>
   d6e04:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d7080 <pow+0x310>
   d6e08:	b00b      	add	sp, #44	; 0x2c
   d6e0a:	ecbd 8b02 	vpop	{d8}
   d6e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e12:	ec45 4b10 	vmov	d0, r4, r5
   d6e16:	f000 ffa7 	bl	d7d68 <finite>
   d6e1a:	b140      	cbz	r0, d6e2e <pow+0xbe>
   d6e1c:	2200      	movs	r2, #0
   d6e1e:	2300      	movs	r3, #0
   d6e20:	4620      	mov	r0, r4
   d6e22:	4629      	mov	r1, r5
   d6e24:	f001 fd06 	bl	d8834 <__aeabi_dcmplt>
   d6e28:	2800      	cmp	r0, #0
   d6e2a:	f040 80c5 	bne.w	d6fb8 <pow+0x248>
   d6e2e:	eeb0 0a48 	vmov.f32	s0, s16
   d6e32:	eef0 0a68 	vmov.f32	s1, s17
   d6e36:	b00b      	add	sp, #44	; 0x2c
   d6e38:	ecbd 8b02 	vpop	{d8}
   d6e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e40:	eeb0 0a48 	vmov.f32	s0, s16
   d6e44:	eef0 0a68 	vmov.f32	s1, s17
   d6e48:	f000 ff8e 	bl	d7d68 <finite>
   d6e4c:	4680      	mov	r8, r0
   d6e4e:	2800      	cmp	r0, #0
   d6e50:	d061      	beq.n	d6f16 <pow+0x1a6>
   d6e52:	f04f 0800 	mov.w	r8, #0
   d6e56:	f04f 0900 	mov.w	r9, #0
   d6e5a:	ec51 0b18 	vmov	r0, r1, d8
   d6e5e:	4642      	mov	r2, r8
   d6e60:	464b      	mov	r3, r9
   d6e62:	f001 fcdd 	bl	d8820 <__aeabi_dcmpeq>
   d6e66:	2800      	cmp	r0, #0
   d6e68:	d0e1      	beq.n	d6e2e <pow+0xbe>
   d6e6a:	ec47 6b10 	vmov	d0, r6, r7
   d6e6e:	f000 ff7b 	bl	d7d68 <finite>
   d6e72:	2800      	cmp	r0, #0
   d6e74:	d0db      	beq.n	d6e2e <pow+0xbe>
   d6e76:	ec45 4b10 	vmov	d0, r4, r5
   d6e7a:	f000 ff75 	bl	d7d68 <finite>
   d6e7e:	2800      	cmp	r0, #0
   d6e80:	d0d5      	beq.n	d6e2e <pow+0xbe>
   d6e82:	f99a 3000 	ldrsb.w	r3, [sl]
   d6e86:	4a82      	ldr	r2, [pc, #520]	; (d7090 <pow+0x320>)
   d6e88:	9201      	str	r2, [sp, #4]
   d6e8a:	2104      	movs	r1, #4
   d6e8c:	2200      	movs	r2, #0
   d6e8e:	2b02      	cmp	r3, #2
   d6e90:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6e94:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6e98:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d6e9c:	9100      	str	r1, [sp, #0]
   d6e9e:	9208      	str	r2, [sp, #32]
   d6ea0:	d003      	beq.n	d6eaa <pow+0x13a>
   d6ea2:	4668      	mov	r0, sp
   d6ea4:	f000 ff68 	bl	d7d78 <matherr>
   d6ea8:	b970      	cbnz	r0, d6ec8 <pow+0x158>
   d6eaa:	f7fe fa25 	bl	d52f8 <__errno>
   d6eae:	2322      	movs	r3, #34	; 0x22
   d6eb0:	6003      	str	r3, [r0, #0]
   d6eb2:	e009      	b.n	d6ec8 <pow+0x158>
   d6eb4:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7078 <pow+0x308>
   d6eb8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6ebc:	4668      	mov	r0, sp
   d6ebe:	f000 ff5b 	bl	d7d78 <matherr>
   d6ec2:	2800      	cmp	r0, #0
   d6ec4:	f000 808e 	beq.w	d6fe4 <pow+0x274>
   d6ec8:	9b08      	ldr	r3, [sp, #32]
   d6eca:	b11b      	cbz	r3, d6ed4 <pow+0x164>
   d6ecc:	f7fe fa14 	bl	d52f8 <__errno>
   d6ed0:	9b08      	ldr	r3, [sp, #32]
   d6ed2:	6003      	str	r3, [r0, #0]
   d6ed4:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6ed8:	b00b      	add	sp, #44	; 0x2c
   d6eda:	ecbd 8b02 	vpop	{d8}
   d6ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ee2:	2200      	movs	r2, #0
   d6ee4:	2300      	movs	r3, #0
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	4629      	mov	r1, r5
   d6eea:	f001 fc99 	bl	d8820 <__aeabi_dcmpeq>
   d6eee:	2800      	cmp	r0, #0
   d6ef0:	d09d      	beq.n	d6e2e <pow+0xbe>
   d6ef2:	ed9f 0b63 	vldr	d0, [pc, #396]	; d7080 <pow+0x310>
   d6ef6:	4b66      	ldr	r3, [pc, #408]	; (d7090 <pow+0x320>)
   d6ef8:	f8cd b020 	str.w	fp, [sp, #32]
   d6efc:	2201      	movs	r2, #1
   d6efe:	f1b8 0f02 	cmp.w	r8, #2
   d6f02:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6f06:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6f0a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d6f0e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d6f12:	d1d3      	bne.n	d6ebc <pow+0x14c>
   d6f14:	e78f      	b.n	d6e36 <pow+0xc6>
   d6f16:	ec47 6b10 	vmov	d0, r6, r7
   d6f1a:	f000 ff25 	bl	d7d68 <finite>
   d6f1e:	2800      	cmp	r0, #0
   d6f20:	d097      	beq.n	d6e52 <pow+0xe2>
   d6f22:	ec45 4b10 	vmov	d0, r4, r5
   d6f26:	f000 ff1f 	bl	d7d68 <finite>
   d6f2a:	2800      	cmp	r0, #0
   d6f2c:	d091      	beq.n	d6e52 <pow+0xe2>
   d6f2e:	ec53 2b18 	vmov	r2, r3, d8
   d6f32:	ee18 0a10 	vmov	r0, s16
   d6f36:	4619      	mov	r1, r3
   d6f38:	f001 fca4 	bl	d8884 <__aeabi_dcmpun>
   d6f3c:	2800      	cmp	r0, #0
   d6f3e:	d17c      	bne.n	d703a <pow+0x2ca>
   d6f40:	2303      	movs	r3, #3
   d6f42:	f99a 8000 	ldrsb.w	r8, [sl]
   d6f46:	9300      	str	r3, [sp, #0]
   d6f48:	4b51      	ldr	r3, [pc, #324]	; (d7090 <pow+0x320>)
   d6f4a:	9008      	str	r0, [sp, #32]
   d6f4c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6f50:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	f1b8 0f00 	cmp.w	r8, #0
   d6f5a:	d148      	bne.n	d6fee <pow+0x27e>
   d6f5c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d70a4 <pow+0x334>
   d6f60:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d6f64:	2200      	movs	r2, #0
   d6f66:	2300      	movs	r3, #0
   d6f68:	4630      	mov	r0, r6
   d6f6a:	4639      	mov	r1, r7
   d6f6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d6f70:	f001 fc60 	bl	d8834 <__aeabi_dcmplt>
   d6f74:	2800      	cmp	r0, #0
   d6f76:	d094      	beq.n	d6ea2 <pow+0x132>
   d6f78:	2200      	movs	r2, #0
   d6f7a:	4b46      	ldr	r3, [pc, #280]	; (d7094 <pow+0x324>)
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	4629      	mov	r1, r5
   d6f80:	f001 f9e6 	bl	d8350 <__aeabi_dmul>
   d6f84:	4604      	mov	r4, r0
   d6f86:	460d      	mov	r5, r1
   d6f88:	ec45 4b10 	vmov	d0, r4, r5
   d6f8c:	f000 ff00 	bl	d7d90 <rint>
   d6f90:	4620      	mov	r0, r4
   d6f92:	ec53 2b10 	vmov	r2, r3, d0
   d6f96:	4629      	mov	r1, r5
   d6f98:	f001 fc42 	bl	d8820 <__aeabi_dcmpeq>
   d6f9c:	2800      	cmp	r0, #0
   d6f9e:	d149      	bne.n	d7034 <pow+0x2c4>
   d6fa0:	4b3d      	ldr	r3, [pc, #244]	; (d7098 <pow+0x328>)
   d6fa2:	f99a 8000 	ldrsb.w	r8, [sl]
   d6fa6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6faa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6fae:	f1b8 0f02 	cmp.w	r8, #2
   d6fb2:	f47f af76 	bne.w	d6ea2 <pow+0x132>
   d6fb6:	e778      	b.n	d6eaa <pow+0x13a>
   d6fb8:	4a35      	ldr	r2, [pc, #212]	; (d7090 <pow+0x320>)
   d6fba:	f99a 3000 	ldrsb.w	r3, [sl]
   d6fbe:	f8cd b020 	str.w	fp, [sp, #32]
   d6fc2:	2101      	movs	r1, #1
   d6fc4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6fc8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6fcc:	e88d 0006 	stmia.w	sp, {r1, r2}
   d6fd0:	2b00      	cmp	r3, #0
   d6fd2:	f43f af6f 	beq.w	d6eb4 <pow+0x144>
   d6fd6:	4931      	ldr	r1, [pc, #196]	; (d709c <pow+0x32c>)
   d6fd8:	2000      	movs	r0, #0
   d6fda:	2b02      	cmp	r3, #2
   d6fdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6fe0:	f47f af6c 	bne.w	d6ebc <pow+0x14c>
   d6fe4:	f7fe f988 	bl	d52f8 <__errno>
   d6fe8:	2321      	movs	r3, #33	; 0x21
   d6fea:	6003      	str	r3, [r0, #0]
   d6fec:	e76c      	b.n	d6ec8 <pow+0x158>
   d6fee:	ed9f 7b26 	vldr	d7, [pc, #152]	; d7088 <pow+0x318>
   d6ff2:	2200      	movs	r2, #0
   d6ff4:	2300      	movs	r3, #0
   d6ff6:	4630      	mov	r0, r6
   d6ff8:	4639      	mov	r1, r7
   d6ffa:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6ffe:	f001 fc19 	bl	d8834 <__aeabi_dcmplt>
   d7002:	2800      	cmp	r0, #0
   d7004:	d0d3      	beq.n	d6fae <pow+0x23e>
   d7006:	2200      	movs	r2, #0
   d7008:	4b22      	ldr	r3, [pc, #136]	; (d7094 <pow+0x324>)
   d700a:	4620      	mov	r0, r4
   d700c:	4629      	mov	r1, r5
   d700e:	f001 f99f 	bl	d8350 <__aeabi_dmul>
   d7012:	4604      	mov	r4, r0
   d7014:	460d      	mov	r5, r1
   d7016:	ec45 4b10 	vmov	d0, r4, r5
   d701a:	f000 feb9 	bl	d7d90 <rint>
   d701e:	4620      	mov	r0, r4
   d7020:	ec53 2b10 	vmov	r2, r3, d0
   d7024:	4629      	mov	r1, r5
   d7026:	f001 fbfb 	bl	d8820 <__aeabi_dcmpeq>
   d702a:	b918      	cbnz	r0, d7034 <pow+0x2c4>
   d702c:	4b1b      	ldr	r3, [pc, #108]	; (d709c <pow+0x32c>)
   d702e:	2200      	movs	r2, #0
   d7030:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7034:	f99a 8000 	ldrsb.w	r8, [sl]
   d7038:	e7b9      	b.n	d6fae <pow+0x23e>
   d703a:	4b15      	ldr	r3, [pc, #84]	; (d7090 <pow+0x320>)
   d703c:	f99a 9000 	ldrsb.w	r9, [sl]
   d7040:	f8cd 8020 	str.w	r8, [sp, #32]
   d7044:	2201      	movs	r2, #1
   d7046:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d704a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d704e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7052:	f1b9 0f00 	cmp.w	r9, #0
   d7056:	f43f af2d 	beq.w	d6eb4 <pow+0x144>
   d705a:	2200      	movs	r2, #0
   d705c:	2300      	movs	r3, #0
   d705e:	4610      	mov	r0, r2
   d7060:	4619      	mov	r1, r3
   d7062:	f001 fa9f 	bl	d85a4 <__aeabi_ddiv>
   d7066:	f1b9 0f02 	cmp.w	r9, #2
   d706a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d706e:	d0b9      	beq.n	d6fe4 <pow+0x274>
   d7070:	e724      	b.n	d6ebc <pow+0x14c>
   d7072:	bf00      	nop
   d7074:	f3af 8000 	nop.w
	...
   d7084:	3ff00000 	.word	0x3ff00000
   d7088:	00000000 	.word	0x00000000
   d708c:	7ff00000 	.word	0x7ff00000
   d7090:	000da9d0 	.word	0x000da9d0
   d7094:	3fe00000 	.word	0x3fe00000
   d7098:	c7efffff 	.word	0xc7efffff
   d709c:	fff00000 	.word	0xfff00000
   d70a0:	2003e30c 	.word	0x2003e30c
   d70a4:	47efffff 	.word	0x47efffff

000d70a8 <__ieee754_pow>:
   d70a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d70ac:	ec51 0b11 	vmov	r0, r1, d1
   d70b0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d70b4:	ea58 0400 	orrs.w	r4, r8, r0
   d70b8:	b093      	sub	sp, #76	; 0x4c
   d70ba:	d03c      	beq.n	d7136 <__ieee754_pow+0x8e>
   d70bc:	ec53 2b10 	vmov	r2, r3, d0
   d70c0:	4e6d      	ldr	r6, [pc, #436]	; (d7278 <__ieee754_pow+0x1d0>)
   d70c2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d70c6:	42b4      	cmp	r4, r6
   d70c8:	ee10 aa10 	vmov	sl, s0
   d70cc:	461d      	mov	r5, r3
   d70ce:	dc2b      	bgt.n	d7128 <__ieee754_pow+0x80>
   d70d0:	4689      	mov	r9, r1
   d70d2:	ee11 ea10 	vmov	lr, s2
   d70d6:	d026      	beq.n	d7126 <__ieee754_pow+0x7e>
   d70d8:	45b0      	cmp	r8, r6
   d70da:	dc25      	bgt.n	d7128 <__ieee754_pow+0x80>
   d70dc:	4e66      	ldr	r6, [pc, #408]	; (d7278 <__ieee754_pow+0x1d0>)
   d70de:	45b0      	cmp	r8, r6
   d70e0:	d077      	beq.n	d71d2 <__ieee754_pow+0x12a>
   d70e2:	2d00      	cmp	r5, #0
   d70e4:	4616      	mov	r6, r2
   d70e6:	461f      	mov	r7, r3
   d70e8:	e9cd 0100 	strd	r0, r1, [sp]
   d70ec:	db75      	blt.n	d71da <__ieee754_pow+0x132>
   d70ee:	f04f 0b00 	mov.w	fp, #0
   d70f2:	f1be 0f00 	cmp.w	lr, #0
   d70f6:	d12d      	bne.n	d7154 <__ieee754_pow+0xac>
   d70f8:	4b5f      	ldr	r3, [pc, #380]	; (d7278 <__ieee754_pow+0x1d0>)
   d70fa:	4598      	cmp	r8, r3
   d70fc:	f000 8089 	beq.w	d7212 <__ieee754_pow+0x16a>
   d7100:	4b5e      	ldr	r3, [pc, #376]	; (d727c <__ieee754_pow+0x1d4>)
   d7102:	4598      	cmp	r8, r3
   d7104:	d05e      	beq.n	d71c4 <__ieee754_pow+0x11c>
   d7106:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d710a:	f000 83de 	beq.w	d78ca <__ieee754_pow+0x822>
   d710e:	4b5c      	ldr	r3, [pc, #368]	; (d7280 <__ieee754_pow+0x1d8>)
   d7110:	4599      	cmp	r9, r3
   d7112:	d11f      	bne.n	d7154 <__ieee754_pow+0xac>
   d7114:	2d00      	cmp	r5, #0
   d7116:	db1d      	blt.n	d7154 <__ieee754_pow+0xac>
   d7118:	ec47 6b10 	vmov	d0, r6, r7
   d711c:	b013      	add	sp, #76	; 0x4c
   d711e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7122:	f000 bd49 	b.w	d7bb8 <__ieee754_sqrt>
   d7126:	b15a      	cbz	r2, d7140 <__ieee754_pow+0x98>
   d7128:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d712c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7130:	ea54 030a 	orrs.w	r3, r4, sl
   d7134:	d106      	bne.n	d7144 <__ieee754_pow+0x9c>
   d7136:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7260 <__ieee754_pow+0x1b8>
   d713a:	b013      	add	sp, #76	; 0x4c
   d713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7140:	45a0      	cmp	r8, r4
   d7142:	ddcb      	ble.n	d70dc <__ieee754_pow+0x34>
   d7144:	484f      	ldr	r0, [pc, #316]	; (d7284 <__ieee754_pow+0x1dc>)
   d7146:	b013      	add	sp, #76	; 0x4c
   d7148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d714c:	f000 be18 	b.w	d7d80 <nan>
   d7150:	f04f 0b00 	mov.w	fp, #0
   d7154:	ec47 6b10 	vmov	d0, r6, r7
   d7158:	f000 fdfe 	bl	d7d58 <fabs>
   d715c:	ec51 0b10 	vmov	r0, r1, d0
   d7160:	f1ba 0f00 	cmp.w	sl, #0
   d7164:	d01e      	beq.n	d71a4 <__ieee754_pow+0xfc>
   d7166:	0fed      	lsrs	r5, r5, #31
   d7168:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d716c:	ea5b 030a 	orrs.w	r3, fp, sl
   d7170:	d063      	beq.n	d723a <__ieee754_pow+0x192>
   d7172:	4b45      	ldr	r3, [pc, #276]	; (d7288 <__ieee754_pow+0x1e0>)
   d7174:	4598      	cmp	r8, r3
   d7176:	f340 808d 	ble.w	d7294 <__ieee754_pow+0x1ec>
   d717a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d717e:	4598      	cmp	r8, r3
   d7180:	f340 8438 	ble.w	d79f4 <__ieee754_pow+0x94c>
   d7184:	4b41      	ldr	r3, [pc, #260]	; (d728c <__ieee754_pow+0x1e4>)
   d7186:	429c      	cmp	r4, r3
   d7188:	dd62      	ble.n	d7250 <__ieee754_pow+0x1a8>
   d718a:	f1b9 0f00 	cmp.w	r9, #0
   d718e:	dd62      	ble.n	d7256 <__ieee754_pow+0x1ae>
   d7190:	a335      	add	r3, pc, #212	; (adr r3, d7268 <__ieee754_pow+0x1c0>)
   d7192:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7196:	4610      	mov	r0, r2
   d7198:	4619      	mov	r1, r3
   d719a:	f001 f8d9 	bl	d8350 <__aeabi_dmul>
   d719e:	ec41 0b10 	vmov	d0, r0, r1
   d71a2:	e7ca      	b.n	d713a <__ieee754_pow+0x92>
   d71a4:	b124      	cbz	r4, d71b0 <__ieee754_pow+0x108>
   d71a6:	4b35      	ldr	r3, [pc, #212]	; (d727c <__ieee754_pow+0x1d4>)
   d71a8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d71ac:	429a      	cmp	r2, r3
   d71ae:	d1da      	bne.n	d7166 <__ieee754_pow+0xbe>
   d71b0:	f1b9 0f00 	cmp.w	r9, #0
   d71b4:	f2c0 83cb 	blt.w	d794e <__ieee754_pow+0x8a6>
   d71b8:	2d00      	cmp	r5, #0
   d71ba:	f2c0 8374 	blt.w	d78a6 <__ieee754_pow+0x7fe>
   d71be:	ec41 0b10 	vmov	d0, r0, r1
   d71c2:	e7ba      	b.n	d713a <__ieee754_pow+0x92>
   d71c4:	f1b9 0f00 	cmp.w	r9, #0
   d71c8:	f2c0 847a 	blt.w	d7ac0 <__ieee754_pow+0xa18>
   d71cc:	ec47 6b10 	vmov	d0, r6, r7
   d71d0:	e7b3      	b.n	d713a <__ieee754_pow+0x92>
   d71d2:	f1be 0f00 	cmp.w	lr, #0
   d71d6:	d084      	beq.n	d70e2 <__ieee754_pow+0x3a>
   d71d8:	e7a6      	b.n	d7128 <__ieee754_pow+0x80>
   d71da:	4b2d      	ldr	r3, [pc, #180]	; (d7290 <__ieee754_pow+0x1e8>)
   d71dc:	4598      	cmp	r8, r3
   d71de:	dc29      	bgt.n	d7234 <__ieee754_pow+0x18c>
   d71e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d71e4:	4598      	cmp	r8, r3
   d71e6:	dd82      	ble.n	d70ee <__ieee754_pow+0x46>
   d71e8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d71ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d71f0:	2b14      	cmp	r3, #20
   d71f2:	f340 847f 	ble.w	d7af4 <__ieee754_pow+0xa4c>
   d71f6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d71fa:	fa2e f203 	lsr.w	r2, lr, r3
   d71fe:	fa02 f303 	lsl.w	r3, r2, r3
   d7202:	459e      	cmp	lr, r3
   d7204:	f47f af73 	bne.w	d70ee <__ieee754_pow+0x46>
   d7208:	f002 0201 	and.w	r2, r2, #1
   d720c:	f1c2 0b02 	rsb	fp, r2, #2
   d7210:	e76f      	b.n	d70f2 <__ieee754_pow+0x4a>
   d7212:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d7216:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d721a:	ea53 030a 	orrs.w	r3, r3, sl
   d721e:	d08a      	beq.n	d7136 <__ieee754_pow+0x8e>
   d7220:	4b1a      	ldr	r3, [pc, #104]	; (d728c <__ieee754_pow+0x1e4>)
   d7222:	429c      	cmp	r4, r3
   d7224:	f340 8385 	ble.w	d7932 <__ieee754_pow+0x88a>
   d7228:	f1b9 0f00 	cmp.w	r9, #0
   d722c:	db13      	blt.n	d7256 <__ieee754_pow+0x1ae>
   d722e:	ed9d 0b00 	vldr	d0, [sp]
   d7232:	e782      	b.n	d713a <__ieee754_pow+0x92>
   d7234:	f04f 0b02 	mov.w	fp, #2
   d7238:	e75b      	b.n	d70f2 <__ieee754_pow+0x4a>
   d723a:	4632      	mov	r2, r6
   d723c:	463b      	mov	r3, r7
   d723e:	4610      	mov	r0, r2
   d7240:	4619      	mov	r1, r3
   d7242:	f000 fed1 	bl	d7fe8 <__aeabi_dsub>
   d7246:	4602      	mov	r2, r0
   d7248:	460b      	mov	r3, r1
   d724a:	f001 f9ab 	bl	d85a4 <__aeabi_ddiv>
   d724e:	e7b6      	b.n	d71be <__ieee754_pow+0x116>
   d7250:	f1b9 0f00 	cmp.w	r9, #0
   d7254:	db9c      	blt.n	d7190 <__ieee754_pow+0xe8>
   d7256:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7270 <__ieee754_pow+0x1c8>
   d725a:	e76e      	b.n	d713a <__ieee754_pow+0x92>
   d725c:	f3af 8000 	nop.w
   d7260:	00000000 	.word	0x00000000
   d7264:	3ff00000 	.word	0x3ff00000
   d7268:	8800759c 	.word	0x8800759c
   d726c:	7e37e43c 	.word	0x7e37e43c
	...
   d7278:	7ff00000 	.word	0x7ff00000
   d727c:	3ff00000 	.word	0x3ff00000
   d7280:	3fe00000 	.word	0x3fe00000
   d7284:	000da9d4 	.word	0x000da9d4
   d7288:	41e00000 	.word	0x41e00000
   d728c:	3fefffff 	.word	0x3fefffff
   d7290:	433fffff 	.word	0x433fffff
   d7294:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7298:	f04f 0200 	mov.w	r2, #0
   d729c:	da05      	bge.n	d72aa <__ieee754_pow+0x202>
   d729e:	4bd6      	ldr	r3, [pc, #856]	; (d75f8 <__ieee754_pow+0x550>)
   d72a0:	f001 f856 	bl	d8350 <__aeabi_dmul>
   d72a4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d72a8:	460c      	mov	r4, r1
   d72aa:	1523      	asrs	r3, r4, #20
   d72ac:	4ed3      	ldr	r6, [pc, #844]	; (d75fc <__ieee754_pow+0x554>)
   d72ae:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d72b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d72b6:	4413      	add	r3, r2
   d72b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d72bc:	42b4      	cmp	r4, r6
   d72be:	461a      	mov	r2, r3
   d72c0:	930d      	str	r3, [sp, #52]	; 0x34
   d72c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d72c6:	f340 8349 	ble.w	d795c <__ieee754_pow+0x8b4>
   d72ca:	4bcd      	ldr	r3, [pc, #820]	; (d7600 <__ieee754_pow+0x558>)
   d72cc:	429c      	cmp	r4, r3
   d72ce:	f340 842d 	ble.w	d7b2c <__ieee754_pow+0xa84>
   d72d2:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d75a0 <__ieee754_pow+0x4f8>
   d72d6:	ed8d 7b08 	vstr	d7, [sp, #32]
   d72da:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d72de:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d75a8 <__ieee754_pow+0x500>
   d72e2:	4613      	mov	r3, r2
   d72e4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d72e8:	3301      	adds	r3, #1
   d72ea:	930d      	str	r3, [sp, #52]	; 0x34
   d72ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d72f0:	f04f 0800 	mov.w	r8, #0
   d72f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d72f8:	4629      	mov	r1, r5
   d72fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d72fe:	f000 fe73 	bl	d7fe8 <__aeabi_dsub>
   d7302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7306:	4606      	mov	r6, r0
   d7308:	460f      	mov	r7, r1
   d730a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d730e:	f000 fe6d 	bl	d7fec <__adddf3>
   d7312:	4602      	mov	r2, r0
   d7314:	460b      	mov	r3, r1
   d7316:	2000      	movs	r0, #0
   d7318:	49ba      	ldr	r1, [pc, #744]	; (d7604 <__ieee754_pow+0x55c>)
   d731a:	f001 f943 	bl	d85a4 <__aeabi_ddiv>
   d731e:	4603      	mov	r3, r0
   d7320:	460c      	mov	r4, r1
   d7322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d7326:	4602      	mov	r2, r0
   d7328:	460b      	mov	r3, r1
   d732a:	4630      	mov	r0, r6
   d732c:	4639      	mov	r1, r7
   d732e:	f001 f80f 	bl	d8350 <__aeabi_dmul>
   d7332:	106b      	asrs	r3, r5, #1
   d7334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d7338:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d733c:	eb03 0508 	add.w	r5, r3, r8
   d7340:	460a      	mov	r2, r1
   d7342:	2300      	movs	r3, #0
   d7344:	4601      	mov	r1, r0
   d7346:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d734a:	9302      	str	r3, [sp, #8]
   d734c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7350:	2400      	movs	r4, #0
   d7352:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7356:	462b      	mov	r3, r5
   d7358:	4622      	mov	r2, r4
   d735a:	4640      	mov	r0, r8
   d735c:	4649      	mov	r1, r9
   d735e:	f000 fff7 	bl	d8350 <__aeabi_dmul>
   d7362:	4602      	mov	r2, r0
   d7364:	460b      	mov	r3, r1
   d7366:	4630      	mov	r0, r6
   d7368:	4639      	mov	r1, r7
   d736a:	f000 fe3d 	bl	d7fe8 <__aeabi_dsub>
   d736e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7372:	4606      	mov	r6, r0
   d7374:	460f      	mov	r7, r1
   d7376:	4620      	mov	r0, r4
   d7378:	4629      	mov	r1, r5
   d737a:	f000 fe35 	bl	d7fe8 <__aeabi_dsub>
   d737e:	4602      	mov	r2, r0
   d7380:	460b      	mov	r3, r1
   d7382:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7386:	f000 fe2f 	bl	d7fe8 <__aeabi_dsub>
   d738a:	4642      	mov	r2, r8
   d738c:	464b      	mov	r3, r9
   d738e:	f000 ffdf 	bl	d8350 <__aeabi_dmul>
   d7392:	4602      	mov	r2, r0
   d7394:	460b      	mov	r3, r1
   d7396:	4630      	mov	r0, r6
   d7398:	4639      	mov	r1, r7
   d739a:	f000 fe25 	bl	d7fe8 <__aeabi_dsub>
   d739e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d73a2:	f000 ffd5 	bl	d8350 <__aeabi_dmul>
   d73a6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d73aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d73ae:	4622      	mov	r2, r4
   d73b0:	462b      	mov	r3, r5
   d73b2:	4620      	mov	r0, r4
   d73b4:	4629      	mov	r1, r5
   d73b6:	f000 ffcb 	bl	d8350 <__aeabi_dmul>
   d73ba:	a37d      	add	r3, pc, #500	; (adr r3, d75b0 <__ieee754_pow+0x508>)
   d73bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73c0:	4604      	mov	r4, r0
   d73c2:	460d      	mov	r5, r1
   d73c4:	f000 ffc4 	bl	d8350 <__aeabi_dmul>
   d73c8:	a37b      	add	r3, pc, #492	; (adr r3, d75b8 <__ieee754_pow+0x510>)
   d73ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73ce:	f000 fe0d 	bl	d7fec <__adddf3>
   d73d2:	4622      	mov	r2, r4
   d73d4:	462b      	mov	r3, r5
   d73d6:	f000 ffbb 	bl	d8350 <__aeabi_dmul>
   d73da:	a379      	add	r3, pc, #484	; (adr r3, d75c0 <__ieee754_pow+0x518>)
   d73dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73e0:	f000 fe04 	bl	d7fec <__adddf3>
   d73e4:	4622      	mov	r2, r4
   d73e6:	462b      	mov	r3, r5
   d73e8:	f000 ffb2 	bl	d8350 <__aeabi_dmul>
   d73ec:	a376      	add	r3, pc, #472	; (adr r3, d75c8 <__ieee754_pow+0x520>)
   d73ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73f2:	f000 fdfb 	bl	d7fec <__adddf3>
   d73f6:	4622      	mov	r2, r4
   d73f8:	462b      	mov	r3, r5
   d73fa:	f000 ffa9 	bl	d8350 <__aeabi_dmul>
   d73fe:	a374      	add	r3, pc, #464	; (adr r3, d75d0 <__ieee754_pow+0x528>)
   d7400:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7404:	f000 fdf2 	bl	d7fec <__adddf3>
   d7408:	4622      	mov	r2, r4
   d740a:	462b      	mov	r3, r5
   d740c:	f000 ffa0 	bl	d8350 <__aeabi_dmul>
   d7410:	a371      	add	r3, pc, #452	; (adr r3, d75d8 <__ieee754_pow+0x530>)
   d7412:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7416:	f000 fde9 	bl	d7fec <__adddf3>
   d741a:	4622      	mov	r2, r4
   d741c:	4606      	mov	r6, r0
   d741e:	460f      	mov	r7, r1
   d7420:	462b      	mov	r3, r5
   d7422:	4620      	mov	r0, r4
   d7424:	4629      	mov	r1, r5
   d7426:	f000 ff93 	bl	d8350 <__aeabi_dmul>
   d742a:	4602      	mov	r2, r0
   d742c:	460b      	mov	r3, r1
   d742e:	4630      	mov	r0, r6
   d7430:	4639      	mov	r1, r7
   d7432:	f000 ff8d 	bl	d8350 <__aeabi_dmul>
   d7436:	4642      	mov	r2, r8
   d7438:	4604      	mov	r4, r0
   d743a:	460d      	mov	r5, r1
   d743c:	464b      	mov	r3, r9
   d743e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7442:	f000 fdd3 	bl	d7fec <__adddf3>
   d7446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d744a:	f000 ff81 	bl	d8350 <__aeabi_dmul>
   d744e:	4622      	mov	r2, r4
   d7450:	462b      	mov	r3, r5
   d7452:	f000 fdcb 	bl	d7fec <__adddf3>
   d7456:	4642      	mov	r2, r8
   d7458:	4606      	mov	r6, r0
   d745a:	460f      	mov	r7, r1
   d745c:	464b      	mov	r3, r9
   d745e:	4640      	mov	r0, r8
   d7460:	4649      	mov	r1, r9
   d7462:	f000 ff75 	bl	d8350 <__aeabi_dmul>
   d7466:	2200      	movs	r2, #0
   d7468:	4b67      	ldr	r3, [pc, #412]	; (d7608 <__ieee754_pow+0x560>)
   d746a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d746e:	f000 fdbd 	bl	d7fec <__adddf3>
   d7472:	4632      	mov	r2, r6
   d7474:	463b      	mov	r3, r7
   d7476:	f000 fdb9 	bl	d7fec <__adddf3>
   d747a:	9802      	ldr	r0, [sp, #8]
   d747c:	460d      	mov	r5, r1
   d747e:	4604      	mov	r4, r0
   d7480:	4622      	mov	r2, r4
   d7482:	462b      	mov	r3, r5
   d7484:	4640      	mov	r0, r8
   d7486:	4649      	mov	r1, r9
   d7488:	f000 ff62 	bl	d8350 <__aeabi_dmul>
   d748c:	2200      	movs	r2, #0
   d748e:	4680      	mov	r8, r0
   d7490:	4689      	mov	r9, r1
   d7492:	4b5d      	ldr	r3, [pc, #372]	; (d7608 <__ieee754_pow+0x560>)
   d7494:	4620      	mov	r0, r4
   d7496:	4629      	mov	r1, r5
   d7498:	f000 fda6 	bl	d7fe8 <__aeabi_dsub>
   d749c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d74a0:	f000 fda2 	bl	d7fe8 <__aeabi_dsub>
   d74a4:	4602      	mov	r2, r0
   d74a6:	460b      	mov	r3, r1
   d74a8:	4630      	mov	r0, r6
   d74aa:	4639      	mov	r1, r7
   d74ac:	f000 fd9c 	bl	d7fe8 <__aeabi_dsub>
   d74b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d74b4:	f000 ff4c 	bl	d8350 <__aeabi_dmul>
   d74b8:	4622      	mov	r2, r4
   d74ba:	4606      	mov	r6, r0
   d74bc:	460f      	mov	r7, r1
   d74be:	462b      	mov	r3, r5
   d74c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d74c4:	f000 ff44 	bl	d8350 <__aeabi_dmul>
   d74c8:	4602      	mov	r2, r0
   d74ca:	460b      	mov	r3, r1
   d74cc:	4630      	mov	r0, r6
   d74ce:	4639      	mov	r1, r7
   d74d0:	f000 fd8c 	bl	d7fec <__adddf3>
   d74d4:	4606      	mov	r6, r0
   d74d6:	460f      	mov	r7, r1
   d74d8:	4602      	mov	r2, r0
   d74da:	460b      	mov	r3, r1
   d74dc:	4640      	mov	r0, r8
   d74de:	4649      	mov	r1, r9
   d74e0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d74e4:	f000 fd82 	bl	d7fec <__adddf3>
   d74e8:	9802      	ldr	r0, [sp, #8]
   d74ea:	a33d      	add	r3, pc, #244	; (adr r3, d75e0 <__ieee754_pow+0x538>)
   d74ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74f0:	4604      	mov	r4, r0
   d74f2:	460d      	mov	r5, r1
   d74f4:	f000 ff2c 	bl	d8350 <__aeabi_dmul>
   d74f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d74fc:	4680      	mov	r8, r0
   d74fe:	4689      	mov	r9, r1
   d7500:	4620      	mov	r0, r4
   d7502:	4629      	mov	r1, r5
   d7504:	f000 fd70 	bl	d7fe8 <__aeabi_dsub>
   d7508:	4602      	mov	r2, r0
   d750a:	460b      	mov	r3, r1
   d750c:	4630      	mov	r0, r6
   d750e:	4639      	mov	r1, r7
   d7510:	f000 fd6a 	bl	d7fe8 <__aeabi_dsub>
   d7514:	a334      	add	r3, pc, #208	; (adr r3, d75e8 <__ieee754_pow+0x540>)
   d7516:	e9d3 2300 	ldrd	r2, r3, [r3]
   d751a:	f000 ff19 	bl	d8350 <__aeabi_dmul>
   d751e:	a334      	add	r3, pc, #208	; (adr r3, d75f0 <__ieee754_pow+0x548>)
   d7520:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7524:	4606      	mov	r6, r0
   d7526:	460f      	mov	r7, r1
   d7528:	4620      	mov	r0, r4
   d752a:	4629      	mov	r1, r5
   d752c:	f000 ff10 	bl	d8350 <__aeabi_dmul>
   d7530:	4602      	mov	r2, r0
   d7532:	460b      	mov	r3, r1
   d7534:	4630      	mov	r0, r6
   d7536:	4639      	mov	r1, r7
   d7538:	f000 fd58 	bl	d7fec <__adddf3>
   d753c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d7540:	f000 fd54 	bl	d7fec <__adddf3>
   d7544:	4606      	mov	r6, r0
   d7546:	980d      	ldr	r0, [sp, #52]	; 0x34
   d7548:	460f      	mov	r7, r1
   d754a:	f000 fe9b 	bl	d8284 <__aeabi_i2d>
   d754e:	4632      	mov	r2, r6
   d7550:	4604      	mov	r4, r0
   d7552:	460d      	mov	r5, r1
   d7554:	463b      	mov	r3, r7
   d7556:	4640      	mov	r0, r8
   d7558:	4649      	mov	r1, r9
   d755a:	f000 fd47 	bl	d7fec <__adddf3>
   d755e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7562:	f000 fd43 	bl	d7fec <__adddf3>
   d7566:	4622      	mov	r2, r4
   d7568:	462b      	mov	r3, r5
   d756a:	f000 fd3f 	bl	d7fec <__adddf3>
   d756e:	9802      	ldr	r0, [sp, #8]
   d7570:	4622      	mov	r2, r4
   d7572:	462b      	mov	r3, r5
   d7574:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7578:	f000 fd36 	bl	d7fe8 <__aeabi_dsub>
   d757c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7580:	f000 fd32 	bl	d7fe8 <__aeabi_dsub>
   d7584:	4642      	mov	r2, r8
   d7586:	464b      	mov	r3, r9
   d7588:	f000 fd2e 	bl	d7fe8 <__aeabi_dsub>
   d758c:	4602      	mov	r2, r0
   d758e:	460b      	mov	r3, r1
   d7590:	4630      	mov	r0, r6
   d7592:	4639      	mov	r1, r7
   d7594:	f000 fd28 	bl	d7fe8 <__aeabi_dsub>
   d7598:	4680      	mov	r8, r0
   d759a:	4689      	mov	r9, r1
   d759c:	e036      	b.n	d760c <__ieee754_pow+0x564>
   d759e:	bf00      	nop
	...
   d75ac:	3ff00000 	.word	0x3ff00000
   d75b0:	4a454eef 	.word	0x4a454eef
   d75b4:	3fca7e28 	.word	0x3fca7e28
   d75b8:	93c9db65 	.word	0x93c9db65
   d75bc:	3fcd864a 	.word	0x3fcd864a
   d75c0:	a91d4101 	.word	0xa91d4101
   d75c4:	3fd17460 	.word	0x3fd17460
   d75c8:	518f264d 	.word	0x518f264d
   d75cc:	3fd55555 	.word	0x3fd55555
   d75d0:	db6fabff 	.word	0xdb6fabff
   d75d4:	3fdb6db6 	.word	0x3fdb6db6
   d75d8:	33333303 	.word	0x33333303
   d75dc:	3fe33333 	.word	0x3fe33333
   d75e0:	e0000000 	.word	0xe0000000
   d75e4:	3feec709 	.word	0x3feec709
   d75e8:	dc3a03fd 	.word	0xdc3a03fd
   d75ec:	3feec709 	.word	0x3feec709
   d75f0:	145b01f5 	.word	0x145b01f5
   d75f4:	be3e2fe0 	.word	0xbe3e2fe0
   d75f8:	43400000 	.word	0x43400000
   d75fc:	0003988e 	.word	0x0003988e
   d7600:	000bb679 	.word	0x000bb679
   d7604:	3ff00000 	.word	0x3ff00000
   d7608:	40080000 	.word	0x40080000
   d760c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d7610:	ea53 030a 	orrs.w	r3, r3, sl
   d7614:	f000 8188 	beq.w	d7928 <__ieee754_pow+0x880>
   d7618:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d7978 <__ieee754_pow+0x8d0>
   d761c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7620:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7624:	4653      	mov	r3, sl
   d7626:	465c      	mov	r4, fp
   d7628:	e9cd 3400 	strd	r3, r4, [sp]
   d762c:	2300      	movs	r3, #0
   d762e:	9300      	str	r3, [sp, #0]
   d7630:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7634:	4650      	mov	r0, sl
   d7636:	4622      	mov	r2, r4
   d7638:	462b      	mov	r3, r5
   d763a:	4659      	mov	r1, fp
   d763c:	f000 fcd4 	bl	d7fe8 <__aeabi_dsub>
   d7640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7644:	f000 fe84 	bl	d8350 <__aeabi_dmul>
   d7648:	4652      	mov	r2, sl
   d764a:	4606      	mov	r6, r0
   d764c:	460f      	mov	r7, r1
   d764e:	465b      	mov	r3, fp
   d7650:	4640      	mov	r0, r8
   d7652:	4649      	mov	r1, r9
   d7654:	f000 fe7c 	bl	d8350 <__aeabi_dmul>
   d7658:	4602      	mov	r2, r0
   d765a:	460b      	mov	r3, r1
   d765c:	4630      	mov	r0, r6
   d765e:	4639      	mov	r1, r7
   d7660:	f000 fcc4 	bl	d7fec <__adddf3>
   d7664:	4622      	mov	r2, r4
   d7666:	4680      	mov	r8, r0
   d7668:	4689      	mov	r9, r1
   d766a:	462b      	mov	r3, r5
   d766c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7670:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7674:	f000 fe6c 	bl	d8350 <__aeabi_dmul>
   d7678:	460b      	mov	r3, r1
   d767a:	4602      	mov	r2, r0
   d767c:	4606      	mov	r6, r0
   d767e:	460f      	mov	r7, r1
   d7680:	4640      	mov	r0, r8
   d7682:	4649      	mov	r1, r9
   d7684:	f000 fcb2 	bl	d7fec <__adddf3>
   d7688:	4bd5      	ldr	r3, [pc, #852]	; (d79e0 <__ieee754_pow+0x938>)
   d768a:	4299      	cmp	r1, r3
   d768c:	4604      	mov	r4, r0
   d768e:	460d      	mov	r5, r1
   d7690:	468a      	mov	sl, r1
   d7692:	f340 8123 	ble.w	d78dc <__ieee754_pow+0x834>
   d7696:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d769a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d769e:	4303      	orrs	r3, r0
   d76a0:	f040 8218 	bne.w	d7ad4 <__ieee754_pow+0xa2c>
   d76a4:	a3b6      	add	r3, pc, #728	; (adr r3, d7980 <__ieee754_pow+0x8d8>)
   d76a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d76aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d76ae:	f000 fc9d 	bl	d7fec <__adddf3>
   d76b2:	4632      	mov	r2, r6
   d76b4:	4680      	mov	r8, r0
   d76b6:	4689      	mov	r9, r1
   d76b8:	463b      	mov	r3, r7
   d76ba:	4620      	mov	r0, r4
   d76bc:	4629      	mov	r1, r5
   d76be:	f000 fc93 	bl	d7fe8 <__aeabi_dsub>
   d76c2:	4602      	mov	r2, r0
   d76c4:	460b      	mov	r3, r1
   d76c6:	4640      	mov	r0, r8
   d76c8:	4649      	mov	r1, r9
   d76ca:	f001 f8d1 	bl	d8870 <__aeabi_dcmpgt>
   d76ce:	2800      	cmp	r0, #0
   d76d0:	f040 8200 	bne.w	d7ad4 <__ieee754_pow+0xa2c>
   d76d4:	46a8      	mov	r8, r5
   d76d6:	ea4f 5328 	mov.w	r3, r8, asr #20
   d76da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d76de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d76e2:	fa42 f303 	asr.w	r3, r2, r3
   d76e6:	4453      	add	r3, sl
   d76e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d76ec:	4dbd      	ldr	r5, [pc, #756]	; (d79e4 <__ieee754_pow+0x93c>)
   d76ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d76f2:	4115      	asrs	r5, r2
   d76f4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d76f8:	2000      	movs	r0, #0
   d76fa:	f1c2 0414 	rsb	r4, r2, #20
   d76fe:	ea23 0105 	bic.w	r1, r3, r5
   d7702:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d7706:	f1ba 0f00 	cmp.w	sl, #0
   d770a:	4602      	mov	r2, r0
   d770c:	460b      	mov	r3, r1
   d770e:	fa4b fb04 	asr.w	fp, fp, r4
   d7712:	4630      	mov	r0, r6
   d7714:	4639      	mov	r1, r7
   d7716:	bfb8      	it	lt
   d7718:	f1cb 0b00 	rsblt	fp, fp, #0
   d771c:	f000 fc64 	bl	d7fe8 <__aeabi_dsub>
   d7720:	4602      	mov	r2, r0
   d7722:	460b      	mov	r3, r1
   d7724:	4606      	mov	r6, r0
   d7726:	460f      	mov	r7, r1
   d7728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d772c:	f000 fc5e 	bl	d7fec <__adddf3>
   d7730:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d7734:	2400      	movs	r4, #0
   d7736:	a394      	add	r3, pc, #592	; (adr r3, d7988 <__ieee754_pow+0x8e0>)
   d7738:	e9d3 2300 	ldrd	r2, r3, [r3]
   d773c:	4620      	mov	r0, r4
   d773e:	460d      	mov	r5, r1
   d7740:	f000 fe06 	bl	d8350 <__aeabi_dmul>
   d7744:	4632      	mov	r2, r6
   d7746:	4680      	mov	r8, r0
   d7748:	4689      	mov	r9, r1
   d774a:	463b      	mov	r3, r7
   d774c:	4620      	mov	r0, r4
   d774e:	4629      	mov	r1, r5
   d7750:	f000 fc4a 	bl	d7fe8 <__aeabi_dsub>
   d7754:	4602      	mov	r2, r0
   d7756:	460b      	mov	r3, r1
   d7758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d775c:	f000 fc44 	bl	d7fe8 <__aeabi_dsub>
   d7760:	a38b      	add	r3, pc, #556	; (adr r3, d7990 <__ieee754_pow+0x8e8>)
   d7762:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7766:	f000 fdf3 	bl	d8350 <__aeabi_dmul>
   d776a:	a38b      	add	r3, pc, #556	; (adr r3, d7998 <__ieee754_pow+0x8f0>)
   d776c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7770:	4606      	mov	r6, r0
   d7772:	460f      	mov	r7, r1
   d7774:	4620      	mov	r0, r4
   d7776:	4629      	mov	r1, r5
   d7778:	f000 fdea 	bl	d8350 <__aeabi_dmul>
   d777c:	4602      	mov	r2, r0
   d777e:	460b      	mov	r3, r1
   d7780:	4630      	mov	r0, r6
   d7782:	4639      	mov	r1, r7
   d7784:	f000 fc32 	bl	d7fec <__adddf3>
   d7788:	4606      	mov	r6, r0
   d778a:	460f      	mov	r7, r1
   d778c:	4602      	mov	r2, r0
   d778e:	460b      	mov	r3, r1
   d7790:	4640      	mov	r0, r8
   d7792:	4649      	mov	r1, r9
   d7794:	f000 fc2a 	bl	d7fec <__adddf3>
   d7798:	4642      	mov	r2, r8
   d779a:	464b      	mov	r3, r9
   d779c:	4604      	mov	r4, r0
   d779e:	460d      	mov	r5, r1
   d77a0:	f000 fc22 	bl	d7fe8 <__aeabi_dsub>
   d77a4:	4602      	mov	r2, r0
   d77a6:	460b      	mov	r3, r1
   d77a8:	4630      	mov	r0, r6
   d77aa:	4639      	mov	r1, r7
   d77ac:	f000 fc1c 	bl	d7fe8 <__aeabi_dsub>
   d77b0:	4622      	mov	r2, r4
   d77b2:	4680      	mov	r8, r0
   d77b4:	4689      	mov	r9, r1
   d77b6:	462b      	mov	r3, r5
   d77b8:	4620      	mov	r0, r4
   d77ba:	4629      	mov	r1, r5
   d77bc:	f000 fdc8 	bl	d8350 <__aeabi_dmul>
   d77c0:	a377      	add	r3, pc, #476	; (adr r3, d79a0 <__ieee754_pow+0x8f8>)
   d77c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d77c6:	4606      	mov	r6, r0
   d77c8:	460f      	mov	r7, r1
   d77ca:	f000 fdc1 	bl	d8350 <__aeabi_dmul>
   d77ce:	a376      	add	r3, pc, #472	; (adr r3, d79a8 <__ieee754_pow+0x900>)
   d77d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d77d4:	f000 fc08 	bl	d7fe8 <__aeabi_dsub>
   d77d8:	4632      	mov	r2, r6
   d77da:	463b      	mov	r3, r7
   d77dc:	f000 fdb8 	bl	d8350 <__aeabi_dmul>
   d77e0:	a373      	add	r3, pc, #460	; (adr r3, d79b0 <__ieee754_pow+0x908>)
   d77e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d77e6:	f000 fc01 	bl	d7fec <__adddf3>
   d77ea:	4632      	mov	r2, r6
   d77ec:	463b      	mov	r3, r7
   d77ee:	f000 fdaf 	bl	d8350 <__aeabi_dmul>
   d77f2:	a371      	add	r3, pc, #452	; (adr r3, d79b8 <__ieee754_pow+0x910>)
   d77f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d77f8:	f000 fbf6 	bl	d7fe8 <__aeabi_dsub>
   d77fc:	4632      	mov	r2, r6
   d77fe:	463b      	mov	r3, r7
   d7800:	f000 fda6 	bl	d8350 <__aeabi_dmul>
   d7804:	a36e      	add	r3, pc, #440	; (adr r3, d79c0 <__ieee754_pow+0x918>)
   d7806:	e9d3 2300 	ldrd	r2, r3, [r3]
   d780a:	f000 fbef 	bl	d7fec <__adddf3>
   d780e:	4632      	mov	r2, r6
   d7810:	463b      	mov	r3, r7
   d7812:	f000 fd9d 	bl	d8350 <__aeabi_dmul>
   d7816:	4602      	mov	r2, r0
   d7818:	460b      	mov	r3, r1
   d781a:	4620      	mov	r0, r4
   d781c:	4629      	mov	r1, r5
   d781e:	f000 fbe3 	bl	d7fe8 <__aeabi_dsub>
   d7822:	4606      	mov	r6, r0
   d7824:	460f      	mov	r7, r1
   d7826:	4602      	mov	r2, r0
   d7828:	460b      	mov	r3, r1
   d782a:	4620      	mov	r0, r4
   d782c:	4629      	mov	r1, r5
   d782e:	f000 fd8f 	bl	d8350 <__aeabi_dmul>
   d7832:	2200      	movs	r2, #0
   d7834:	e9cd 0100 	strd	r0, r1, [sp]
   d7838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d783c:	4630      	mov	r0, r6
   d783e:	4639      	mov	r1, r7
   d7840:	f000 fbd2 	bl	d7fe8 <__aeabi_dsub>
   d7844:	4602      	mov	r2, r0
   d7846:	460b      	mov	r3, r1
   d7848:	e9dd 0100 	ldrd	r0, r1, [sp]
   d784c:	f000 feaa 	bl	d85a4 <__aeabi_ddiv>
   d7850:	4642      	mov	r2, r8
   d7852:	4606      	mov	r6, r0
   d7854:	460f      	mov	r7, r1
   d7856:	464b      	mov	r3, r9
   d7858:	4620      	mov	r0, r4
   d785a:	4629      	mov	r1, r5
   d785c:	f000 fd78 	bl	d8350 <__aeabi_dmul>
   d7860:	4642      	mov	r2, r8
   d7862:	464b      	mov	r3, r9
   d7864:	f000 fbc2 	bl	d7fec <__adddf3>
   d7868:	4602      	mov	r2, r0
   d786a:	460b      	mov	r3, r1
   d786c:	4630      	mov	r0, r6
   d786e:	4639      	mov	r1, r7
   d7870:	f000 fbba 	bl	d7fe8 <__aeabi_dsub>
   d7874:	4622      	mov	r2, r4
   d7876:	462b      	mov	r3, r5
   d7878:	f000 fbb6 	bl	d7fe8 <__aeabi_dsub>
   d787c:	4602      	mov	r2, r0
   d787e:	460b      	mov	r3, r1
   d7880:	2000      	movs	r0, #0
   d7882:	4959      	ldr	r1, [pc, #356]	; (d79e8 <__ieee754_pow+0x940>)
   d7884:	f000 fbb0 	bl	d7fe8 <__aeabi_dsub>
   d7888:	448a      	add	sl, r1
   d788a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d788e:	4602      	mov	r2, r0
   d7890:	460b      	mov	r3, r1
   d7892:	f2c0 815b 	blt.w	d7b4c <__ieee754_pow+0xaa4>
   d7896:	4651      	mov	r1, sl
   d7898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d789c:	f000 fd58 	bl	d8350 <__aeabi_dmul>
   d78a0:	ec41 0b10 	vmov	d0, r0, r1
   d78a4:	e449      	b.n	d713a <__ieee754_pow+0x92>
   d78a6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d78aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d78ae:	ea54 030b 	orrs.w	r3, r4, fp
   d78b2:	f000 8137 	beq.w	d7b24 <__ieee754_pow+0xa7c>
   d78b6:	f1bb 0f01 	cmp.w	fp, #1
   d78ba:	f47f ac80 	bne.w	d71be <__ieee754_pow+0x116>
   d78be:	4602      	mov	r2, r0
   d78c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d78c4:	ec43 2b10 	vmov	d0, r2, r3
   d78c8:	e437      	b.n	d713a <__ieee754_pow+0x92>
   d78ca:	4632      	mov	r2, r6
   d78cc:	463b      	mov	r3, r7
   d78ce:	4630      	mov	r0, r6
   d78d0:	4639      	mov	r1, r7
   d78d2:	f000 fd3d 	bl	d8350 <__aeabi_dmul>
   d78d6:	ec41 0b10 	vmov	d0, r0, r1
   d78da:	e42e      	b.n	d713a <__ieee754_pow+0x92>
   d78dc:	4b43      	ldr	r3, [pc, #268]	; (d79ec <__ieee754_pow+0x944>)
   d78de:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d78e2:	4598      	cmp	r8, r3
   d78e4:	f340 8115 	ble.w	d7b12 <__ieee754_pow+0xa6a>
   d78e8:	4b41      	ldr	r3, [pc, #260]	; (d79f0 <__ieee754_pow+0x948>)
   d78ea:	440b      	add	r3, r1
   d78ec:	4303      	orrs	r3, r0
   d78ee:	d10c      	bne.n	d790a <__ieee754_pow+0x862>
   d78f0:	4632      	mov	r2, r6
   d78f2:	463b      	mov	r3, r7
   d78f4:	f000 fb78 	bl	d7fe8 <__aeabi_dsub>
   d78f8:	4602      	mov	r2, r0
   d78fa:	460b      	mov	r3, r1
   d78fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7900:	f000 ffa2 	bl	d8848 <__aeabi_dcmple>
   d7904:	2800      	cmp	r0, #0
   d7906:	f43f aee6 	beq.w	d76d6 <__ieee754_pow+0x62e>
   d790a:	a32f      	add	r3, pc, #188	; (adr r3, d79c8 <__ieee754_pow+0x920>)
   d790c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7914:	f000 fd1c 	bl	d8350 <__aeabi_dmul>
   d7918:	a32b      	add	r3, pc, #172	; (adr r3, d79c8 <__ieee754_pow+0x920>)
   d791a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d791e:	f000 fd17 	bl	d8350 <__aeabi_dmul>
   d7922:	ec41 0b10 	vmov	d0, r0, r1
   d7926:	e408      	b.n	d713a <__ieee754_pow+0x92>
   d7928:	ed9f 7b29 	vldr	d7, [pc, #164]	; d79d0 <__ieee754_pow+0x928>
   d792c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7930:	e676      	b.n	d7620 <__ieee754_pow+0x578>
   d7932:	f1b9 0f00 	cmp.w	r9, #0
   d7936:	f6bf ac8e 	bge.w	d7256 <__ieee754_pow+0x1ae>
   d793a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d793e:	ee00 3a10 	vmov	s0, r3
   d7942:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d7946:	ee00 3a90 	vmov	s1, r3
   d794a:	f7ff bbf6 	b.w	d713a <__ieee754_pow+0x92>
   d794e:	4602      	mov	r2, r0
   d7950:	460b      	mov	r3, r1
   d7952:	2000      	movs	r0, #0
   d7954:	4924      	ldr	r1, [pc, #144]	; (d79e8 <__ieee754_pow+0x940>)
   d7956:	f000 fe25 	bl	d85a4 <__aeabi_ddiv>
   d795a:	e42d      	b.n	d71b8 <__ieee754_pow+0x110>
   d795c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d79d8 <__ieee754_pow+0x930>
   d7960:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7964:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7968:	ed9f 7b03 	vldr	d7, [pc, #12]	; d7978 <__ieee754_pow+0x8d0>
   d796c:	f04f 0800 	mov.w	r8, #0
   d7970:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7974:	e4be      	b.n	d72f4 <__ieee754_pow+0x24c>
   d7976:	bf00      	nop
   d7978:	00000000 	.word	0x00000000
   d797c:	3ff00000 	.word	0x3ff00000
   d7980:	652b82fe 	.word	0x652b82fe
   d7984:	3c971547 	.word	0x3c971547
   d7988:	00000000 	.word	0x00000000
   d798c:	3fe62e43 	.word	0x3fe62e43
   d7990:	fefa39ef 	.word	0xfefa39ef
   d7994:	3fe62e42 	.word	0x3fe62e42
   d7998:	0ca86c39 	.word	0x0ca86c39
   d799c:	be205c61 	.word	0xbe205c61
   d79a0:	72bea4d0 	.word	0x72bea4d0
   d79a4:	3e663769 	.word	0x3e663769
   d79a8:	c5d26bf1 	.word	0xc5d26bf1
   d79ac:	3ebbbd41 	.word	0x3ebbbd41
   d79b0:	af25de2c 	.word	0xaf25de2c
   d79b4:	3f11566a 	.word	0x3f11566a
   d79b8:	16bebd93 	.word	0x16bebd93
   d79bc:	3f66c16c 	.word	0x3f66c16c
   d79c0:	5555553e 	.word	0x5555553e
   d79c4:	3fc55555 	.word	0x3fc55555
   d79c8:	c2f8f359 	.word	0xc2f8f359
   d79cc:	01a56e1f 	.word	0x01a56e1f
   d79d0:	00000000 	.word	0x00000000
   d79d4:	bff00000 	.word	0xbff00000
	...
   d79e0:	408fffff 	.word	0x408fffff
   d79e4:	000fffff 	.word	0x000fffff
   d79e8:	3ff00000 	.word	0x3ff00000
   d79ec:	4090cbff 	.word	0x4090cbff
   d79f0:	3f6f3400 	.word	0x3f6f3400
   d79f4:	4b6c      	ldr	r3, [pc, #432]	; (d7ba8 <__ieee754_pow+0xb00>)
   d79f6:	429c      	cmp	r4, r3
   d79f8:	f77f ac2a 	ble.w	d7250 <__ieee754_pow+0x1a8>
   d79fc:	4b6b      	ldr	r3, [pc, #428]	; (d7bac <__ieee754_pow+0xb04>)
   d79fe:	429c      	cmp	r4, r3
   d7a00:	f73f abc3 	bgt.w	d718a <__ieee754_pow+0xe2>
   d7a04:	2200      	movs	r2, #0
   d7a06:	4b69      	ldr	r3, [pc, #420]	; (d7bac <__ieee754_pow+0xb04>)
   d7a08:	f000 faee 	bl	d7fe8 <__aeabi_dsub>
   d7a0c:	a356      	add	r3, pc, #344	; (adr r3, d7b68 <__ieee754_pow+0xac0>)
   d7a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a12:	4604      	mov	r4, r0
   d7a14:	460d      	mov	r5, r1
   d7a16:	f000 fc9b 	bl	d8350 <__aeabi_dmul>
   d7a1a:	a355      	add	r3, pc, #340	; (adr r3, d7b70 <__ieee754_pow+0xac8>)
   d7a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a20:	4680      	mov	r8, r0
   d7a22:	4689      	mov	r9, r1
   d7a24:	4620      	mov	r0, r4
   d7a26:	4629      	mov	r1, r5
   d7a28:	f000 fc92 	bl	d8350 <__aeabi_dmul>
   d7a2c:	2200      	movs	r2, #0
   d7a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7a32:	4b5f      	ldr	r3, [pc, #380]	; (d7bb0 <__ieee754_pow+0xb08>)
   d7a34:	4620      	mov	r0, r4
   d7a36:	4629      	mov	r1, r5
   d7a38:	f000 fc8a 	bl	d8350 <__aeabi_dmul>
   d7a3c:	4602      	mov	r2, r0
   d7a3e:	460b      	mov	r3, r1
   d7a40:	a14d      	add	r1, pc, #308	; (adr r1, d7b78 <__ieee754_pow+0xad0>)
   d7a42:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7a46:	f000 facf 	bl	d7fe8 <__aeabi_dsub>
   d7a4a:	4622      	mov	r2, r4
   d7a4c:	462b      	mov	r3, r5
   d7a4e:	f000 fc7f 	bl	d8350 <__aeabi_dmul>
   d7a52:	4602      	mov	r2, r0
   d7a54:	460b      	mov	r3, r1
   d7a56:	2000      	movs	r0, #0
   d7a58:	4956      	ldr	r1, [pc, #344]	; (d7bb4 <__ieee754_pow+0xb0c>)
   d7a5a:	f000 fac5 	bl	d7fe8 <__aeabi_dsub>
   d7a5e:	4622      	mov	r2, r4
   d7a60:	462b      	mov	r3, r5
   d7a62:	4606      	mov	r6, r0
   d7a64:	460f      	mov	r7, r1
   d7a66:	4620      	mov	r0, r4
   d7a68:	4629      	mov	r1, r5
   d7a6a:	f000 fc71 	bl	d8350 <__aeabi_dmul>
   d7a6e:	4602      	mov	r2, r0
   d7a70:	460b      	mov	r3, r1
   d7a72:	4630      	mov	r0, r6
   d7a74:	4639      	mov	r1, r7
   d7a76:	f000 fc6b 	bl	d8350 <__aeabi_dmul>
   d7a7a:	a341      	add	r3, pc, #260	; (adr r3, d7b80 <__ieee754_pow+0xad8>)
   d7a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a80:	f000 fc66 	bl	d8350 <__aeabi_dmul>
   d7a84:	4602      	mov	r2, r0
   d7a86:	460b      	mov	r3, r1
   d7a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7a8c:	f000 faac 	bl	d7fe8 <__aeabi_dsub>
   d7a90:	4602      	mov	r2, r0
   d7a92:	460b      	mov	r3, r1
   d7a94:	4604      	mov	r4, r0
   d7a96:	460d      	mov	r5, r1
   d7a98:	4640      	mov	r0, r8
   d7a9a:	4649      	mov	r1, r9
   d7a9c:	f000 faa6 	bl	d7fec <__adddf3>
   d7aa0:	4642      	mov	r2, r8
   d7aa2:	464b      	mov	r3, r9
   d7aa4:	2000      	movs	r0, #0
   d7aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7aaa:	f000 fa9d 	bl	d7fe8 <__aeabi_dsub>
   d7aae:	4602      	mov	r2, r0
   d7ab0:	460b      	mov	r3, r1
   d7ab2:	4620      	mov	r0, r4
   d7ab4:	4629      	mov	r1, r5
   d7ab6:	f000 fa97 	bl	d7fe8 <__aeabi_dsub>
   d7aba:	4680      	mov	r8, r0
   d7abc:	4689      	mov	r9, r1
   d7abe:	e5a5      	b.n	d760c <__ieee754_pow+0x564>
   d7ac0:	4632      	mov	r2, r6
   d7ac2:	463b      	mov	r3, r7
   d7ac4:	2000      	movs	r0, #0
   d7ac6:	4939      	ldr	r1, [pc, #228]	; (d7bac <__ieee754_pow+0xb04>)
   d7ac8:	f000 fd6c 	bl	d85a4 <__aeabi_ddiv>
   d7acc:	ec41 0b10 	vmov	d0, r0, r1
   d7ad0:	f7ff bb33 	b.w	d713a <__ieee754_pow+0x92>
   d7ad4:	a32c      	add	r3, pc, #176	; (adr r3, d7b88 <__ieee754_pow+0xae0>)
   d7ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7ade:	f000 fc37 	bl	d8350 <__aeabi_dmul>
   d7ae2:	a329      	add	r3, pc, #164	; (adr r3, d7b88 <__ieee754_pow+0xae0>)
   d7ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ae8:	f000 fc32 	bl	d8350 <__aeabi_dmul>
   d7aec:	ec41 0b10 	vmov	d0, r0, r1
   d7af0:	f7ff bb23 	b.w	d713a <__ieee754_pow+0x92>
   d7af4:	f1be 0f00 	cmp.w	lr, #0
   d7af8:	f47f ab2a 	bne.w	d7150 <__ieee754_pow+0xa8>
   d7afc:	f1c3 0314 	rsb	r3, r3, #20
   d7b00:	fa48 f203 	asr.w	r2, r8, r3
   d7b04:	fa02 f303 	lsl.w	r3, r2, r3
   d7b08:	4598      	cmp	r8, r3
   d7b0a:	d027      	beq.n	d7b5c <__ieee754_pow+0xab4>
   d7b0c:	46f3      	mov	fp, lr
   d7b0e:	f7ff baf7 	b.w	d7100 <__ieee754_pow+0x58>
   d7b12:	4b28      	ldr	r3, [pc, #160]	; (d7bb4 <__ieee754_pow+0xb0c>)
   d7b14:	4598      	cmp	r8, r3
   d7b16:	f73f adde 	bgt.w	d76d6 <__ieee754_pow+0x62e>
   d7b1a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7b1e:	469a      	mov	sl, r3
   d7b20:	469b      	mov	fp, r3
   d7b22:	e607      	b.n	d7734 <__ieee754_pow+0x68c>
   d7b24:	4602      	mov	r2, r0
   d7b26:	460b      	mov	r3, r1
   d7b28:	f7ff bb89 	b.w	d723e <__ieee754_pow+0x196>
   d7b2c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d7b90 <__ieee754_pow+0xae8>
   d7b30:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7b34:	ed9f 7b18 	vldr	d7, [pc, #96]	; d7b98 <__ieee754_pow+0xaf0>
   d7b38:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7b3c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d7ba0 <__ieee754_pow+0xaf8>
   d7b40:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d7b44:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7b48:	f7ff bbd4 	b.w	d72f4 <__ieee754_pow+0x24c>
   d7b4c:	4658      	mov	r0, fp
   d7b4e:	ec43 2b10 	vmov	d0, r2, r3
   d7b52:	f000 f9b1 	bl	d7eb8 <scalbn>
   d7b56:	ec51 0b10 	vmov	r0, r1, d0
   d7b5a:	e69d      	b.n	d7898 <__ieee754_pow+0x7f0>
   d7b5c:	f002 0201 	and.w	r2, r2, #1
   d7b60:	f1c2 0b02 	rsb	fp, r2, #2
   d7b64:	f7ff bacc 	b.w	d7100 <__ieee754_pow+0x58>
   d7b68:	60000000 	.word	0x60000000
   d7b6c:	3ff71547 	.word	0x3ff71547
   d7b70:	f85ddf44 	.word	0xf85ddf44
   d7b74:	3e54ae0b 	.word	0x3e54ae0b
   d7b78:	55555555 	.word	0x55555555
   d7b7c:	3fd55555 	.word	0x3fd55555
   d7b80:	652b82fe 	.word	0x652b82fe
   d7b84:	3ff71547 	.word	0x3ff71547
   d7b88:	8800759c 	.word	0x8800759c
   d7b8c:	7e37e43c 	.word	0x7e37e43c
   d7b90:	40000000 	.word	0x40000000
   d7b94:	3fe2b803 	.word	0x3fe2b803
   d7b98:	43cfd006 	.word	0x43cfd006
   d7b9c:	3e4cfdeb 	.word	0x3e4cfdeb
   d7ba0:	00000000 	.word	0x00000000
   d7ba4:	3ff80000 	.word	0x3ff80000
   d7ba8:	3feffffe 	.word	0x3feffffe
   d7bac:	3ff00000 	.word	0x3ff00000
   d7bb0:	3fd00000 	.word	0x3fd00000
   d7bb4:	3fe00000 	.word	0x3fe00000

000d7bb8 <__ieee754_sqrt>:
   d7bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bbc:	4965      	ldr	r1, [pc, #404]	; (d7d54 <__ieee754_sqrt+0x19c>)
   d7bbe:	ec55 4b10 	vmov	r4, r5, d0
   d7bc2:	460e      	mov	r6, r1
   d7bc4:	4029      	ands	r1, r5
   d7bc6:	42b1      	cmp	r1, r6
   d7bc8:	f000 8097 	beq.w	d7cfa <__ieee754_sqrt+0x142>
   d7bcc:	2d00      	cmp	r5, #0
   d7bce:	462b      	mov	r3, r5
   d7bd0:	ee10 2a10 	vmov	r2, s0
   d7bd4:	dd74      	ble.n	d7cc0 <__ieee754_sqrt+0x108>
   d7bd6:	152f      	asrs	r7, r5, #20
   d7bd8:	d07f      	beq.n	d7cda <__ieee754_sqrt+0x122>
   d7bda:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d7bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7be2:	07f9      	lsls	r1, r7, #31
   d7be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7be8:	d465      	bmi.n	d7cb6 <__ieee754_sqrt+0xfe>
   d7bea:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d7bee:	2600      	movs	r6, #0
   d7bf0:	440b      	add	r3, r1
   d7bf2:	107f      	asrs	r7, r7, #1
   d7bf4:	0052      	lsls	r2, r2, #1
   d7bf6:	46b6      	mov	lr, r6
   d7bf8:	2016      	movs	r0, #22
   d7bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d7bfe:	eb0e 0401 	add.w	r4, lr, r1
   d7c02:	429c      	cmp	r4, r3
   d7c04:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d7c08:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d7c0c:	dc03      	bgt.n	d7c16 <__ieee754_sqrt+0x5e>
   d7c0e:	1b1b      	subs	r3, r3, r4
   d7c10:	eb04 0e01 	add.w	lr, r4, r1
   d7c14:	440e      	add	r6, r1
   d7c16:	3801      	subs	r0, #1
   d7c18:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d7c1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d7c20:	d1ed      	bne.n	d7bfe <__ieee754_sqrt+0x46>
   d7c22:	4684      	mov	ip, r0
   d7c24:	2420      	movs	r4, #32
   d7c26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d7c2a:	e009      	b.n	d7c40 <__ieee754_sqrt+0x88>
   d7c2c:	d020      	beq.n	d7c70 <__ieee754_sqrt+0xb8>
   d7c2e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d7c32:	3c01      	subs	r4, #1
   d7c34:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d7c38:	442b      	add	r3, r5
   d7c3a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d7c3e:	d020      	beq.n	d7c82 <__ieee754_sqrt+0xca>
   d7c40:	459e      	cmp	lr, r3
   d7c42:	eb01 050c 	add.w	r5, r1, ip
   d7c46:	daf1      	bge.n	d7c2c <__ieee754_sqrt+0x74>
   d7c48:	2d00      	cmp	r5, #0
   d7c4a:	eb05 0c01 	add.w	ip, r5, r1
   d7c4e:	db09      	blt.n	d7c64 <__ieee754_sqrt+0xac>
   d7c50:	46f0      	mov	r8, lr
   d7c52:	4295      	cmp	r5, r2
   d7c54:	ebce 0303 	rsb	r3, lr, r3
   d7c58:	d900      	bls.n	d7c5c <__ieee754_sqrt+0xa4>
   d7c5a:	3b01      	subs	r3, #1
   d7c5c:	1b52      	subs	r2, r2, r5
   d7c5e:	4408      	add	r0, r1
   d7c60:	46c6      	mov	lr, r8
   d7c62:	e7e4      	b.n	d7c2e <__ieee754_sqrt+0x76>
   d7c64:	f1bc 0f00 	cmp.w	ip, #0
   d7c68:	dbf2      	blt.n	d7c50 <__ieee754_sqrt+0x98>
   d7c6a:	f10e 0801 	add.w	r8, lr, #1
   d7c6e:	e7f0      	b.n	d7c52 <__ieee754_sqrt+0x9a>
   d7c70:	4295      	cmp	r5, r2
   d7c72:	d81e      	bhi.n	d7cb2 <__ieee754_sqrt+0xfa>
   d7c74:	2d00      	cmp	r5, #0
   d7c76:	eb05 0c01 	add.w	ip, r5, r1
   d7c7a:	db50      	blt.n	d7d1e <__ieee754_sqrt+0x166>
   d7c7c:	4698      	mov	r8, r3
   d7c7e:	2300      	movs	r3, #0
   d7c80:	e7ec      	b.n	d7c5c <__ieee754_sqrt+0xa4>
   d7c82:	4313      	orrs	r3, r2
   d7c84:	d004      	beq.n	d7c90 <__ieee754_sqrt+0xd8>
   d7c86:	1c42      	adds	r2, r0, #1
   d7c88:	d04d      	beq.n	d7d26 <__ieee754_sqrt+0x16e>
   d7c8a:	f000 0301 	and.w	r3, r0, #1
   d7c8e:	4418      	add	r0, r3
   d7c90:	0840      	lsrs	r0, r0, #1
   d7c92:	1071      	asrs	r1, r6, #1
   d7c94:	07f3      	lsls	r3, r6, #31
   d7c96:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7c9a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d7c9e:	bf48      	it	mi
   d7ca0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d7ca4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d7ca8:	4602      	mov	r2, r0
   d7caa:	ec43 2b10 	vmov	d0, r2, r3
   d7cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7cb2:	4673      	mov	r3, lr
   d7cb4:	e7bb      	b.n	d7c2e <__ieee754_sqrt+0x76>
   d7cb6:	005b      	lsls	r3, r3, #1
   d7cb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d7cbc:	0052      	lsls	r2, r2, #1
   d7cbe:	e794      	b.n	d7bea <__ieee754_sqrt+0x32>
   d7cc0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d7cc4:	4321      	orrs	r1, r4
   d7cc6:	d028      	beq.n	d7d1a <__ieee754_sqrt+0x162>
   d7cc8:	bbad      	cbnz	r5, d7d36 <__ieee754_sqrt+0x17e>
   d7cca:	462f      	mov	r7, r5
   d7ccc:	0ad3      	lsrs	r3, r2, #11
   d7cce:	3f15      	subs	r7, #21
   d7cd0:	0552      	lsls	r2, r2, #21
   d7cd2:	2b00      	cmp	r3, #0
   d7cd4:	d0fa      	beq.n	d7ccc <__ieee754_sqrt+0x114>
   d7cd6:	02dd      	lsls	r5, r3, #11
   d7cd8:	d428      	bmi.n	d7d2c <__ieee754_sqrt+0x174>
   d7cda:	2100      	movs	r1, #0
   d7cdc:	e000      	b.n	d7ce0 <__ieee754_sqrt+0x128>
   d7cde:	4601      	mov	r1, r0
   d7ce0:	005b      	lsls	r3, r3, #1
   d7ce2:	02dc      	lsls	r4, r3, #11
   d7ce4:	f101 0001 	add.w	r0, r1, #1
   d7ce8:	d5f9      	bpl.n	d7cde <__ieee754_sqrt+0x126>
   d7cea:	f1c0 0420 	rsb	r4, r0, #32
   d7cee:	fa22 f404 	lsr.w	r4, r2, r4
   d7cf2:	4323      	orrs	r3, r4
   d7cf4:	1a7f      	subs	r7, r7, r1
   d7cf6:	4082      	lsls	r2, r0
   d7cf8:	e76f      	b.n	d7bda <__ieee754_sqrt+0x22>
   d7cfa:	ee10 2a10 	vmov	r2, s0
   d7cfe:	462b      	mov	r3, r5
   d7d00:	ee10 0a10 	vmov	r0, s0
   d7d04:	4629      	mov	r1, r5
   d7d06:	f000 fb23 	bl	d8350 <__aeabi_dmul>
   d7d0a:	4622      	mov	r2, r4
   d7d0c:	462b      	mov	r3, r5
   d7d0e:	f000 f96d 	bl	d7fec <__adddf3>
   d7d12:	ec41 0b10 	vmov	d0, r0, r1
   d7d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7d1e:	f1bc 0f00 	cmp.w	ip, #0
   d7d22:	daa2      	bge.n	d7c6a <__ieee754_sqrt+0xb2>
   d7d24:	e7aa      	b.n	d7c7c <__ieee754_sqrt+0xc4>
   d7d26:	3601      	adds	r6, #1
   d7d28:	4620      	mov	r0, r4
   d7d2a:	e7b2      	b.n	d7c92 <__ieee754_sqrt+0xda>
   d7d2c:	2420      	movs	r4, #32
   d7d2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d7d32:	2000      	movs	r0, #0
   d7d34:	e7db      	b.n	d7cee <__ieee754_sqrt+0x136>
   d7d36:	ee10 2a10 	vmov	r2, s0
   d7d3a:	462b      	mov	r3, r5
   d7d3c:	4620      	mov	r0, r4
   d7d3e:	4629      	mov	r1, r5
   d7d40:	f000 f952 	bl	d7fe8 <__aeabi_dsub>
   d7d44:	4602      	mov	r2, r0
   d7d46:	460b      	mov	r3, r1
   d7d48:	f000 fc2c 	bl	d85a4 <__aeabi_ddiv>
   d7d4c:	ec41 0b10 	vmov	d0, r0, r1
   d7d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7d54:	7ff00000 	.word	0x7ff00000

000d7d58 <fabs>:
   d7d58:	ec53 2b10 	vmov	r2, r3, d0
   d7d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d7d60:	ec43 2b10 	vmov	d0, r2, r3
   d7d64:	4770      	bx	lr
   d7d66:	bf00      	nop

000d7d68 <finite>:
   d7d68:	ee10 3a90 	vmov	r3, s1
   d7d6c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d7d70:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d7d74:	0fc0      	lsrs	r0, r0, #31
   d7d76:	4770      	bx	lr

000d7d78 <matherr>:
   d7d78:	2000      	movs	r0, #0
   d7d7a:	4770      	bx	lr
   d7d7c:	0000      	movs	r0, r0
	...

000d7d80 <nan>:
   d7d80:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7d88 <nan+0x8>
   d7d84:	4770      	bx	lr
   d7d86:	bf00      	nop
   d7d88:	00000000 	.word	0x00000000
   d7d8c:	7ff80000 	.word	0x7ff80000

000d7d90 <rint>:
   d7d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d92:	ec53 2b10 	vmov	r2, r3, d0
   d7d96:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d7d9a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d7d9e:	2813      	cmp	r0, #19
   d7da0:	b083      	sub	sp, #12
   d7da2:	4619      	mov	r1, r3
   d7da4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d7da8:	ee10 5a10 	vmov	r5, s0
   d7dac:	dc2f      	bgt.n	d7e0e <rint+0x7e>
   d7dae:	2800      	cmp	r0, #0
   d7db0:	db49      	blt.n	d7e46 <rint+0xb6>
   d7db2:	4e3f      	ldr	r6, [pc, #252]	; (d7eb0 <rint+0x120>)
   d7db4:	4106      	asrs	r6, r0
   d7db6:	ea03 0706 	and.w	r7, r3, r6
   d7dba:	4317      	orrs	r7, r2
   d7dbc:	d02c      	beq.n	d7e18 <rint+0x88>
   d7dbe:	0876      	lsrs	r6, r6, #1
   d7dc0:	4033      	ands	r3, r6
   d7dc2:	431d      	orrs	r5, r3
   d7dc4:	d00c      	beq.n	d7de0 <rint+0x50>
   d7dc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d7dca:	2813      	cmp	r0, #19
   d7dcc:	ea21 0606 	bic.w	r6, r1, r6
   d7dd0:	fa43 f100 	asr.w	r1, r3, r0
   d7dd4:	ea41 0106 	orr.w	r1, r1, r6
   d7dd8:	bf0c      	ite	eq
   d7dda:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d7dde:	2500      	movne	r5, #0
   d7de0:	4834      	ldr	r0, [pc, #208]	; (d7eb4 <rint+0x124>)
   d7de2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d7de6:	462a      	mov	r2, r5
   d7de8:	e9d4 4500 	ldrd	r4, r5, [r4]
   d7dec:	4610      	mov	r0, r2
   d7dee:	462b      	mov	r3, r5
   d7df0:	4622      	mov	r2, r4
   d7df2:	f000 f8fb 	bl	d7fec <__adddf3>
   d7df6:	e9cd 0100 	strd	r0, r1, [sp]
   d7dfa:	4622      	mov	r2, r4
   d7dfc:	462b      	mov	r3, r5
   d7dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7e02:	f000 f8f1 	bl	d7fe8 <__aeabi_dsub>
   d7e06:	ec41 0b10 	vmov	d0, r0, r1
   d7e0a:	b003      	add	sp, #12
   d7e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e0e:	2833      	cmp	r0, #51	; 0x33
   d7e10:	dd06      	ble.n	d7e20 <rint+0x90>
   d7e12:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7e16:	d042      	beq.n	d7e9e <rint+0x10e>
   d7e18:	ec43 2b10 	vmov	d0, r2, r3
   d7e1c:	b003      	add	sp, #12
   d7e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e20:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7e28:	40f0      	lsrs	r0, r6
   d7e2a:	4202      	tst	r2, r0
   d7e2c:	d0f4      	beq.n	d7e18 <rint+0x88>
   d7e2e:	0840      	lsrs	r0, r0, #1
   d7e30:	4202      	tst	r2, r0
   d7e32:	d0d5      	beq.n	d7de0 <rint+0x50>
   d7e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7e38:	ea25 0000 	bic.w	r0, r5, r0
   d7e3c:	fa43 f606 	asr.w	r6, r3, r6
   d7e40:	ea46 0500 	orr.w	r5, r6, r0
   d7e44:	e7cc      	b.n	d7de0 <rint+0x50>
   d7e46:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7e4a:	4310      	orrs	r0, r2
   d7e4c:	ee10 7a10 	vmov	r7, s0
   d7e50:	d0e2      	beq.n	d7e18 <rint+0x88>
   d7e52:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d7e56:	4307      	orrs	r7, r0
   d7e58:	4278      	negs	r0, r7
   d7e5a:	4307      	orrs	r7, r0
   d7e5c:	4815      	ldr	r0, [pc, #84]	; (d7eb4 <rint+0x124>)
   d7e5e:	0c59      	lsrs	r1, r3, #17
   d7e60:	0b3f      	lsrs	r7, r7, #12
   d7e62:	0449      	lsls	r1, r1, #17
   d7e64:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d7e68:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d7e6c:	ea47 0301 	orr.w	r3, r7, r1
   d7e70:	e9d0 6700 	ldrd	r6, r7, [r0]
   d7e74:	4619      	mov	r1, r3
   d7e76:	4610      	mov	r0, r2
   d7e78:	463b      	mov	r3, r7
   d7e7a:	4632      	mov	r2, r6
   d7e7c:	f000 f8b6 	bl	d7fec <__adddf3>
   d7e80:	e9cd 0100 	strd	r0, r1, [sp]
   d7e84:	463b      	mov	r3, r7
   d7e86:	4632      	mov	r2, r6
   d7e88:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7e8c:	f000 f8ac 	bl	d7fe8 <__aeabi_dsub>
   d7e90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7e94:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d7e98:	ec41 0b10 	vmov	d0, r0, r1
   d7e9c:	e7be      	b.n	d7e1c <rint+0x8c>
   d7e9e:	ee10 0a10 	vmov	r0, s0
   d7ea2:	4619      	mov	r1, r3
   d7ea4:	f000 f8a2 	bl	d7fec <__adddf3>
   d7ea8:	ec41 0b10 	vmov	d0, r0, r1
   d7eac:	e7b6      	b.n	d7e1c <rint+0x8c>
   d7eae:	bf00      	nop
   d7eb0:	000fffff 	.word	0x000fffff
   d7eb4:	000da9d8 	.word	0x000da9d8

000d7eb8 <scalbn>:
   d7eb8:	ec53 2b10 	vmov	r2, r3, d0
   d7ebc:	b570      	push	{r4, r5, r6, lr}
   d7ebe:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d7ec2:	4619      	mov	r1, r3
   d7ec4:	4605      	mov	r5, r0
   d7ec6:	bb14      	cbnz	r4, d7f0e <scalbn+0x56>
   d7ec8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d7ecc:	4311      	orrs	r1, r2
   d7ece:	d02a      	beq.n	d7f26 <scalbn+0x6e>
   d7ed0:	4619      	mov	r1, r3
   d7ed2:	2200      	movs	r2, #0
   d7ed4:	4b38      	ldr	r3, [pc, #224]	; (d7fb8 <scalbn+0x100>)
   d7ed6:	4e39      	ldr	r6, [pc, #228]	; (d7fbc <scalbn+0x104>)
   d7ed8:	ee10 0a10 	vmov	r0, s0
   d7edc:	f000 fa38 	bl	d8350 <__aeabi_dmul>
   d7ee0:	42b5      	cmp	r5, r6
   d7ee2:	4602      	mov	r2, r0
   d7ee4:	460b      	mov	r3, r1
   d7ee6:	db1f      	blt.n	d7f28 <scalbn+0x70>
   d7ee8:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d7eec:	3c36      	subs	r4, #54	; 0x36
   d7eee:	442c      	add	r4, r5
   d7ef0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7ef4:	4284      	cmp	r4, r0
   d7ef6:	dc1f      	bgt.n	d7f38 <scalbn+0x80>
   d7ef8:	2c00      	cmp	r4, #0
   d7efa:	dd2d      	ble.n	d7f58 <scalbn+0xa0>
   d7efc:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d7f00:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d7f04:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7f08:	ec43 2b10 	vmov	d0, r2, r3
   d7f0c:	bd70      	pop	{r4, r5, r6, pc}
   d7f0e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7f12:	4284      	cmp	r4, r0
   d7f14:	d1eb      	bne.n	d7eee <scalbn+0x36>
   d7f16:	ee10 0a10 	vmov	r0, s0
   d7f1a:	4619      	mov	r1, r3
   d7f1c:	f000 f866 	bl	d7fec <__adddf3>
   d7f20:	ec41 0b10 	vmov	d0, r0, r1
   d7f24:	bd70      	pop	{r4, r5, r6, pc}
   d7f26:	bd70      	pop	{r4, r5, r6, pc}
   d7f28:	a31f      	add	r3, pc, #124	; (adr r3, d7fa8 <scalbn+0xf0>)
   d7f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f2e:	f000 fa0f 	bl	d8350 <__aeabi_dmul>
   d7f32:	ec41 0b10 	vmov	d0, r0, r1
   d7f36:	bd70      	pop	{r4, r5, r6, pc}
   d7f38:	ec43 2b11 	vmov	d1, r2, r3
   d7f3c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d7fb0 <scalbn+0xf8>
   d7f40:	f000 f840 	bl	d7fc4 <copysign>
   d7f44:	a31a      	add	r3, pc, #104	; (adr r3, d7fb0 <scalbn+0xf8>)
   d7f46:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f4a:	ec51 0b10 	vmov	r0, r1, d0
   d7f4e:	f000 f9ff 	bl	d8350 <__aeabi_dmul>
   d7f52:	ec41 0b10 	vmov	d0, r0, r1
   d7f56:	bd70      	pop	{r4, r5, r6, pc}
   d7f58:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d7f5c:	da13      	bge.n	d7f86 <scalbn+0xce>
   d7f5e:	f24c 3150 	movw	r1, #50000	; 0xc350
   d7f62:	428d      	cmp	r5, r1
   d7f64:	ec43 2b11 	vmov	d1, r2, r3
   d7f68:	dce8      	bgt.n	d7f3c <scalbn+0x84>
   d7f6a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d7fa8 <scalbn+0xf0>
   d7f6e:	f000 f829 	bl	d7fc4 <copysign>
   d7f72:	a30d      	add	r3, pc, #52	; (adr r3, d7fa8 <scalbn+0xf0>)
   d7f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f78:	ec51 0b10 	vmov	r0, r1, d0
   d7f7c:	f000 f9e8 	bl	d8350 <__aeabi_dmul>
   d7f80:	ec41 0b10 	vmov	d0, r0, r1
   d7f84:	bd70      	pop	{r4, r5, r6, pc}
   d7f86:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d7f8a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d7f8e:	3436      	adds	r4, #54	; 0x36
   d7f90:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7f94:	4610      	mov	r0, r2
   d7f96:	4619      	mov	r1, r3
   d7f98:	2200      	movs	r2, #0
   d7f9a:	4b09      	ldr	r3, [pc, #36]	; (d7fc0 <scalbn+0x108>)
   d7f9c:	f000 f9d8 	bl	d8350 <__aeabi_dmul>
   d7fa0:	ec41 0b10 	vmov	d0, r0, r1
   d7fa4:	bd70      	pop	{r4, r5, r6, pc}
   d7fa6:	bf00      	nop
   d7fa8:	c2f8f359 	.word	0xc2f8f359
   d7fac:	01a56e1f 	.word	0x01a56e1f
   d7fb0:	8800759c 	.word	0x8800759c
   d7fb4:	7e37e43c 	.word	0x7e37e43c
   d7fb8:	43500000 	.word	0x43500000
   d7fbc:	ffff3cb0 	.word	0xffff3cb0
   d7fc0:	3c900000 	.word	0x3c900000

000d7fc4 <copysign>:
   d7fc4:	ec53 2b10 	vmov	r2, r3, d0
   d7fc8:	ee11 0a90 	vmov	r0, s3
   d7fcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d7fd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d7fd4:	ea41 0300 	orr.w	r3, r1, r0
   d7fd8:	ec43 2b10 	vmov	d0, r2, r3
   d7fdc:	4770      	bx	lr
   d7fde:	bf00      	nop

000d7fe0 <__aeabi_drsub>:
   d7fe0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7fe4:	e002      	b.n	d7fec <__adddf3>
   d7fe6:	bf00      	nop

000d7fe8 <__aeabi_dsub>:
   d7fe8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7fec <__adddf3>:
   d7fec:	b530      	push	{r4, r5, lr}
   d7fee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7ff2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7ff6:	ea94 0f05 	teq	r4, r5
   d7ffa:	bf08      	it	eq
   d7ffc:	ea90 0f02 	teqeq	r0, r2
   d8000:	bf1f      	itttt	ne
   d8002:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8006:	ea55 0c02 	orrsne.w	ip, r5, r2
   d800a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d800e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8012:	f000 80e2 	beq.w	d81da <__adddf3+0x1ee>
   d8016:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d801a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d801e:	bfb8      	it	lt
   d8020:	426d      	neglt	r5, r5
   d8022:	dd0c      	ble.n	d803e <__adddf3+0x52>
   d8024:	442c      	add	r4, r5
   d8026:	ea80 0202 	eor.w	r2, r0, r2
   d802a:	ea81 0303 	eor.w	r3, r1, r3
   d802e:	ea82 0000 	eor.w	r0, r2, r0
   d8032:	ea83 0101 	eor.w	r1, r3, r1
   d8036:	ea80 0202 	eor.w	r2, r0, r2
   d803a:	ea81 0303 	eor.w	r3, r1, r3
   d803e:	2d36      	cmp	r5, #54	; 0x36
   d8040:	bf88      	it	hi
   d8042:	bd30      	pophi	{r4, r5, pc}
   d8044:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8048:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d804c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8050:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8054:	d002      	beq.n	d805c <__adddf3+0x70>
   d8056:	4240      	negs	r0, r0
   d8058:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d805c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8060:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8064:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8068:	d002      	beq.n	d8070 <__adddf3+0x84>
   d806a:	4252      	negs	r2, r2
   d806c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8070:	ea94 0f05 	teq	r4, r5
   d8074:	f000 80a7 	beq.w	d81c6 <__adddf3+0x1da>
   d8078:	f1a4 0401 	sub.w	r4, r4, #1
   d807c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8080:	db0d      	blt.n	d809e <__adddf3+0xb2>
   d8082:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8086:	fa22 f205 	lsr.w	r2, r2, r5
   d808a:	1880      	adds	r0, r0, r2
   d808c:	f141 0100 	adc.w	r1, r1, #0
   d8090:	fa03 f20e 	lsl.w	r2, r3, lr
   d8094:	1880      	adds	r0, r0, r2
   d8096:	fa43 f305 	asr.w	r3, r3, r5
   d809a:	4159      	adcs	r1, r3
   d809c:	e00e      	b.n	d80bc <__adddf3+0xd0>
   d809e:	f1a5 0520 	sub.w	r5, r5, #32
   d80a2:	f10e 0e20 	add.w	lr, lr, #32
   d80a6:	2a01      	cmp	r2, #1
   d80a8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d80ac:	bf28      	it	cs
   d80ae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d80b2:	fa43 f305 	asr.w	r3, r3, r5
   d80b6:	18c0      	adds	r0, r0, r3
   d80b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d80bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d80c0:	d507      	bpl.n	d80d2 <__adddf3+0xe6>
   d80c2:	f04f 0e00 	mov.w	lr, #0
   d80c6:	f1dc 0c00 	rsbs	ip, ip, #0
   d80ca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d80ce:	eb6e 0101 	sbc.w	r1, lr, r1
   d80d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d80d6:	d31b      	bcc.n	d8110 <__adddf3+0x124>
   d80d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d80dc:	d30c      	bcc.n	d80f8 <__adddf3+0x10c>
   d80de:	0849      	lsrs	r1, r1, #1
   d80e0:	ea5f 0030 	movs.w	r0, r0, rrx
   d80e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d80e8:	f104 0401 	add.w	r4, r4, #1
   d80ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d80f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d80f4:	f080 809a 	bcs.w	d822c <__adddf3+0x240>
   d80f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d80fc:	bf08      	it	eq
   d80fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8102:	f150 0000 	adcs.w	r0, r0, #0
   d8106:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d810a:	ea41 0105 	orr.w	r1, r1, r5
   d810e:	bd30      	pop	{r4, r5, pc}
   d8110:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8114:	4140      	adcs	r0, r0
   d8116:	eb41 0101 	adc.w	r1, r1, r1
   d811a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d811e:	f1a4 0401 	sub.w	r4, r4, #1
   d8122:	d1e9      	bne.n	d80f8 <__adddf3+0x10c>
   d8124:	f091 0f00 	teq	r1, #0
   d8128:	bf04      	itt	eq
   d812a:	4601      	moveq	r1, r0
   d812c:	2000      	moveq	r0, #0
   d812e:	fab1 f381 	clz	r3, r1
   d8132:	bf08      	it	eq
   d8134:	3320      	addeq	r3, #32
   d8136:	f1a3 030b 	sub.w	r3, r3, #11
   d813a:	f1b3 0220 	subs.w	r2, r3, #32
   d813e:	da0c      	bge.n	d815a <__adddf3+0x16e>
   d8140:	320c      	adds	r2, #12
   d8142:	dd08      	ble.n	d8156 <__adddf3+0x16a>
   d8144:	f102 0c14 	add.w	ip, r2, #20
   d8148:	f1c2 020c 	rsb	r2, r2, #12
   d814c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8150:	fa21 f102 	lsr.w	r1, r1, r2
   d8154:	e00c      	b.n	d8170 <__adddf3+0x184>
   d8156:	f102 0214 	add.w	r2, r2, #20
   d815a:	bfd8      	it	le
   d815c:	f1c2 0c20 	rsble	ip, r2, #32
   d8160:	fa01 f102 	lsl.w	r1, r1, r2
   d8164:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8168:	bfdc      	itt	le
   d816a:	ea41 010c 	orrle.w	r1, r1, ip
   d816e:	4090      	lslle	r0, r2
   d8170:	1ae4      	subs	r4, r4, r3
   d8172:	bfa2      	ittt	ge
   d8174:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8178:	4329      	orrge	r1, r5
   d817a:	bd30      	popge	{r4, r5, pc}
   d817c:	ea6f 0404 	mvn.w	r4, r4
   d8180:	3c1f      	subs	r4, #31
   d8182:	da1c      	bge.n	d81be <__adddf3+0x1d2>
   d8184:	340c      	adds	r4, #12
   d8186:	dc0e      	bgt.n	d81a6 <__adddf3+0x1ba>
   d8188:	f104 0414 	add.w	r4, r4, #20
   d818c:	f1c4 0220 	rsb	r2, r4, #32
   d8190:	fa20 f004 	lsr.w	r0, r0, r4
   d8194:	fa01 f302 	lsl.w	r3, r1, r2
   d8198:	ea40 0003 	orr.w	r0, r0, r3
   d819c:	fa21 f304 	lsr.w	r3, r1, r4
   d81a0:	ea45 0103 	orr.w	r1, r5, r3
   d81a4:	bd30      	pop	{r4, r5, pc}
   d81a6:	f1c4 040c 	rsb	r4, r4, #12
   d81aa:	f1c4 0220 	rsb	r2, r4, #32
   d81ae:	fa20 f002 	lsr.w	r0, r0, r2
   d81b2:	fa01 f304 	lsl.w	r3, r1, r4
   d81b6:	ea40 0003 	orr.w	r0, r0, r3
   d81ba:	4629      	mov	r1, r5
   d81bc:	bd30      	pop	{r4, r5, pc}
   d81be:	fa21 f004 	lsr.w	r0, r1, r4
   d81c2:	4629      	mov	r1, r5
   d81c4:	bd30      	pop	{r4, r5, pc}
   d81c6:	f094 0f00 	teq	r4, #0
   d81ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d81ce:	bf06      	itte	eq
   d81d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d81d4:	3401      	addeq	r4, #1
   d81d6:	3d01      	subne	r5, #1
   d81d8:	e74e      	b.n	d8078 <__adddf3+0x8c>
   d81da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d81de:	bf18      	it	ne
   d81e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d81e4:	d029      	beq.n	d823a <__adddf3+0x24e>
   d81e6:	ea94 0f05 	teq	r4, r5
   d81ea:	bf08      	it	eq
   d81ec:	ea90 0f02 	teqeq	r0, r2
   d81f0:	d005      	beq.n	d81fe <__adddf3+0x212>
   d81f2:	ea54 0c00 	orrs.w	ip, r4, r0
   d81f6:	bf04      	itt	eq
   d81f8:	4619      	moveq	r1, r3
   d81fa:	4610      	moveq	r0, r2
   d81fc:	bd30      	pop	{r4, r5, pc}
   d81fe:	ea91 0f03 	teq	r1, r3
   d8202:	bf1e      	ittt	ne
   d8204:	2100      	movne	r1, #0
   d8206:	2000      	movne	r0, #0
   d8208:	bd30      	popne	{r4, r5, pc}
   d820a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d820e:	d105      	bne.n	d821c <__adddf3+0x230>
   d8210:	0040      	lsls	r0, r0, #1
   d8212:	4149      	adcs	r1, r1
   d8214:	bf28      	it	cs
   d8216:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d821a:	bd30      	pop	{r4, r5, pc}
   d821c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8220:	bf3c      	itt	cc
   d8222:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8226:	bd30      	popcc	{r4, r5, pc}
   d8228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d822c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8230:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8234:	f04f 0000 	mov.w	r0, #0
   d8238:	bd30      	pop	{r4, r5, pc}
   d823a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d823e:	bf1a      	itte	ne
   d8240:	4619      	movne	r1, r3
   d8242:	4610      	movne	r0, r2
   d8244:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8248:	bf1c      	itt	ne
   d824a:	460b      	movne	r3, r1
   d824c:	4602      	movne	r2, r0
   d824e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8252:	bf06      	itte	eq
   d8254:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8258:	ea91 0f03 	teqeq	r1, r3
   d825c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8260:	bd30      	pop	{r4, r5, pc}
   d8262:	bf00      	nop

000d8264 <__aeabi_ui2d>:
   d8264:	f090 0f00 	teq	r0, #0
   d8268:	bf04      	itt	eq
   d826a:	2100      	moveq	r1, #0
   d826c:	4770      	bxeq	lr
   d826e:	b530      	push	{r4, r5, lr}
   d8270:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8274:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8278:	f04f 0500 	mov.w	r5, #0
   d827c:	f04f 0100 	mov.w	r1, #0
   d8280:	e750      	b.n	d8124 <__adddf3+0x138>
   d8282:	bf00      	nop

000d8284 <__aeabi_i2d>:
   d8284:	f090 0f00 	teq	r0, #0
   d8288:	bf04      	itt	eq
   d828a:	2100      	moveq	r1, #0
   d828c:	4770      	bxeq	lr
   d828e:	b530      	push	{r4, r5, lr}
   d8290:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8294:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8298:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d829c:	bf48      	it	mi
   d829e:	4240      	negmi	r0, r0
   d82a0:	f04f 0100 	mov.w	r1, #0
   d82a4:	e73e      	b.n	d8124 <__adddf3+0x138>
   d82a6:	bf00      	nop

000d82a8 <__aeabi_f2d>:
   d82a8:	0042      	lsls	r2, r0, #1
   d82aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d82ae:	ea4f 0131 	mov.w	r1, r1, rrx
   d82b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d82b6:	bf1f      	itttt	ne
   d82b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d82bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d82c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d82c4:	4770      	bxne	lr
   d82c6:	f092 0f00 	teq	r2, #0
   d82ca:	bf14      	ite	ne
   d82cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d82d0:	4770      	bxeq	lr
   d82d2:	b530      	push	{r4, r5, lr}
   d82d4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d82d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d82e0:	e720      	b.n	d8124 <__adddf3+0x138>
   d82e2:	bf00      	nop

000d82e4 <__aeabi_ul2d>:
   d82e4:	ea50 0201 	orrs.w	r2, r0, r1
   d82e8:	bf08      	it	eq
   d82ea:	4770      	bxeq	lr
   d82ec:	b530      	push	{r4, r5, lr}
   d82ee:	f04f 0500 	mov.w	r5, #0
   d82f2:	e00a      	b.n	d830a <__aeabi_l2d+0x16>

000d82f4 <__aeabi_l2d>:
   d82f4:	ea50 0201 	orrs.w	r2, r0, r1
   d82f8:	bf08      	it	eq
   d82fa:	4770      	bxeq	lr
   d82fc:	b530      	push	{r4, r5, lr}
   d82fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8302:	d502      	bpl.n	d830a <__aeabi_l2d+0x16>
   d8304:	4240      	negs	r0, r0
   d8306:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d830a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d830e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8312:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8316:	f43f aedc 	beq.w	d80d2 <__adddf3+0xe6>
   d831a:	f04f 0203 	mov.w	r2, #3
   d831e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8322:	bf18      	it	ne
   d8324:	3203      	addne	r2, #3
   d8326:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d832a:	bf18      	it	ne
   d832c:	3203      	addne	r2, #3
   d832e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8332:	f1c2 0320 	rsb	r3, r2, #32
   d8336:	fa00 fc03 	lsl.w	ip, r0, r3
   d833a:	fa20 f002 	lsr.w	r0, r0, r2
   d833e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8342:	ea40 000e 	orr.w	r0, r0, lr
   d8346:	fa21 f102 	lsr.w	r1, r1, r2
   d834a:	4414      	add	r4, r2
   d834c:	e6c1      	b.n	d80d2 <__adddf3+0xe6>
   d834e:	bf00      	nop

000d8350 <__aeabi_dmul>:
   d8350:	b570      	push	{r4, r5, r6, lr}
   d8352:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8356:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d835a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d835e:	bf1d      	ittte	ne
   d8360:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8364:	ea94 0f0c 	teqne	r4, ip
   d8368:	ea95 0f0c 	teqne	r5, ip
   d836c:	f000 f8de 	bleq	d852c <__aeabi_dmul+0x1dc>
   d8370:	442c      	add	r4, r5
   d8372:	ea81 0603 	eor.w	r6, r1, r3
   d8376:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d837a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d837e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8382:	bf18      	it	ne
   d8384:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8388:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d838c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8390:	d038      	beq.n	d8404 <__aeabi_dmul+0xb4>
   d8392:	fba0 ce02 	umull	ip, lr, r0, r2
   d8396:	f04f 0500 	mov.w	r5, #0
   d839a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d839e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d83a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d83a6:	f04f 0600 	mov.w	r6, #0
   d83aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d83ae:	f09c 0f00 	teq	ip, #0
   d83b2:	bf18      	it	ne
   d83b4:	f04e 0e01 	orrne.w	lr, lr, #1
   d83b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d83bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d83c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d83c4:	d204      	bcs.n	d83d0 <__aeabi_dmul+0x80>
   d83c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d83ca:	416d      	adcs	r5, r5
   d83cc:	eb46 0606 	adc.w	r6, r6, r6
   d83d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d83d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d83d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d83dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d83e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d83e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d83e8:	bf88      	it	hi
   d83ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d83ee:	d81e      	bhi.n	d842e <__aeabi_dmul+0xde>
   d83f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d83f4:	bf08      	it	eq
   d83f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d83fa:	f150 0000 	adcs.w	r0, r0, #0
   d83fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8402:	bd70      	pop	{r4, r5, r6, pc}
   d8404:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8408:	ea46 0101 	orr.w	r1, r6, r1
   d840c:	ea40 0002 	orr.w	r0, r0, r2
   d8410:	ea81 0103 	eor.w	r1, r1, r3
   d8414:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8418:	bfc2      	ittt	gt
   d841a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d841e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8422:	bd70      	popgt	{r4, r5, r6, pc}
   d8424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8428:	f04f 0e00 	mov.w	lr, #0
   d842c:	3c01      	subs	r4, #1
   d842e:	f300 80ab 	bgt.w	d8588 <__aeabi_dmul+0x238>
   d8432:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8436:	bfde      	ittt	le
   d8438:	2000      	movle	r0, #0
   d843a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d843e:	bd70      	pople	{r4, r5, r6, pc}
   d8440:	f1c4 0400 	rsb	r4, r4, #0
   d8444:	3c20      	subs	r4, #32
   d8446:	da35      	bge.n	d84b4 <__aeabi_dmul+0x164>
   d8448:	340c      	adds	r4, #12
   d844a:	dc1b      	bgt.n	d8484 <__aeabi_dmul+0x134>
   d844c:	f104 0414 	add.w	r4, r4, #20
   d8450:	f1c4 0520 	rsb	r5, r4, #32
   d8454:	fa00 f305 	lsl.w	r3, r0, r5
   d8458:	fa20 f004 	lsr.w	r0, r0, r4
   d845c:	fa01 f205 	lsl.w	r2, r1, r5
   d8460:	ea40 0002 	orr.w	r0, r0, r2
   d8464:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d846c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8470:	fa21 f604 	lsr.w	r6, r1, r4
   d8474:	eb42 0106 	adc.w	r1, r2, r6
   d8478:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d847c:	bf08      	it	eq
   d847e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8482:	bd70      	pop	{r4, r5, r6, pc}
   d8484:	f1c4 040c 	rsb	r4, r4, #12
   d8488:	f1c4 0520 	rsb	r5, r4, #32
   d848c:	fa00 f304 	lsl.w	r3, r0, r4
   d8490:	fa20 f005 	lsr.w	r0, r0, r5
   d8494:	fa01 f204 	lsl.w	r2, r1, r4
   d8498:	ea40 0002 	orr.w	r0, r0, r2
   d849c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d84a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84a4:	f141 0100 	adc.w	r1, r1, #0
   d84a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84ac:	bf08      	it	eq
   d84ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84b2:	bd70      	pop	{r4, r5, r6, pc}
   d84b4:	f1c4 0520 	rsb	r5, r4, #32
   d84b8:	fa00 f205 	lsl.w	r2, r0, r5
   d84bc:	ea4e 0e02 	orr.w	lr, lr, r2
   d84c0:	fa20 f304 	lsr.w	r3, r0, r4
   d84c4:	fa01 f205 	lsl.w	r2, r1, r5
   d84c8:	ea43 0302 	orr.w	r3, r3, r2
   d84cc:	fa21 f004 	lsr.w	r0, r1, r4
   d84d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d84d4:	fa21 f204 	lsr.w	r2, r1, r4
   d84d8:	ea20 0002 	bic.w	r0, r0, r2
   d84dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d84e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84e4:	bf08      	it	eq
   d84e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84ea:	bd70      	pop	{r4, r5, r6, pc}
   d84ec:	f094 0f00 	teq	r4, #0
   d84f0:	d10f      	bne.n	d8512 <__aeabi_dmul+0x1c2>
   d84f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d84f6:	0040      	lsls	r0, r0, #1
   d84f8:	eb41 0101 	adc.w	r1, r1, r1
   d84fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8500:	bf08      	it	eq
   d8502:	3c01      	subeq	r4, #1
   d8504:	d0f7      	beq.n	d84f6 <__aeabi_dmul+0x1a6>
   d8506:	ea41 0106 	orr.w	r1, r1, r6
   d850a:	f095 0f00 	teq	r5, #0
   d850e:	bf18      	it	ne
   d8510:	4770      	bxne	lr
   d8512:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8516:	0052      	lsls	r2, r2, #1
   d8518:	eb43 0303 	adc.w	r3, r3, r3
   d851c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8520:	bf08      	it	eq
   d8522:	3d01      	subeq	r5, #1
   d8524:	d0f7      	beq.n	d8516 <__aeabi_dmul+0x1c6>
   d8526:	ea43 0306 	orr.w	r3, r3, r6
   d852a:	4770      	bx	lr
   d852c:	ea94 0f0c 	teq	r4, ip
   d8530:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8534:	bf18      	it	ne
   d8536:	ea95 0f0c 	teqne	r5, ip
   d853a:	d00c      	beq.n	d8556 <__aeabi_dmul+0x206>
   d853c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8540:	bf18      	it	ne
   d8542:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8546:	d1d1      	bne.n	d84ec <__aeabi_dmul+0x19c>
   d8548:	ea81 0103 	eor.w	r1, r1, r3
   d854c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8550:	f04f 0000 	mov.w	r0, #0
   d8554:	bd70      	pop	{r4, r5, r6, pc}
   d8556:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d855a:	bf06      	itte	eq
   d855c:	4610      	moveq	r0, r2
   d855e:	4619      	moveq	r1, r3
   d8560:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8564:	d019      	beq.n	d859a <__aeabi_dmul+0x24a>
   d8566:	ea94 0f0c 	teq	r4, ip
   d856a:	d102      	bne.n	d8572 <__aeabi_dmul+0x222>
   d856c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8570:	d113      	bne.n	d859a <__aeabi_dmul+0x24a>
   d8572:	ea95 0f0c 	teq	r5, ip
   d8576:	d105      	bne.n	d8584 <__aeabi_dmul+0x234>
   d8578:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d857c:	bf1c      	itt	ne
   d857e:	4610      	movne	r0, r2
   d8580:	4619      	movne	r1, r3
   d8582:	d10a      	bne.n	d859a <__aeabi_dmul+0x24a>
   d8584:	ea81 0103 	eor.w	r1, r1, r3
   d8588:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d858c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8594:	f04f 0000 	mov.w	r0, #0
   d8598:	bd70      	pop	{r4, r5, r6, pc}
   d859a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d859e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d85a2:	bd70      	pop	{r4, r5, r6, pc}

000d85a4 <__aeabi_ddiv>:
   d85a4:	b570      	push	{r4, r5, r6, lr}
   d85a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d85b2:	bf1d      	ittte	ne
   d85b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d85b8:	ea94 0f0c 	teqne	r4, ip
   d85bc:	ea95 0f0c 	teqne	r5, ip
   d85c0:	f000 f8a7 	bleq	d8712 <__aeabi_ddiv+0x16e>
   d85c4:	eba4 0405 	sub.w	r4, r4, r5
   d85c8:	ea81 0e03 	eor.w	lr, r1, r3
   d85cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d85d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d85d4:	f000 8088 	beq.w	d86e8 <__aeabi_ddiv+0x144>
   d85d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d85dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d85e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d85e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d85e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d85ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d85f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d85f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d85f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d85fc:	429d      	cmp	r5, r3
   d85fe:	bf08      	it	eq
   d8600:	4296      	cmpeq	r6, r2
   d8602:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8606:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d860a:	d202      	bcs.n	d8612 <__aeabi_ddiv+0x6e>
   d860c:	085b      	lsrs	r3, r3, #1
   d860e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8612:	1ab6      	subs	r6, r6, r2
   d8614:	eb65 0503 	sbc.w	r5, r5, r3
   d8618:	085b      	lsrs	r3, r3, #1
   d861a:	ea4f 0232 	mov.w	r2, r2, rrx
   d861e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8622:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8626:	ebb6 0e02 	subs.w	lr, r6, r2
   d862a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d862e:	bf22      	ittt	cs
   d8630:	1ab6      	subcs	r6, r6, r2
   d8632:	4675      	movcs	r5, lr
   d8634:	ea40 000c 	orrcs.w	r0, r0, ip
   d8638:	085b      	lsrs	r3, r3, #1
   d863a:	ea4f 0232 	mov.w	r2, r2, rrx
   d863e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8642:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8646:	bf22      	ittt	cs
   d8648:	1ab6      	subcs	r6, r6, r2
   d864a:	4675      	movcs	r5, lr
   d864c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8650:	085b      	lsrs	r3, r3, #1
   d8652:	ea4f 0232 	mov.w	r2, r2, rrx
   d8656:	ebb6 0e02 	subs.w	lr, r6, r2
   d865a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d865e:	bf22      	ittt	cs
   d8660:	1ab6      	subcs	r6, r6, r2
   d8662:	4675      	movcs	r5, lr
   d8664:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8668:	085b      	lsrs	r3, r3, #1
   d866a:	ea4f 0232 	mov.w	r2, r2, rrx
   d866e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8672:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8676:	bf22      	ittt	cs
   d8678:	1ab6      	subcs	r6, r6, r2
   d867a:	4675      	movcs	r5, lr
   d867c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8680:	ea55 0e06 	orrs.w	lr, r5, r6
   d8684:	d018      	beq.n	d86b8 <__aeabi_ddiv+0x114>
   d8686:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d868a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d868e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8696:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d869a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d869e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d86a2:	d1c0      	bne.n	d8626 <__aeabi_ddiv+0x82>
   d86a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86a8:	d10b      	bne.n	d86c2 <__aeabi_ddiv+0x11e>
   d86aa:	ea41 0100 	orr.w	r1, r1, r0
   d86ae:	f04f 0000 	mov.w	r0, #0
   d86b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d86b6:	e7b6      	b.n	d8626 <__aeabi_ddiv+0x82>
   d86b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86bc:	bf04      	itt	eq
   d86be:	4301      	orreq	r1, r0
   d86c0:	2000      	moveq	r0, #0
   d86c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d86c6:	bf88      	it	hi
   d86c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d86cc:	f63f aeaf 	bhi.w	d842e <__aeabi_dmul+0xde>
   d86d0:	ebb5 0c03 	subs.w	ip, r5, r3
   d86d4:	bf04      	itt	eq
   d86d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d86da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d86de:	f150 0000 	adcs.w	r0, r0, #0
   d86e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d86e6:	bd70      	pop	{r4, r5, r6, pc}
   d86e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d86ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d86f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d86f4:	bfc2      	ittt	gt
   d86f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d86fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d86fe:	bd70      	popgt	{r4, r5, r6, pc}
   d8700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8704:	f04f 0e00 	mov.w	lr, #0
   d8708:	3c01      	subs	r4, #1
   d870a:	e690      	b.n	d842e <__aeabi_dmul+0xde>
   d870c:	ea45 0e06 	orr.w	lr, r5, r6
   d8710:	e68d      	b.n	d842e <__aeabi_dmul+0xde>
   d8712:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8716:	ea94 0f0c 	teq	r4, ip
   d871a:	bf08      	it	eq
   d871c:	ea95 0f0c 	teqeq	r5, ip
   d8720:	f43f af3b 	beq.w	d859a <__aeabi_dmul+0x24a>
   d8724:	ea94 0f0c 	teq	r4, ip
   d8728:	d10a      	bne.n	d8740 <__aeabi_ddiv+0x19c>
   d872a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d872e:	f47f af34 	bne.w	d859a <__aeabi_dmul+0x24a>
   d8732:	ea95 0f0c 	teq	r5, ip
   d8736:	f47f af25 	bne.w	d8584 <__aeabi_dmul+0x234>
   d873a:	4610      	mov	r0, r2
   d873c:	4619      	mov	r1, r3
   d873e:	e72c      	b.n	d859a <__aeabi_dmul+0x24a>
   d8740:	ea95 0f0c 	teq	r5, ip
   d8744:	d106      	bne.n	d8754 <__aeabi_ddiv+0x1b0>
   d8746:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d874a:	f43f aefd 	beq.w	d8548 <__aeabi_dmul+0x1f8>
   d874e:	4610      	mov	r0, r2
   d8750:	4619      	mov	r1, r3
   d8752:	e722      	b.n	d859a <__aeabi_dmul+0x24a>
   d8754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8758:	bf18      	it	ne
   d875a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d875e:	f47f aec5 	bne.w	d84ec <__aeabi_dmul+0x19c>
   d8762:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8766:	f47f af0d 	bne.w	d8584 <__aeabi_dmul+0x234>
   d876a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d876e:	f47f aeeb 	bne.w	d8548 <__aeabi_dmul+0x1f8>
   d8772:	e712      	b.n	d859a <__aeabi_dmul+0x24a>

000d8774 <__gedf2>:
   d8774:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8778:	e006      	b.n	d8788 <__cmpdf2+0x4>
   d877a:	bf00      	nop

000d877c <__ledf2>:
   d877c:	f04f 0c01 	mov.w	ip, #1
   d8780:	e002      	b.n	d8788 <__cmpdf2+0x4>
   d8782:	bf00      	nop

000d8784 <__cmpdf2>:
   d8784:	f04f 0c01 	mov.w	ip, #1
   d8788:	f84d cd04 	str.w	ip, [sp, #-4]!
   d878c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8790:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8794:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8798:	bf18      	it	ne
   d879a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d879e:	d01b      	beq.n	d87d8 <__cmpdf2+0x54>
   d87a0:	b001      	add	sp, #4
   d87a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d87a6:	bf0c      	ite	eq
   d87a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d87ac:	ea91 0f03 	teqne	r1, r3
   d87b0:	bf02      	ittt	eq
   d87b2:	ea90 0f02 	teqeq	r0, r2
   d87b6:	2000      	moveq	r0, #0
   d87b8:	4770      	bxeq	lr
   d87ba:	f110 0f00 	cmn.w	r0, #0
   d87be:	ea91 0f03 	teq	r1, r3
   d87c2:	bf58      	it	pl
   d87c4:	4299      	cmppl	r1, r3
   d87c6:	bf08      	it	eq
   d87c8:	4290      	cmpeq	r0, r2
   d87ca:	bf2c      	ite	cs
   d87cc:	17d8      	asrcs	r0, r3, #31
   d87ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d87d2:	f040 0001 	orr.w	r0, r0, #1
   d87d6:	4770      	bx	lr
   d87d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d87dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87e0:	d102      	bne.n	d87e8 <__cmpdf2+0x64>
   d87e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d87e6:	d107      	bne.n	d87f8 <__cmpdf2+0x74>
   d87e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d87ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87f0:	d1d6      	bne.n	d87a0 <__cmpdf2+0x1c>
   d87f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d87f6:	d0d3      	beq.n	d87a0 <__cmpdf2+0x1c>
   d87f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d87fc:	4770      	bx	lr
   d87fe:	bf00      	nop

000d8800 <__aeabi_cdrcmple>:
   d8800:	4684      	mov	ip, r0
   d8802:	4610      	mov	r0, r2
   d8804:	4662      	mov	r2, ip
   d8806:	468c      	mov	ip, r1
   d8808:	4619      	mov	r1, r3
   d880a:	4663      	mov	r3, ip
   d880c:	e000      	b.n	d8810 <__aeabi_cdcmpeq>
   d880e:	bf00      	nop

000d8810 <__aeabi_cdcmpeq>:
   d8810:	b501      	push	{r0, lr}
   d8812:	f7ff ffb7 	bl	d8784 <__cmpdf2>
   d8816:	2800      	cmp	r0, #0
   d8818:	bf48      	it	mi
   d881a:	f110 0f00 	cmnmi.w	r0, #0
   d881e:	bd01      	pop	{r0, pc}

000d8820 <__aeabi_dcmpeq>:
   d8820:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8824:	f7ff fff4 	bl	d8810 <__aeabi_cdcmpeq>
   d8828:	bf0c      	ite	eq
   d882a:	2001      	moveq	r0, #1
   d882c:	2000      	movne	r0, #0
   d882e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8832:	bf00      	nop

000d8834 <__aeabi_dcmplt>:
   d8834:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8838:	f7ff ffea 	bl	d8810 <__aeabi_cdcmpeq>
   d883c:	bf34      	ite	cc
   d883e:	2001      	movcc	r0, #1
   d8840:	2000      	movcs	r0, #0
   d8842:	f85d fb08 	ldr.w	pc, [sp], #8
   d8846:	bf00      	nop

000d8848 <__aeabi_dcmple>:
   d8848:	f84d ed08 	str.w	lr, [sp, #-8]!
   d884c:	f7ff ffe0 	bl	d8810 <__aeabi_cdcmpeq>
   d8850:	bf94      	ite	ls
   d8852:	2001      	movls	r0, #1
   d8854:	2000      	movhi	r0, #0
   d8856:	f85d fb08 	ldr.w	pc, [sp], #8
   d885a:	bf00      	nop

000d885c <__aeabi_dcmpge>:
   d885c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8860:	f7ff ffce 	bl	d8800 <__aeabi_cdrcmple>
   d8864:	bf94      	ite	ls
   d8866:	2001      	movls	r0, #1
   d8868:	2000      	movhi	r0, #0
   d886a:	f85d fb08 	ldr.w	pc, [sp], #8
   d886e:	bf00      	nop

000d8870 <__aeabi_dcmpgt>:
   d8870:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8874:	f7ff ffc4 	bl	d8800 <__aeabi_cdrcmple>
   d8878:	bf34      	ite	cc
   d887a:	2001      	movcc	r0, #1
   d887c:	2000      	movcs	r0, #0
   d887e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8882:	bf00      	nop

000d8884 <__aeabi_dcmpun>:
   d8884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d888c:	d102      	bne.n	d8894 <__aeabi_dcmpun+0x10>
   d888e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8892:	d10a      	bne.n	d88aa <__aeabi_dcmpun+0x26>
   d8894:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d889c:	d102      	bne.n	d88a4 <__aeabi_dcmpun+0x20>
   d889e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d88a2:	d102      	bne.n	d88aa <__aeabi_dcmpun+0x26>
   d88a4:	f04f 0000 	mov.w	r0, #0
   d88a8:	4770      	bx	lr
   d88aa:	f04f 0001 	mov.w	r0, #1
   d88ae:	4770      	bx	lr

000d88b0 <__aeabi_d2iz>:
   d88b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d88b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d88b8:	d215      	bcs.n	d88e6 <__aeabi_d2iz+0x36>
   d88ba:	d511      	bpl.n	d88e0 <__aeabi_d2iz+0x30>
   d88bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d88c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d88c4:	d912      	bls.n	d88ec <__aeabi_d2iz+0x3c>
   d88c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d88ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d88ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d88d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d88d6:	fa23 f002 	lsr.w	r0, r3, r2
   d88da:	bf18      	it	ne
   d88dc:	4240      	negne	r0, r0
   d88de:	4770      	bx	lr
   d88e0:	f04f 0000 	mov.w	r0, #0
   d88e4:	4770      	bx	lr
   d88e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d88ea:	d105      	bne.n	d88f8 <__aeabi_d2iz+0x48>
   d88ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d88f0:	bf08      	it	eq
   d88f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d88f6:	4770      	bx	lr
   d88f8:	f04f 0000 	mov.w	r0, #0
   d88fc:	4770      	bx	lr
   d88fe:	bf00      	nop

000d8900 <__aeabi_d2uiz>:
   d8900:	004a      	lsls	r2, r1, #1
   d8902:	d211      	bcs.n	d8928 <__aeabi_d2uiz+0x28>
   d8904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8908:	d211      	bcs.n	d892e <__aeabi_d2uiz+0x2e>
   d890a:	d50d      	bpl.n	d8928 <__aeabi_d2uiz+0x28>
   d890c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8914:	d40e      	bmi.n	d8934 <__aeabi_d2uiz+0x34>
   d8916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d891a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d891e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8922:	fa23 f002 	lsr.w	r0, r3, r2
   d8926:	4770      	bx	lr
   d8928:	f04f 0000 	mov.w	r0, #0
   d892c:	4770      	bx	lr
   d892e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8932:	d102      	bne.n	d893a <__aeabi_d2uiz+0x3a>
   d8934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8938:	4770      	bx	lr
   d893a:	f04f 0000 	mov.w	r0, #0
   d893e:	4770      	bx	lr

000d8940 <atoi>:
   d8940:	220a      	movs	r2, #10
   d8942:	2100      	movs	r1, #0
   d8944:	f000 bf4e 	b.w	d97e4 <strtol>

000d8948 <atol>:
   d8948:	220a      	movs	r2, #10
   d894a:	2100      	movs	r1, #0
   d894c:	f000 bf4a 	b.w	d97e4 <strtol>

000d8950 <__cxa_atexit>:
   d8950:	b510      	push	{r4, lr}
   d8952:	4c05      	ldr	r4, [pc, #20]	; (d8968 <__cxa_atexit+0x18>)
   d8954:	4613      	mov	r3, r2
   d8956:	b12c      	cbz	r4, d8964 <__cxa_atexit+0x14>
   d8958:	460a      	mov	r2, r1
   d895a:	4601      	mov	r1, r0
   d895c:	2002      	movs	r0, #2
   d895e:	f3af 8000 	nop.w
   d8962:	bd10      	pop	{r4, pc}
   d8964:	4620      	mov	r0, r4
   d8966:	bd10      	pop	{r4, pc}
   d8968:	00000000 	.word	0x00000000

000d896c <_localeconv_r>:
   d896c:	4800      	ldr	r0, [pc, #0]	; (d8970 <_localeconv_r+0x4>)
   d896e:	4770      	bx	lr
   d8970:	2003e378 	.word	0x2003e378

000d8974 <memcmp>:
   d8974:	b510      	push	{r4, lr}
   d8976:	3901      	subs	r1, #1
   d8978:	4402      	add	r2, r0
   d897a:	4290      	cmp	r0, r2
   d897c:	d007      	beq.n	d898e <memcmp+0x1a>
   d897e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8982:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8986:	42a3      	cmp	r3, r4
   d8988:	d0f7      	beq.n	d897a <memcmp+0x6>
   d898a:	1b18      	subs	r0, r3, r4
   d898c:	bd10      	pop	{r4, pc}
   d898e:	2000      	movs	r0, #0
   d8990:	bd10      	pop	{r4, pc}

000d8992 <memcpy>:
   d8992:	b510      	push	{r4, lr}
   d8994:	1e43      	subs	r3, r0, #1
   d8996:	440a      	add	r2, r1
   d8998:	4291      	cmp	r1, r2
   d899a:	d004      	beq.n	d89a6 <memcpy+0x14>
   d899c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d89a0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d89a4:	e7f8      	b.n	d8998 <memcpy+0x6>
   d89a6:	bd10      	pop	{r4, pc}

000d89a8 <memset>:
   d89a8:	4402      	add	r2, r0
   d89aa:	4603      	mov	r3, r0
   d89ac:	4293      	cmp	r3, r2
   d89ae:	d002      	beq.n	d89b6 <memset+0xe>
   d89b0:	f803 1b01 	strb.w	r1, [r3], #1
   d89b4:	e7fa      	b.n	d89ac <memset+0x4>
   d89b6:	4770      	bx	lr

000d89b8 <rand>:
   d89b8:	4b19      	ldr	r3, [pc, #100]	; (d8a20 <rand+0x68>)
   d89ba:	b510      	push	{r4, lr}
   d89bc:	681c      	ldr	r4, [r3, #0]
   d89be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d89c0:	b9d3      	cbnz	r3, d89f8 <rand+0x40>
   d89c2:	2018      	movs	r0, #24
   d89c4:	f7fc fc70 	bl	d52a8 <malloc>
   d89c8:	f243 330e 	movw	r3, #13070	; 0x330e
   d89cc:	63a0      	str	r0, [r4, #56]	; 0x38
   d89ce:	8003      	strh	r3, [r0, #0]
   d89d0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d89d4:	8043      	strh	r3, [r0, #2]
   d89d6:	f241 2334 	movw	r3, #4660	; 0x1234
   d89da:	8083      	strh	r3, [r0, #4]
   d89dc:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d89e0:	80c3      	strh	r3, [r0, #6]
   d89e2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d89e6:	8103      	strh	r3, [r0, #8]
   d89e8:	2305      	movs	r3, #5
   d89ea:	8143      	strh	r3, [r0, #10]
   d89ec:	230b      	movs	r3, #11
   d89ee:	8183      	strh	r3, [r0, #12]
   d89f0:	2201      	movs	r2, #1
   d89f2:	2300      	movs	r3, #0
   d89f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d89f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d89fa:	4c0a      	ldr	r4, [pc, #40]	; (d8a24 <rand+0x6c>)
   d89fc:	690b      	ldr	r3, [r1, #16]
   d89fe:	6948      	ldr	r0, [r1, #20]
   d8a00:	4a09      	ldr	r2, [pc, #36]	; (d8a28 <rand+0x70>)
   d8a02:	435c      	muls	r4, r3
   d8a04:	fb02 4000 	mla	r0, r2, r0, r4
   d8a08:	fba3 2302 	umull	r2, r3, r3, r2
   d8a0c:	3201      	adds	r2, #1
   d8a0e:	4403      	add	r3, r0
   d8a10:	f143 0300 	adc.w	r3, r3, #0
   d8a14:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d8a18:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8a1c:	bd10      	pop	{r4, pc}
   d8a1e:	bf00      	nop
   d8a20:	2003e374 	.word	0x2003e374
   d8a24:	5851f42d 	.word	0x5851f42d
   d8a28:	4c957f2d 	.word	0x4c957f2d

000d8a2c <strcpy>:
   d8a2c:	4603      	mov	r3, r0
   d8a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8a32:	f803 2b01 	strb.w	r2, [r3], #1
   d8a36:	2a00      	cmp	r2, #0
   d8a38:	d1f9      	bne.n	d8a2e <strcpy+0x2>
   d8a3a:	4770      	bx	lr

000d8a3c <strlen>:
   d8a3c:	4603      	mov	r3, r0
   d8a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8a42:	2a00      	cmp	r2, #0
   d8a44:	d1fb      	bne.n	d8a3e <strlen+0x2>
   d8a46:	1a18      	subs	r0, r3, r0
   d8a48:	3801      	subs	r0, #1
   d8a4a:	4770      	bx	lr

000d8a4c <strncmp>:
   d8a4c:	b530      	push	{r4, r5, lr}
   d8a4e:	b182      	cbz	r2, d8a72 <strncmp+0x26>
   d8a50:	1e45      	subs	r5, r0, #1
   d8a52:	3901      	subs	r1, #1
   d8a54:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8a58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8a5c:	42a3      	cmp	r3, r4
   d8a5e:	d106      	bne.n	d8a6e <strncmp+0x22>
   d8a60:	43ec      	mvns	r4, r5
   d8a62:	4414      	add	r4, r2
   d8a64:	42e0      	cmn	r0, r4
   d8a66:	d001      	beq.n	d8a6c <strncmp+0x20>
   d8a68:	2b00      	cmp	r3, #0
   d8a6a:	d1f3      	bne.n	d8a54 <strncmp+0x8>
   d8a6c:	461c      	mov	r4, r3
   d8a6e:	1b18      	subs	r0, r3, r4
   d8a70:	bd30      	pop	{r4, r5, pc}
   d8a72:	4610      	mov	r0, r2
   d8a74:	bd30      	pop	{r4, r5, pc}

000d8a76 <strnlen>:
   d8a76:	b510      	push	{r4, lr}
   d8a78:	4603      	mov	r3, r0
   d8a7a:	4401      	add	r1, r0
   d8a7c:	428b      	cmp	r3, r1
   d8a7e:	d004      	beq.n	d8a8a <strnlen+0x14>
   d8a80:	781a      	ldrb	r2, [r3, #0]
   d8a82:	1c5c      	adds	r4, r3, #1
   d8a84:	b10a      	cbz	r2, d8a8a <strnlen+0x14>
   d8a86:	4623      	mov	r3, r4
   d8a88:	e7f8      	b.n	d8a7c <strnlen+0x6>
   d8a8a:	1a18      	subs	r0, r3, r0
   d8a8c:	bd10      	pop	{r4, pc}

000d8a8e <sulp>:
   d8a8e:	b570      	push	{r4, r5, r6, lr}
   d8a90:	4604      	mov	r4, r0
   d8a92:	460d      	mov	r5, r1
   d8a94:	ec45 4b10 	vmov	d0, r4, r5
   d8a98:	4616      	mov	r6, r2
   d8a9a:	f001 fc91 	bl	da3c0 <__ulp>
   d8a9e:	ec51 0b10 	vmov	r0, r1, d0
   d8aa2:	b17e      	cbz	r6, d8ac4 <sulp+0x36>
   d8aa4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8aac:	2b00      	cmp	r3, #0
   d8aae:	dd09      	ble.n	d8ac4 <sulp+0x36>
   d8ab0:	051b      	lsls	r3, r3, #20
   d8ab2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8ab6:	2400      	movs	r4, #0
   d8ab8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8abc:	4622      	mov	r2, r4
   d8abe:	462b      	mov	r3, r5
   d8ac0:	f7ff fc46 	bl	d8350 <__aeabi_dmul>
   d8ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8ac8 <_strtod_r>:
   d8ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8acc:	b09d      	sub	sp, #116	; 0x74
   d8ace:	2300      	movs	r3, #0
   d8ad0:	9002      	str	r0, [sp, #8]
   d8ad2:	460c      	mov	r4, r1
   d8ad4:	9213      	str	r2, [sp, #76]	; 0x4c
   d8ad6:	9318      	str	r3, [sp, #96]	; 0x60
   d8ad8:	f04f 0a00 	mov.w	sl, #0
   d8adc:	f04f 0b00 	mov.w	fp, #0
   d8ae0:	9117      	str	r1, [sp, #92]	; 0x5c
   d8ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8ae4:	781a      	ldrb	r2, [r3, #0]
   d8ae6:	2a0d      	cmp	r2, #13
   d8ae8:	d805      	bhi.n	d8af6 <_strtod_r+0x2e>
   d8aea:	2a09      	cmp	r2, #9
   d8aec:	d213      	bcs.n	d8b16 <_strtod_r+0x4e>
   d8aee:	2a00      	cmp	r2, #0
   d8af0:	f000 81ac 	beq.w	d8e4c <_strtod_r+0x384>
   d8af4:	e012      	b.n	d8b1c <_strtod_r+0x54>
   d8af6:	2a2b      	cmp	r2, #43	; 0x2b
   d8af8:	d004      	beq.n	d8b04 <_strtod_r+0x3c>
   d8afa:	2a2d      	cmp	r2, #45	; 0x2d
   d8afc:	d004      	beq.n	d8b08 <_strtod_r+0x40>
   d8afe:	2a20      	cmp	r2, #32
   d8b00:	d10c      	bne.n	d8b1c <_strtod_r+0x54>
   d8b02:	e008      	b.n	d8b16 <_strtod_r+0x4e>
   d8b04:	2200      	movs	r2, #0
   d8b06:	e000      	b.n	d8b0a <_strtod_r+0x42>
   d8b08:	2201      	movs	r2, #1
   d8b0a:	920c      	str	r2, [sp, #48]	; 0x30
   d8b0c:	1c5a      	adds	r2, r3, #1
   d8b0e:	9217      	str	r2, [sp, #92]	; 0x5c
   d8b10:	785b      	ldrb	r3, [r3, #1]
   d8b12:	b92b      	cbnz	r3, d8b20 <_strtod_r+0x58>
   d8b14:	e19a      	b.n	d8e4c <_strtod_r+0x384>
   d8b16:	3301      	adds	r3, #1
   d8b18:	9317      	str	r3, [sp, #92]	; 0x5c
   d8b1a:	e7e2      	b.n	d8ae2 <_strtod_r+0x1a>
   d8b1c:	2300      	movs	r3, #0
   d8b1e:	930c      	str	r3, [sp, #48]	; 0x30
   d8b20:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d8b22:	782b      	ldrb	r3, [r5, #0]
   d8b24:	2b30      	cmp	r3, #48	; 0x30
   d8b26:	d15c      	bne.n	d8be2 <_strtod_r+0x11a>
   d8b28:	786b      	ldrb	r3, [r5, #1]
   d8b2a:	2b58      	cmp	r3, #88	; 0x58
   d8b2c:	d001      	beq.n	d8b32 <_strtod_r+0x6a>
   d8b2e:	2b78      	cmp	r3, #120	; 0x78
   d8b30:	d14c      	bne.n	d8bcc <_strtod_r+0x104>
   d8b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8b34:	9301      	str	r3, [sp, #4]
   d8b36:	ab18      	add	r3, sp, #96	; 0x60
   d8b38:	9300      	str	r3, [sp, #0]
   d8b3a:	4aa9      	ldr	r2, [pc, #676]	; (d8de0 <_strtod_r+0x318>)
   d8b3c:	9802      	ldr	r0, [sp, #8]
   d8b3e:	ab19      	add	r3, sp, #100	; 0x64
   d8b40:	a917      	add	r1, sp, #92	; 0x5c
   d8b42:	f000 fea4 	bl	d988e <__gethex>
   d8b46:	f010 0607 	ands.w	r6, r0, #7
   d8b4a:	4604      	mov	r4, r0
   d8b4c:	f000 8587 	beq.w	d965e <_strtod_r+0xb96>
   d8b50:	2e06      	cmp	r6, #6
   d8b52:	d105      	bne.n	d8b60 <_strtod_r+0x98>
   d8b54:	3501      	adds	r5, #1
   d8b56:	2300      	movs	r3, #0
   d8b58:	9517      	str	r5, [sp, #92]	; 0x5c
   d8b5a:	930c      	str	r3, [sp, #48]	; 0x30
   d8b5c:	f000 bd7f 	b.w	d965e <_strtod_r+0xb96>
   d8b60:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8b62:	b13a      	cbz	r2, d8b74 <_strtod_r+0xac>
   d8b64:	2135      	movs	r1, #53	; 0x35
   d8b66:	a81a      	add	r0, sp, #104	; 0x68
   d8b68:	f001 fd17 	bl	da59a <__copybits>
   d8b6c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8b6e:	9802      	ldr	r0, [sp, #8]
   d8b70:	f001 f994 	bl	d9e9c <_Bfree>
   d8b74:	2e06      	cmp	r6, #6
   d8b76:	d822      	bhi.n	d8bbe <_strtod_r+0xf6>
   d8b78:	e8df f006 	tbb	[pc, r6]
   d8b7c:	18080d04 	.word	0x18080d04
   d8b80:	0d1d      	.short	0x0d1d
   d8b82:	04          	.byte	0x04
   d8b83:	00          	.byte	0x00
   d8b84:	f04f 0b00 	mov.w	fp, #0
   d8b88:	46da      	mov	sl, fp
   d8b8a:	e018      	b.n	d8bbe <_strtod_r+0xf6>
   d8b8c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8b90:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d8b94:	e013      	b.n	d8bbe <_strtod_r+0xf6>
   d8b96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8b98:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8b9a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8b9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8ba2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8ba6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8baa:	e008      	b.n	d8bbe <_strtod_r+0xf6>
   d8bac:	f8df b234 	ldr.w	fp, [pc, #564]	; d8de4 <_strtod_r+0x31c>
   d8bb0:	f04f 0a00 	mov.w	sl, #0
   d8bb4:	e003      	b.n	d8bbe <_strtod_r+0xf6>
   d8bb6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8bba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8bbe:	0721      	lsls	r1, r4, #28
   d8bc0:	f140 854d 	bpl.w	d965e <_strtod_r+0xb96>
   d8bc4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8bc8:	f000 bd49 	b.w	d965e <_strtod_r+0xb96>
   d8bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8bce:	1c5a      	adds	r2, r3, #1
   d8bd0:	9217      	str	r2, [sp, #92]	; 0x5c
   d8bd2:	785b      	ldrb	r3, [r3, #1]
   d8bd4:	2b30      	cmp	r3, #48	; 0x30
   d8bd6:	d0f9      	beq.n	d8bcc <_strtod_r+0x104>
   d8bd8:	2b00      	cmp	r3, #0
   d8bda:	f000 8540 	beq.w	d965e <_strtod_r+0xb96>
   d8bde:	2301      	movs	r3, #1
   d8be0:	e000      	b.n	d8be4 <_strtod_r+0x11c>
   d8be2:	2300      	movs	r3, #0
   d8be4:	f04f 0800 	mov.w	r8, #0
   d8be8:	9306      	str	r3, [sp, #24]
   d8bea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8bec:	9307      	str	r3, [sp, #28]
   d8bee:	f8cd 8014 	str.w	r8, [sp, #20]
   d8bf2:	f8cd 8010 	str.w	r8, [sp, #16]
   d8bf6:	220a      	movs	r2, #10
   d8bf8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d8bfa:	782e      	ldrb	r6, [r5, #0]
   d8bfc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8c00:	b2d9      	uxtb	r1, r3
   d8c02:	2909      	cmp	r1, #9
   d8c04:	d80e      	bhi.n	d8c24 <_strtod_r+0x15c>
   d8c06:	9904      	ldr	r1, [sp, #16]
   d8c08:	2908      	cmp	r1, #8
   d8c0a:	bfdd      	ittte	le
   d8c0c:	9905      	ldrle	r1, [sp, #20]
   d8c0e:	fb02 3301 	mlale	r3, r2, r1, r3
   d8c12:	9305      	strle	r3, [sp, #20]
   d8c14:	fb02 3808 	mlagt	r8, r2, r8, r3
   d8c18:	9b04      	ldr	r3, [sp, #16]
   d8c1a:	3501      	adds	r5, #1
   d8c1c:	3301      	adds	r3, #1
   d8c1e:	9304      	str	r3, [sp, #16]
   d8c20:	9517      	str	r5, [sp, #92]	; 0x5c
   d8c22:	e7e9      	b.n	d8bf8 <_strtod_r+0x130>
   d8c24:	9802      	ldr	r0, [sp, #8]
   d8c26:	f7ff fea1 	bl	d896c <_localeconv_r>
   d8c2a:	6807      	ldr	r7, [r0, #0]
   d8c2c:	9802      	ldr	r0, [sp, #8]
   d8c2e:	f7ff fe9d 	bl	d896c <_localeconv_r>
   d8c32:	6800      	ldr	r0, [r0, #0]
   d8c34:	f7ff ff02 	bl	d8a3c <strlen>
   d8c38:	4639      	mov	r1, r7
   d8c3a:	4602      	mov	r2, r0
   d8c3c:	4628      	mov	r0, r5
   d8c3e:	f7ff ff05 	bl	d8a4c <strncmp>
   d8c42:	4607      	mov	r7, r0
   d8c44:	b128      	cbz	r0, d8c52 <_strtod_r+0x18a>
   d8c46:	2000      	movs	r0, #0
   d8c48:	4633      	mov	r3, r6
   d8c4a:	9d04      	ldr	r5, [sp, #16]
   d8c4c:	4602      	mov	r2, r0
   d8c4e:	4601      	mov	r1, r0
   d8c50:	e057      	b.n	d8d02 <_strtod_r+0x23a>
   d8c52:	9802      	ldr	r0, [sp, #8]
   d8c54:	f7ff fe8a 	bl	d896c <_localeconv_r>
   d8c58:	6800      	ldr	r0, [r0, #0]
   d8c5a:	f7ff feef 	bl	d8a3c <strlen>
   d8c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8c60:	181a      	adds	r2, r3, r0
   d8c62:	9217      	str	r2, [sp, #92]	; 0x5c
   d8c64:	9a04      	ldr	r2, [sp, #16]
   d8c66:	5c1b      	ldrb	r3, [r3, r0]
   d8c68:	2a00      	cmp	r2, #0
   d8c6a:	d142      	bne.n	d8cf2 <_strtod_r+0x22a>
   d8c6c:	4610      	mov	r0, r2
   d8c6e:	2b30      	cmp	r3, #48	; 0x30
   d8c70:	d105      	bne.n	d8c7e <_strtod_r+0x1b6>
   d8c72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8c74:	1c5a      	adds	r2, r3, #1
   d8c76:	9217      	str	r2, [sp, #92]	; 0x5c
   d8c78:	3001      	adds	r0, #1
   d8c7a:	785b      	ldrb	r3, [r3, #1]
   d8c7c:	e7f7      	b.n	d8c6e <_strtod_r+0x1a6>
   d8c7e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8c82:	2a08      	cmp	r2, #8
   d8c84:	d843      	bhi.n	d8d0e <_strtod_r+0x246>
   d8c86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d8c88:	9207      	str	r2, [sp, #28]
   d8c8a:	4602      	mov	r2, r0
   d8c8c:	2000      	movs	r0, #0
   d8c8e:	4605      	mov	r5, r0
   d8c90:	3b30      	subs	r3, #48	; 0x30
   d8c92:	f100 0101 	add.w	r1, r0, #1
   d8c96:	d026      	beq.n	d8ce6 <_strtod_r+0x21e>
   d8c98:	440a      	add	r2, r1
   d8c9a:	eb05 0c00 	add.w	ip, r5, r0
   d8c9e:	4629      	mov	r1, r5
   d8ca0:	260a      	movs	r6, #10
   d8ca2:	4561      	cmp	r1, ip
   d8ca4:	d00e      	beq.n	d8cc4 <_strtod_r+0x1fc>
   d8ca6:	3101      	adds	r1, #1
   d8ca8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d8cac:	f1be 0f08 	cmp.w	lr, #8
   d8cb0:	dc03      	bgt.n	d8cba <_strtod_r+0x1f2>
   d8cb2:	9f05      	ldr	r7, [sp, #20]
   d8cb4:	4377      	muls	r7, r6
   d8cb6:	9705      	str	r7, [sp, #20]
   d8cb8:	e7f3      	b.n	d8ca2 <_strtod_r+0x1da>
   d8cba:	2910      	cmp	r1, #16
   d8cbc:	bfd8      	it	le
   d8cbe:	fb06 f808 	mulle.w	r8, r6, r8
   d8cc2:	e7ee      	b.n	d8ca2 <_strtod_r+0x1da>
   d8cc4:	4428      	add	r0, r5
   d8cc6:	2808      	cmp	r0, #8
   d8cc8:	f100 0501 	add.w	r5, r0, #1
   d8ccc:	dc05      	bgt.n	d8cda <_strtod_r+0x212>
   d8cce:	9805      	ldr	r0, [sp, #20]
   d8cd0:	210a      	movs	r1, #10
   d8cd2:	fb01 3300 	mla	r3, r1, r0, r3
   d8cd6:	9305      	str	r3, [sp, #20]
   d8cd8:	e004      	b.n	d8ce4 <_strtod_r+0x21c>
   d8cda:	2d10      	cmp	r5, #16
   d8cdc:	bfdc      	itt	le
   d8cde:	210a      	movle	r1, #10
   d8ce0:	fb01 3808 	mlale	r8, r1, r8, r3
   d8ce4:	2100      	movs	r1, #0
   d8ce6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8ce8:	1c58      	adds	r0, r3, #1
   d8cea:	9017      	str	r0, [sp, #92]	; 0x5c
   d8cec:	785b      	ldrb	r3, [r3, #1]
   d8cee:	4608      	mov	r0, r1
   d8cf0:	e002      	b.n	d8cf8 <_strtod_r+0x230>
   d8cf2:	9d04      	ldr	r5, [sp, #16]
   d8cf4:	4638      	mov	r0, r7
   d8cf6:	463a      	mov	r2, r7
   d8cf8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8cfc:	2909      	cmp	r1, #9
   d8cfe:	d9c7      	bls.n	d8c90 <_strtod_r+0x1c8>
   d8d00:	2101      	movs	r1, #1
   d8d02:	2b65      	cmp	r3, #101	; 0x65
   d8d04:	d001      	beq.n	d8d0a <_strtod_r+0x242>
   d8d06:	2b45      	cmp	r3, #69	; 0x45
   d8d08:	d151      	bne.n	d8dae <_strtod_r+0x2e6>
   d8d0a:	b96d      	cbnz	r5, d8d28 <_strtod_r+0x260>
   d8d0c:	e004      	b.n	d8d18 <_strtod_r+0x250>
   d8d0e:	2b65      	cmp	r3, #101	; 0x65
   d8d10:	f040 84b3 	bne.w	d967a <_strtod_r+0xbb2>
   d8d14:	2200      	movs	r2, #0
   d8d16:	2101      	movs	r1, #1
   d8d18:	b928      	cbnz	r0, d8d26 <_strtod_r+0x25e>
   d8d1a:	9b06      	ldr	r3, [sp, #24]
   d8d1c:	2b00      	cmp	r3, #0
   d8d1e:	f000 8095 	beq.w	d8e4c <_strtod_r+0x384>
   d8d22:	4605      	mov	r5, r0
   d8d24:	e000      	b.n	d8d28 <_strtod_r+0x260>
   d8d26:	2500      	movs	r5, #0
   d8d28:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d8d2a:	1c63      	adds	r3, r4, #1
   d8d2c:	9317      	str	r3, [sp, #92]	; 0x5c
   d8d2e:	7863      	ldrb	r3, [r4, #1]
   d8d30:	2b2b      	cmp	r3, #43	; 0x2b
   d8d32:	d006      	beq.n	d8d42 <_strtod_r+0x27a>
   d8d34:	2b2d      	cmp	r3, #45	; 0x2d
   d8d36:	d002      	beq.n	d8d3e <_strtod_r+0x276>
   d8d38:	2600      	movs	r6, #0
   d8d3a:	9603      	str	r6, [sp, #12]
   d8d3c:	e006      	b.n	d8d4c <_strtod_r+0x284>
   d8d3e:	2301      	movs	r3, #1
   d8d40:	e000      	b.n	d8d44 <_strtod_r+0x27c>
   d8d42:	2300      	movs	r3, #0
   d8d44:	9303      	str	r3, [sp, #12]
   d8d46:	1ca3      	adds	r3, r4, #2
   d8d48:	9317      	str	r3, [sp, #92]	; 0x5c
   d8d4a:	78a3      	ldrb	r3, [r4, #2]
   d8d4c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8d50:	2e09      	cmp	r6, #9
   d8d52:	d82b      	bhi.n	d8dac <_strtod_r+0x2e4>
   d8d54:	2b30      	cmp	r3, #48	; 0x30
   d8d56:	d104      	bne.n	d8d62 <_strtod_r+0x29a>
   d8d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8d5a:	1c5e      	adds	r6, r3, #1
   d8d5c:	9617      	str	r6, [sp, #92]	; 0x5c
   d8d5e:	785b      	ldrb	r3, [r3, #1]
   d8d60:	e7f8      	b.n	d8d54 <_strtod_r+0x28c>
   d8d62:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d8d66:	2e08      	cmp	r6, #8
   d8d68:	d821      	bhi.n	d8dae <_strtod_r+0x2e6>
   d8d6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8d6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8d70:	f04f 0c0a 	mov.w	ip, #10
   d8d74:	461f      	mov	r7, r3
   d8d76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8d78:	1c5e      	adds	r6, r3, #1
   d8d7a:	9617      	str	r6, [sp, #92]	; 0x5c
   d8d7c:	785b      	ldrb	r3, [r3, #1]
   d8d7e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d8d82:	f1b9 0f09 	cmp.w	r9, #9
   d8d86:	d804      	bhi.n	d8d92 <_strtod_r+0x2ca>
   d8d88:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d8d8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8d90:	e7f1      	b.n	d8d76 <_strtod_r+0x2ae>
   d8d92:	1bf6      	subs	r6, r6, r7
   d8d94:	2e08      	cmp	r6, #8
   d8d96:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8d9a:	dc02      	bgt.n	d8da2 <_strtod_r+0x2da>
   d8d9c:	45f1      	cmp	r9, lr
   d8d9e:	bfa8      	it	ge
   d8da0:	46f1      	movge	r9, lr
   d8da2:	9e03      	ldr	r6, [sp, #12]
   d8da4:	b12e      	cbz	r6, d8db2 <_strtod_r+0x2ea>
   d8da6:	f1c9 0900 	rsb	r9, r9, #0
   d8daa:	e002      	b.n	d8db2 <_strtod_r+0x2ea>
   d8dac:	9417      	str	r4, [sp, #92]	; 0x5c
   d8dae:	f04f 0900 	mov.w	r9, #0
   d8db2:	2d00      	cmp	r5, #0
   d8db4:	d153      	bne.n	d8e5e <_strtod_r+0x396>
   d8db6:	2800      	cmp	r0, #0
   d8db8:	f040 8451 	bne.w	d965e <_strtod_r+0xb96>
   d8dbc:	9a06      	ldr	r2, [sp, #24]
   d8dbe:	2a00      	cmp	r2, #0
   d8dc0:	f040 844d 	bne.w	d965e <_strtod_r+0xb96>
   d8dc4:	2900      	cmp	r1, #0
   d8dc6:	d141      	bne.n	d8e4c <_strtod_r+0x384>
   d8dc8:	2b4e      	cmp	r3, #78	; 0x4e
   d8dca:	d020      	beq.n	d8e0e <_strtod_r+0x346>
   d8dcc:	dc02      	bgt.n	d8dd4 <_strtod_r+0x30c>
   d8dce:	2b49      	cmp	r3, #73	; 0x49
   d8dd0:	d00a      	beq.n	d8de8 <_strtod_r+0x320>
   d8dd2:	e03b      	b.n	d8e4c <_strtod_r+0x384>
   d8dd4:	2b69      	cmp	r3, #105	; 0x69
   d8dd6:	d007      	beq.n	d8de8 <_strtod_r+0x320>
   d8dd8:	2b6e      	cmp	r3, #110	; 0x6e
   d8dda:	d018      	beq.n	d8e0e <_strtod_r+0x346>
   d8ddc:	e036      	b.n	d8e4c <_strtod_r+0x384>
   d8dde:	bf00      	nop
   d8de0:	000dab58 	.word	0x000dab58
   d8de4:	7ff00000 	.word	0x7ff00000
   d8de8:	49a8      	ldr	r1, [pc, #672]	; (d908c <_strtod_r+0x5c4>)
   d8dea:	a817      	add	r0, sp, #92	; 0x5c
   d8dec:	f000 ff80 	bl	d9cf0 <__match>
   d8df0:	b360      	cbz	r0, d8e4c <_strtod_r+0x384>
   d8df2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8df4:	49a6      	ldr	r1, [pc, #664]	; (d9090 <_strtod_r+0x5c8>)
   d8df6:	3b01      	subs	r3, #1
   d8df8:	a817      	add	r0, sp, #92	; 0x5c
   d8dfa:	9317      	str	r3, [sp, #92]	; 0x5c
   d8dfc:	f000 ff78 	bl	d9cf0 <__match>
   d8e00:	b910      	cbnz	r0, d8e08 <_strtod_r+0x340>
   d8e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8e04:	3301      	adds	r3, #1
   d8e06:	9317      	str	r3, [sp, #92]	; 0x5c
   d8e08:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d90ac <_strtod_r+0x5e4>
   d8e0c:	e01a      	b.n	d8e44 <_strtod_r+0x37c>
   d8e0e:	49a1      	ldr	r1, [pc, #644]	; (d9094 <_strtod_r+0x5cc>)
   d8e10:	a817      	add	r0, sp, #92	; 0x5c
   d8e12:	f000 ff6d 	bl	d9cf0 <__match>
   d8e16:	b1c8      	cbz	r0, d8e4c <_strtod_r+0x384>
   d8e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8e1a:	781b      	ldrb	r3, [r3, #0]
   d8e1c:	2b28      	cmp	r3, #40	; 0x28
   d8e1e:	d10f      	bne.n	d8e40 <_strtod_r+0x378>
   d8e20:	aa1a      	add	r2, sp, #104	; 0x68
   d8e22:	499d      	ldr	r1, [pc, #628]	; (d9098 <_strtod_r+0x5d0>)
   d8e24:	a817      	add	r0, sp, #92	; 0x5c
   d8e26:	f000 ff76 	bl	d9d16 <__hexnan>
   d8e2a:	2805      	cmp	r0, #5
   d8e2c:	d108      	bne.n	d8e40 <_strtod_r+0x378>
   d8e2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8e30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8e34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8e38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8e3c:	f000 bc0f 	b.w	d965e <_strtod_r+0xb96>
   d8e40:	f8df b26c 	ldr.w	fp, [pc, #620]	; d90b0 <_strtod_r+0x5e8>
   d8e44:	f04f 0a00 	mov.w	sl, #0
   d8e48:	f000 bc09 	b.w	d965e <_strtod_r+0xb96>
   d8e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8e4e:	9417      	str	r4, [sp, #92]	; 0x5c
   d8e50:	2b00      	cmp	r3, #0
   d8e52:	f000 840f 	beq.w	d9674 <_strtod_r+0xbac>
   d8e56:	2300      	movs	r3, #0
   d8e58:	930c      	str	r3, [sp, #48]	; 0x30
   d8e5a:	f000 bc02 	b.w	d9662 <_strtod_r+0xb9a>
   d8e5e:	9b04      	ldr	r3, [sp, #16]
   d8e60:	9805      	ldr	r0, [sp, #20]
   d8e62:	2b00      	cmp	r3, #0
   d8e64:	bf08      	it	eq
   d8e66:	462b      	moveq	r3, r5
   d8e68:	2d10      	cmp	r5, #16
   d8e6a:	462c      	mov	r4, r5
   d8e6c:	ebc2 0909 	rsb	r9, r2, r9
   d8e70:	bfa8      	it	ge
   d8e72:	2410      	movge	r4, #16
   d8e74:	9304      	str	r3, [sp, #16]
   d8e76:	f7ff f9f5 	bl	d8264 <__aeabi_ui2d>
   d8e7a:	2c09      	cmp	r4, #9
   d8e7c:	4682      	mov	sl, r0
   d8e7e:	468b      	mov	fp, r1
   d8e80:	dd13      	ble.n	d8eaa <_strtod_r+0x3e2>
   d8e82:	4b86      	ldr	r3, [pc, #536]	; (d909c <_strtod_r+0x5d4>)
   d8e84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8e88:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8e8c:	f7ff fa60 	bl	d8350 <__aeabi_dmul>
   d8e90:	4606      	mov	r6, r0
   d8e92:	4640      	mov	r0, r8
   d8e94:	460f      	mov	r7, r1
   d8e96:	f7ff f9e5 	bl	d8264 <__aeabi_ui2d>
   d8e9a:	4602      	mov	r2, r0
   d8e9c:	460b      	mov	r3, r1
   d8e9e:	4630      	mov	r0, r6
   d8ea0:	4639      	mov	r1, r7
   d8ea2:	f7ff f8a3 	bl	d7fec <__adddf3>
   d8ea6:	4682      	mov	sl, r0
   d8ea8:	468b      	mov	fp, r1
   d8eaa:	2d0f      	cmp	r5, #15
   d8eac:	dc36      	bgt.n	d8f1c <_strtod_r+0x454>
   d8eae:	f1b9 0f00 	cmp.w	r9, #0
   d8eb2:	f000 83d4 	beq.w	d965e <_strtod_r+0xb96>
   d8eb6:	dd24      	ble.n	d8f02 <_strtod_r+0x43a>
   d8eb8:	f1b9 0f16 	cmp.w	r9, #22
   d8ebc:	dc07      	bgt.n	d8ece <_strtod_r+0x406>
   d8ebe:	4d77      	ldr	r5, [pc, #476]	; (d909c <_strtod_r+0x5d4>)
   d8ec0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8ec4:	4652      	mov	r2, sl
   d8ec6:	465b      	mov	r3, fp
   d8ec8:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8ecc:	e014      	b.n	d8ef8 <_strtod_r+0x430>
   d8ece:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8ed2:	4599      	cmp	r9, r3
   d8ed4:	dc22      	bgt.n	d8f1c <_strtod_r+0x454>
   d8ed6:	4c71      	ldr	r4, [pc, #452]	; (d909c <_strtod_r+0x5d4>)
   d8ed8:	f1c5 050f 	rsb	r5, r5, #15
   d8edc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8ee0:	ebc5 0509 	rsb	r5, r5, r9
   d8ee4:	4652      	mov	r2, sl
   d8ee6:	465b      	mov	r3, fp
   d8ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8eec:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8ef0:	f7ff fa2e 	bl	d8350 <__aeabi_dmul>
   d8ef4:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8ef8:	f7ff fa2a 	bl	d8350 <__aeabi_dmul>
   d8efc:	4682      	mov	sl, r0
   d8efe:	468b      	mov	fp, r1
   d8f00:	e3ad      	b.n	d965e <_strtod_r+0xb96>
   d8f02:	f119 0f16 	cmn.w	r9, #22
   d8f06:	db09      	blt.n	d8f1c <_strtod_r+0x454>
   d8f08:	4d64      	ldr	r5, [pc, #400]	; (d909c <_strtod_r+0x5d4>)
   d8f0a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d8f0e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8f12:	4650      	mov	r0, sl
   d8f14:	4659      	mov	r1, fp
   d8f16:	f7ff fb45 	bl	d85a4 <__aeabi_ddiv>
   d8f1a:	e7ef      	b.n	d8efc <_strtod_r+0x434>
   d8f1c:	1b2c      	subs	r4, r5, r4
   d8f1e:	444c      	add	r4, r9
   d8f20:	2c00      	cmp	r4, #0
   d8f22:	dd57      	ble.n	d8fd4 <_strtod_r+0x50c>
   d8f24:	f014 010f 	ands.w	r1, r4, #15
   d8f28:	d00a      	beq.n	d8f40 <_strtod_r+0x478>
   d8f2a:	4b5c      	ldr	r3, [pc, #368]	; (d909c <_strtod_r+0x5d4>)
   d8f2c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8f30:	4652      	mov	r2, sl
   d8f32:	465b      	mov	r3, fp
   d8f34:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8f38:	f7ff fa0a 	bl	d8350 <__aeabi_dmul>
   d8f3c:	4682      	mov	sl, r0
   d8f3e:	468b      	mov	fp, r1
   d8f40:	f034 040f 	bics.w	r4, r4, #15
   d8f44:	f000 80b8 	beq.w	d90b8 <_strtod_r+0x5f0>
   d8f48:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d8f4c:	dd0b      	ble.n	d8f66 <_strtod_r+0x49e>
   d8f4e:	2400      	movs	r4, #0
   d8f50:	4625      	mov	r5, r4
   d8f52:	9405      	str	r4, [sp, #20]
   d8f54:	9404      	str	r4, [sp, #16]
   d8f56:	9a02      	ldr	r2, [sp, #8]
   d8f58:	f8df b150 	ldr.w	fp, [pc, #336]	; d90ac <_strtod_r+0x5e4>
   d8f5c:	2322      	movs	r3, #34	; 0x22
   d8f5e:	6013      	str	r3, [r2, #0]
   d8f60:	f04f 0a00 	mov.w	sl, #0
   d8f64:	e187      	b.n	d9276 <_strtod_r+0x7ae>
   d8f66:	4e4e      	ldr	r6, [pc, #312]	; (d90a0 <_strtod_r+0x5d8>)
   d8f68:	2300      	movs	r3, #0
   d8f6a:	1124      	asrs	r4, r4, #4
   d8f6c:	4650      	mov	r0, sl
   d8f6e:	4659      	mov	r1, fp
   d8f70:	4698      	mov	r8, r3
   d8f72:	4637      	mov	r7, r6
   d8f74:	2c01      	cmp	r4, #1
   d8f76:	dd0b      	ble.n	d8f90 <_strtod_r+0x4c8>
   d8f78:	07e2      	lsls	r2, r4, #31
   d8f7a:	d504      	bpl.n	d8f86 <_strtod_r+0x4be>
   d8f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8f80:	f7ff f9e6 	bl	d8350 <__aeabi_dmul>
   d8f84:	2301      	movs	r3, #1
   d8f86:	f108 0801 	add.w	r8, r8, #1
   d8f8a:	1064      	asrs	r4, r4, #1
   d8f8c:	3608      	adds	r6, #8
   d8f8e:	e7f1      	b.n	d8f74 <_strtod_r+0x4ac>
   d8f90:	b10b      	cbz	r3, d8f96 <_strtod_r+0x4ce>
   d8f92:	4682      	mov	sl, r0
   d8f94:	468b      	mov	fp, r1
   d8f96:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8f9a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d8f9e:	4652      	mov	r2, sl
   d8fa0:	465b      	mov	r3, fp
   d8fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8fa6:	f7ff f9d3 	bl	d8350 <__aeabi_dmul>
   d8faa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8fae:	468b      	mov	fp, r1
   d8fb0:	460a      	mov	r2, r1
   d8fb2:	0d1b      	lsrs	r3, r3, #20
   d8fb4:	493b      	ldr	r1, [pc, #236]	; (d90a4 <_strtod_r+0x5dc>)
   d8fb6:	051b      	lsls	r3, r3, #20
   d8fb8:	428b      	cmp	r3, r1
   d8fba:	4682      	mov	sl, r0
   d8fbc:	d8c7      	bhi.n	d8f4e <_strtod_r+0x486>
   d8fbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8fc2:	428b      	cmp	r3, r1
   d8fc4:	bf86      	itte	hi
   d8fc6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d90b4 <_strtod_r+0x5ec>
   d8fca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d8fce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8fd2:	e071      	b.n	d90b8 <_strtod_r+0x5f0>
   d8fd4:	d070      	beq.n	d90b8 <_strtod_r+0x5f0>
   d8fd6:	4264      	negs	r4, r4
   d8fd8:	f014 020f 	ands.w	r2, r4, #15
   d8fdc:	d00a      	beq.n	d8ff4 <_strtod_r+0x52c>
   d8fde:	4b2f      	ldr	r3, [pc, #188]	; (d909c <_strtod_r+0x5d4>)
   d8fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8fe4:	4650      	mov	r0, sl
   d8fe6:	4659      	mov	r1, fp
   d8fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fec:	f7ff fada 	bl	d85a4 <__aeabi_ddiv>
   d8ff0:	4682      	mov	sl, r0
   d8ff2:	468b      	mov	fp, r1
   d8ff4:	1124      	asrs	r4, r4, #4
   d8ff6:	d05f      	beq.n	d90b8 <_strtod_r+0x5f0>
   d8ff8:	2c1f      	cmp	r4, #31
   d8ffa:	dd04      	ble.n	d9006 <_strtod_r+0x53e>
   d8ffc:	2400      	movs	r4, #0
   d8ffe:	4625      	mov	r5, r4
   d9000:	9405      	str	r4, [sp, #20]
   d9002:	9404      	str	r4, [sp, #16]
   d9004:	e130      	b.n	d9268 <_strtod_r+0x7a0>
   d9006:	f014 0f10 	tst.w	r4, #16
   d900a:	bf0c      	ite	eq
   d900c:	2300      	moveq	r3, #0
   d900e:	236a      	movne	r3, #106	; 0x6a
   d9010:	4e25      	ldr	r6, [pc, #148]	; (d90a8 <_strtod_r+0x5e0>)
   d9012:	9303      	str	r3, [sp, #12]
   d9014:	4650      	mov	r0, sl
   d9016:	4659      	mov	r1, fp
   d9018:	2300      	movs	r3, #0
   d901a:	2c00      	cmp	r4, #0
   d901c:	dd09      	ble.n	d9032 <_strtod_r+0x56a>
   d901e:	07e2      	lsls	r2, r4, #31
   d9020:	d504      	bpl.n	d902c <_strtod_r+0x564>
   d9022:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9026:	f7ff f993 	bl	d8350 <__aeabi_dmul>
   d902a:	2301      	movs	r3, #1
   d902c:	1064      	asrs	r4, r4, #1
   d902e:	3608      	adds	r6, #8
   d9030:	e7f3      	b.n	d901a <_strtod_r+0x552>
   d9032:	b10b      	cbz	r3, d9038 <_strtod_r+0x570>
   d9034:	4682      	mov	sl, r0
   d9036:	468b      	mov	fp, r1
   d9038:	9b03      	ldr	r3, [sp, #12]
   d903a:	b1eb      	cbz	r3, d9078 <_strtod_r+0x5b0>
   d903c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9040:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9044:	2b00      	cmp	r3, #0
   d9046:	4659      	mov	r1, fp
   d9048:	dd16      	ble.n	d9078 <_strtod_r+0x5b0>
   d904a:	2b1f      	cmp	r3, #31
   d904c:	dd0e      	ble.n	d906c <_strtod_r+0x5a4>
   d904e:	2b34      	cmp	r3, #52	; 0x34
   d9050:	bfde      	ittt	le
   d9052:	3b20      	suble	r3, #32
   d9054:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9058:	fa02 f303 	lslle.w	r3, r2, r3
   d905c:	f04f 0a00 	mov.w	sl, #0
   d9060:	bfcc      	ite	gt
   d9062:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9066:	ea03 0b01 	andle.w	fp, r3, r1
   d906a:	e005      	b.n	d9078 <_strtod_r+0x5b0>
   d906c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9070:	fa02 f303 	lsl.w	r3, r2, r3
   d9074:	ea03 0a0a 	and.w	sl, r3, sl
   d9078:	2200      	movs	r2, #0
   d907a:	2300      	movs	r3, #0
   d907c:	4650      	mov	r0, sl
   d907e:	4659      	mov	r1, fp
   d9080:	f7ff fbce 	bl	d8820 <__aeabi_dcmpeq>
   d9084:	2800      	cmp	r0, #0
   d9086:	d1b9      	bne.n	d8ffc <_strtod_r+0x534>
   d9088:	e018      	b.n	d90bc <_strtod_r+0x5f4>
   d908a:	bf00      	nop
   d908c:	000dab80 	.word	0x000dab80
   d9090:	000dab83 	.word	0x000dab83
   d9094:	000dab89 	.word	0x000dab89
   d9098:	000dab6c 	.word	0x000dab6c
   d909c:	000dabb8 	.word	0x000dabb8
   d90a0:	000dac80 	.word	0x000dac80
   d90a4:	7ca00000 	.word	0x7ca00000
   d90a8:	000dab90 	.word	0x000dab90
   d90ac:	7ff00000 	.word	0x7ff00000
   d90b0:	fff80000 	.word	0xfff80000
   d90b4:	7fefffff 	.word	0x7fefffff
   d90b8:	2300      	movs	r3, #0
   d90ba:	9303      	str	r3, [sp, #12]
   d90bc:	9b05      	ldr	r3, [sp, #20]
   d90be:	9300      	str	r3, [sp, #0]
   d90c0:	9a04      	ldr	r2, [sp, #16]
   d90c2:	9907      	ldr	r1, [sp, #28]
   d90c4:	9802      	ldr	r0, [sp, #8]
   d90c6:	462b      	mov	r3, r5
   d90c8:	f000 ff3a 	bl	d9f40 <__s2b>
   d90cc:	9005      	str	r0, [sp, #20]
   d90ce:	2800      	cmp	r0, #0
   d90d0:	f43f af3d 	beq.w	d8f4e <_strtod_r+0x486>
   d90d4:	f1b9 0f00 	cmp.w	r9, #0
   d90d8:	f1c9 0300 	rsb	r3, r9, #0
   d90dc:	bfa8      	it	ge
   d90de:	2300      	movge	r3, #0
   d90e0:	930d      	str	r3, [sp, #52]	; 0x34
   d90e2:	2400      	movs	r4, #0
   d90e4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d90e8:	9312      	str	r3, [sp, #72]	; 0x48
   d90ea:	4625      	mov	r5, r4
   d90ec:	9b05      	ldr	r3, [sp, #20]
   d90ee:	9802      	ldr	r0, [sp, #8]
   d90f0:	6859      	ldr	r1, [r3, #4]
   d90f2:	f000 fe9e 	bl	d9e32 <_Balloc>
   d90f6:	9004      	str	r0, [sp, #16]
   d90f8:	2800      	cmp	r0, #0
   d90fa:	f43f af2c 	beq.w	d8f56 <_strtod_r+0x48e>
   d90fe:	9b05      	ldr	r3, [sp, #20]
   d9100:	691a      	ldr	r2, [r3, #16]
   d9102:	3202      	adds	r2, #2
   d9104:	f103 010c 	add.w	r1, r3, #12
   d9108:	0092      	lsls	r2, r2, #2
   d910a:	300c      	adds	r0, #12
   d910c:	f7ff fc41 	bl	d8992 <memcpy>
   d9110:	aa1a      	add	r2, sp, #104	; 0x68
   d9112:	a919      	add	r1, sp, #100	; 0x64
   d9114:	ec4b ab10 	vmov	d0, sl, fp
   d9118:	9802      	ldr	r0, [sp, #8]
   d911a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d911e:	f001 f9c4 	bl	da4aa <__d2b>
   d9122:	9018      	str	r0, [sp, #96]	; 0x60
   d9124:	2800      	cmp	r0, #0
   d9126:	f43f af16 	beq.w	d8f56 <_strtod_r+0x48e>
   d912a:	2101      	movs	r1, #1
   d912c:	9802      	ldr	r0, [sp, #8]
   d912e:	f000 ff92 	bl	da056 <__i2b>
   d9132:	4605      	mov	r5, r0
   d9134:	2800      	cmp	r0, #0
   d9136:	f43f af0e 	beq.w	d8f56 <_strtod_r+0x48e>
   d913a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d913c:	9903      	ldr	r1, [sp, #12]
   d913e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d9140:	2b00      	cmp	r3, #0
   d9142:	bfad      	iteet	ge
   d9144:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d9146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d9148:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d914c:	eb02 0803 	addge.w	r8, r2, r3
   d9150:	bfb8      	it	lt
   d9152:	1ad2      	sublt	r2, r2, r3
   d9154:	eba3 0301 	sub.w	r3, r3, r1
   d9158:	4433      	add	r3, r6
   d915a:	49b5      	ldr	r1, [pc, #724]	; (d9430 <_strtod_r+0x968>)
   d915c:	bfa8      	it	ge
   d915e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d9160:	3b01      	subs	r3, #1
   d9162:	428b      	cmp	r3, r1
   d9164:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d9168:	f280 808a 	bge.w	d9280 <_strtod_r+0x7b8>
   d916c:	1ac9      	subs	r1, r1, r3
   d916e:	291f      	cmp	r1, #31
   d9170:	bfc8      	it	gt
   d9172:	4fb0      	ldrgt	r7, [pc, #704]	; (d9434 <_strtod_r+0x96c>)
   d9174:	f04f 0901 	mov.w	r9, #1
   d9178:	bfd4      	ite	le
   d917a:	fa09 f301 	lslle.w	r3, r9, r1
   d917e:	1aff      	subgt	r7, r7, r3
   d9180:	eba6 0601 	sub.w	r6, r6, r1
   d9184:	bfd9      	ittee	le
   d9186:	9306      	strle	r3, [sp, #24]
   d9188:	2700      	movle	r7, #0
   d918a:	fa09 f707 	lslgt.w	r7, r9, r7
   d918e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d9192:	eb08 0906 	add.w	r9, r8, r6
   d9196:	9b03      	ldr	r3, [sp, #12]
   d9198:	45c8      	cmp	r8, r9
   d919a:	4416      	add	r6, r2
   d919c:	441e      	add	r6, r3
   d919e:	4643      	mov	r3, r8
   d91a0:	bfa8      	it	ge
   d91a2:	464b      	movge	r3, r9
   d91a4:	42b3      	cmp	r3, r6
   d91a6:	bfa8      	it	ge
   d91a8:	4633      	movge	r3, r6
   d91aa:	2b00      	cmp	r3, #0
   d91ac:	bfc2      	ittt	gt
   d91ae:	ebc3 0909 	rsbgt	r9, r3, r9
   d91b2:	1af6      	subgt	r6, r6, r3
   d91b4:	ebc3 0808 	rsbgt	r8, r3, r8
   d91b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d91ba:	2b00      	cmp	r3, #0
   d91bc:	d164      	bne.n	d9288 <_strtod_r+0x7c0>
   d91be:	f1b9 0f00 	cmp.w	r9, #0
   d91c2:	dc7a      	bgt.n	d92ba <_strtod_r+0x7f2>
   d91c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d91c6:	2b00      	cmp	r3, #0
   d91c8:	f040 8081 	bne.w	d92ce <_strtod_r+0x806>
   d91cc:	2e00      	cmp	r6, #0
   d91ce:	f300 8088 	bgt.w	d92e2 <_strtod_r+0x81a>
   d91d2:	f1b8 0f00 	cmp.w	r8, #0
   d91d6:	f300 808e 	bgt.w	d92f6 <_strtod_r+0x82e>
   d91da:	9a04      	ldr	r2, [sp, #16]
   d91dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d91de:	9802      	ldr	r0, [sp, #8]
   d91e0:	f001 f88f 	bl	da302 <__mdiff>
   d91e4:	4604      	mov	r4, r0
   d91e6:	2800      	cmp	r0, #0
   d91e8:	f43f aeb5 	beq.w	d8f56 <_strtod_r+0x48e>
   d91ec:	68c3      	ldr	r3, [r0, #12]
   d91ee:	9307      	str	r3, [sp, #28]
   d91f0:	2300      	movs	r3, #0
   d91f2:	60c3      	str	r3, [r0, #12]
   d91f4:	4629      	mov	r1, r5
   d91f6:	f001 f868 	bl	da2ca <__mcmp>
   d91fa:	2800      	cmp	r0, #0
   d91fc:	f280 8089 	bge.w	d9312 <_strtod_r+0x84a>
   d9200:	9b07      	ldr	r3, [sp, #28]
   d9202:	2b00      	cmp	r3, #0
   d9204:	f040 8204 	bne.w	d9610 <_strtod_r+0xb48>
   d9208:	f1ba 0f00 	cmp.w	sl, #0
   d920c:	f040 8200 	bne.w	d9610 <_strtod_r+0xb48>
   d9210:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9214:	2b00      	cmp	r3, #0
   d9216:	f040 81fb 	bne.w	d9610 <_strtod_r+0xb48>
   d921a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d921e:	0d1b      	lsrs	r3, r3, #20
   d9220:	051b      	lsls	r3, r3, #20
   d9222:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9226:	f240 81f3 	bls.w	d9610 <_strtod_r+0xb48>
   d922a:	6963      	ldr	r3, [r4, #20]
   d922c:	2b00      	cmp	r3, #0
   d922e:	d06c      	beq.n	d930a <_strtod_r+0x842>
   d9230:	4621      	mov	r1, r4
   d9232:	2201      	movs	r2, #1
   d9234:	9802      	ldr	r0, [sp, #8]
   d9236:	f000 fff7 	bl	da228 <__lshift>
   d923a:	4629      	mov	r1, r5
   d923c:	4604      	mov	r4, r0
   d923e:	f001 f844 	bl	da2ca <__mcmp>
   d9242:	2800      	cmp	r0, #0
   d9244:	f340 81e4 	ble.w	d9610 <_strtod_r+0xb48>
   d9248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d924c:	9a03      	ldr	r2, [sp, #12]
   d924e:	0d1b      	lsrs	r3, r3, #20
   d9250:	051b      	lsls	r3, r3, #20
   d9252:	2a00      	cmp	r2, #0
   d9254:	f000 808c 	beq.w	d9370 <_strtod_r+0x8a8>
   d9258:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d925c:	f300 8088 	bgt.w	d9370 <_strtod_r+0x8a8>
   d9260:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d9264:	f300 81d6 	bgt.w	d9614 <_strtod_r+0xb4c>
   d9268:	9a02      	ldr	r2, [sp, #8]
   d926a:	2322      	movs	r3, #34	; 0x22
   d926c:	f04f 0a00 	mov.w	sl, #0
   d9270:	f04f 0b00 	mov.w	fp, #0
   d9274:	6013      	str	r3, [r2, #0]
   d9276:	9b05      	ldr	r3, [sp, #20]
   d9278:	2b00      	cmp	r3, #0
   d927a:	f040 81dc 	bne.w	d9636 <_strtod_r+0xb6e>
   d927e:	e1ee      	b.n	d965e <_strtod_r+0xb96>
   d9280:	2301      	movs	r3, #1
   d9282:	2700      	movs	r7, #0
   d9284:	9306      	str	r3, [sp, #24]
   d9286:	e784      	b.n	d9192 <_strtod_r+0x6ca>
   d9288:	4629      	mov	r1, r5
   d928a:	461a      	mov	r2, r3
   d928c:	9802      	ldr	r0, [sp, #8]
   d928e:	f000 ff7d 	bl	da18c <__pow5mult>
   d9292:	4605      	mov	r5, r0
   d9294:	2800      	cmp	r0, #0
   d9296:	f43f ae5e 	beq.w	d8f56 <_strtod_r+0x48e>
   d929a:	4601      	mov	r1, r0
   d929c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d929e:	9802      	ldr	r0, [sp, #8]
   d92a0:	f000 fee2 	bl	da068 <__multiply>
   d92a4:	9007      	str	r0, [sp, #28]
   d92a6:	2800      	cmp	r0, #0
   d92a8:	f43f ae55 	beq.w	d8f56 <_strtod_r+0x48e>
   d92ac:	9918      	ldr	r1, [sp, #96]	; 0x60
   d92ae:	9802      	ldr	r0, [sp, #8]
   d92b0:	f000 fdf4 	bl	d9e9c <_Bfree>
   d92b4:	9b07      	ldr	r3, [sp, #28]
   d92b6:	9318      	str	r3, [sp, #96]	; 0x60
   d92b8:	e781      	b.n	d91be <_strtod_r+0x6f6>
   d92ba:	464a      	mov	r2, r9
   d92bc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d92be:	9802      	ldr	r0, [sp, #8]
   d92c0:	f000 ffb2 	bl	da228 <__lshift>
   d92c4:	9018      	str	r0, [sp, #96]	; 0x60
   d92c6:	2800      	cmp	r0, #0
   d92c8:	f47f af7c 	bne.w	d91c4 <_strtod_r+0x6fc>
   d92cc:	e643      	b.n	d8f56 <_strtod_r+0x48e>
   d92ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d92d0:	9904      	ldr	r1, [sp, #16]
   d92d2:	9802      	ldr	r0, [sp, #8]
   d92d4:	f000 ff5a 	bl	da18c <__pow5mult>
   d92d8:	9004      	str	r0, [sp, #16]
   d92da:	2800      	cmp	r0, #0
   d92dc:	f47f af76 	bne.w	d91cc <_strtod_r+0x704>
   d92e0:	e639      	b.n	d8f56 <_strtod_r+0x48e>
   d92e2:	4632      	mov	r2, r6
   d92e4:	9904      	ldr	r1, [sp, #16]
   d92e6:	9802      	ldr	r0, [sp, #8]
   d92e8:	f000 ff9e 	bl	da228 <__lshift>
   d92ec:	9004      	str	r0, [sp, #16]
   d92ee:	2800      	cmp	r0, #0
   d92f0:	f47f af6f 	bne.w	d91d2 <_strtod_r+0x70a>
   d92f4:	e62f      	b.n	d8f56 <_strtod_r+0x48e>
   d92f6:	4629      	mov	r1, r5
   d92f8:	4642      	mov	r2, r8
   d92fa:	9802      	ldr	r0, [sp, #8]
   d92fc:	f000 ff94 	bl	da228 <__lshift>
   d9300:	4605      	mov	r5, r0
   d9302:	2800      	cmp	r0, #0
   d9304:	f47f af69 	bne.w	d91da <_strtod_r+0x712>
   d9308:	e625      	b.n	d8f56 <_strtod_r+0x48e>
   d930a:	6923      	ldr	r3, [r4, #16]
   d930c:	2b01      	cmp	r3, #1
   d930e:	dc8f      	bgt.n	d9230 <_strtod_r+0x768>
   d9310:	e17e      	b.n	d9610 <_strtod_r+0xb48>
   d9312:	d161      	bne.n	d93d8 <_strtod_r+0x910>
   d9314:	9a07      	ldr	r2, [sp, #28]
   d9316:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d931a:	b322      	cbz	r2, d9366 <_strtod_r+0x89e>
   d931c:	4946      	ldr	r1, [pc, #280]	; (d9438 <_strtod_r+0x970>)
   d931e:	428b      	cmp	r3, r1
   d9320:	465a      	mov	r2, fp
   d9322:	d12e      	bne.n	d9382 <_strtod_r+0x8ba>
   d9324:	9b03      	ldr	r3, [sp, #12]
   d9326:	4651      	mov	r1, sl
   d9328:	b163      	cbz	r3, d9344 <_strtod_r+0x87c>
   d932a:	4b44      	ldr	r3, [pc, #272]	; (d943c <_strtod_r+0x974>)
   d932c:	4013      	ands	r3, r2
   d932e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9332:	d807      	bhi.n	d9344 <_strtod_r+0x87c>
   d9334:	0d1b      	lsrs	r3, r3, #20
   d9336:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d933a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d933e:	fa00 f303 	lsl.w	r3, r0, r3
   d9342:	e001      	b.n	d9348 <_strtod_r+0x880>
   d9344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9348:	428b      	cmp	r3, r1
   d934a:	d11a      	bne.n	d9382 <_strtod_r+0x8ba>
   d934c:	493c      	ldr	r1, [pc, #240]	; (d9440 <_strtod_r+0x978>)
   d934e:	428a      	cmp	r2, r1
   d9350:	d102      	bne.n	d9358 <_strtod_r+0x890>
   d9352:	3301      	adds	r3, #1
   d9354:	f43f adff 	beq.w	d8f56 <_strtod_r+0x48e>
   d9358:	4b38      	ldr	r3, [pc, #224]	; (d943c <_strtod_r+0x974>)
   d935a:	4013      	ands	r3, r2
   d935c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9360:	f04f 0a00 	mov.w	sl, #0
   d9364:	e154      	b.n	d9610 <_strtod_r+0xb48>
   d9366:	b963      	cbnz	r3, d9382 <_strtod_r+0x8ba>
   d9368:	f1ba 0f00 	cmp.w	sl, #0
   d936c:	d109      	bne.n	d9382 <_strtod_r+0x8ba>
   d936e:	e76b      	b.n	d9248 <_strtod_r+0x780>
   d9370:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9374:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9378:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d937c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9380:	e146      	b.n	d9610 <_strtod_r+0xb48>
   d9382:	b117      	cbz	r7, d938a <_strtod_r+0x8c2>
   d9384:	ea17 0f0b 	tst.w	r7, fp
   d9388:	e002      	b.n	d9390 <_strtod_r+0x8c8>
   d938a:	9b06      	ldr	r3, [sp, #24]
   d938c:	ea13 0f0a 	tst.w	r3, sl
   d9390:	f000 813e 	beq.w	d9610 <_strtod_r+0xb48>
   d9394:	9b07      	ldr	r3, [sp, #28]
   d9396:	9a03      	ldr	r2, [sp, #12]
   d9398:	4650      	mov	r0, sl
   d939a:	4659      	mov	r1, fp
   d939c:	b153      	cbz	r3, d93b4 <_strtod_r+0x8ec>
   d939e:	f7ff fb76 	bl	d8a8e <sulp>
   d93a2:	4602      	mov	r2, r0
   d93a4:	460b      	mov	r3, r1
   d93a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d93aa:	f7fe fe1f 	bl	d7fec <__adddf3>
   d93ae:	4682      	mov	sl, r0
   d93b0:	468b      	mov	fp, r1
   d93b2:	e12d      	b.n	d9610 <_strtod_r+0xb48>
   d93b4:	f7ff fb6b 	bl	d8a8e <sulp>
   d93b8:	4602      	mov	r2, r0
   d93ba:	460b      	mov	r3, r1
   d93bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d93c0:	f7fe fe12 	bl	d7fe8 <__aeabi_dsub>
   d93c4:	2200      	movs	r2, #0
   d93c6:	2300      	movs	r3, #0
   d93c8:	4682      	mov	sl, r0
   d93ca:	468b      	mov	fp, r1
   d93cc:	f7ff fa28 	bl	d8820 <__aeabi_dcmpeq>
   d93d0:	2800      	cmp	r0, #0
   d93d2:	f47f af49 	bne.w	d9268 <_strtod_r+0x7a0>
   d93d6:	e11b      	b.n	d9610 <_strtod_r+0xb48>
   d93d8:	4629      	mov	r1, r5
   d93da:	4620      	mov	r0, r4
   d93dc:	f001 f8b3 	bl	da546 <__ratio>
   d93e0:	ec57 6b10 	vmov	r6, r7, d0
   d93e4:	2200      	movs	r2, #0
   d93e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d93ea:	ee10 0a10 	vmov	r0, s0
   d93ee:	4639      	mov	r1, r7
   d93f0:	f7ff fa2a 	bl	d8848 <__aeabi_dcmple>
   d93f4:	2800      	cmp	r0, #0
   d93f6:	d042      	beq.n	d947e <_strtod_r+0x9b6>
   d93f8:	9b07      	ldr	r3, [sp, #28]
   d93fa:	b123      	cbz	r3, d9406 <_strtod_r+0x93e>
   d93fc:	f04f 0800 	mov.w	r8, #0
   d9400:	f8df 9040 	ldr.w	r9, [pc, #64]	; d9444 <_strtod_r+0x97c>
   d9404:	e011      	b.n	d942a <_strtod_r+0x962>
   d9406:	f1ba 0f00 	cmp.w	sl, #0
   d940a:	d103      	bne.n	d9414 <_strtod_r+0x94c>
   d940c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9410:	b93b      	cbnz	r3, d9422 <_strtod_r+0x95a>
   d9412:	e01b      	b.n	d944c <_strtod_r+0x984>
   d9414:	f1ba 0f01 	cmp.w	sl, #1
   d9418:	d103      	bne.n	d9422 <_strtod_r+0x95a>
   d941a:	f1bb 0f00 	cmp.w	fp, #0
   d941e:	f43f af23 	beq.w	d9268 <_strtod_r+0x7a0>
   d9422:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9448 <_strtod_r+0x980>
   d9426:	f04f 0800 	mov.w	r8, #0
   d942a:	2600      	movs	r6, #0
   d942c:	4f05      	ldr	r7, [pc, #20]	; (d9444 <_strtod_r+0x97c>)
   d942e:	e039      	b.n	d94a4 <_strtod_r+0x9dc>
   d9430:	fffffc02 	.word	0xfffffc02
   d9434:	fffffbe2 	.word	0xfffffbe2
   d9438:	000fffff 	.word	0x000fffff
   d943c:	7ff00000 	.word	0x7ff00000
   d9440:	7fefffff 	.word	0x7fefffff
   d9444:	3ff00000 	.word	0x3ff00000
   d9448:	bff00000 	.word	0xbff00000
   d944c:	2200      	movs	r2, #0
   d944e:	4b98      	ldr	r3, [pc, #608]	; (d96b0 <_strtod_r+0xbe8>)
   d9450:	4630      	mov	r0, r6
   d9452:	4639      	mov	r1, r7
   d9454:	f7ff f9ee 	bl	d8834 <__aeabi_dcmplt>
   d9458:	b940      	cbnz	r0, d946c <_strtod_r+0x9a4>
   d945a:	4630      	mov	r0, r6
   d945c:	4639      	mov	r1, r7
   d945e:	2200      	movs	r2, #0
   d9460:	4b94      	ldr	r3, [pc, #592]	; (d96b4 <_strtod_r+0xbec>)
   d9462:	f7fe ff75 	bl	d8350 <__aeabi_dmul>
   d9466:	4606      	mov	r6, r0
   d9468:	460f      	mov	r7, r1
   d946a:	e001      	b.n	d9470 <_strtod_r+0x9a8>
   d946c:	4f91      	ldr	r7, [pc, #580]	; (d96b4 <_strtod_r+0xbec>)
   d946e:	2600      	movs	r6, #0
   d9470:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9474:	9614      	str	r6, [sp, #80]	; 0x50
   d9476:	9315      	str	r3, [sp, #84]	; 0x54
   d9478:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d947c:	e012      	b.n	d94a4 <_strtod_r+0x9dc>
   d947e:	4b8d      	ldr	r3, [pc, #564]	; (d96b4 <_strtod_r+0xbec>)
   d9480:	4630      	mov	r0, r6
   d9482:	4639      	mov	r1, r7
   d9484:	2200      	movs	r2, #0
   d9486:	f7fe ff63 	bl	d8350 <__aeabi_dmul>
   d948a:	9b07      	ldr	r3, [sp, #28]
   d948c:	4606      	mov	r6, r0
   d948e:	460f      	mov	r7, r1
   d9490:	b923      	cbnz	r3, d949c <_strtod_r+0x9d4>
   d9492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9496:	900e      	str	r0, [sp, #56]	; 0x38
   d9498:	930f      	str	r3, [sp, #60]	; 0x3c
   d949a:	e001      	b.n	d94a0 <_strtod_r+0x9d8>
   d949c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d94a0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d94a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d94a8:	0d1b      	lsrs	r3, r3, #20
   d94aa:	051b      	lsls	r3, r3, #20
   d94ac:	9306      	str	r3, [sp, #24]
   d94ae:	9a06      	ldr	r2, [sp, #24]
   d94b0:	4b81      	ldr	r3, [pc, #516]	; (d96b8 <_strtod_r+0xbf0>)
   d94b2:	429a      	cmp	r2, r3
   d94b4:	d12b      	bne.n	d950e <_strtod_r+0xa46>
   d94b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d94ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d94be:	ec4b ab10 	vmov	d0, sl, fp
   d94c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d94c6:	f000 ff7b 	bl	da3c0 <__ulp>
   d94ca:	4640      	mov	r0, r8
   d94cc:	ec53 2b10 	vmov	r2, r3, d0
   d94d0:	4649      	mov	r1, r9
   d94d2:	f7fe ff3d 	bl	d8350 <__aeabi_dmul>
   d94d6:	4652      	mov	r2, sl
   d94d8:	465b      	mov	r3, fp
   d94da:	f7fe fd87 	bl	d7fec <__adddf3>
   d94de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d94e2:	0d1b      	lsrs	r3, r3, #20
   d94e4:	4a75      	ldr	r2, [pc, #468]	; (d96bc <_strtod_r+0xbf4>)
   d94e6:	051b      	lsls	r3, r3, #20
   d94e8:	4293      	cmp	r3, r2
   d94ea:	4682      	mov	sl, r0
   d94ec:	d90c      	bls.n	d9508 <_strtod_r+0xa40>
   d94ee:	4b74      	ldr	r3, [pc, #464]	; (d96c0 <_strtod_r+0xbf8>)
   d94f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d94f2:	429a      	cmp	r2, r3
   d94f4:	d103      	bne.n	d94fe <_strtod_r+0xa36>
   d94f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d94f8:	3301      	adds	r3, #1
   d94fa:	f43f ad2c 	beq.w	d8f56 <_strtod_r+0x48e>
   d94fe:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d96c0 <_strtod_r+0xbf8>
   d9502:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9506:	e072      	b.n	d95ee <_strtod_r+0xb26>
   d9508:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d950c:	e038      	b.n	d9580 <_strtod_r+0xab8>
   d950e:	9b03      	ldr	r3, [sp, #12]
   d9510:	b333      	cbz	r3, d9560 <_strtod_r+0xa98>
   d9512:	9b06      	ldr	r3, [sp, #24]
   d9514:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9518:	d822      	bhi.n	d9560 <_strtod_r+0xa98>
   d951a:	a35d      	add	r3, pc, #372	; (adr r3, d9690 <_strtod_r+0xbc8>)
   d951c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9520:	4630      	mov	r0, r6
   d9522:	4639      	mov	r1, r7
   d9524:	f7ff f990 	bl	d8848 <__aeabi_dcmple>
   d9528:	b1a8      	cbz	r0, d9556 <_strtod_r+0xa8e>
   d952a:	4639      	mov	r1, r7
   d952c:	4630      	mov	r0, r6
   d952e:	f7ff f9e7 	bl	d8900 <__aeabi_d2uiz>
   d9532:	2800      	cmp	r0, #0
   d9534:	bf08      	it	eq
   d9536:	2001      	moveq	r0, #1
   d9538:	f7fe fe94 	bl	d8264 <__aeabi_ui2d>
   d953c:	9b07      	ldr	r3, [sp, #28]
   d953e:	4606      	mov	r6, r0
   d9540:	460f      	mov	r7, r1
   d9542:	b923      	cbnz	r3, d954e <_strtod_r+0xa86>
   d9544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9548:	9010      	str	r0, [sp, #64]	; 0x40
   d954a:	9311      	str	r3, [sp, #68]	; 0x44
   d954c:	e001      	b.n	d9552 <_strtod_r+0xa8a>
   d954e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d9552:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d9556:	9a06      	ldr	r2, [sp, #24]
   d9558:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d955c:	ebc2 0903 	rsb	r9, r2, r3
   d9560:	ed9d 0b08 	vldr	d0, [sp, #32]
   d9564:	f000 ff2c 	bl	da3c0 <__ulp>
   d9568:	4640      	mov	r0, r8
   d956a:	ec53 2b10 	vmov	r2, r3, d0
   d956e:	4649      	mov	r1, r9
   d9570:	f7fe feee 	bl	d8350 <__aeabi_dmul>
   d9574:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9578:	f7fe fd38 	bl	d7fec <__adddf3>
   d957c:	4682      	mov	sl, r0
   d957e:	468b      	mov	fp, r1
   d9580:	9b03      	ldr	r3, [sp, #12]
   d9582:	bba3      	cbnz	r3, d95ee <_strtod_r+0xb26>
   d9584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9588:	0d1b      	lsrs	r3, r3, #20
   d958a:	9a06      	ldr	r2, [sp, #24]
   d958c:	051b      	lsls	r3, r3, #20
   d958e:	429a      	cmp	r2, r3
   d9590:	46d8      	mov	r8, fp
   d9592:	d12c      	bne.n	d95ee <_strtod_r+0xb26>
   d9594:	4639      	mov	r1, r7
   d9596:	4630      	mov	r0, r6
   d9598:	f7ff f98a 	bl	d88b0 <__aeabi_d2iz>
   d959c:	f7fe fe72 	bl	d8284 <__aeabi_i2d>
   d95a0:	460b      	mov	r3, r1
   d95a2:	4602      	mov	r2, r0
   d95a4:	4639      	mov	r1, r7
   d95a6:	4630      	mov	r0, r6
   d95a8:	f7fe fd1e 	bl	d7fe8 <__aeabi_dsub>
   d95ac:	9b07      	ldr	r3, [sp, #28]
   d95ae:	4606      	mov	r6, r0
   d95b0:	460f      	mov	r7, r1
   d95b2:	b92b      	cbnz	r3, d95c0 <_strtod_r+0xaf8>
   d95b4:	f1ba 0f00 	cmp.w	sl, #0
   d95b8:	d102      	bne.n	d95c0 <_strtod_r+0xaf8>
   d95ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d95be:	b183      	cbz	r3, d95e2 <_strtod_r+0xb1a>
   d95c0:	a335      	add	r3, pc, #212	; (adr r3, d9698 <_strtod_r+0xbd0>)
   d95c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95c6:	4630      	mov	r0, r6
   d95c8:	4639      	mov	r1, r7
   d95ca:	f7ff f933 	bl	d8834 <__aeabi_dcmplt>
   d95ce:	2800      	cmp	r0, #0
   d95d0:	d131      	bne.n	d9636 <_strtod_r+0xb6e>
   d95d2:	a333      	add	r3, pc, #204	; (adr r3, d96a0 <_strtod_r+0xbd8>)
   d95d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95d8:	4630      	mov	r0, r6
   d95da:	4639      	mov	r1, r7
   d95dc:	f7ff f948 	bl	d8870 <__aeabi_dcmpgt>
   d95e0:	e004      	b.n	d95ec <_strtod_r+0xb24>
   d95e2:	a331      	add	r3, pc, #196	; (adr r3, d96a8 <_strtod_r+0xbe0>)
   d95e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95e8:	f7ff f924 	bl	d8834 <__aeabi_dcmplt>
   d95ec:	bb18      	cbnz	r0, d9636 <_strtod_r+0xb6e>
   d95ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   d95f0:	9802      	ldr	r0, [sp, #8]
   d95f2:	f000 fc53 	bl	d9e9c <_Bfree>
   d95f6:	9904      	ldr	r1, [sp, #16]
   d95f8:	9802      	ldr	r0, [sp, #8]
   d95fa:	f000 fc4f 	bl	d9e9c <_Bfree>
   d95fe:	4629      	mov	r1, r5
   d9600:	9802      	ldr	r0, [sp, #8]
   d9602:	f000 fc4b 	bl	d9e9c <_Bfree>
   d9606:	4621      	mov	r1, r4
   d9608:	9802      	ldr	r0, [sp, #8]
   d960a:	f000 fc47 	bl	d9e9c <_Bfree>
   d960e:	e56d      	b.n	d90ec <_strtod_r+0x624>
   d9610:	9b03      	ldr	r3, [sp, #12]
   d9612:	b183      	cbz	r3, d9636 <_strtod_r+0xb6e>
   d9614:	4b2b      	ldr	r3, [pc, #172]	; (d96c4 <_strtod_r+0xbfc>)
   d9616:	930b      	str	r3, [sp, #44]	; 0x2c
   d9618:	2300      	movs	r3, #0
   d961a:	930a      	str	r3, [sp, #40]	; 0x28
   d961c:	4650      	mov	r0, sl
   d961e:	4659      	mov	r1, fp
   d9620:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9624:	f7fe fe94 	bl	d8350 <__aeabi_dmul>
   d9628:	4682      	mov	sl, r0
   d962a:	468b      	mov	fp, r1
   d962c:	b919      	cbnz	r1, d9636 <_strtod_r+0xb6e>
   d962e:	b910      	cbnz	r0, d9636 <_strtod_r+0xb6e>
   d9630:	9a02      	ldr	r2, [sp, #8]
   d9632:	2322      	movs	r3, #34	; 0x22
   d9634:	6013      	str	r3, [r2, #0]
   d9636:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9638:	9802      	ldr	r0, [sp, #8]
   d963a:	f000 fc2f 	bl	d9e9c <_Bfree>
   d963e:	9904      	ldr	r1, [sp, #16]
   d9640:	9802      	ldr	r0, [sp, #8]
   d9642:	f000 fc2b 	bl	d9e9c <_Bfree>
   d9646:	4629      	mov	r1, r5
   d9648:	9802      	ldr	r0, [sp, #8]
   d964a:	f000 fc27 	bl	d9e9c <_Bfree>
   d964e:	9905      	ldr	r1, [sp, #20]
   d9650:	9802      	ldr	r0, [sp, #8]
   d9652:	f000 fc23 	bl	d9e9c <_Bfree>
   d9656:	4621      	mov	r1, r4
   d9658:	9802      	ldr	r0, [sp, #8]
   d965a:	f000 fc1f 	bl	d9e9c <_Bfree>
   d965e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9660:	b113      	cbz	r3, d9668 <_strtod_r+0xba0>
   d9662:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9666:	6013      	str	r3, [r2, #0]
   d9668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d966a:	b11b      	cbz	r3, d9674 <_strtod_r+0xbac>
   d966c:	4652      	mov	r2, sl
   d966e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9672:	e007      	b.n	d9684 <_strtod_r+0xbbc>
   d9674:	4652      	mov	r2, sl
   d9676:	465b      	mov	r3, fp
   d9678:	e004      	b.n	d9684 <_strtod_r+0xbbc>
   d967a:	2500      	movs	r5, #0
   d967c:	462a      	mov	r2, r5
   d967e:	2101      	movs	r1, #1
   d9680:	f7ff bb41 	b.w	d8d06 <_strtod_r+0x23e>
   d9684:	ec43 2b10 	vmov	d0, r2, r3
   d9688:	b01d      	add	sp, #116	; 0x74
   d968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d968e:	bf00      	nop
   d9690:	ffc00000 	.word	0xffc00000
   d9694:	41dfffff 	.word	0x41dfffff
   d9698:	94a03595 	.word	0x94a03595
   d969c:	3fdfffff 	.word	0x3fdfffff
   d96a0:	35afe535 	.word	0x35afe535
   d96a4:	3fe00000 	.word	0x3fe00000
   d96a8:	94a03595 	.word	0x94a03595
   d96ac:	3fcfffff 	.word	0x3fcfffff
   d96b0:	3ff00000 	.word	0x3ff00000
   d96b4:	3fe00000 	.word	0x3fe00000
   d96b8:	7fe00000 	.word	0x7fe00000
   d96bc:	7c9fffff 	.word	0x7c9fffff
   d96c0:	7fefffff 	.word	0x7fefffff
   d96c4:	39500000 	.word	0x39500000

000d96c8 <strtod>:
   d96c8:	4b02      	ldr	r3, [pc, #8]	; (d96d4 <strtod+0xc>)
   d96ca:	460a      	mov	r2, r1
   d96cc:	4601      	mov	r1, r0
   d96ce:	6818      	ldr	r0, [r3, #0]
   d96d0:	f7ff b9fa 	b.w	d8ac8 <_strtod_r>
   d96d4:	2003e374 	.word	0x2003e374

000d96d8 <_strtol_r>:
   d96d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d96dc:	4680      	mov	r8, r0
   d96de:	4840      	ldr	r0, [pc, #256]	; (d97e0 <_strtol_r+0x108>)
   d96e0:	f8d0 9000 	ldr.w	r9, [r0]
   d96e4:	460f      	mov	r7, r1
   d96e6:	463d      	mov	r5, r7
   d96e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d96ec:	eb09 0004 	add.w	r0, r9, r4
   d96f0:	7840      	ldrb	r0, [r0, #1]
   d96f2:	f000 0008 	and.w	r0, r0, #8
   d96f6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d96fa:	b108      	cbz	r0, d9700 <_strtol_r+0x28>
   d96fc:	462f      	mov	r7, r5
   d96fe:	e7f2      	b.n	d96e6 <_strtol_r+0xe>
   d9700:	2c2d      	cmp	r4, #45	; 0x2d
   d9702:	d103      	bne.n	d970c <_strtol_r+0x34>
   d9704:	1cbd      	adds	r5, r7, #2
   d9706:	787c      	ldrb	r4, [r7, #1]
   d9708:	2601      	movs	r6, #1
   d970a:	e003      	b.n	d9714 <_strtol_r+0x3c>
   d970c:	2c2b      	cmp	r4, #43	; 0x2b
   d970e:	bf04      	itt	eq
   d9710:	787c      	ldrbeq	r4, [r7, #1]
   d9712:	1cbd      	addeq	r5, r7, #2
   d9714:	b113      	cbz	r3, d971c <_strtol_r+0x44>
   d9716:	2b10      	cmp	r3, #16
   d9718:	d10a      	bne.n	d9730 <_strtol_r+0x58>
   d971a:	e05b      	b.n	d97d4 <_strtol_r+0xfc>
   d971c:	2c30      	cmp	r4, #48	; 0x30
   d971e:	d157      	bne.n	d97d0 <_strtol_r+0xf8>
   d9720:	7828      	ldrb	r0, [r5, #0]
   d9722:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9726:	2858      	cmp	r0, #88	; 0x58
   d9728:	d14d      	bne.n	d97c6 <_strtol_r+0xee>
   d972a:	786c      	ldrb	r4, [r5, #1]
   d972c:	2310      	movs	r3, #16
   d972e:	3502      	adds	r5, #2
   d9730:	2e00      	cmp	r6, #0
   d9732:	bf14      	ite	ne
   d9734:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9738:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d973c:	2700      	movs	r7, #0
   d973e:	fbbc faf3 	udiv	sl, ip, r3
   d9742:	4638      	mov	r0, r7
   d9744:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9748:	eb09 0e04 	add.w	lr, r9, r4
   d974c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9750:	f01e 0f04 	tst.w	lr, #4
   d9754:	d001      	beq.n	d975a <_strtol_r+0x82>
   d9756:	3c30      	subs	r4, #48	; 0x30
   d9758:	e00b      	b.n	d9772 <_strtol_r+0x9a>
   d975a:	f01e 0e03 	ands.w	lr, lr, #3
   d975e:	d01b      	beq.n	d9798 <_strtol_r+0xc0>
   d9760:	f1be 0f01 	cmp.w	lr, #1
   d9764:	bf0c      	ite	eq
   d9766:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d976a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d976e:	ebce 0404 	rsb	r4, lr, r4
   d9772:	42a3      	cmp	r3, r4
   d9774:	dd10      	ble.n	d9798 <_strtol_r+0xc0>
   d9776:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d977a:	d00a      	beq.n	d9792 <_strtol_r+0xba>
   d977c:	4550      	cmp	r0, sl
   d977e:	d806      	bhi.n	d978e <_strtol_r+0xb6>
   d9780:	d101      	bne.n	d9786 <_strtol_r+0xae>
   d9782:	4564      	cmp	r4, ip
   d9784:	dc03      	bgt.n	d978e <_strtol_r+0xb6>
   d9786:	fb03 4000 	mla	r0, r3, r0, r4
   d978a:	2701      	movs	r7, #1
   d978c:	e001      	b.n	d9792 <_strtol_r+0xba>
   d978e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9792:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9796:	e7d7      	b.n	d9748 <_strtol_r+0x70>
   d9798:	1c7b      	adds	r3, r7, #1
   d979a:	d10c      	bne.n	d97b6 <_strtol_r+0xde>
   d979c:	2e00      	cmp	r6, #0
   d979e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d97a2:	bf14      	ite	ne
   d97a4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d97a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d97ac:	f8c8 3000 	str.w	r3, [r8]
   d97b0:	b92a      	cbnz	r2, d97be <_strtol_r+0xe6>
   d97b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97b6:	b106      	cbz	r6, d97ba <_strtol_r+0xe2>
   d97b8:	4240      	negs	r0, r0
   d97ba:	b172      	cbz	r2, d97da <_strtol_r+0x102>
   d97bc:	b107      	cbz	r7, d97c0 <_strtol_r+0xe8>
   d97be:	1e69      	subs	r1, r5, #1
   d97c0:	6011      	str	r1, [r2, #0]
   d97c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97c6:	2430      	movs	r4, #48	; 0x30
   d97c8:	2b00      	cmp	r3, #0
   d97ca:	d1b1      	bne.n	d9730 <_strtol_r+0x58>
   d97cc:	2308      	movs	r3, #8
   d97ce:	e7af      	b.n	d9730 <_strtol_r+0x58>
   d97d0:	230a      	movs	r3, #10
   d97d2:	e7ad      	b.n	d9730 <_strtol_r+0x58>
   d97d4:	2c30      	cmp	r4, #48	; 0x30
   d97d6:	d0a3      	beq.n	d9720 <_strtol_r+0x48>
   d97d8:	e7aa      	b.n	d9730 <_strtol_r+0x58>
   d97da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97de:	bf00      	nop
   d97e0:	2003e310 	.word	0x2003e310

000d97e4 <strtol>:
   d97e4:	4613      	mov	r3, r2
   d97e6:	460a      	mov	r2, r1
   d97e8:	4601      	mov	r1, r0
   d97ea:	4802      	ldr	r0, [pc, #8]	; (d97f4 <strtol+0x10>)
   d97ec:	6800      	ldr	r0, [r0, #0]
   d97ee:	f7ff bf73 	b.w	d96d8 <_strtol_r>
   d97f2:	bf00      	nop
   d97f4:	2003e374 	.word	0x2003e374

000d97f8 <rshift>:
   d97f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97fa:	6906      	ldr	r6, [r0, #16]
   d97fc:	114b      	asrs	r3, r1, #5
   d97fe:	42b3      	cmp	r3, r6
   d9800:	f100 0514 	add.w	r5, r0, #20
   d9804:	da27      	bge.n	d9856 <rshift+0x5e>
   d9806:	f011 011f 	ands.w	r1, r1, #31
   d980a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d980e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d9812:	d101      	bne.n	d9818 <rshift+0x20>
   d9814:	4629      	mov	r1, r5
   d9816:	e016      	b.n	d9846 <rshift+0x4e>
   d9818:	1d14      	adds	r4, r2, #4
   d981a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d981e:	f1c1 0e20 	rsb	lr, r1, #32
   d9822:	40ca      	lsrs	r2, r1
   d9824:	462b      	mov	r3, r5
   d9826:	42b4      	cmp	r4, r6
   d9828:	d209      	bcs.n	d983e <rshift+0x46>
   d982a:	6827      	ldr	r7, [r4, #0]
   d982c:	fa07 f70e 	lsl.w	r7, r7, lr
   d9830:	433a      	orrs	r2, r7
   d9832:	f843 2b04 	str.w	r2, [r3], #4
   d9836:	f854 2b04 	ldr.w	r2, [r4], #4
   d983a:	40ca      	lsrs	r2, r1
   d983c:	e7f3      	b.n	d9826 <rshift+0x2e>
   d983e:	601a      	str	r2, [r3, #0]
   d9840:	b152      	cbz	r2, d9858 <rshift+0x60>
   d9842:	3304      	adds	r3, #4
   d9844:	e008      	b.n	d9858 <rshift+0x60>
   d9846:	42b2      	cmp	r2, r6
   d9848:	460b      	mov	r3, r1
   d984a:	d205      	bcs.n	d9858 <rshift+0x60>
   d984c:	f852 3b04 	ldr.w	r3, [r2], #4
   d9850:	f841 3b04 	str.w	r3, [r1], #4
   d9854:	e7f7      	b.n	d9846 <rshift+0x4e>
   d9856:	462b      	mov	r3, r5
   d9858:	1b5b      	subs	r3, r3, r5
   d985a:	109b      	asrs	r3, r3, #2
   d985c:	6103      	str	r3, [r0, #16]
   d985e:	b903      	cbnz	r3, d9862 <rshift+0x6a>
   d9860:	6143      	str	r3, [r0, #20]
   d9862:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9864 <__hexdig_fun>:
   d9864:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9868:	2b09      	cmp	r3, #9
   d986a:	d801      	bhi.n	d9870 <__hexdig_fun+0xc>
   d986c:	3820      	subs	r0, #32
   d986e:	e00a      	b.n	d9886 <__hexdig_fun+0x22>
   d9870:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9874:	2b05      	cmp	r3, #5
   d9876:	d801      	bhi.n	d987c <__hexdig_fun+0x18>
   d9878:	3847      	subs	r0, #71	; 0x47
   d987a:	e004      	b.n	d9886 <__hexdig_fun+0x22>
   d987c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9880:	2b05      	cmp	r3, #5
   d9882:	d802      	bhi.n	d988a <__hexdig_fun+0x26>
   d9884:	3827      	subs	r0, #39	; 0x27
   d9886:	b2c0      	uxtb	r0, r0
   d9888:	4770      	bx	lr
   d988a:	2000      	movs	r0, #0
   d988c:	4770      	bx	lr

000d988e <__gethex>:
   d988e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9892:	b08b      	sub	sp, #44	; 0x2c
   d9894:	468a      	mov	sl, r1
   d9896:	4690      	mov	r8, r2
   d9898:	9306      	str	r3, [sp, #24]
   d989a:	9002      	str	r0, [sp, #8]
   d989c:	f7ff f866 	bl	d896c <_localeconv_r>
   d98a0:	6803      	ldr	r3, [r0, #0]
   d98a2:	9303      	str	r3, [sp, #12]
   d98a4:	4618      	mov	r0, r3
   d98a6:	f7ff f8c9 	bl	d8a3c <strlen>
   d98aa:	9b03      	ldr	r3, [sp, #12]
   d98ac:	9001      	str	r0, [sp, #4]
   d98ae:	4403      	add	r3, r0
   d98b0:	f04f 0b00 	mov.w	fp, #0
   d98b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d98b8:	9307      	str	r3, [sp, #28]
   d98ba:	f8da 3000 	ldr.w	r3, [sl]
   d98be:	3302      	adds	r3, #2
   d98c0:	461f      	mov	r7, r3
   d98c2:	f813 0b01 	ldrb.w	r0, [r3], #1
   d98c6:	2830      	cmp	r0, #48	; 0x30
   d98c8:	d102      	bne.n	d98d0 <__gethex+0x42>
   d98ca:	f10b 0b01 	add.w	fp, fp, #1
   d98ce:	e7f7      	b.n	d98c0 <__gethex+0x32>
   d98d0:	f7ff ffc8 	bl	d9864 <__hexdig_fun>
   d98d4:	4604      	mov	r4, r0
   d98d6:	b9e0      	cbnz	r0, d9912 <__gethex+0x84>
   d98d8:	9a01      	ldr	r2, [sp, #4]
   d98da:	9903      	ldr	r1, [sp, #12]
   d98dc:	4638      	mov	r0, r7
   d98de:	f7ff f8b5 	bl	d8a4c <strncmp>
   d98e2:	2800      	cmp	r0, #0
   d98e4:	d134      	bne.n	d9950 <__gethex+0xc2>
   d98e6:	9b01      	ldr	r3, [sp, #4]
   d98e8:	5cf8      	ldrb	r0, [r7, r3]
   d98ea:	18fe      	adds	r6, r7, r3
   d98ec:	f7ff ffba 	bl	d9864 <__hexdig_fun>
   d98f0:	b380      	cbz	r0, d9954 <__gethex+0xc6>
   d98f2:	4633      	mov	r3, r6
   d98f4:	7818      	ldrb	r0, [r3, #0]
   d98f6:	2830      	cmp	r0, #48	; 0x30
   d98f8:	461f      	mov	r7, r3
   d98fa:	f103 0301 	add.w	r3, r3, #1
   d98fe:	d0f9      	beq.n	d98f4 <__gethex+0x66>
   d9900:	f7ff ffb0 	bl	d9864 <__hexdig_fun>
   d9904:	fab0 f580 	clz	r5, r0
   d9908:	096d      	lsrs	r5, r5, #5
   d990a:	4634      	mov	r4, r6
   d990c:	f04f 0b01 	mov.w	fp, #1
   d9910:	e001      	b.n	d9916 <__gethex+0x88>
   d9912:	2500      	movs	r5, #0
   d9914:	462c      	mov	r4, r5
   d9916:	463a      	mov	r2, r7
   d9918:	4616      	mov	r6, r2
   d991a:	3201      	adds	r2, #1
   d991c:	7830      	ldrb	r0, [r6, #0]
   d991e:	f7ff ffa1 	bl	d9864 <__hexdig_fun>
   d9922:	2800      	cmp	r0, #0
   d9924:	d1f8      	bne.n	d9918 <__gethex+0x8a>
   d9926:	9a01      	ldr	r2, [sp, #4]
   d9928:	9903      	ldr	r1, [sp, #12]
   d992a:	4630      	mov	r0, r6
   d992c:	f7ff f88e 	bl	d8a4c <strncmp>
   d9930:	b950      	cbnz	r0, d9948 <__gethex+0xba>
   d9932:	b954      	cbnz	r4, d994a <__gethex+0xbc>
   d9934:	9b01      	ldr	r3, [sp, #4]
   d9936:	18f4      	adds	r4, r6, r3
   d9938:	4622      	mov	r2, r4
   d993a:	4616      	mov	r6, r2
   d993c:	3201      	adds	r2, #1
   d993e:	7830      	ldrb	r0, [r6, #0]
   d9940:	f7ff ff90 	bl	d9864 <__hexdig_fun>
   d9944:	2800      	cmp	r0, #0
   d9946:	d1f8      	bne.n	d993a <__gethex+0xac>
   d9948:	b134      	cbz	r4, d9958 <__gethex+0xca>
   d994a:	1ba4      	subs	r4, r4, r6
   d994c:	00a4      	lsls	r4, r4, #2
   d994e:	e003      	b.n	d9958 <__gethex+0xca>
   d9950:	463e      	mov	r6, r7
   d9952:	e000      	b.n	d9956 <__gethex+0xc8>
   d9954:	4604      	mov	r4, r0
   d9956:	2501      	movs	r5, #1
   d9958:	7833      	ldrb	r3, [r6, #0]
   d995a:	2b50      	cmp	r3, #80	; 0x50
   d995c:	d001      	beq.n	d9962 <__gethex+0xd4>
   d995e:	2b70      	cmp	r3, #112	; 0x70
   d9960:	d12a      	bne.n	d99b8 <__gethex+0x12a>
   d9962:	7873      	ldrb	r3, [r6, #1]
   d9964:	2b2b      	cmp	r3, #43	; 0x2b
   d9966:	d008      	beq.n	d997a <__gethex+0xec>
   d9968:	2b2d      	cmp	r3, #45	; 0x2d
   d996a:	d003      	beq.n	d9974 <__gethex+0xe6>
   d996c:	1c71      	adds	r1, r6, #1
   d996e:	f04f 0900 	mov.w	r9, #0
   d9972:	e005      	b.n	d9980 <__gethex+0xf2>
   d9974:	f04f 0901 	mov.w	r9, #1
   d9978:	e001      	b.n	d997e <__gethex+0xf0>
   d997a:	f04f 0900 	mov.w	r9, #0
   d997e:	1cb1      	adds	r1, r6, #2
   d9980:	7808      	ldrb	r0, [r1, #0]
   d9982:	f7ff ff6f 	bl	d9864 <__hexdig_fun>
   d9986:	1e43      	subs	r3, r0, #1
   d9988:	b2db      	uxtb	r3, r3
   d998a:	2b18      	cmp	r3, #24
   d998c:	d814      	bhi.n	d99b8 <__gethex+0x12a>
   d998e:	f1a0 0210 	sub.w	r2, r0, #16
   d9992:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9996:	f7ff ff65 	bl	d9864 <__hexdig_fun>
   d999a:	1e43      	subs	r3, r0, #1
   d999c:	b2db      	uxtb	r3, r3
   d999e:	2b18      	cmp	r3, #24
   d99a0:	d804      	bhi.n	d99ac <__gethex+0x11e>
   d99a2:	230a      	movs	r3, #10
   d99a4:	fb03 0202 	mla	r2, r3, r2, r0
   d99a8:	3a10      	subs	r2, #16
   d99aa:	e7f2      	b.n	d9992 <__gethex+0x104>
   d99ac:	f1b9 0f00 	cmp.w	r9, #0
   d99b0:	d000      	beq.n	d99b4 <__gethex+0x126>
   d99b2:	4252      	negs	r2, r2
   d99b4:	4414      	add	r4, r2
   d99b6:	e000      	b.n	d99ba <__gethex+0x12c>
   d99b8:	4631      	mov	r1, r6
   d99ba:	f8ca 1000 	str.w	r1, [sl]
   d99be:	b12d      	cbz	r5, d99cc <__gethex+0x13e>
   d99c0:	f1bb 0f00 	cmp.w	fp, #0
   d99c4:	bf14      	ite	ne
   d99c6:	2000      	movne	r0, #0
   d99c8:	2006      	moveq	r0, #6
   d99ca:	e17c      	b.n	d9cc6 <__gethex+0x438>
   d99cc:	1bf3      	subs	r3, r6, r7
   d99ce:	3b01      	subs	r3, #1
   d99d0:	4629      	mov	r1, r5
   d99d2:	2b07      	cmp	r3, #7
   d99d4:	dd02      	ble.n	d99dc <__gethex+0x14e>
   d99d6:	3101      	adds	r1, #1
   d99d8:	105b      	asrs	r3, r3, #1
   d99da:	e7fa      	b.n	d99d2 <__gethex+0x144>
   d99dc:	9802      	ldr	r0, [sp, #8]
   d99de:	f000 fa28 	bl	d9e32 <_Balloc>
   d99e2:	9b01      	ldr	r3, [sp, #4]
   d99e4:	f100 0a14 	add.w	sl, r0, #20
   d99e8:	f04f 0900 	mov.w	r9, #0
   d99ec:	f1c3 0301 	rsb	r3, r3, #1
   d99f0:	4605      	mov	r5, r0
   d99f2:	f8cd a010 	str.w	sl, [sp, #16]
   d99f6:	46cb      	mov	fp, r9
   d99f8:	9308      	str	r3, [sp, #32]
   d99fa:	42b7      	cmp	r7, r6
   d99fc:	d22f      	bcs.n	d9a5e <__gethex+0x1d0>
   d99fe:	1e73      	subs	r3, r6, #1
   d9a00:	9305      	str	r3, [sp, #20]
   d9a02:	9a07      	ldr	r2, [sp, #28]
   d9a04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9a08:	4293      	cmp	r3, r2
   d9a0a:	d00b      	beq.n	d9a24 <__gethex+0x196>
   d9a0c:	f1bb 0f20 	cmp.w	fp, #32
   d9a10:	d116      	bne.n	d9a40 <__gethex+0x1b2>
   d9a12:	9b04      	ldr	r3, [sp, #16]
   d9a14:	f8c3 9000 	str.w	r9, [r3]
   d9a18:	3304      	adds	r3, #4
   d9a1a:	f04f 0900 	mov.w	r9, #0
   d9a1e:	9304      	str	r3, [sp, #16]
   d9a20:	46cb      	mov	fp, r9
   d9a22:	e00d      	b.n	d9a40 <__gethex+0x1b2>
   d9a24:	9b05      	ldr	r3, [sp, #20]
   d9a26:	9a08      	ldr	r2, [sp, #32]
   d9a28:	4413      	add	r3, r2
   d9a2a:	429f      	cmp	r7, r3
   d9a2c:	d8ee      	bhi.n	d9a0c <__gethex+0x17e>
   d9a2e:	4618      	mov	r0, r3
   d9a30:	9a01      	ldr	r2, [sp, #4]
   d9a32:	9903      	ldr	r1, [sp, #12]
   d9a34:	9309      	str	r3, [sp, #36]	; 0x24
   d9a36:	f7ff f809 	bl	d8a4c <strncmp>
   d9a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9a3c:	b168      	cbz	r0, d9a5a <__gethex+0x1cc>
   d9a3e:	e7e5      	b.n	d9a0c <__gethex+0x17e>
   d9a40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9a44:	f7ff ff0e 	bl	d9864 <__hexdig_fun>
   d9a48:	f000 000f 	and.w	r0, r0, #15
   d9a4c:	fa00 f00b 	lsl.w	r0, r0, fp
   d9a50:	9b05      	ldr	r3, [sp, #20]
   d9a52:	ea49 0900 	orr.w	r9, r9, r0
   d9a56:	f10b 0b04 	add.w	fp, fp, #4
   d9a5a:	461e      	mov	r6, r3
   d9a5c:	e7cd      	b.n	d99fa <__gethex+0x16c>
   d9a5e:	9804      	ldr	r0, [sp, #16]
   d9a60:	f840 9b04 	str.w	r9, [r0], #4
   d9a64:	ebca 0000 	rsb	r0, sl, r0
   d9a68:	1080      	asrs	r0, r0, #2
   d9a6a:	6128      	str	r0, [r5, #16]
   d9a6c:	0147      	lsls	r7, r0, #5
   d9a6e:	4648      	mov	r0, r9
   d9a70:	f000 faa4 	bl	d9fbc <__hi0bits>
   d9a74:	f8d8 6000 	ldr.w	r6, [r8]
   d9a78:	1a38      	subs	r0, r7, r0
   d9a7a:	42b0      	cmp	r0, r6
   d9a7c:	dd26      	ble.n	d9acc <__gethex+0x23e>
   d9a7e:	1b87      	subs	r7, r0, r6
   d9a80:	4639      	mov	r1, r7
   d9a82:	4628      	mov	r0, r5
   d9a84:	f000 fda3 	bl	da5ce <__any_on>
   d9a88:	b1c8      	cbz	r0, d9abe <__gethex+0x230>
   d9a8a:	1e7b      	subs	r3, r7, #1
   d9a8c:	1159      	asrs	r1, r3, #5
   d9a8e:	f003 021f 	and.w	r2, r3, #31
   d9a92:	f04f 0901 	mov.w	r9, #1
   d9a96:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d9a9a:	fa09 f202 	lsl.w	r2, r9, r2
   d9a9e:	420a      	tst	r2, r1
   d9aa0:	d00e      	beq.n	d9ac0 <__gethex+0x232>
   d9aa2:	454b      	cmp	r3, r9
   d9aa4:	dc02      	bgt.n	d9aac <__gethex+0x21e>
   d9aa6:	f04f 0902 	mov.w	r9, #2
   d9aaa:	e009      	b.n	d9ac0 <__gethex+0x232>
   d9aac:	1eb9      	subs	r1, r7, #2
   d9aae:	4628      	mov	r0, r5
   d9ab0:	f000 fd8d 	bl	da5ce <__any_on>
   d9ab4:	2800      	cmp	r0, #0
   d9ab6:	d0f6      	beq.n	d9aa6 <__gethex+0x218>
   d9ab8:	f04f 0903 	mov.w	r9, #3
   d9abc:	e000      	b.n	d9ac0 <__gethex+0x232>
   d9abe:	4681      	mov	r9, r0
   d9ac0:	4639      	mov	r1, r7
   d9ac2:	4628      	mov	r0, r5
   d9ac4:	f7ff fe98 	bl	d97f8 <rshift>
   d9ac8:	443c      	add	r4, r7
   d9aca:	e00c      	b.n	d9ae6 <__gethex+0x258>
   d9acc:	da09      	bge.n	d9ae2 <__gethex+0x254>
   d9ace:	1a37      	subs	r7, r6, r0
   d9ad0:	4629      	mov	r1, r5
   d9ad2:	463a      	mov	r2, r7
   d9ad4:	9802      	ldr	r0, [sp, #8]
   d9ad6:	f000 fba7 	bl	da228 <__lshift>
   d9ada:	1be4      	subs	r4, r4, r7
   d9adc:	4605      	mov	r5, r0
   d9ade:	f100 0a14 	add.w	sl, r0, #20
   d9ae2:	f04f 0900 	mov.w	r9, #0
   d9ae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9aea:	429c      	cmp	r4, r3
   d9aec:	dd08      	ble.n	d9b00 <__gethex+0x272>
   d9aee:	9802      	ldr	r0, [sp, #8]
   d9af0:	4629      	mov	r1, r5
   d9af2:	f000 f9d3 	bl	d9e9c <_Bfree>
   d9af6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9af8:	2300      	movs	r3, #0
   d9afa:	6013      	str	r3, [r2, #0]
   d9afc:	20a3      	movs	r0, #163	; 0xa3
   d9afe:	e0e2      	b.n	d9cc6 <__gethex+0x438>
   d9b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9b04:	4284      	cmp	r4, r0
   d9b06:	da53      	bge.n	d9bb0 <__gethex+0x322>
   d9b08:	1b04      	subs	r4, r0, r4
   d9b0a:	42a6      	cmp	r6, r4
   d9b0c:	dc2e      	bgt.n	d9b6c <__gethex+0x2de>
   d9b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9b12:	2b02      	cmp	r3, #2
   d9b14:	d01a      	beq.n	d9b4c <__gethex+0x2be>
   d9b16:	2b03      	cmp	r3, #3
   d9b18:	d01c      	beq.n	d9b54 <__gethex+0x2c6>
   d9b1a:	2b01      	cmp	r3, #1
   d9b1c:	d11d      	bne.n	d9b5a <__gethex+0x2cc>
   d9b1e:	42a6      	cmp	r6, r4
   d9b20:	d11b      	bne.n	d9b5a <__gethex+0x2cc>
   d9b22:	2e01      	cmp	r6, #1
   d9b24:	dc0b      	bgt.n	d9b3e <__gethex+0x2b0>
   d9b26:	9a06      	ldr	r2, [sp, #24]
   d9b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9b2c:	6013      	str	r3, [r2, #0]
   d9b2e:	2301      	movs	r3, #1
   d9b30:	612b      	str	r3, [r5, #16]
   d9b32:	f8ca 3000 	str.w	r3, [sl]
   d9b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9b38:	2062      	movs	r0, #98	; 0x62
   d9b3a:	601d      	str	r5, [r3, #0]
   d9b3c:	e0c3      	b.n	d9cc6 <__gethex+0x438>
   d9b3e:	1e71      	subs	r1, r6, #1
   d9b40:	4628      	mov	r0, r5
   d9b42:	f000 fd44 	bl	da5ce <__any_on>
   d9b46:	2800      	cmp	r0, #0
   d9b48:	d1ed      	bne.n	d9b26 <__gethex+0x298>
   d9b4a:	e006      	b.n	d9b5a <__gethex+0x2cc>
   d9b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9b4e:	2b00      	cmp	r3, #0
   d9b50:	d0e9      	beq.n	d9b26 <__gethex+0x298>
   d9b52:	e002      	b.n	d9b5a <__gethex+0x2cc>
   d9b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9b56:	2b00      	cmp	r3, #0
   d9b58:	d1e5      	bne.n	d9b26 <__gethex+0x298>
   d9b5a:	9802      	ldr	r0, [sp, #8]
   d9b5c:	4629      	mov	r1, r5
   d9b5e:	f000 f99d 	bl	d9e9c <_Bfree>
   d9b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9b64:	2300      	movs	r3, #0
   d9b66:	6013      	str	r3, [r2, #0]
   d9b68:	2050      	movs	r0, #80	; 0x50
   d9b6a:	e0ac      	b.n	d9cc6 <__gethex+0x438>
   d9b6c:	1e67      	subs	r7, r4, #1
   d9b6e:	f1b9 0f00 	cmp.w	r9, #0
   d9b72:	d106      	bne.n	d9b82 <__gethex+0x2f4>
   d9b74:	b13f      	cbz	r7, d9b86 <__gethex+0x2f8>
   d9b76:	4639      	mov	r1, r7
   d9b78:	4628      	mov	r0, r5
   d9b7a:	f000 fd28 	bl	da5ce <__any_on>
   d9b7e:	4681      	mov	r9, r0
   d9b80:	e001      	b.n	d9b86 <__gethex+0x2f8>
   d9b82:	f04f 0901 	mov.w	r9, #1
   d9b86:	117a      	asrs	r2, r7, #5
   d9b88:	2301      	movs	r3, #1
   d9b8a:	f007 071f 	and.w	r7, r7, #31
   d9b8e:	fa03 f707 	lsl.w	r7, r3, r7
   d9b92:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d9b96:	4621      	mov	r1, r4
   d9b98:	421f      	tst	r7, r3
   d9b9a:	4628      	mov	r0, r5
   d9b9c:	bf18      	it	ne
   d9b9e:	f049 0902 	orrne.w	r9, r9, #2
   d9ba2:	1b36      	subs	r6, r6, r4
   d9ba4:	f7ff fe28 	bl	d97f8 <rshift>
   d9ba8:	2702      	movs	r7, #2
   d9baa:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d9bae:	e000      	b.n	d9bb2 <__gethex+0x324>
   d9bb0:	2701      	movs	r7, #1
   d9bb2:	f1b9 0f00 	cmp.w	r9, #0
   d9bb6:	f000 8081 	beq.w	d9cbc <__gethex+0x42e>
   d9bba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9bbe:	2b02      	cmp	r3, #2
   d9bc0:	d00e      	beq.n	d9be0 <__gethex+0x352>
   d9bc2:	2b03      	cmp	r3, #3
   d9bc4:	d010      	beq.n	d9be8 <__gethex+0x35a>
   d9bc6:	2b01      	cmp	r3, #1
   d9bc8:	d176      	bne.n	d9cb8 <__gethex+0x42a>
   d9bca:	f019 0f02 	tst.w	r9, #2
   d9bce:	d073      	beq.n	d9cb8 <__gethex+0x42a>
   d9bd0:	f8da 0000 	ldr.w	r0, [sl]
   d9bd4:	ea49 0900 	orr.w	r9, r9, r0
   d9bd8:	f019 0f01 	tst.w	r9, #1
   d9bdc:	d107      	bne.n	d9bee <__gethex+0x360>
   d9bde:	e06b      	b.n	d9cb8 <__gethex+0x42a>
   d9be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9be2:	f1c3 0301 	rsb	r3, r3, #1
   d9be6:	9315      	str	r3, [sp, #84]	; 0x54
   d9be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9bea:	2b00      	cmp	r3, #0
   d9bec:	d064      	beq.n	d9cb8 <__gethex+0x42a>
   d9bee:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d9bf2:	f105 0314 	add.w	r3, r5, #20
   d9bf6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d9bfa:	eb03 0109 	add.w	r1, r3, r9
   d9bfe:	2000      	movs	r0, #0
   d9c00:	681a      	ldr	r2, [r3, #0]
   d9c02:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9c06:	d002      	beq.n	d9c0e <__gethex+0x380>
   d9c08:	3201      	adds	r2, #1
   d9c0a:	601a      	str	r2, [r3, #0]
   d9c0c:	e020      	b.n	d9c50 <__gethex+0x3c2>
   d9c0e:	f843 0b04 	str.w	r0, [r3], #4
   d9c12:	4299      	cmp	r1, r3
   d9c14:	d8f4      	bhi.n	d9c00 <__gethex+0x372>
   d9c16:	68ab      	ldr	r3, [r5, #8]
   d9c18:	459a      	cmp	sl, r3
   d9c1a:	db12      	blt.n	d9c42 <__gethex+0x3b4>
   d9c1c:	6869      	ldr	r1, [r5, #4]
   d9c1e:	9802      	ldr	r0, [sp, #8]
   d9c20:	3101      	adds	r1, #1
   d9c22:	f000 f906 	bl	d9e32 <_Balloc>
   d9c26:	692a      	ldr	r2, [r5, #16]
   d9c28:	3202      	adds	r2, #2
   d9c2a:	f105 010c 	add.w	r1, r5, #12
   d9c2e:	4683      	mov	fp, r0
   d9c30:	0092      	lsls	r2, r2, #2
   d9c32:	300c      	adds	r0, #12
   d9c34:	f7fe fead 	bl	d8992 <memcpy>
   d9c38:	4629      	mov	r1, r5
   d9c3a:	9802      	ldr	r0, [sp, #8]
   d9c3c:	f000 f92e 	bl	d9e9c <_Bfree>
   d9c40:	465d      	mov	r5, fp
   d9c42:	692b      	ldr	r3, [r5, #16]
   d9c44:	1c5a      	adds	r2, r3, #1
   d9c46:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d9c4a:	612a      	str	r2, [r5, #16]
   d9c4c:	2201      	movs	r2, #1
   d9c4e:	615a      	str	r2, [r3, #20]
   d9c50:	2f02      	cmp	r7, #2
   d9c52:	f105 0214 	add.w	r2, r5, #20
   d9c56:	d111      	bne.n	d9c7c <__gethex+0x3ee>
   d9c58:	f8d8 3000 	ldr.w	r3, [r8]
   d9c5c:	3b01      	subs	r3, #1
   d9c5e:	429e      	cmp	r6, r3
   d9c60:	d127      	bne.n	d9cb2 <__gethex+0x424>
   d9c62:	1171      	asrs	r1, r6, #5
   d9c64:	2301      	movs	r3, #1
   d9c66:	f006 061f 	and.w	r6, r6, #31
   d9c6a:	fa03 f606 	lsl.w	r6, r3, r6
   d9c6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d9c72:	421e      	tst	r6, r3
   d9c74:	bf0c      	ite	eq
   d9c76:	2702      	moveq	r7, #2
   d9c78:	2701      	movne	r7, #1
   d9c7a:	e01a      	b.n	d9cb2 <__gethex+0x424>
   d9c7c:	692b      	ldr	r3, [r5, #16]
   d9c7e:	459a      	cmp	sl, r3
   d9c80:	da0a      	bge.n	d9c98 <__gethex+0x40a>
   d9c82:	2101      	movs	r1, #1
   d9c84:	4628      	mov	r0, r5
   d9c86:	f7ff fdb7 	bl	d97f8 <rshift>
   d9c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9c8e:	3401      	adds	r4, #1
   d9c90:	429c      	cmp	r4, r3
   d9c92:	f73f af2c 	bgt.w	d9aee <__gethex+0x260>
   d9c96:	e00b      	b.n	d9cb0 <__gethex+0x422>
   d9c98:	f016 061f 	ands.w	r6, r6, #31
   d9c9c:	d008      	beq.n	d9cb0 <__gethex+0x422>
   d9c9e:	4491      	add	r9, r2
   d9ca0:	f1c6 0620 	rsb	r6, r6, #32
   d9ca4:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d9ca8:	f000 f988 	bl	d9fbc <__hi0bits>
   d9cac:	42b0      	cmp	r0, r6
   d9cae:	dbe8      	blt.n	d9c82 <__gethex+0x3f4>
   d9cb0:	2701      	movs	r7, #1
   d9cb2:	f047 0720 	orr.w	r7, r7, #32
   d9cb6:	e001      	b.n	d9cbc <__gethex+0x42e>
   d9cb8:	f047 0710 	orr.w	r7, r7, #16
   d9cbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9cbe:	601d      	str	r5, [r3, #0]
   d9cc0:	9b06      	ldr	r3, [sp, #24]
   d9cc2:	4638      	mov	r0, r7
   d9cc4:	601c      	str	r4, [r3, #0]
   d9cc6:	b00b      	add	sp, #44	; 0x2c
   d9cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9ccc <L_shift>:
   d9ccc:	f1c2 0208 	rsb	r2, r2, #8
   d9cd0:	0092      	lsls	r2, r2, #2
   d9cd2:	b570      	push	{r4, r5, r6, lr}
   d9cd4:	f1c2 0620 	rsb	r6, r2, #32
   d9cd8:	6843      	ldr	r3, [r0, #4]
   d9cda:	6805      	ldr	r5, [r0, #0]
   d9cdc:	fa03 f406 	lsl.w	r4, r3, r6
   d9ce0:	432c      	orrs	r4, r5
   d9ce2:	40d3      	lsrs	r3, r2
   d9ce4:	6004      	str	r4, [r0, #0]
   d9ce6:	f840 3f04 	str.w	r3, [r0, #4]!
   d9cea:	4288      	cmp	r0, r1
   d9cec:	d3f4      	bcc.n	d9cd8 <L_shift+0xc>
   d9cee:	bd70      	pop	{r4, r5, r6, pc}

000d9cf0 <__match>:
   d9cf0:	b530      	push	{r4, r5, lr}
   d9cf2:	6803      	ldr	r3, [r0, #0]
   d9cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9cf8:	3301      	adds	r3, #1
   d9cfa:	b14c      	cbz	r4, d9d10 <__match+0x20>
   d9cfc:	781a      	ldrb	r2, [r3, #0]
   d9cfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9d02:	2d19      	cmp	r5, #25
   d9d04:	bf98      	it	ls
   d9d06:	3220      	addls	r2, #32
   d9d08:	42a2      	cmp	r2, r4
   d9d0a:	d0f3      	beq.n	d9cf4 <__match+0x4>
   d9d0c:	2000      	movs	r0, #0
   d9d0e:	bd30      	pop	{r4, r5, pc}
   d9d10:	6003      	str	r3, [r0, #0]
   d9d12:	2001      	movs	r0, #1
   d9d14:	bd30      	pop	{r4, r5, pc}

000d9d16 <__hexnan>:
   d9d16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d1a:	680b      	ldr	r3, [r1, #0]
   d9d1c:	f8d0 b000 	ldr.w	fp, [r0]
   d9d20:	115e      	asrs	r6, r3, #5
   d9d22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9d26:	f013 031f 	ands.w	r3, r3, #31
   d9d2a:	b085      	sub	sp, #20
   d9d2c:	bf18      	it	ne
   d9d2e:	3604      	addne	r6, #4
   d9d30:	1f35      	subs	r5, r6, #4
   d9d32:	4617      	mov	r7, r2
   d9d34:	2200      	movs	r2, #0
   d9d36:	4682      	mov	sl, r0
   d9d38:	9301      	str	r3, [sp, #4]
   d9d3a:	f846 2c04 	str.w	r2, [r6, #-4]
   d9d3e:	46a8      	mov	r8, r5
   d9d40:	462c      	mov	r4, r5
   d9d42:	9200      	str	r2, [sp, #0]
   d9d44:	4691      	mov	r9, r2
   d9d46:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d9d4a:	2900      	cmp	r1, #0
   d9d4c:	d03c      	beq.n	d9dc8 <__hexnan+0xb2>
   d9d4e:	4608      	mov	r0, r1
   d9d50:	9203      	str	r2, [sp, #12]
   d9d52:	9102      	str	r1, [sp, #8]
   d9d54:	f7ff fd86 	bl	d9864 <__hexdig_fun>
   d9d58:	9a03      	ldr	r2, [sp, #12]
   d9d5a:	bb00      	cbnz	r0, d9d9e <__hexnan+0x88>
   d9d5c:	9902      	ldr	r1, [sp, #8]
   d9d5e:	2920      	cmp	r1, #32
   d9d60:	d816      	bhi.n	d9d90 <__hexnan+0x7a>
   d9d62:	9b00      	ldr	r3, [sp, #0]
   d9d64:	4599      	cmp	r9, r3
   d9d66:	ddee      	ble.n	d9d46 <__hexnan+0x30>
   d9d68:	4544      	cmp	r4, r8
   d9d6a:	d205      	bcs.n	d9d78 <__hexnan+0x62>
   d9d6c:	2a07      	cmp	r2, #7
   d9d6e:	dc03      	bgt.n	d9d78 <__hexnan+0x62>
   d9d70:	4641      	mov	r1, r8
   d9d72:	4620      	mov	r0, r4
   d9d74:	f7ff ffaa 	bl	d9ccc <L_shift>
   d9d78:	42bc      	cmp	r4, r7
   d9d7a:	d923      	bls.n	d9dc4 <__hexnan+0xae>
   d9d7c:	2300      	movs	r3, #0
   d9d7e:	f1a4 0804 	sub.w	r8, r4, #4
   d9d82:	f844 3c04 	str.w	r3, [r4, #-4]
   d9d86:	f8cd 9000 	str.w	r9, [sp]
   d9d8a:	4644      	mov	r4, r8
   d9d8c:	461a      	mov	r2, r3
   d9d8e:	e7da      	b.n	d9d46 <__hexnan+0x30>
   d9d90:	2929      	cmp	r1, #41	; 0x29
   d9d92:	d148      	bne.n	d9e26 <__hexnan+0x110>
   d9d94:	f10b 0301 	add.w	r3, fp, #1
   d9d98:	f8ca 3000 	str.w	r3, [sl]
   d9d9c:	e014      	b.n	d9dc8 <__hexnan+0xb2>
   d9d9e:	3201      	adds	r2, #1
   d9da0:	2a08      	cmp	r2, #8
   d9da2:	f109 0901 	add.w	r9, r9, #1
   d9da6:	dd06      	ble.n	d9db6 <__hexnan+0xa0>
   d9da8:	42bc      	cmp	r4, r7
   d9daa:	d9cc      	bls.n	d9d46 <__hexnan+0x30>
   d9dac:	2300      	movs	r3, #0
   d9dae:	f844 3c04 	str.w	r3, [r4, #-4]
   d9db2:	2201      	movs	r2, #1
   d9db4:	3c04      	subs	r4, #4
   d9db6:	6821      	ldr	r1, [r4, #0]
   d9db8:	f000 000f 	and.w	r0, r0, #15
   d9dbc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9dc0:	6020      	str	r0, [r4, #0]
   d9dc2:	e7c0      	b.n	d9d46 <__hexnan+0x30>
   d9dc4:	2208      	movs	r2, #8
   d9dc6:	e7be      	b.n	d9d46 <__hexnan+0x30>
   d9dc8:	f1b9 0f00 	cmp.w	r9, #0
   d9dcc:	d02b      	beq.n	d9e26 <__hexnan+0x110>
   d9dce:	4544      	cmp	r4, r8
   d9dd0:	d205      	bcs.n	d9dde <__hexnan+0xc8>
   d9dd2:	2a07      	cmp	r2, #7
   d9dd4:	dc03      	bgt.n	d9dde <__hexnan+0xc8>
   d9dd6:	4641      	mov	r1, r8
   d9dd8:	4620      	mov	r0, r4
   d9dda:	f7ff ff77 	bl	d9ccc <L_shift>
   d9dde:	42bc      	cmp	r4, r7
   d9de0:	d90c      	bls.n	d9dfc <__hexnan+0xe6>
   d9de2:	463b      	mov	r3, r7
   d9de4:	f854 2b04 	ldr.w	r2, [r4], #4
   d9de8:	f843 2b04 	str.w	r2, [r3], #4
   d9dec:	42a5      	cmp	r5, r4
   d9dee:	d2f9      	bcs.n	d9de4 <__hexnan+0xce>
   d9df0:	2200      	movs	r2, #0
   d9df2:	f843 2b04 	str.w	r2, [r3], #4
   d9df6:	429d      	cmp	r5, r3
   d9df8:	d2fb      	bcs.n	d9df2 <__hexnan+0xdc>
   d9dfa:	e00b      	b.n	d9e14 <__hexnan+0xfe>
   d9dfc:	9b01      	ldr	r3, [sp, #4]
   d9dfe:	b14b      	cbz	r3, d9e14 <__hexnan+0xfe>
   d9e00:	f1c3 0220 	rsb	r2, r3, #32
   d9e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9e08:	40d3      	lsrs	r3, r2
   d9e0a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9e0e:	4013      	ands	r3, r2
   d9e10:	f846 3c04 	str.w	r3, [r6, #-4]
   d9e14:	682b      	ldr	r3, [r5, #0]
   d9e16:	b943      	cbnz	r3, d9e2a <__hexnan+0x114>
   d9e18:	42bd      	cmp	r5, r7
   d9e1a:	d102      	bne.n	d9e22 <__hexnan+0x10c>
   d9e1c:	2301      	movs	r3, #1
   d9e1e:	602b      	str	r3, [r5, #0]
   d9e20:	e003      	b.n	d9e2a <__hexnan+0x114>
   d9e22:	3d04      	subs	r5, #4
   d9e24:	e7f6      	b.n	d9e14 <__hexnan+0xfe>
   d9e26:	2004      	movs	r0, #4
   d9e28:	e000      	b.n	d9e2c <__hexnan+0x116>
   d9e2a:	2005      	movs	r0, #5
   d9e2c:	b005      	add	sp, #20
   d9e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9e32 <_Balloc>:
   d9e32:	b570      	push	{r4, r5, r6, lr}
   d9e34:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d9e36:	4604      	mov	r4, r0
   d9e38:	460e      	mov	r6, r1
   d9e3a:	b93d      	cbnz	r5, d9e4c <_Balloc+0x1a>
   d9e3c:	2010      	movs	r0, #16
   d9e3e:	f7fb fa33 	bl	d52a8 <malloc>
   d9e42:	6260      	str	r0, [r4, #36]	; 0x24
   d9e44:	6045      	str	r5, [r0, #4]
   d9e46:	6085      	str	r5, [r0, #8]
   d9e48:	6005      	str	r5, [r0, #0]
   d9e4a:	60c5      	str	r5, [r0, #12]
   d9e4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d9e4e:	68eb      	ldr	r3, [r5, #12]
   d9e50:	b143      	cbz	r3, d9e64 <_Balloc+0x32>
   d9e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9e54:	68db      	ldr	r3, [r3, #12]
   d9e56:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d9e5a:	b178      	cbz	r0, d9e7c <_Balloc+0x4a>
   d9e5c:	6802      	ldr	r2, [r0, #0]
   d9e5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d9e62:	e017      	b.n	d9e94 <_Balloc+0x62>
   d9e64:	2221      	movs	r2, #33	; 0x21
   d9e66:	2104      	movs	r1, #4
   d9e68:	4620      	mov	r0, r4
   d9e6a:	f000 fbd2 	bl	da612 <_calloc_r>
   d9e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9e70:	60e8      	str	r0, [r5, #12]
   d9e72:	68db      	ldr	r3, [r3, #12]
   d9e74:	2b00      	cmp	r3, #0
   d9e76:	d1ec      	bne.n	d9e52 <_Balloc+0x20>
   d9e78:	2000      	movs	r0, #0
   d9e7a:	bd70      	pop	{r4, r5, r6, pc}
   d9e7c:	2101      	movs	r1, #1
   d9e7e:	fa01 f506 	lsl.w	r5, r1, r6
   d9e82:	1d6a      	adds	r2, r5, #5
   d9e84:	0092      	lsls	r2, r2, #2
   d9e86:	4620      	mov	r0, r4
   d9e88:	f000 fbc3 	bl	da612 <_calloc_r>
   d9e8c:	2800      	cmp	r0, #0
   d9e8e:	d0f3      	beq.n	d9e78 <_Balloc+0x46>
   d9e90:	6046      	str	r6, [r0, #4]
   d9e92:	6085      	str	r5, [r0, #8]
   d9e94:	2300      	movs	r3, #0
   d9e96:	6103      	str	r3, [r0, #16]
   d9e98:	60c3      	str	r3, [r0, #12]
   d9e9a:	bd70      	pop	{r4, r5, r6, pc}

000d9e9c <_Bfree>:
   d9e9c:	b570      	push	{r4, r5, r6, lr}
   d9e9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d9ea0:	4606      	mov	r6, r0
   d9ea2:	460d      	mov	r5, r1
   d9ea4:	b93c      	cbnz	r4, d9eb6 <_Bfree+0x1a>
   d9ea6:	2010      	movs	r0, #16
   d9ea8:	f7fb f9fe 	bl	d52a8 <malloc>
   d9eac:	6270      	str	r0, [r6, #36]	; 0x24
   d9eae:	6044      	str	r4, [r0, #4]
   d9eb0:	6084      	str	r4, [r0, #8]
   d9eb2:	6004      	str	r4, [r0, #0]
   d9eb4:	60c4      	str	r4, [r0, #12]
   d9eb6:	b13d      	cbz	r5, d9ec8 <_Bfree+0x2c>
   d9eb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9eba:	686a      	ldr	r2, [r5, #4]
   d9ebc:	68db      	ldr	r3, [r3, #12]
   d9ebe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9ec2:	6029      	str	r1, [r5, #0]
   d9ec4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9ec8:	bd70      	pop	{r4, r5, r6, pc}

000d9eca <__multadd>:
   d9eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9ece:	690d      	ldr	r5, [r1, #16]
   d9ed0:	461f      	mov	r7, r3
   d9ed2:	4606      	mov	r6, r0
   d9ed4:	460c      	mov	r4, r1
   d9ed6:	f101 0e14 	add.w	lr, r1, #20
   d9eda:	2300      	movs	r3, #0
   d9edc:	f8de 0000 	ldr.w	r0, [lr]
   d9ee0:	b281      	uxth	r1, r0
   d9ee2:	fb02 7101 	mla	r1, r2, r1, r7
   d9ee6:	0c0f      	lsrs	r7, r1, #16
   d9ee8:	0c00      	lsrs	r0, r0, #16
   d9eea:	fb02 7000 	mla	r0, r2, r0, r7
   d9eee:	b289      	uxth	r1, r1
   d9ef0:	3301      	adds	r3, #1
   d9ef2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9ef6:	429d      	cmp	r5, r3
   d9ef8:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9efc:	f84e 1b04 	str.w	r1, [lr], #4
   d9f00:	dcec      	bgt.n	d9edc <__multadd+0x12>
   d9f02:	b1d7      	cbz	r7, d9f3a <__multadd+0x70>
   d9f04:	68a3      	ldr	r3, [r4, #8]
   d9f06:	429d      	cmp	r5, r3
   d9f08:	db12      	blt.n	d9f30 <__multadd+0x66>
   d9f0a:	6861      	ldr	r1, [r4, #4]
   d9f0c:	4630      	mov	r0, r6
   d9f0e:	3101      	adds	r1, #1
   d9f10:	f7ff ff8f 	bl	d9e32 <_Balloc>
   d9f14:	6922      	ldr	r2, [r4, #16]
   d9f16:	3202      	adds	r2, #2
   d9f18:	f104 010c 	add.w	r1, r4, #12
   d9f1c:	4680      	mov	r8, r0
   d9f1e:	0092      	lsls	r2, r2, #2
   d9f20:	300c      	adds	r0, #12
   d9f22:	f7fe fd36 	bl	d8992 <memcpy>
   d9f26:	4621      	mov	r1, r4
   d9f28:	4630      	mov	r0, r6
   d9f2a:	f7ff ffb7 	bl	d9e9c <_Bfree>
   d9f2e:	4644      	mov	r4, r8
   d9f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d9f34:	3501      	adds	r5, #1
   d9f36:	615f      	str	r7, [r3, #20]
   d9f38:	6125      	str	r5, [r4, #16]
   d9f3a:	4620      	mov	r0, r4
   d9f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9f40 <__s2b>:
   d9f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9f44:	460c      	mov	r4, r1
   d9f46:	4615      	mov	r5, r2
   d9f48:	461f      	mov	r7, r3
   d9f4a:	2209      	movs	r2, #9
   d9f4c:	3308      	adds	r3, #8
   d9f4e:	4606      	mov	r6, r0
   d9f50:	fb93 f3f2 	sdiv	r3, r3, r2
   d9f54:	2100      	movs	r1, #0
   d9f56:	2201      	movs	r2, #1
   d9f58:	429a      	cmp	r2, r3
   d9f5a:	da02      	bge.n	d9f62 <__s2b+0x22>
   d9f5c:	0052      	lsls	r2, r2, #1
   d9f5e:	3101      	adds	r1, #1
   d9f60:	e7fa      	b.n	d9f58 <__s2b+0x18>
   d9f62:	4630      	mov	r0, r6
   d9f64:	f7ff ff65 	bl	d9e32 <_Balloc>
   d9f68:	9b08      	ldr	r3, [sp, #32]
   d9f6a:	6143      	str	r3, [r0, #20]
   d9f6c:	2d09      	cmp	r5, #9
   d9f6e:	f04f 0301 	mov.w	r3, #1
   d9f72:	6103      	str	r3, [r0, #16]
   d9f74:	dd11      	ble.n	d9f9a <__s2b+0x5a>
   d9f76:	f104 0809 	add.w	r8, r4, #9
   d9f7a:	46c1      	mov	r9, r8
   d9f7c:	442c      	add	r4, r5
   d9f7e:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9f82:	4601      	mov	r1, r0
   d9f84:	3b30      	subs	r3, #48	; 0x30
   d9f86:	220a      	movs	r2, #10
   d9f88:	4630      	mov	r0, r6
   d9f8a:	f7ff ff9e 	bl	d9eca <__multadd>
   d9f8e:	45a1      	cmp	r9, r4
   d9f90:	d1f5      	bne.n	d9f7e <__s2b+0x3e>
   d9f92:	eb08 0405 	add.w	r4, r8, r5
   d9f96:	3c08      	subs	r4, #8
   d9f98:	e001      	b.n	d9f9e <__s2b+0x5e>
   d9f9a:	340a      	adds	r4, #10
   d9f9c:	2509      	movs	r5, #9
   d9f9e:	1b2d      	subs	r5, r5, r4
   d9fa0:	1963      	adds	r3, r4, r5
   d9fa2:	429f      	cmp	r7, r3
   d9fa4:	dd08      	ble.n	d9fb8 <__s2b+0x78>
   d9fa6:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9faa:	4601      	mov	r1, r0
   d9fac:	3b30      	subs	r3, #48	; 0x30
   d9fae:	220a      	movs	r2, #10
   d9fb0:	4630      	mov	r0, r6
   d9fb2:	f7ff ff8a 	bl	d9eca <__multadd>
   d9fb6:	e7f3      	b.n	d9fa0 <__s2b+0x60>
   d9fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9fbc <__hi0bits>:
   d9fbc:	0c03      	lsrs	r3, r0, #16
   d9fbe:	041b      	lsls	r3, r3, #16
   d9fc0:	b913      	cbnz	r3, d9fc8 <__hi0bits+0xc>
   d9fc2:	0400      	lsls	r0, r0, #16
   d9fc4:	2310      	movs	r3, #16
   d9fc6:	e000      	b.n	d9fca <__hi0bits+0xe>
   d9fc8:	2300      	movs	r3, #0
   d9fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9fce:	bf04      	itt	eq
   d9fd0:	0200      	lsleq	r0, r0, #8
   d9fd2:	3308      	addeq	r3, #8
   d9fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9fd8:	bf04      	itt	eq
   d9fda:	0100      	lsleq	r0, r0, #4
   d9fdc:	3304      	addeq	r3, #4
   d9fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9fe2:	bf04      	itt	eq
   d9fe4:	0080      	lsleq	r0, r0, #2
   d9fe6:	3302      	addeq	r3, #2
   d9fe8:	2800      	cmp	r0, #0
   d9fea:	db03      	blt.n	d9ff4 <__hi0bits+0x38>
   d9fec:	0042      	lsls	r2, r0, #1
   d9fee:	d503      	bpl.n	d9ff8 <__hi0bits+0x3c>
   d9ff0:	1c58      	adds	r0, r3, #1
   d9ff2:	4770      	bx	lr
   d9ff4:	4618      	mov	r0, r3
   d9ff6:	4770      	bx	lr
   d9ff8:	2020      	movs	r0, #32
   d9ffa:	4770      	bx	lr

000d9ffc <__lo0bits>:
   d9ffc:	6803      	ldr	r3, [r0, #0]
   d9ffe:	f013 0207 	ands.w	r2, r3, #7
   da002:	d00b      	beq.n	da01c <__lo0bits+0x20>
   da004:	07d9      	lsls	r1, r3, #31
   da006:	d422      	bmi.n	da04e <__lo0bits+0x52>
   da008:	079a      	lsls	r2, r3, #30
   da00a:	bf4b      	itete	mi
   da00c:	085b      	lsrmi	r3, r3, #1
   da00e:	089b      	lsrpl	r3, r3, #2
   da010:	6003      	strmi	r3, [r0, #0]
   da012:	6003      	strpl	r3, [r0, #0]
   da014:	bf4c      	ite	mi
   da016:	2001      	movmi	r0, #1
   da018:	2002      	movpl	r0, #2
   da01a:	4770      	bx	lr
   da01c:	b299      	uxth	r1, r3
   da01e:	b909      	cbnz	r1, da024 <__lo0bits+0x28>
   da020:	0c1b      	lsrs	r3, r3, #16
   da022:	2210      	movs	r2, #16
   da024:	f013 0fff 	tst.w	r3, #255	; 0xff
   da028:	bf04      	itt	eq
   da02a:	0a1b      	lsreq	r3, r3, #8
   da02c:	3208      	addeq	r2, #8
   da02e:	0719      	lsls	r1, r3, #28
   da030:	bf04      	itt	eq
   da032:	091b      	lsreq	r3, r3, #4
   da034:	3204      	addeq	r2, #4
   da036:	0799      	lsls	r1, r3, #30
   da038:	bf04      	itt	eq
   da03a:	089b      	lsreq	r3, r3, #2
   da03c:	3202      	addeq	r2, #2
   da03e:	07d9      	lsls	r1, r3, #31
   da040:	d402      	bmi.n	da048 <__lo0bits+0x4c>
   da042:	085b      	lsrs	r3, r3, #1
   da044:	d005      	beq.n	da052 <__lo0bits+0x56>
   da046:	3201      	adds	r2, #1
   da048:	6003      	str	r3, [r0, #0]
   da04a:	4610      	mov	r0, r2
   da04c:	4770      	bx	lr
   da04e:	2000      	movs	r0, #0
   da050:	4770      	bx	lr
   da052:	2020      	movs	r0, #32
   da054:	4770      	bx	lr

000da056 <__i2b>:
   da056:	b510      	push	{r4, lr}
   da058:	460c      	mov	r4, r1
   da05a:	2101      	movs	r1, #1
   da05c:	f7ff fee9 	bl	d9e32 <_Balloc>
   da060:	2201      	movs	r2, #1
   da062:	6144      	str	r4, [r0, #20]
   da064:	6102      	str	r2, [r0, #16]
   da066:	bd10      	pop	{r4, pc}

000da068 <__multiply>:
   da068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da06c:	4614      	mov	r4, r2
   da06e:	690a      	ldr	r2, [r1, #16]
   da070:	6923      	ldr	r3, [r4, #16]
   da072:	429a      	cmp	r2, r3
   da074:	bfb8      	it	lt
   da076:	460b      	movlt	r3, r1
   da078:	4688      	mov	r8, r1
   da07a:	bfbc      	itt	lt
   da07c:	46a0      	movlt	r8, r4
   da07e:	461c      	movlt	r4, r3
   da080:	f8d8 7010 	ldr.w	r7, [r8, #16]
   da084:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da088:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da08c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   da090:	eb07 0609 	add.w	r6, r7, r9
   da094:	429e      	cmp	r6, r3
   da096:	bfc8      	it	gt
   da098:	3101      	addgt	r1, #1
   da09a:	f7ff feca 	bl	d9e32 <_Balloc>
   da09e:	f100 0514 	add.w	r5, r0, #20
   da0a2:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   da0a6:	462b      	mov	r3, r5
   da0a8:	2200      	movs	r2, #0
   da0aa:	4563      	cmp	r3, ip
   da0ac:	d202      	bcs.n	da0b4 <__multiply+0x4c>
   da0ae:	f843 2b04 	str.w	r2, [r3], #4
   da0b2:	e7fa      	b.n	da0aa <__multiply+0x42>
   da0b4:	f104 0214 	add.w	r2, r4, #20
   da0b8:	f108 0114 	add.w	r1, r8, #20
   da0bc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da0c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   da0c4:	9300      	str	r3, [sp, #0]
   da0c6:	9b00      	ldr	r3, [sp, #0]
   da0c8:	9201      	str	r2, [sp, #4]
   da0ca:	4293      	cmp	r3, r2
   da0cc:	d957      	bls.n	da17e <__multiply+0x116>
   da0ce:	f8b2 b000 	ldrh.w	fp, [r2]
   da0d2:	f1bb 0f00 	cmp.w	fp, #0
   da0d6:	d023      	beq.n	da120 <__multiply+0xb8>
   da0d8:	4689      	mov	r9, r1
   da0da:	46ae      	mov	lr, r5
   da0dc:	f04f 0800 	mov.w	r8, #0
   da0e0:	f859 4b04 	ldr.w	r4, [r9], #4
   da0e4:	f8be a000 	ldrh.w	sl, [lr]
   da0e8:	b2a3      	uxth	r3, r4
   da0ea:	fb0b a303 	mla	r3, fp, r3, sl
   da0ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   da0f2:	f8de 4000 	ldr.w	r4, [lr]
   da0f6:	4443      	add	r3, r8
   da0f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   da0fc:	fb0b 840a 	mla	r4, fp, sl, r8
   da100:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   da104:	46f2      	mov	sl, lr
   da106:	b29b      	uxth	r3, r3
   da108:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   da10c:	454f      	cmp	r7, r9
   da10e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   da112:	f84a 3b04 	str.w	r3, [sl], #4
   da116:	d901      	bls.n	da11c <__multiply+0xb4>
   da118:	46d6      	mov	lr, sl
   da11a:	e7e1      	b.n	da0e0 <__multiply+0x78>
   da11c:	f8ce 8004 	str.w	r8, [lr, #4]
   da120:	9b01      	ldr	r3, [sp, #4]
   da122:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   da126:	3204      	adds	r2, #4
   da128:	f1ba 0f00 	cmp.w	sl, #0
   da12c:	d021      	beq.n	da172 <__multiply+0x10a>
   da12e:	682b      	ldr	r3, [r5, #0]
   da130:	462c      	mov	r4, r5
   da132:	4689      	mov	r9, r1
   da134:	f04f 0800 	mov.w	r8, #0
   da138:	f8b9 e000 	ldrh.w	lr, [r9]
   da13c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   da140:	fb0a be0e 	mla	lr, sl, lr, fp
   da144:	44f0      	add	r8, lr
   da146:	46a3      	mov	fp, r4
   da148:	b29b      	uxth	r3, r3
   da14a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   da14e:	f84b 3b04 	str.w	r3, [fp], #4
   da152:	f859 3b04 	ldr.w	r3, [r9], #4
   da156:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   da15a:	0c1b      	lsrs	r3, r3, #16
   da15c:	fb0a e303 	mla	r3, sl, r3, lr
   da160:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   da164:	454f      	cmp	r7, r9
   da166:	ea4f 4813 	mov.w	r8, r3, lsr #16
   da16a:	d901      	bls.n	da170 <__multiply+0x108>
   da16c:	465c      	mov	r4, fp
   da16e:	e7e3      	b.n	da138 <__multiply+0xd0>
   da170:	6063      	str	r3, [r4, #4]
   da172:	3504      	adds	r5, #4
   da174:	e7a7      	b.n	da0c6 <__multiply+0x5e>
   da176:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   da17a:	b913      	cbnz	r3, da182 <__multiply+0x11a>
   da17c:	3e01      	subs	r6, #1
   da17e:	2e00      	cmp	r6, #0
   da180:	dcf9      	bgt.n	da176 <__multiply+0x10e>
   da182:	6106      	str	r6, [r0, #16]
   da184:	b003      	add	sp, #12
   da186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000da18c <__pow5mult>:
   da18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da190:	4615      	mov	r5, r2
   da192:	f012 0203 	ands.w	r2, r2, #3
   da196:	4606      	mov	r6, r0
   da198:	460f      	mov	r7, r1
   da19a:	d007      	beq.n	da1ac <__pow5mult+0x20>
   da19c:	3a01      	subs	r2, #1
   da19e:	4c21      	ldr	r4, [pc, #132]	; (da224 <__pow5mult+0x98>)
   da1a0:	2300      	movs	r3, #0
   da1a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da1a6:	f7ff fe90 	bl	d9eca <__multadd>
   da1aa:	4607      	mov	r7, r0
   da1ac:	10ad      	asrs	r5, r5, #2
   da1ae:	d036      	beq.n	da21e <__pow5mult+0x92>
   da1b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da1b2:	b93c      	cbnz	r4, da1c4 <__pow5mult+0x38>
   da1b4:	2010      	movs	r0, #16
   da1b6:	f7fb f877 	bl	d52a8 <malloc>
   da1ba:	6270      	str	r0, [r6, #36]	; 0x24
   da1bc:	6044      	str	r4, [r0, #4]
   da1be:	6084      	str	r4, [r0, #8]
   da1c0:	6004      	str	r4, [r0, #0]
   da1c2:	60c4      	str	r4, [r0, #12]
   da1c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da1cc:	b94c      	cbnz	r4, da1e2 <__pow5mult+0x56>
   da1ce:	f240 2171 	movw	r1, #625	; 0x271
   da1d2:	4630      	mov	r0, r6
   da1d4:	f7ff ff3f 	bl	da056 <__i2b>
   da1d8:	2300      	movs	r3, #0
   da1da:	f8c8 0008 	str.w	r0, [r8, #8]
   da1de:	4604      	mov	r4, r0
   da1e0:	6003      	str	r3, [r0, #0]
   da1e2:	f04f 0800 	mov.w	r8, #0
   da1e6:	07eb      	lsls	r3, r5, #31
   da1e8:	d50a      	bpl.n	da200 <__pow5mult+0x74>
   da1ea:	4639      	mov	r1, r7
   da1ec:	4622      	mov	r2, r4
   da1ee:	4630      	mov	r0, r6
   da1f0:	f7ff ff3a 	bl	da068 <__multiply>
   da1f4:	4639      	mov	r1, r7
   da1f6:	4681      	mov	r9, r0
   da1f8:	4630      	mov	r0, r6
   da1fa:	f7ff fe4f 	bl	d9e9c <_Bfree>
   da1fe:	464f      	mov	r7, r9
   da200:	106d      	asrs	r5, r5, #1
   da202:	d00c      	beq.n	da21e <__pow5mult+0x92>
   da204:	6820      	ldr	r0, [r4, #0]
   da206:	b108      	cbz	r0, da20c <__pow5mult+0x80>
   da208:	4604      	mov	r4, r0
   da20a:	e7ec      	b.n	da1e6 <__pow5mult+0x5a>
   da20c:	4622      	mov	r2, r4
   da20e:	4621      	mov	r1, r4
   da210:	4630      	mov	r0, r6
   da212:	f7ff ff29 	bl	da068 <__multiply>
   da216:	6020      	str	r0, [r4, #0]
   da218:	f8c0 8000 	str.w	r8, [r0]
   da21c:	e7f4      	b.n	da208 <__pow5mult+0x7c>
   da21e:	4638      	mov	r0, r7
   da220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da224:	000daca8 	.word	0x000daca8

000da228 <__lshift>:
   da228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da22c:	460c      	mov	r4, r1
   da22e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da232:	6926      	ldr	r6, [r4, #16]
   da234:	6849      	ldr	r1, [r1, #4]
   da236:	68a3      	ldr	r3, [r4, #8]
   da238:	4456      	add	r6, sl
   da23a:	4607      	mov	r7, r0
   da23c:	4691      	mov	r9, r2
   da23e:	1c75      	adds	r5, r6, #1
   da240:	42ab      	cmp	r3, r5
   da242:	da02      	bge.n	da24a <__lshift+0x22>
   da244:	3101      	adds	r1, #1
   da246:	005b      	lsls	r3, r3, #1
   da248:	e7fa      	b.n	da240 <__lshift+0x18>
   da24a:	4638      	mov	r0, r7
   da24c:	f7ff fdf1 	bl	d9e32 <_Balloc>
   da250:	2300      	movs	r3, #0
   da252:	4680      	mov	r8, r0
   da254:	f100 0114 	add.w	r1, r0, #20
   da258:	461a      	mov	r2, r3
   da25a:	4553      	cmp	r3, sl
   da25c:	da03      	bge.n	da266 <__lshift+0x3e>
   da25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   da262:	3301      	adds	r3, #1
   da264:	e7f9      	b.n	da25a <__lshift+0x32>
   da266:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   da26a:	6920      	ldr	r0, [r4, #16]
   da26c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   da270:	f019 091f 	ands.w	r9, r9, #31
   da274:	f104 0114 	add.w	r1, r4, #20
   da278:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   da27c:	d014      	beq.n	da2a8 <__lshift+0x80>
   da27e:	f1c9 0c20 	rsb	ip, r9, #32
   da282:	2200      	movs	r2, #0
   da284:	6808      	ldr	r0, [r1, #0]
   da286:	fa00 f009 	lsl.w	r0, r0, r9
   da28a:	4302      	orrs	r2, r0
   da28c:	469a      	mov	sl, r3
   da28e:	f843 2b04 	str.w	r2, [r3], #4
   da292:	f851 2b04 	ldr.w	r2, [r1], #4
   da296:	458e      	cmp	lr, r1
   da298:	fa22 f20c 	lsr.w	r2, r2, ip
   da29c:	d8f2      	bhi.n	da284 <__lshift+0x5c>
   da29e:	f8ca 2004 	str.w	r2, [sl, #4]
   da2a2:	b142      	cbz	r2, da2b6 <__lshift+0x8e>
   da2a4:	1cb5      	adds	r5, r6, #2
   da2a6:	e006      	b.n	da2b6 <__lshift+0x8e>
   da2a8:	3b04      	subs	r3, #4
   da2aa:	f851 2b04 	ldr.w	r2, [r1], #4
   da2ae:	f843 2f04 	str.w	r2, [r3, #4]!
   da2b2:	458e      	cmp	lr, r1
   da2b4:	d8f9      	bhi.n	da2aa <__lshift+0x82>
   da2b6:	3d01      	subs	r5, #1
   da2b8:	4638      	mov	r0, r7
   da2ba:	f8c8 5010 	str.w	r5, [r8, #16]
   da2be:	4621      	mov	r1, r4
   da2c0:	f7ff fdec 	bl	d9e9c <_Bfree>
   da2c4:	4640      	mov	r0, r8
   da2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da2ca <__mcmp>:
   da2ca:	6903      	ldr	r3, [r0, #16]
   da2cc:	690a      	ldr	r2, [r1, #16]
   da2ce:	1a9b      	subs	r3, r3, r2
   da2d0:	b510      	push	{r4, lr}
   da2d2:	d111      	bne.n	da2f8 <__mcmp+0x2e>
   da2d4:	0092      	lsls	r2, r2, #2
   da2d6:	3014      	adds	r0, #20
   da2d8:	3114      	adds	r1, #20
   da2da:	1883      	adds	r3, r0, r2
   da2dc:	440a      	add	r2, r1
   da2de:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   da2e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   da2e6:	428c      	cmp	r4, r1
   da2e8:	d002      	beq.n	da2f0 <__mcmp+0x26>
   da2ea:	d307      	bcc.n	da2fc <__mcmp+0x32>
   da2ec:	2001      	movs	r0, #1
   da2ee:	bd10      	pop	{r4, pc}
   da2f0:	4298      	cmp	r0, r3
   da2f2:	d3f4      	bcc.n	da2de <__mcmp+0x14>
   da2f4:	2000      	movs	r0, #0
   da2f6:	bd10      	pop	{r4, pc}
   da2f8:	4618      	mov	r0, r3
   da2fa:	bd10      	pop	{r4, pc}
   da2fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da300:	bd10      	pop	{r4, pc}

000da302 <__mdiff>:
   da302:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da306:	460c      	mov	r4, r1
   da308:	4607      	mov	r7, r0
   da30a:	4611      	mov	r1, r2
   da30c:	4620      	mov	r0, r4
   da30e:	4615      	mov	r5, r2
   da310:	f7ff ffdb 	bl	da2ca <__mcmp>
   da314:	1e06      	subs	r6, r0, #0
   da316:	d108      	bne.n	da32a <__mdiff+0x28>
   da318:	4631      	mov	r1, r6
   da31a:	4638      	mov	r0, r7
   da31c:	f7ff fd89 	bl	d9e32 <_Balloc>
   da320:	2301      	movs	r3, #1
   da322:	6103      	str	r3, [r0, #16]
   da324:	6146      	str	r6, [r0, #20]
   da326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da32a:	bfbc      	itt	lt
   da32c:	4623      	movlt	r3, r4
   da32e:	462c      	movlt	r4, r5
   da330:	4638      	mov	r0, r7
   da332:	6861      	ldr	r1, [r4, #4]
   da334:	bfba      	itte	lt
   da336:	461d      	movlt	r5, r3
   da338:	2601      	movlt	r6, #1
   da33a:	2600      	movge	r6, #0
   da33c:	f7ff fd79 	bl	d9e32 <_Balloc>
   da340:	692b      	ldr	r3, [r5, #16]
   da342:	60c6      	str	r6, [r0, #12]
   da344:	6926      	ldr	r6, [r4, #16]
   da346:	f105 0914 	add.w	r9, r5, #20
   da34a:	3414      	adds	r4, #20
   da34c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   da350:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   da354:	f100 0514 	add.w	r5, r0, #20
   da358:	f04f 0c00 	mov.w	ip, #0
   da35c:	f854 3b04 	ldr.w	r3, [r4], #4
   da360:	f859 2b04 	ldr.w	r2, [r9], #4
   da364:	fa1c f183 	uxtah	r1, ip, r3
   da368:	fa1f fe82 	uxth.w	lr, r2
   da36c:	0c12      	lsrs	r2, r2, #16
   da36e:	ebce 0101 	rsb	r1, lr, r1
   da372:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   da376:	eb03 4321 	add.w	r3, r3, r1, asr #16
   da37a:	b289      	uxth	r1, r1
   da37c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da380:	45c8      	cmp	r8, r9
   da382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   da386:	46a6      	mov	lr, r4
   da388:	f845 3b04 	str.w	r3, [r5], #4
   da38c:	d8e6      	bhi.n	da35c <__mdiff+0x5a>
   da38e:	45be      	cmp	lr, r7
   da390:	d20e      	bcs.n	da3b0 <__mdiff+0xae>
   da392:	f85e 1b04 	ldr.w	r1, [lr], #4
   da396:	fa1c f281 	uxtah	r2, ip, r1
   da39a:	1413      	asrs	r3, r2, #16
   da39c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   da3a0:	b292      	uxth	r2, r2
   da3a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   da3a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da3aa:	f845 2b04 	str.w	r2, [r5], #4
   da3ae:	e7ee      	b.n	da38e <__mdiff+0x8c>
   da3b0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   da3b4:	b90b      	cbnz	r3, da3ba <__mdiff+0xb8>
   da3b6:	3e01      	subs	r6, #1
   da3b8:	e7fa      	b.n	da3b0 <__mdiff+0xae>
   da3ba:	6106      	str	r6, [r0, #16]
   da3bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da3c0 <__ulp>:
   da3c0:	4b12      	ldr	r3, [pc, #72]	; (da40c <__ulp+0x4c>)
   da3c2:	ee10 2a90 	vmov	r2, s1
   da3c6:	401a      	ands	r2, r3
   da3c8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   da3cc:	2b00      	cmp	r3, #0
   da3ce:	dd02      	ble.n	da3d6 <__ulp+0x16>
   da3d0:	2000      	movs	r0, #0
   da3d2:	4619      	mov	r1, r3
   da3d4:	e017      	b.n	da406 <__ulp+0x46>
   da3d6:	425b      	negs	r3, r3
   da3d8:	151b      	asrs	r3, r3, #20
   da3da:	2b13      	cmp	r3, #19
   da3dc:	f04f 0000 	mov.w	r0, #0
   da3e0:	f04f 0100 	mov.w	r1, #0
   da3e4:	dc04      	bgt.n	da3f0 <__ulp+0x30>
   da3e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   da3ea:	fa42 f103 	asr.w	r1, r2, r3
   da3ee:	e00a      	b.n	da406 <__ulp+0x46>
   da3f0:	3b14      	subs	r3, #20
   da3f2:	2b1e      	cmp	r3, #30
   da3f4:	f04f 0201 	mov.w	r2, #1
   da3f8:	bfda      	itte	le
   da3fa:	f1c3 031f 	rsble	r3, r3, #31
   da3fe:	fa02 f303 	lslle.w	r3, r2, r3
   da402:	4613      	movgt	r3, r2
   da404:	4618      	mov	r0, r3
   da406:	ec41 0b10 	vmov	d0, r0, r1
   da40a:	4770      	bx	lr
   da40c:	7ff00000 	.word	0x7ff00000

000da410 <__b2d>:
   da410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da412:	6905      	ldr	r5, [r0, #16]
   da414:	f100 0614 	add.w	r6, r0, #20
   da418:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   da41c:	1f2f      	subs	r7, r5, #4
   da41e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da422:	4620      	mov	r0, r4
   da424:	f7ff fdca 	bl	d9fbc <__hi0bits>
   da428:	f1c0 0320 	rsb	r3, r0, #32
   da42c:	280a      	cmp	r0, #10
   da42e:	600b      	str	r3, [r1, #0]
   da430:	dc14      	bgt.n	da45c <__b2d+0x4c>
   da432:	f1c0 0e0b 	rsb	lr, r0, #11
   da436:	fa24 f10e 	lsr.w	r1, r4, lr
   da43a:	42be      	cmp	r6, r7
   da43c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   da440:	bf34      	ite	cc
   da442:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da446:	2100      	movcs	r1, #0
   da448:	3015      	adds	r0, #21
   da44a:	fa04 f000 	lsl.w	r0, r4, r0
   da44e:	fa21 f10e 	lsr.w	r1, r1, lr
   da452:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da456:	ea40 0201 	orr.w	r2, r0, r1
   da45a:	e023      	b.n	da4a4 <__b2d+0x94>
   da45c:	42be      	cmp	r6, r7
   da45e:	bf3a      	itte	cc
   da460:	f1a5 0708 	subcc.w	r7, r5, #8
   da464:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da468:	2100      	movcs	r1, #0
   da46a:	380b      	subs	r0, #11
   da46c:	d015      	beq.n	da49a <__b2d+0x8a>
   da46e:	4084      	lsls	r4, r0
   da470:	f1c0 0520 	rsb	r5, r0, #32
   da474:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   da478:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   da47c:	42b7      	cmp	r7, r6
   da47e:	fa21 fe05 	lsr.w	lr, r1, r5
   da482:	ea44 030e 	orr.w	r3, r4, lr
   da486:	bf8c      	ite	hi
   da488:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   da48c:	2400      	movls	r4, #0
   da48e:	fa01 f000 	lsl.w	r0, r1, r0
   da492:	40ec      	lsrs	r4, r5
   da494:	ea40 0204 	orr.w	r2, r0, r4
   da498:	e004      	b.n	da4a4 <__b2d+0x94>
   da49a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   da49e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da4a2:	460a      	mov	r2, r1
   da4a4:	ec43 2b10 	vmov	d0, r2, r3
   da4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da4aa <__d2b>:
   da4aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da4ae:	460e      	mov	r6, r1
   da4b0:	2101      	movs	r1, #1
   da4b2:	ec59 8b10 	vmov	r8, r9, d0
   da4b6:	4615      	mov	r5, r2
   da4b8:	f7ff fcbb 	bl	d9e32 <_Balloc>
   da4bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
   da4c0:	4607      	mov	r7, r0
   da4c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   da4c6:	b10c      	cbz	r4, da4cc <__d2b+0x22>
   da4c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da4cc:	9301      	str	r3, [sp, #4]
   da4ce:	f1b8 0f00 	cmp.w	r8, #0
   da4d2:	d019      	beq.n	da508 <__d2b+0x5e>
   da4d4:	a802      	add	r0, sp, #8
   da4d6:	f840 8d08 	str.w	r8, [r0, #-8]!
   da4da:	f7ff fd8f 	bl	d9ffc <__lo0bits>
   da4de:	9b00      	ldr	r3, [sp, #0]
   da4e0:	b148      	cbz	r0, da4f6 <__d2b+0x4c>
   da4e2:	9a01      	ldr	r2, [sp, #4]
   da4e4:	f1c0 0120 	rsb	r1, r0, #32
   da4e8:	fa02 f101 	lsl.w	r1, r2, r1
   da4ec:	430b      	orrs	r3, r1
   da4ee:	40c2      	lsrs	r2, r0
   da4f0:	617b      	str	r3, [r7, #20]
   da4f2:	9201      	str	r2, [sp, #4]
   da4f4:	e000      	b.n	da4f8 <__d2b+0x4e>
   da4f6:	617b      	str	r3, [r7, #20]
   da4f8:	9b01      	ldr	r3, [sp, #4]
   da4fa:	61bb      	str	r3, [r7, #24]
   da4fc:	2b00      	cmp	r3, #0
   da4fe:	bf14      	ite	ne
   da500:	2102      	movne	r1, #2
   da502:	2101      	moveq	r1, #1
   da504:	6139      	str	r1, [r7, #16]
   da506:	e007      	b.n	da518 <__d2b+0x6e>
   da508:	a801      	add	r0, sp, #4
   da50a:	f7ff fd77 	bl	d9ffc <__lo0bits>
   da50e:	9b01      	ldr	r3, [sp, #4]
   da510:	617b      	str	r3, [r7, #20]
   da512:	2101      	movs	r1, #1
   da514:	6139      	str	r1, [r7, #16]
   da516:	3020      	adds	r0, #32
   da518:	b134      	cbz	r4, da528 <__d2b+0x7e>
   da51a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   da51e:	4404      	add	r4, r0
   da520:	6034      	str	r4, [r6, #0]
   da522:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da526:	e009      	b.n	da53c <__d2b+0x92>
   da528:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   da52c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da530:	6030      	str	r0, [r6, #0]
   da532:	6918      	ldr	r0, [r3, #16]
   da534:	f7ff fd42 	bl	d9fbc <__hi0bits>
   da538:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da53c:	6028      	str	r0, [r5, #0]
   da53e:	4638      	mov	r0, r7
   da540:	b003      	add	sp, #12
   da542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da546 <__ratio>:
   da546:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da54a:	4688      	mov	r8, r1
   da54c:	4669      	mov	r1, sp
   da54e:	4681      	mov	r9, r0
   da550:	f7ff ff5e 	bl	da410 <__b2d>
   da554:	a901      	add	r1, sp, #4
   da556:	4640      	mov	r0, r8
   da558:	ec55 4b10 	vmov	r4, r5, d0
   da55c:	f7ff ff58 	bl	da410 <__b2d>
   da560:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da564:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da568:	1a9a      	subs	r2, r3, r2
   da56a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da56e:	1ac9      	subs	r1, r1, r3
   da570:	ec57 6b10 	vmov	r6, r7, d0
   da574:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da578:	2b00      	cmp	r3, #0
   da57a:	bfcc      	ite	gt
   da57c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da580:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da584:	4632      	mov	r2, r6
   da586:	463b      	mov	r3, r7
   da588:	4620      	mov	r0, r4
   da58a:	4629      	mov	r1, r5
   da58c:	f7fe f80a 	bl	d85a4 <__aeabi_ddiv>
   da590:	ec41 0b10 	vmov	d0, r0, r1
   da594:	b003      	add	sp, #12
   da596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da59a <__copybits>:
   da59a:	3901      	subs	r1, #1
   da59c:	b510      	push	{r4, lr}
   da59e:	1149      	asrs	r1, r1, #5
   da5a0:	6914      	ldr	r4, [r2, #16]
   da5a2:	3101      	adds	r1, #1
   da5a4:	f102 0314 	add.w	r3, r2, #20
   da5a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da5ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da5b0:	42a3      	cmp	r3, r4
   da5b2:	4602      	mov	r2, r0
   da5b4:	d204      	bcs.n	da5c0 <__copybits+0x26>
   da5b6:	f853 2b04 	ldr.w	r2, [r3], #4
   da5ba:	f840 2b04 	str.w	r2, [r0], #4
   da5be:	e7f7      	b.n	da5b0 <__copybits+0x16>
   da5c0:	2300      	movs	r3, #0
   da5c2:	428a      	cmp	r2, r1
   da5c4:	d202      	bcs.n	da5cc <__copybits+0x32>
   da5c6:	f842 3b04 	str.w	r3, [r2], #4
   da5ca:	e7fa      	b.n	da5c2 <__copybits+0x28>
   da5cc:	bd10      	pop	{r4, pc}

000da5ce <__any_on>:
   da5ce:	f100 0214 	add.w	r2, r0, #20
   da5d2:	6900      	ldr	r0, [r0, #16]
   da5d4:	114b      	asrs	r3, r1, #5
   da5d6:	4298      	cmp	r0, r3
   da5d8:	b510      	push	{r4, lr}
   da5da:	db0c      	blt.n	da5f6 <__any_on+0x28>
   da5dc:	dd0c      	ble.n	da5f8 <__any_on+0x2a>
   da5de:	f011 011f 	ands.w	r1, r1, #31
   da5e2:	d009      	beq.n	da5f8 <__any_on+0x2a>
   da5e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da5e8:	fa24 f001 	lsr.w	r0, r4, r1
   da5ec:	fa00 f101 	lsl.w	r1, r0, r1
   da5f0:	428c      	cmp	r4, r1
   da5f2:	d10c      	bne.n	da60e <__any_on+0x40>
   da5f4:	e000      	b.n	da5f8 <__any_on+0x2a>
   da5f6:	4603      	mov	r3, r0
   da5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da5fc:	4293      	cmp	r3, r2
   da5fe:	d904      	bls.n	da60a <__any_on+0x3c>
   da600:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da604:	2900      	cmp	r1, #0
   da606:	d0f9      	beq.n	da5fc <__any_on+0x2e>
   da608:	e001      	b.n	da60e <__any_on+0x40>
   da60a:	2000      	movs	r0, #0
   da60c:	bd10      	pop	{r4, pc}
   da60e:	2001      	movs	r0, #1
   da610:	bd10      	pop	{r4, pc}

000da612 <_calloc_r>:
   da612:	b538      	push	{r3, r4, r5, lr}
   da614:	fb02 f401 	mul.w	r4, r2, r1
   da618:	4621      	mov	r1, r4
   da61a:	f7fa fe65 	bl	d52e8 <_malloc_r>
   da61e:	4605      	mov	r5, r0
   da620:	b118      	cbz	r0, da62a <_calloc_r+0x18>
   da622:	4622      	mov	r2, r4
   da624:	2100      	movs	r1, #0
   da626:	f7fe f9bf 	bl	d89a8 <memset>
   da62a:	4628      	mov	r0, r5
   da62c:	bd38      	pop	{r3, r4, r5, pc}

000da62e <link_code_end>:
	...

000da630 <dynalib_user>:
   da630:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   da640:	0000 0000 6f6e 742d 6e6f 0065 6573 4d74     ....no-tone.setM
   da650:	646f 0065 6f6d 6564 0000 0000 c000 4001     ode.mode.......@
   da660:	1000 4002 2000 4002                         ...@. .@

000da668 <CSWTCH.68>:
   da668:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   da678:	0050 0000                                   P...

000da67c <_ZTVN5spark13EthernetClassE>:
	...
   da684:	53d9 000d 53cf 000d 53c5 000d 53bb 000d     .S...S...S...S..
   da694:	53af 000d 53a3 000d 5397 000d 538f 000d     .S...S...S...S..
   da6a4:	5385 000d 537b 000d 5b71 000d               .S..{S..q[..

000da6b0 <_ZTV7TwoWire>:
	...
   da6b8:	53f9 000d 5443 000d 541b 000d 53fb 000d     .S..CT...T...S..
   da6c8:	5423 000d 542b 000d 5433 000d 543b 000d     #T..+T..3T..;T..

000da6d8 <_ZTV9IPAddress>:
	...
   da6e0:	548b 000d 547d 000d 547f 000d 6e6c 6600     .T..}T...T..ln.f
   da6f0:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   da700:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   da710:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   da720:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   da730:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   da740:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   da750:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   da760:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   da770:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   da780:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   da790:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   da7a0:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   da7b0:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   da7c0:	696e 0063 6c61 006c                         nic.all.

000da7c8 <_ZTVN5spark9MeshClassE>:
	...
   da7d0:	5625 000d 561b 000d 5611 000d 5607 000d     %V...V...V...V..
   da7e0:	55fb 000d 55ef 000d 55e3 000d 55db 000d     .U...U...U...U..
   da7f0:	55d1 000d 55c7 000d 5b71 000d 6666 3330     .U...U..q[..ff03
   da800:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   da810:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   da820:	2065 6170 6b63 7465 2520 0064               e packet %d.

000da82c <_ZTVN5spark12NetworkClassE>:
	...
   da834:	5b09 000d 5b13 000d 5b1d 000d 5b27 000d     .[...[...[..'[..
   da844:	5b31 000d 5b3d 000d 5b49 000d 5b55 000d     1[..=[..I[..U[..
   da854:	5b5d 000d 5b67 000d 5b71 000d               ][..g[..q[..

000da860 <_ZTV8SPIClass>:
	...
   da868:	5d0d 000d 5d0f 000d                         .]...]..

000da870 <_ZTV21StringPrintableHelper>:
	...
   da878:	5d4b 000d 5d4d 000d 5e9d 000d 5e6f 000d     K]..M]...^..o^..
   da888:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   da898:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   da8a8:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   da8b8:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   da8c8:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   da8d8:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   da8e8:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   da8f8:	6425 0000                                   %d..

000da8fc <_ZTV3UDP>:
	...
   da904:	6605 000d 6629 000d 5f35 000d 605f 000d     .f..)f..5_.._`..
   da914:	5f2d 000d 5f4b 000d 5f69 000d 5f83 000d     -_..K_..i_..._..
   da924:	5fa7 000d 6043 000d 6381 000d 60e5 000d     ._..C`...c...`..
   da934:	6265 000d 5f15 000d 659d 000d 61e9 000d     eb..._...e...a..
   da944:	611d 000d 6563 000d 6089 000d 5f23 000d     .a..ce...`..#_..
   da954:	60c5 000d 5f29 000d 5f85 000d fff0 ffff     .`..)_..._......
   da964:	0000 0000 5f9f 000d                         ....._..

000da96c <_ZTV11USARTSerial>:
	...
   da974:	6653 000d 6677 000d 6683 000d 5c09 000d     Sf..wf...f...\..
   da984:	665f 000d 666b 000d 6665 000d 6671 000d     _f..kf..ef..qf..
   da994:	6655 000d 6659 000d                         Uf..Yf..

000da99c <_ZTV9USBSerial>:
	...
   da9a4:	672d 000d 6771 000d 674b 000d 5c09 000d     -g..qg..Kg...\..
   da9b4:	6745 000d 672f 000d 6737 000d 676b 000d     Eg../g..7g..kg..
   da9c4:	673f 000d 6729 000d                         ?g..)g..

000da9cc <_ZSt7nothrow>:
   da9cc:	0000 0000 6f70 0077 0000 0000               ....pow.....

000da9d8 <TWO52>:
   da9d8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000da9e8 <_ctype_>:
   da9e8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da9f8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   daa08:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   daa18:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   daa28:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   daa38:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   daa48:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   daa58:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   daa68:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000daaec <__sf_fake_stdin>:
	...

000dab0c <__sf_fake_stdout>:
	...

000dab2c <__sf_fake_stderr>:
	...
   dab4c:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000dab58 <fpi.5344>:
   dab58:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dab68:	0000 0000                                   ....

000dab6c <fpinan.5380>:
   dab6c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dab7c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dab8c:	0000 0000                                   ....

000dab90 <tinytens>:
   dab90:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   daba0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dabb0:	6f43 64ac 0628 1168                         Co.d(.h.

000dabb8 <__mprec_tens>:
   dabb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dabc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dabd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dabe8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dabf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dac08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dac18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dac28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dac38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dac48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dac58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dac68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dac78:	9db4 79d9 7843 44ea                         ...yCx.D

000dac80 <__mprec_bigtens>:
   dac80:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dac90:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   daca0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000daca8 <p05.5387>:
   daca8:	0005 0000 0019 0000 007d 0000               ........}...

000dacb4 <link_const_variable_data_end>:
   dacb4:	000d43c9 	.word	0x000d43c9
   dacb8:	000d4da9 	.word	0x000d4da9
   dacbc:	000d53e5 	.word	0x000d53e5
   dacc0:	000d558d 	.word	0x000d558d
   dacc4:	000d5abd 	.word	0x000d5abd
   dacc8:	000d5bf5 	.word	0x000d5bf5
   daccc:	000d5cf1 	.word	0x000d5cf1
   dacd0:	000d5ee5 	.word	0x000d5ee5
   dacd4:	000d5f01 	.word	0x000d5f01
   dacd8:	000d69a5 	.word	0x000d69a5
   dacdc:	000d6a2d 	.word	0x000d6a2d
   dace0:	000d6af1 	.word	0x000d6af1
   dace4:	000d6b75 	.word	0x000d6b75
   dace8:	000d6bf9 	.word	0x000d6bf9

000dacec <link_constructors_end>:
   dacec:	00000000 	.word	0x00000000
