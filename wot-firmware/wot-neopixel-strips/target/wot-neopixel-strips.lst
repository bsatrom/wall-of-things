
/Users/bsatrom/Development/particle/wall-of-things/wot-firmware/wot-neopixel-strips/target/wot-neopixel-strips.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008108  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001c20c  2**0
                  CONTENTS
  3 .data         000000c0  2003d480  000dc120  0000d480  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000012b4  2003d540  2003d540  0001d540  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000dc1e0  000dc1e0  0001c1e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000dc208  000dc208  0001c208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b8de8  00000000  00000000  0001c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000114ac  00000000  00000000  000d4ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00019ad2  00000000  00000000  000e64a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002530  00000000  00000000  000fff72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003d80  00000000  00000000  001024a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000349a7  00000000  00000000  00106222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002a1ad  00000000  00000000  0013abc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d65ed  00000000  00000000  00164d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d2fc  00000000  00000000  0023b364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	f0 b9 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fe44 	bl	d9cba <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fe49 	bl	d9cd0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d480 	.word	0x2003d480
   d4048:	000dc120 	.word	0x000dc120
   d404c:	2003d540 	.word	0x2003d540
   d4050:	2003d540 	.word	0x2003d540
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fd61 	bl	d7b20 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dc118 	.word	0x000dc118
   d4080:	000dc0dc 	.word	0x000dc0dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbd0 	b.w	d4828 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd15 	bl	d4ab8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bd13 	b.w	d7abc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bf61 	b.w	d5f5c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 bf5f 	b.w	d5f5c <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bf65 	b.w	d5f6c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bf63 	b.w	d5f6c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z12factorAdjustidid>:

  return RGBVals;
}

double factorAdjust(int color, double factor, int intensityMax, double gamma)
{
   d40b8:	b5d0      	push	{r4, r6, r7, lr}
   d40ba:	ed2d 8b02 	vpush	{d8}
   d40be:	eeb0 8a41 	vmov.f32	s16, s2
   d40c2:	eef0 8a61 	vmov.f32	s17, s3
   d40c6:	b082      	sub	sp, #8
   d40c8:	ed8d 0b00 	vstr	d0, [sp]
   d40cc:	460c      	mov	r4, r1
  if (color == 0.0)
   d40ce:	f005 fa1d 	bl	d950c <__aeabi_i2d>
   d40d2:	2200      	movs	r2, #0
   d40d4:	2300      	movs	r3, #0
   d40d6:	4606      	mov	r6, r0
   d40d8:	460f      	mov	r7, r1
   d40da:	f005 fce5 	bl	d9aa8 <__aeabi_dcmpeq>
   d40de:	ed9d 0b00 	vldr	d0, [sp]
   d40e2:	bb08      	cbnz	r0, d4128 <_Z12factorAdjustidid+0x70>
  {
    return 0;
  }
  else
  {
    return round(intensityMax * pow(color * factor, gamma));
   d40e4:	ec53 2b10 	vmov	r2, r3, d0
   d40e8:	4630      	mov	r0, r6
   d40ea:	4639      	mov	r1, r7
   d40ec:	f005 fa74 	bl	d95d8 <__aeabi_dmul>
   d40f0:	eeb0 1a48 	vmov.f32	s2, s16
   d40f4:	eef0 1a68 	vmov.f32	s3, s17
   d40f8:	ec41 0b10 	vmov	d0, r0, r1
   d40fc:	f003 ff7c 	bl	d7ff8 <pow>
   d4100:	ec53 2b10 	vmov	r2, r3, d0
   d4104:	4620      	mov	r0, r4
   d4106:	e9cd 2300 	strd	r2, r3, [sp]
   d410a:	f005 f9ff 	bl	d950c <__aeabi_i2d>
   d410e:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4112:	f005 fa61 	bl	d95d8 <__aeabi_dmul>
   d4116:	ec41 0b10 	vmov	d0, r0, r1
  }
}
   d411a:	b002      	add	sp, #8
   d411c:	ecbd 8b02 	vpop	{d8}
   d4120:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
  {
    return 0;
  }
  else
  {
    return round(intensityMax * pow(color * factor, gamma));
   d4124:	f003 bf10 	b.w	d7f48 <round>
  }
}
   d4128:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4138 <_Z12factorAdjustidid+0x80>
   d412c:	b002      	add	sp, #8
   d412e:	ecbd 8b02 	vpop	{d8}
   d4132:	bdd0      	pop	{r4, r6, r7, pc}
   d4134:	f3af 8000 	nop.w
	...

000d4140 <_Z22getColorFromWavelengthd>:

  return noteColor;
}

color getColorFromWavelength(double wavelength)
{
   d4140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4144:	ed2d 8b02 	vpush	{d8}
   d4148:	ec55 4b10 	vmov	r4, r5, d0
   d414c:	b083      	sub	sp, #12
  int intensityMax = 255;
  double factor;

  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
   d414e:	a3b8      	add	r3, pc, #736	; (adr r3, d4430 <_Z22getColorFromWavelengthd+0x2f0>)
   d4150:	e9d3 2300 	ldrd	r2, r3, [r3]

  return noteColor;
}

color getColorFromWavelength(double wavelength)
{
   d4154:	9001      	str	r0, [sp, #4]
  int intensityMax = 255;
  double factor;

  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
   d4156:	4629      	mov	r1, r5
   d4158:	ee10 0a10 	vmov	r0, s0
   d415c:	f005 fcc2 	bl	d9ae4 <__aeabi_dcmpge>
   d4160:	b1d8      	cbz	r0, d419a <_Z22getColorFromWavelengthd+0x5a>
   d4162:	2200      	movs	r2, #0
   d4164:	4bc2      	ldr	r3, [pc, #776]	; (d4470 <_Z22getColorFromWavelengthd+0x330>)
   d4166:	4620      	mov	r0, r4
   d4168:	4629      	mov	r1, r5
   d416a:	f005 fca7 	bl	d9abc <__aeabi_dcmplt>
   d416e:	b1a0      	cbz	r0, d419a <_Z22getColorFromWavelengthd+0x5a>
  {
    // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
    Red = -(wavelength - 440) / (440 - 350);
   d4170:	2200      	movs	r2, #0
   d4172:	4bbf      	ldr	r3, [pc, #764]	; (d4470 <_Z22getColorFromWavelengthd+0x330>)
    Green = 0.0;
    Blue = 1.0;
   d4174:	4fbf      	ldr	r7, [pc, #764]	; (d4474 <_Z22getColorFromWavelengthd+0x334>)
  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
  {
    // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
    Red = -(wavelength - 440) / (440 - 350);
   d4176:	4620      	mov	r0, r4
   d4178:	4629      	mov	r1, r5
   d417a:	f005 f879 	bl	d9270 <__aeabi_dsub>
   d417e:	2200      	movs	r2, #0
   d4180:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d4184:	4bbc      	ldr	r3, [pc, #752]	; (d4478 <_Z22getColorFromWavelengthd+0x338>)
   d4186:	f005 fb51 	bl	d982c <__aeabi_ddiv>
    Green = 0.0;
    Blue = 1.0;
   d418a:	2600      	movs	r6, #0
  double Red, Green, Blue;

  if (wavelength >= 350 && wavelength < 440)
  {
    // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
    Red = -(wavelength - 440) / (440 - 350);
   d418c:	4680      	mov	r8, r0
   d418e:	4689      	mov	r9, r1
    Green = 0.0;
   d4190:	f04f 0a00 	mov.w	sl, #0
   d4194:	f04f 0b00 	mov.w	fp, #0
   d4198:	e0ac      	b.n	d42f4 <_Z22getColorFromWavelengthd+0x1b4>
    Blue = 1.0;
  }
  else if (wavelength >= 440 && wavelength < 490)
   d419a:	2200      	movs	r2, #0
   d419c:	4bb4      	ldr	r3, [pc, #720]	; (d4470 <_Z22getColorFromWavelengthd+0x330>)
   d419e:	4620      	mov	r0, r4
   d41a0:	4629      	mov	r1, r5
   d41a2:	f005 fc9f 	bl	d9ae4 <__aeabi_dcmpge>
   d41a6:	b1b0      	cbz	r0, d41d6 <_Z22getColorFromWavelengthd+0x96>
   d41a8:	a39d      	add	r3, pc, #628	; (adr r3, d4420 <_Z22getColorFromWavelengthd+0x2e0>)
   d41aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41ae:	4620      	mov	r0, r4
   d41b0:	4629      	mov	r1, r5
   d41b2:	f005 fc83 	bl	d9abc <__aeabi_dcmplt>
   d41b6:	b170      	cbz	r0, d41d6 <_Z22getColorFromWavelengthd+0x96>
  {
    // From Blue (0, 0, 1) to Cyan (0, 1, 1)
    Red = 0.0;
    Green = (wavelength - 440) / (490 - 440);
   d41b8:	2200      	movs	r2, #0
   d41ba:	4bad      	ldr	r3, [pc, #692]	; (d4470 <_Z22getColorFromWavelengthd+0x330>)
    Blue = 1.0;
   d41bc:	4fad      	ldr	r7, [pc, #692]	; (d4474 <_Z22getColorFromWavelengthd+0x334>)
  }
  else if (wavelength >= 440 && wavelength < 490)
  {
    // From Blue (0, 0, 1) to Cyan (0, 1, 1)
    Red = 0.0;
    Green = (wavelength - 440) / (490 - 440);
   d41be:	4620      	mov	r0, r4
   d41c0:	4629      	mov	r1, r5
   d41c2:	f005 f855 	bl	d9270 <__aeabi_dsub>
   d41c6:	2200      	movs	r2, #0
   d41c8:	4bac      	ldr	r3, [pc, #688]	; (d447c <_Z22getColorFromWavelengthd+0x33c>)
   d41ca:	f005 fb2f 	bl	d982c <__aeabi_ddiv>
    Blue = 1.0;
   d41ce:	2600      	movs	r6, #0
  }
  else if (wavelength >= 440 && wavelength < 490)
  {
    // From Blue (0, 0, 1) to Cyan (0, 1, 1)
    Red = 0.0;
    Green = (wavelength - 440) / (490 - 440);
   d41d0:	4682      	mov	sl, r0
   d41d2:	468b      	mov	fp, r1
   d41d4:	e022      	b.n	d421c <_Z22getColorFromWavelengthd+0xdc>
    Blue = 1.0;
  }
  else if (wavelength >= 490 && wavelength < 510)
   d41d6:	a392      	add	r3, pc, #584	; (adr r3, d4420 <_Z22getColorFromWavelengthd+0x2e0>)
   d41d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41dc:	4620      	mov	r0, r4
   d41de:	4629      	mov	r1, r5
   d41e0:	f005 fc80 	bl	d9ae4 <__aeabi_dcmpge>
   d41e4:	b1f8      	cbz	r0, d4226 <_Z22getColorFromWavelengthd+0xe6>
   d41e6:	a390      	add	r3, pc, #576	; (adr r3, d4428 <_Z22getColorFromWavelengthd+0x2e8>)
   d41e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41ec:	4620      	mov	r0, r4
   d41ee:	4629      	mov	r1, r5
   d41f0:	f005 fc64 	bl	d9abc <__aeabi_dcmplt>
   d41f4:	b1b8      	cbz	r0, d4226 <_Z22getColorFromWavelengthd+0xe6>
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
    Green = 1.0;
    Blue = -(wavelength - 510) / (510 - 490);
   d41f6:	a38c      	add	r3, pc, #560	; (adr r3, d4428 <_Z22getColorFromWavelengthd+0x2e8>)
   d41f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41fc:	4620      	mov	r0, r4
   d41fe:	4629      	mov	r1, r5
   d4200:	f005 f836 	bl	d9270 <__aeabi_dsub>
   d4204:	2200      	movs	r2, #0
   d4206:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d420a:	4b9d      	ldr	r3, [pc, #628]	; (d4480 <_Z22getColorFromWavelengthd+0x340>)
  }
  else if (wavelength >= 490 && wavelength < 510)
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
    Green = 1.0;
   d420c:	f8df b264 	ldr.w	fp, [pc, #612]	; d4474 <_Z22getColorFromWavelengthd+0x334>
    Blue = -(wavelength - 510) / (510 - 490);
   d4210:	f005 fb0c 	bl	d982c <__aeabi_ddiv>
  }
  else if (wavelength >= 490 && wavelength < 510)
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
    Green = 1.0;
   d4214:	f04f 0a00 	mov.w	sl, #0
    Blue = -(wavelength - 510) / (510 - 490);
   d4218:	4606      	mov	r6, r0
   d421a:	460f      	mov	r7, r1
    Blue = 1.0;
  }
  else if (wavelength >= 490 && wavelength < 510)
  {
    // From  Cyan (0, 1, 1)  to  Green (0, 1, 0)
    Red = 0.0;
   d421c:	f04f 0800 	mov.w	r8, #0
   d4220:	f04f 0900 	mov.w	r9, #0
    Green = 1.0;
    Blue = -(wavelength - 510) / (510 - 490);
   d4224:	e05e      	b.n	d42e4 <_Z22getColorFromWavelengthd+0x1a4>
  }
  else if (wavelength >= 510 && wavelength < 580)
   d4226:	a380      	add	r3, pc, #512	; (adr r3, d4428 <_Z22getColorFromWavelengthd+0x2e8>)
   d4228:	e9d3 2300 	ldrd	r2, r3, [r3]
   d422c:	4620      	mov	r0, r4
   d422e:	4629      	mov	r1, r5
   d4230:	f005 fc58 	bl	d9ae4 <__aeabi_dcmpge>
   d4234:	b1d0      	cbz	r0, d426c <_Z22getColorFromWavelengthd+0x12c>
   d4236:	2200      	movs	r2, #0
   d4238:	4b92      	ldr	r3, [pc, #584]	; (d4484 <_Z22getColorFromWavelengthd+0x344>)
   d423a:	4620      	mov	r0, r4
   d423c:	4629      	mov	r1, r5
   d423e:	f005 fc3d 	bl	d9abc <__aeabi_dcmplt>
   d4242:	b198      	cbz	r0, d426c <_Z22getColorFromWavelengthd+0x12c>
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
   d4244:	a378      	add	r3, pc, #480	; (adr r3, d4428 <_Z22getColorFromWavelengthd+0x2e8>)
   d4246:	e9d3 2300 	ldrd	r2, r3, [r3]
   d424a:	4620      	mov	r0, r4
   d424c:	4629      	mov	r1, r5
   d424e:	f005 f80f 	bl	d9270 <__aeabi_dsub>
   d4252:	2200      	movs	r2, #0
   d4254:	4b8c      	ldr	r3, [pc, #560]	; (d4488 <_Z22getColorFromWavelengthd+0x348>)
    Green = 1.0;
   d4256:	f8df b21c 	ldr.w	fp, [pc, #540]	; d4474 <_Z22getColorFromWavelengthd+0x334>
    Blue = -(wavelength - 510) / (510 - 490);
  }
  else if (wavelength >= 510 && wavelength < 580)
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
   d425a:	f005 fae7 	bl	d982c <__aeabi_ddiv>
    Green = 1.0;
    Blue = 0.0;
   d425e:	2600      	movs	r6, #0
    Blue = -(wavelength - 510) / (510 - 490);
  }
  else if (wavelength >= 510 && wavelength < 580)
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
   d4260:	4680      	mov	r8, r0
   d4262:	4689      	mov	r9, r1
    Green = 1.0;
    Blue = 0.0;
   d4264:	2700      	movs	r7, #0
  }
  else if (wavelength >= 510 && wavelength < 580)
  {
    // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
    Red = (wavelength - 510) / (580 - 510);
    Green = 1.0;
   d4266:	f04f 0a00 	mov.w	sl, #0
    Blue = 0.0;
   d426a:	e03b      	b.n	d42e4 <_Z22getColorFromWavelengthd+0x1a4>
  }
  else if (wavelength >= 580 && wavelength < 645)
   d426c:	2200      	movs	r2, #0
   d426e:	4b85      	ldr	r3, [pc, #532]	; (d4484 <_Z22getColorFromWavelengthd+0x344>)
   d4270:	4620      	mov	r0, r4
   d4272:	4629      	mov	r1, r5
   d4274:	f005 fc36 	bl	d9ae4 <__aeabi_dcmpge>
   d4278:	b1b8      	cbz	r0, d42aa <_Z22getColorFromWavelengthd+0x16a>
   d427a:	2200      	movs	r2, #0
   d427c:	4b83      	ldr	r3, [pc, #524]	; (d448c <_Z22getColorFromWavelengthd+0x34c>)
   d427e:	4620      	mov	r0, r4
   d4280:	4629      	mov	r1, r5
   d4282:	f005 fc1b 	bl	d9abc <__aeabi_dcmplt>
   d4286:	b180      	cbz	r0, d42aa <_Z22getColorFromWavelengthd+0x16a>
  {
    // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
    Red = 1.0;
    Green = -(wavelength - 645) / (645 - 580);
   d4288:	2200      	movs	r2, #0
   d428a:	4b80      	ldr	r3, [pc, #512]	; (d448c <_Z22getColorFromWavelengthd+0x34c>)
   d428c:	4620      	mov	r0, r4
   d428e:	4629      	mov	r1, r5
   d4290:	f004 ffee 	bl	d9270 <__aeabi_dsub>
   d4294:	2200      	movs	r2, #0
   d4296:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   d429a:	4b7d      	ldr	r3, [pc, #500]	; (d4490 <_Z22getColorFromWavelengthd+0x350>)
   d429c:	f005 fac6 	bl	d982c <__aeabi_ddiv>
    Blue = 0.0;
   d42a0:	2600      	movs	r6, #0
  }
  else if (wavelength >= 580 && wavelength < 645)
  {
    // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
    Red = 1.0;
    Green = -(wavelength - 645) / (645 - 580);
   d42a2:	4682      	mov	sl, r0
   d42a4:	468b      	mov	fp, r1
    Blue = 0.0;
   d42a6:	2700      	movs	r7, #0
   d42a8:	e011      	b.n	d42ce <_Z22getColorFromWavelengthd+0x18e>
  }
  else if (wavelength >= 645 && wavelength <= 780)
   d42aa:	2200      	movs	r2, #0
   d42ac:	4b77      	ldr	r3, [pc, #476]	; (d448c <_Z22getColorFromWavelengthd+0x34c>)
   d42ae:	4620      	mov	r0, r4
   d42b0:	4629      	mov	r1, r5
   d42b2:	f005 fc17 	bl	d9ae4 <__aeabi_dcmpge>
   d42b6:	b178      	cbz	r0, d42d8 <_Z22getColorFromWavelengthd+0x198>
   d42b8:	2200      	movs	r2, #0
   d42ba:	4b76      	ldr	r3, [pc, #472]	; (d4494 <_Z22getColorFromWavelengthd+0x354>)
   d42bc:	4620      	mov	r0, r4
   d42be:	4629      	mov	r1, r5
   d42c0:	f005 fc06 	bl	d9ad0 <__aeabi_dcmple>
  {
    // Solid Red (1, 0, 0), with decreasing intensity (set below)
    Red = 1.0;
    Green = 0.0;
    Blue = 0.0;
   d42c4:	2600      	movs	r6, #0
   d42c6:	2700      	movs	r7, #0
  }
  else if (wavelength >= 645 && wavelength <= 780)
  {
    // Solid Red (1, 0, 0), with decreasing intensity (set below)
    Red = 1.0;
    Green = 0.0;
   d42c8:	46b2      	mov	sl, r6
   d42ca:	46bb      	mov	fp, r7
    // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
    Red = 1.0;
    Green = -(wavelength - 645) / (645 - 580);
    Blue = 0.0;
  }
  else if (wavelength >= 645 && wavelength <= 780)
   d42cc:	b140      	cbz	r0, d42e0 <_Z22getColorFromWavelengthd+0x1a0>
  {
    // Solid Red (1, 0, 0), with decreasing intensity (set below)
    Red = 1.0;
   d42ce:	f04f 0800 	mov.w	r8, #0
   d42d2:	f8df 91a0 	ldr.w	r9, [pc, #416]	; d4474 <_Z22getColorFromWavelengthd+0x334>
   d42d6:	e005      	b.n	d42e4 <_Z22getColorFromWavelengthd+0x1a4>
  }
  else
  {
    Red = 0.0;
    Green = 0.0;
    Blue = 0.0;
   d42d8:	2600      	movs	r6, #0
   d42da:	2700      	movs	r7, #0
    Blue = 0.0;
  }
  else
  {
    Red = 0.0;
    Green = 0.0;
   d42dc:	46b2      	mov	sl, r6
   d42de:	46bb      	mov	fp, r7
    Green = 0.0;
    Blue = 0.0;
  }
  else
  {
    Red = 0.0;
   d42e0:	46b0      	mov	r8, r6
   d42e2:	46b9      	mov	r9, r7
    Blue = 0.0;
  }

  // Intensity factor goes through the range:
  // 0.1 (350-420 nm) 1.0 (420-645 nm) 1.0 (645-780 nm) 0.2
  if (wavelength >= 350 && wavelength < 420)
   d42e4:	a352      	add	r3, pc, #328	; (adr r3, d4430 <_Z22getColorFromWavelengthd+0x2f0>)
   d42e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ea:	4620      	mov	r0, r4
   d42ec:	4629      	mov	r1, r5
   d42ee:	f005 fbf9 	bl	d9ae4 <__aeabi_dcmpge>
   d42f2:	b1d0      	cbz	r0, d432a <_Z22getColorFromWavelengthd+0x1ea>
   d42f4:	2200      	movs	r2, #0
   d42f6:	4b68      	ldr	r3, [pc, #416]	; (d4498 <_Z22getColorFromWavelengthd+0x358>)
   d42f8:	4620      	mov	r0, r4
   d42fa:	4629      	mov	r1, r5
   d42fc:	f005 fbde 	bl	d9abc <__aeabi_dcmplt>
   d4300:	b198      	cbz	r0, d432a <_Z22getColorFromWavelengthd+0x1ea>
  {
    factor = 0.1 + 0.9 * (wavelength - 350) / (420 - 350);
   d4302:	a34b      	add	r3, pc, #300	; (adr r3, d4430 <_Z22getColorFromWavelengthd+0x2f0>)
   d4304:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4308:	4620      	mov	r0, r4
   d430a:	4629      	mov	r1, r5
   d430c:	f004 ffb0 	bl	d9270 <__aeabi_dsub>
   d4310:	a349      	add	r3, pc, #292	; (adr r3, d4438 <_Z22getColorFromWavelengthd+0x2f8>)
   d4312:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4316:	f005 f95f 	bl	d95d8 <__aeabi_dmul>
   d431a:	2200      	movs	r2, #0
   d431c:	4b5a      	ldr	r3, [pc, #360]	; (d4488 <_Z22getColorFromWavelengthd+0x348>)
   d431e:	f005 fa85 	bl	d982c <__aeabi_ddiv>
   d4322:	a347      	add	r3, pc, #284	; (adr r3, d4440 <_Z22getColorFromWavelengthd+0x300>)
   d4324:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4328:	e02e      	b.n	d4388 <_Z22getColorFromWavelengthd+0x248>
  }
  else if (wavelength >= 420 && wavelength < 645)
   d432a:	2200      	movs	r2, #0
   d432c:	4b5a      	ldr	r3, [pc, #360]	; (d4498 <_Z22getColorFromWavelengthd+0x358>)
   d432e:	4620      	mov	r0, r4
   d4330:	4629      	mov	r1, r5
   d4332:	f005 fbd7 	bl	d9ae4 <__aeabi_dcmpge>
   d4336:	b130      	cbz	r0, d4346 <_Z22getColorFromWavelengthd+0x206>
   d4338:	2200      	movs	r2, #0
   d433a:	4b54      	ldr	r3, [pc, #336]	; (d448c <_Z22getColorFromWavelengthd+0x34c>)
   d433c:	4620      	mov	r0, r4
   d433e:	4629      	mov	r1, r5
   d4340:	f005 fbbc 	bl	d9abc <__aeabi_dcmplt>
   d4344:	bb28      	cbnz	r0, d4392 <_Z22getColorFromWavelengthd+0x252>
  {
    factor = 1.0;
  }
  else if (wavelength >= 645 && wavelength <= 780)
   d4346:	2200      	movs	r2, #0
   d4348:	4b50      	ldr	r3, [pc, #320]	; (d448c <_Z22getColorFromWavelengthd+0x34c>)
   d434a:	4620      	mov	r0, r4
   d434c:	4629      	mov	r1, r5
   d434e:	f005 fbc9 	bl	d9ae4 <__aeabi_dcmpge>
   d4352:	b308      	cbz	r0, d4398 <_Z22getColorFromWavelengthd+0x258>
   d4354:	2200      	movs	r2, #0
   d4356:	4b4f      	ldr	r3, [pc, #316]	; (d4494 <_Z22getColorFromWavelengthd+0x354>)
   d4358:	4620      	mov	r0, r4
   d435a:	4629      	mov	r1, r5
   d435c:	f005 fbb8 	bl	d9ad0 <__aeabi_dcmple>
   d4360:	b1d0      	cbz	r0, d4398 <_Z22getColorFromWavelengthd+0x258>
  {
    factor = 0.2 + 0.8 * (780 - wavelength) / (780 - 645);
   d4362:	4622      	mov	r2, r4
   d4364:	462b      	mov	r3, r5
   d4366:	2000      	movs	r0, #0
   d4368:	494a      	ldr	r1, [pc, #296]	; (d4494 <_Z22getColorFromWavelengthd+0x354>)
   d436a:	f004 ff81 	bl	d9270 <__aeabi_dsub>
   d436e:	a336      	add	r3, pc, #216	; (adr r3, d4448 <_Z22getColorFromWavelengthd+0x308>)
   d4370:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4374:	f005 f930 	bl	d95d8 <__aeabi_dmul>
   d4378:	a335      	add	r3, pc, #212	; (adr r3, d4450 <_Z22getColorFromWavelengthd+0x310>)
   d437a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d437e:	f005 fa55 	bl	d982c <__aeabi_ddiv>
   d4382:	a335      	add	r3, pc, #212	; (adr r3, d4458 <_Z22getColorFromWavelengthd+0x318>)
   d4384:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4388:	f004 ff74 	bl	d9274 <__adddf3>
   d438c:	ec41 0b18 	vmov	d8, r0, r1
   d4390:	e004      	b.n	d439c <_Z22getColorFromWavelengthd+0x25c>
  {
    factor = 0.1 + 0.9 * (wavelength - 350) / (420 - 350);
  }
  else if (wavelength >= 420 && wavelength < 645)
  {
    factor = 1.0;
   d4392:	ed9f 8b33 	vldr	d8, [pc, #204]	; d4460 <_Z22getColorFromWavelengthd+0x320>
   d4396:	e001      	b.n	d439c <_Z22getColorFromWavelengthd+0x25c>
  {
    factor = 0.2 + 0.8 * (780 - wavelength) / (780 - 645);
  }
  else
  {
    factor = 0.0;
   d4398:	ed9f 8b33 	vldr	d8, [pc, #204]	; d4468 <_Z22getColorFromWavelengthd+0x328>
  }

  RGBVals.Red = factorAdjust(Red, factor, intensityMax, gamma);
   d439c:	4649      	mov	r1, r9
   d439e:	4640      	mov	r0, r8
   d43a0:	f005 fbca 	bl	d9b38 <__aeabi_d2iz>
   d43a4:	eeb0 0a48 	vmov.f32	s0, s16
   d43a8:	eef0 0a68 	vmov.f32	s1, s17
   d43ac:	ed9f 1b2c 	vldr	d1, [pc, #176]	; d4460 <_Z22getColorFromWavelengthd+0x320>
   d43b0:	21ff      	movs	r1, #255	; 0xff
   d43b2:	f7ff fe81 	bl	d40b8 <_Z12factorAdjustidid>
   d43b6:	ec51 0b10 	vmov	r0, r1, d0
   d43ba:	f005 fbe5 	bl	d9b88 <__aeabi_d2uiz>
   d43be:	9b01      	ldr	r3, [sp, #4]
  RGBVals.Green = factorAdjust(Green, factor, intensityMax, gamma);
   d43c0:	4659      	mov	r1, fp
  else
  {
    factor = 0.0;
  }

  RGBVals.Red = factorAdjust(Red, factor, intensityMax, gamma);
   d43c2:	6018      	str	r0, [r3, #0]
  RGBVals.Green = factorAdjust(Green, factor, intensityMax, gamma);
   d43c4:	4650      	mov	r0, sl
   d43c6:	f005 fbb7 	bl	d9b38 <__aeabi_d2iz>
   d43ca:	eeb0 0a48 	vmov.f32	s0, s16
   d43ce:	eef0 0a68 	vmov.f32	s1, s17
   d43d2:	ed9f 1b23 	vldr	d1, [pc, #140]	; d4460 <_Z22getColorFromWavelengthd+0x320>
   d43d6:	21ff      	movs	r1, #255	; 0xff
   d43d8:	f7ff fe6e 	bl	d40b8 <_Z12factorAdjustidid>
   d43dc:	ec51 0b10 	vmov	r0, r1, d0
   d43e0:	f005 fbd2 	bl	d9b88 <__aeabi_d2uiz>
   d43e4:	9b01      	ldr	r3, [sp, #4]
  RGBVals.Blue = factorAdjust(Blue, factor, intensityMax, gamma);
   d43e6:	4639      	mov	r1, r7
  {
    factor = 0.0;
  }

  RGBVals.Red = factorAdjust(Red, factor, intensityMax, gamma);
  RGBVals.Green = factorAdjust(Green, factor, intensityMax, gamma);
   d43e8:	6058      	str	r0, [r3, #4]
  RGBVals.Blue = factorAdjust(Blue, factor, intensityMax, gamma);
   d43ea:	4630      	mov	r0, r6
   d43ec:	f005 fba4 	bl	d9b38 <__aeabi_d2iz>
   d43f0:	eeb0 0a48 	vmov.f32	s0, s16
   d43f4:	eef0 0a68 	vmov.f32	s1, s17
   d43f8:	ed9f 1b19 	vldr	d1, [pc, #100]	; d4460 <_Z22getColorFromWavelengthd+0x320>
   d43fc:	21ff      	movs	r1, #255	; 0xff
   d43fe:	f7ff fe5b 	bl	d40b8 <_Z12factorAdjustidid>
   d4402:	ec51 0b10 	vmov	r0, r1, d0
   d4406:	f005 fbbf 	bl	d9b88 <__aeabi_d2uiz>
   d440a:	9b01      	ldr	r3, [sp, #4]
   d440c:	6098      	str	r0, [r3, #8]

  return RGBVals;
}
   d440e:	4618      	mov	r0, r3
   d4410:	b003      	add	sp, #12
   d4412:	ecbd 8b02 	vpop	{d8}
   d4416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d441a:	bf00      	nop
   d441c:	f3af 8000 	nop.w
   d4420:	00000000 	.word	0x00000000
   d4424:	407ea000 	.word	0x407ea000
   d4428:	00000000 	.word	0x00000000
   d442c:	407fe000 	.word	0x407fe000
   d4430:	00000000 	.word	0x00000000
   d4434:	4075e000 	.word	0x4075e000
   d4438:	cccccccd 	.word	0xcccccccd
   d443c:	3feccccc 	.word	0x3feccccc
   d4440:	9999999a 	.word	0x9999999a
   d4444:	3fb99999 	.word	0x3fb99999
   d4448:	9999999a 	.word	0x9999999a
   d444c:	3fe99999 	.word	0x3fe99999
   d4450:	00000000 	.word	0x00000000
   d4454:	4060e000 	.word	0x4060e000
   d4458:	9999999a 	.word	0x9999999a
   d445c:	3fc99999 	.word	0x3fc99999
   d4460:	00000000 	.word	0x00000000
   d4464:	3ff00000 	.word	0x3ff00000
	...
   d4470:	407b8000 	.word	0x407b8000
   d4474:	3ff00000 	.word	0x3ff00000
   d4478:	40568000 	.word	0x40568000
   d447c:	40490000 	.word	0x40490000
   d4480:	40340000 	.word	0x40340000
   d4484:	40822000 	.word	0x40822000
   d4488:	40518000 	.word	0x40518000
   d448c:	40842800 	.word	0x40842800
   d4490:	40504000 	.word	0x40504000
   d4494:	40886000 	.word	0x40886000
   d4498:	407a4000 	.word	0x407a4000
   d449c:	00000000 	.word	0x00000000

000d44a0 <_Z14mapNoteToColord>:
double frequency(double wavelength, double speedOfLight);
color getColorFromWavelength(double wavelength);
double factorAdjust(int color, double factor, int intensityMax, double gamma);

color mapNoteToColor(double soundFrequency)
{
   d44a0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d44a4:	4b16      	ldr	r3, [pc, #88]	; (d4500 <_Z14mapNoteToColord+0x60>)
   d44a6:	e9d3 8900 	ldrd	r8, r9, [r3]
double frequency(double wavelength, double speedOfLight);
color getColorFromWavelength(double wavelength);
double factorAdjust(int color, double factor, int intensityMax, double gamma);

color mapNoteToColor(double soundFrequency)
{
   d44aa:	ec55 4b10 	vmov	r4, r5, d0
   d44ae:	4606      	mov	r6, r0
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d44b0:	4642      	mov	r2, r8
   d44b2:	464b      	mov	r3, r9
   d44b4:	4620      	mov	r0, r4
   d44b6:	4629      	mov	r1, r5
   d44b8:	f005 fb00 	bl	d9abc <__aeabi_dcmplt>
  {
    lightFrequency *= 2;
   d44bc:	4622      	mov	r2, r4
   d44be:	462b      	mov	r3, r5
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d44c0:	b130      	cbz	r0, d44d0 <_Z14mapNoteToColord+0x30>
  {
    lightFrequency *= 2;
   d44c2:	4620      	mov	r0, r4
   d44c4:	4629      	mov	r1, r5
   d44c6:	f004 fed5 	bl	d9274 <__adddf3>
   d44ca:	4604      	mov	r4, r0
   d44cc:	460d      	mov	r5, r1
  struct color noteColor;
  double lightWavelength, lightWavelengthNM;

  double lightFrequency = soundFrequency;

  while (lightFrequency < lightFreqRedLower)
   d44ce:	e7ef      	b.n	d44b0 <_Z14mapNoteToColord+0x10>
  }

  lightWavelength = wavelength(lightFrequency, speedOfLightVacuum);
  lightWavelengthNM = lightWavelength * 1000000000;

  noteColor = getColorFromWavelength(lightWavelengthNM);
   d44d0:	490c      	ldr	r1, [pc, #48]	; (d4504 <_Z14mapNoteToColord+0x64>)
   d44d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   d44d6:	f005 f9a9 	bl	d982c <__aeabi_ddiv>
   d44da:	a307      	add	r3, pc, #28	; (adr r3, d44f8 <_Z14mapNoteToColord+0x58>)
   d44dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e0:	f005 f87a 	bl	d95d8 <__aeabi_dmul>
   d44e4:	ec41 0b10 	vmov	d0, r0, r1
   d44e8:	4630      	mov	r0, r6
   d44ea:	f7ff fe29 	bl	d4140 <_Z22getColorFromWavelengthd>

  return noteColor;
}
   d44ee:	4630      	mov	r0, r6
   d44f0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	00000000 	.word	0x00000000
   d44fc:	41cdcd65 	.word	0x41cdcd65
   d4500:	2003d488 	.word	0x2003d488
   d4504:	2003d480 	.word	0x2003d480

000d4508 <_Z8stopTonePKcS0_>:
  }
}

void stopTone(const char *event, const char *data)
{
  lightUp = false;
   d4508:	4b01      	ldr	r3, [pc, #4]	; (d4510 <_Z8stopTonePKcS0_+0x8>)
   d450a:	2200      	movs	r2, #0
   d450c:	701a      	strb	r2, [r3, #0]
   d450e:	4770      	bx	lr
   d4510:	2003d549 	.word	0x2003d549

000d4514 <_Z12setModeCloud6String>:
  }
  strip.show();
}

int setModeCloud(String args)
{
   d4514:	b508      	push	{r3, lr}
  int mode = args.toInt();
   d4516:	f002 fe6f 	bl	d71f8 <_ZNK6String5toIntEv>

  animationMode = mode;
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <_Z12setModeCloud6String+0x10>)
   d451c:	6018      	str	r0, [r3, #0]

  return 1;
}
   d451e:	2001      	movs	r0, #1
   d4520:	bd08      	pop	{r3, pc}
   d4522:	bf00      	nop
   d4524:	2003e3d0 	.word	0x2003e3d0

000d4528 <_Z11setModeMeshPKcS0_>:

void setModeMesh(const char *event, const char *data)
{
   d4528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  int mode = String(data).toInt();
   d452a:	4668      	mov	r0, sp
   d452c:	f002 fdf0 	bl	d7110 <_ZN6StringC1EPK19__FlashStringHelper>
   d4530:	4668      	mov	r0, sp
   d4532:	f002 fe61 	bl	d71f8 <_ZNK6String5toIntEv>
   d4536:	4604      	mov	r4, r0
   d4538:	4668      	mov	r0, sp
   d453a:	f002 fda2 	bl	d7082 <_ZN6StringD1Ev>

  animationMode = mode;
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <_Z11setModeMeshPKcS0_+0x20>)
   d4540:	601c      	str	r4, [r3, #0]
}
   d4542:	b004      	add	sp, #16
   d4544:	bd10      	pop	{r4, pc}
   d4546:	bf00      	nop
   d4548:	2003e3d0 	.word	0x2003e3d0

000d454c <_ZN16JsonParserStaticILj2048ELj100EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d454c:	b510      	push	{r4, lr}
   d454e:	4b03      	ldr	r3, [pc, #12]	; (d455c <_ZN16JsonParserStaticILj2048ELj100EED1Ev+0x10>)
   d4550:	6003      	str	r3, [r0, #0]
   d4552:	4604      	mov	r4, r0
   d4554:	f000 fbb0 	bl	d4cb8 <_ZN10JsonParserD1Ev>
   d4558:	4620      	mov	r0, r4
   d455a:	bd10      	pop	{r4, pc}
   d455c:	000dba0c 	.word	0x000dba0c

000d4560 <_ZN16JsonParserStaticILj2048ELj100EED0Ev>:
   d4560:	b510      	push	{r4, lr}
   d4562:	4604      	mov	r4, r0
   d4564:	f7ff fff2 	bl	d454c <_ZN16JsonParserStaticILj2048ELj100EED1Ev>
   d4568:	4620      	mov	r0, r4
   d456a:	f7ff fd98 	bl	d409e <_ZdlPv>
   d456e:	4620      	mov	r0, r4
   d4570:	bd10      	pop	{r4, pc}
	...

000d4574 <_Z16playColorOfSoundPKc>:
uint16_t Wheel(byte WheelPos);
void FadeInOut(byte red, byte green, byte blue);
void setAll(byte red, byte green, byte blue);

void playColorOfSound(const char *data)
{
   d4574:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4576:	ed2d 8b02 	vpush	{d8}
   d457a:	b085      	sub	sp, #20
  char *ptr;
  double freq = strtod(data, &ptr);
   d457c:	4669      	mov	r1, sp
uint16_t Wheel(byte WheelPos);
void FadeInOut(byte red, byte green, byte blue);
void setAll(byte red, byte green, byte blue);

void playColorOfSound(const char *data)
{
   d457e:	4607      	mov	r7, r0
  char *ptr;
  double freq = strtod(data, &ptr);
   d4580:	f006 fa82 	bl	daa88 <strtod>

  useWheel = false;
   d4584:	4b1a      	ldr	r3, [pc, #104]	; (d45f0 <_Z16playColorOfSoundPKc+0x7c>)
void setAll(byte red, byte green, byte blue);

void playColorOfSound(const char *data)
{
  char *ptr;
  double freq = strtod(data, &ptr);
   d4586:	eeb0 8a40 	vmov.f32	s16, s0
   d458a:	eef0 8a60 	vmov.f32	s17, s1

  useWheel = false;
   d458e:	2200      	movs	r2, #0
   d4590:	701a      	strb	r2, [r3, #0]
   d4592:	4d18      	ldr	r5, [pc, #96]	; (d45f4 <_Z16playColorOfSoundPKc+0x80>)
   d4594:	4e18      	ldr	r6, [pc, #96]	; (d45f8 <_Z16playColorOfSoundPKc+0x84>)
   d4596:	4c19      	ldr	r4, [pc, #100]	; (d45fc <_Z16playColorOfSoundPKc+0x88>)

  if (data && freq != 0)
   d4598:	b1a7      	cbz	r7, d45c4 <_Z16playColorOfSoundPKc+0x50>
   d459a:	2200      	movs	r2, #0
   d459c:	2300      	movs	r3, #0
   d459e:	ec51 0b10 	vmov	r0, r1, d0
   d45a2:	f005 fa81 	bl	d9aa8 <__aeabi_dcmpeq>
   d45a6:	b968      	cbnz	r0, d45c4 <_Z16playColorOfSoundPKc+0x50>
  {
    struct color noteColors;

    noteColors = mapNoteToColor(freq);
   d45a8:	eeb0 0a48 	vmov.f32	s0, s16
   d45ac:	eef0 0a68 	vmov.f32	s1, s17
   d45b0:	a801      	add	r0, sp, #4
   d45b2:	f7ff ff75 	bl	d44a0 <_Z14mapNoteToColord>

    redValue = noteColors.Red;
   d45b6:	9b01      	ldr	r3, [sp, #4]
   d45b8:	602b      	str	r3, [r5, #0]
    greenValue = noteColors.Green;
   d45ba:	9b02      	ldr	r3, [sp, #8]
   d45bc:	6033      	str	r3, [r6, #0]
    blueValue = noteColors.Blue;
   d45be:	9b03      	ldr	r3, [sp, #12]
   d45c0:	6023      	str	r3, [r4, #0]
   d45c2:	e011      	b.n	d45e8 <_Z16playColorOfSoundPKc+0x74>
  }
  else
  {
    greenValue = random(1, 256);
   d45c4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45c8:	2001      	movs	r0, #1
   d45ca:	f002 fd1c 	bl	d7006 <_Z6randomii>
    redValue = random(1, 256);
   d45ce:	f44f 7180 	mov.w	r1, #256	; 0x100
    greenValue = noteColors.Green;
    blueValue = noteColors.Blue;
  }
  else
  {
    greenValue = random(1, 256);
   d45d2:	6030      	str	r0, [r6, #0]
    redValue = random(1, 256);
   d45d4:	2001      	movs	r0, #1
   d45d6:	f002 fd16 	bl	d7006 <_Z6randomii>
    blueValue = random(1, 256);
   d45da:	f44f 7180 	mov.w	r1, #256	; 0x100
    blueValue = noteColors.Blue;
  }
  else
  {
    greenValue = random(1, 256);
    redValue = random(1, 256);
   d45de:	6028      	str	r0, [r5, #0]
    blueValue = random(1, 256);
   d45e0:	2001      	movs	r0, #1
   d45e2:	f002 fd10 	bl	d7006 <_Z6randomii>
   d45e6:	6020      	str	r0, [r4, #0]
  }
}
   d45e8:	b005      	add	sp, #20
   d45ea:	ecbd 8b02 	vpop	{d8}
   d45ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45f0:	2003d548 	.word	0x2003d548
   d45f4:	2003d54c 	.word	0x2003d54c
   d45f8:	2003d490 	.word	0x2003d490
   d45fc:	2003d494 	.word	0x2003d494

000d4600 <_Z11playTrellisPKc>:
    Particle.publish("parse-fail", String(data));
  }
}

void playTrellis(const char *data)
{
   d4600:	b508      	push	{r3, lr}
  wheelPos = atoi(data);
   d4602:	f005 fb31 	bl	d9c68 <atoi>
   d4606:	4b03      	ldr	r3, [pc, #12]	; (d4614 <_Z11playTrellisPKc+0x14>)
   d4608:	6018      	str	r0, [r3, #0]

  useWheel = true;
   d460a:	4b03      	ldr	r3, [pc, #12]	; (d4618 <_Z11playTrellisPKc+0x18>)
   d460c:	2201      	movs	r2, #1
   d460e:	701a      	strb	r2, [r3, #0]
   d4610:	bd08      	pop	{r3, pc}
   d4612:	bf00      	nop
   d4614:	2003d544 	.word	0x2003d544
   d4618:	2003d548 	.word	0x2003d548

000d461c <_Z10playRandomv>:
}

void playRandom()
{
   d461c:	b508      	push	{r3, lr}
  useWheel = false;
   d461e:	4b0c      	ldr	r3, [pc, #48]	; (d4650 <_Z10playRandomv+0x34>)
   d4620:	2200      	movs	r2, #0

  greenValue = random(1, 256);
   d4622:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4626:	2001      	movs	r0, #1
  useWheel = true;
}

void playRandom()
{
  useWheel = false;
   d4628:	701a      	strb	r2, [r3, #0]

  greenValue = random(1, 256);
   d462a:	f002 fcec 	bl	d7006 <_Z6randomii>
   d462e:	4b09      	ldr	r3, [pc, #36]	; (d4654 <_Z10playRandomv+0x38>)
  redValue = random(1, 256);
   d4630:	f44f 7180 	mov.w	r1, #256	; 0x100

void playRandom()
{
  useWheel = false;

  greenValue = random(1, 256);
   d4634:	6018      	str	r0, [r3, #0]
  redValue = random(1, 256);
   d4636:	2001      	movs	r0, #1
   d4638:	f002 fce5 	bl	d7006 <_Z6randomii>
   d463c:	4b06      	ldr	r3, [pc, #24]	; (d4658 <_Z10playRandomv+0x3c>)
  blueValue = random(1, 256);
   d463e:	f44f 7180 	mov.w	r1, #256	; 0x100
void playRandom()
{
  useWheel = false;

  greenValue = random(1, 256);
  redValue = random(1, 256);
   d4642:	6018      	str	r0, [r3, #0]
  blueValue = random(1, 256);
   d4644:	2001      	movs	r0, #1
   d4646:	f002 fcde 	bl	d7006 <_Z6randomii>
   d464a:	4b04      	ldr	r3, [pc, #16]	; (d465c <_Z10playRandomv+0x40>)
   d464c:	6018      	str	r0, [r3, #0]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	2003d548 	.word	0x2003d548
   d4654:	2003d490 	.word	0x2003d490
   d4658:	2003d54c 	.word	0x2003d54c
   d465c:	2003d494 	.word	0x2003d494

000d4660 <_Z8playTonePKcS0_>:
}

void playTone(const char *event, const char *data)
{
  lightUp = true;
   d4660:	4b07      	ldr	r3, [pc, #28]	; (d4680 <_Z8playTonePKcS0_+0x20>)
   d4662:	2201      	movs	r2, #1
   d4664:	701a      	strb	r2, [r3, #0]

  switch (animationMode)
   d4666:	4b07      	ldr	r3, [pc, #28]	; (d4684 <_Z8playTonePKcS0_+0x24>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	4293      	cmp	r3, r2
  redValue = random(1, 256);
  blueValue = random(1, 256);
}

void playTone(const char *event, const char *data)
{
   d466c:	4608      	mov	r0, r1
  lightUp = true;

  switch (animationMode)
   d466e:	d003      	beq.n	d4678 <_Z8playTonePKcS0_+0x18>
   d4670:	2b02      	cmp	r3, #2
   d4672:	d103      	bne.n	d467c <_Z8playTonePKcS0_+0x1c>
    break;
  case 1:
    playColorOfSound(data);
    break;
  case 2:
    playTrellis(data);
   d4674:	f7ff bfc4 	b.w	d4600 <_Z11playTrellisPKc>
  {
  case 0:
    playRandom();
    break;
  case 1:
    playColorOfSound(data);
   d4678:	f7ff bf7c 	b.w	d4574 <_Z16playColorOfSoundPKc>
    break;
  case 2:
    playTrellis(data);
    break;
  default:
    playRandom();
   d467c:	f7ff bfce 	b.w	d461c <_Z10playRandomv>
   d4680:	2003d549 	.word	0x2003d549
   d4684:	2003e3d0 	.word	0x2003e3d0

000d4688 <_Z5chaseh>:

  animationMode = mode;
}

void chase(uint8_t wait)
{
   d4688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
  else
  {
    for (uint16_t i = 0; i < strip.numPixels(); i++)
    {
      strip.setPixelColor(i, strip.Color(redValue, greenValue, blueValue));
   d468c:	f8df 804c 	ldr.w	r8, [pc, #76]	; d46dc <_Z5chaseh+0x54>
   d4690:	4f0f      	ldr	r7, [pc, #60]	; (d46d0 <_Z5chaseh+0x48>)

  animationMode = mode;
}

void chase(uint8_t wait)
{
   d4692:	4606      	mov	r6, r0
   d4694:	2400      	movs	r4, #0
      delay(wait);
    }
  }
  else
  {
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   d4696:	480f      	ldr	r0, [pc, #60]	; (d46d4 <_Z5chaseh+0x4c>)
   d4698:	f001 f997 	bl	d59ca <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d469c:	b2a5      	uxth	r5, r4
   d469e:	4285      	cmp	r5, r0
   d46a0:	f104 0401 	add.w	r4, r4, #1
   d46a4:	d212      	bcs.n	d46cc <_Z5chaseh+0x44>
    {
      strip.setPixelColor(i, strip.Color(redValue, greenValue, blueValue));
   d46a6:	4b0c      	ldr	r3, [pc, #48]	; (d46d8 <_Z5chaseh+0x50>)
   d46a8:	f898 2000 	ldrb.w	r2, [r8]
   d46ac:	7818      	ldrb	r0, [r3, #0]
   d46ae:	7839      	ldrb	r1, [r7, #0]
   d46b0:	f001 f986 	bl	d59c0 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d46b4:	4629      	mov	r1, r5
   d46b6:	4602      	mov	r2, r0
   d46b8:	4806      	ldr	r0, [pc, #24]	; (d46d4 <_Z5chaseh+0x4c>)
   d46ba:	f001 f936 	bl	d592a <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

      strip.show();
   d46be:	4805      	ldr	r0, [pc, #20]	; (d46d4 <_Z5chaseh+0x4c>)
   d46c0:	f000 ff62 	bl	d5588 <_ZN17Adafruit_NeoPixel4showEv>
      delay(wait);
   d46c4:	4630      	mov	r0, r6
   d46c6:	f001 fc81 	bl	d5fcc <delay>
      delay(wait);
    }
  }
  else
  {
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   d46ca:	e7e4      	b.n	d4696 <_Z5chaseh+0xe>
   d46cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46d0:	2003d490 	.word	0x2003d490
   d46d4:	2003d550 	.word	0x2003d550
   d46d8:	2003d54c 	.word	0x2003d54c
   d46dc:	2003d494 	.word	0x2003d494

000d46e0 <_Z8chaseOffh>:
    }
  }
}

void chaseOff(uint8_t wait)
{
   d46e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d46e2:	2400      	movs	r4, #0
   d46e4:	4606      	mov	r6, r0
  }
  else
  {
    for (uint16_t i = 0; i < strip.numPixels(); i++)
    {
      strip.setPixelColor(i, 0, 0, 0); // Off
   d46e6:	4627      	mov	r7, r4
      delay(wait);
    }
  }
  else
  {
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   d46e8:	480b      	ldr	r0, [pc, #44]	; (d4718 <_Z8chaseOffh+0x38>)
   d46ea:	f001 f96e 	bl	d59ca <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d46ee:	b2a5      	uxth	r5, r4
   d46f0:	4285      	cmp	r5, r0
   d46f2:	f104 0401 	add.w	r4, r4, #1
   d46f6:	d20d      	bcs.n	d4714 <_Z8chaseOffh+0x34>
    {
      strip.setPixelColor(i, 0, 0, 0); // Off
   d46f8:	2300      	movs	r3, #0
   d46fa:	461a      	mov	r2, r3
   d46fc:	4629      	mov	r1, r5
   d46fe:	9700      	str	r7, [sp, #0]
   d4700:	4805      	ldr	r0, [pc, #20]	; (d4718 <_Z8chaseOffh+0x38>)
   d4702:	f001 f8e3 	bl	d58cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>

      strip.show();
   d4706:	4804      	ldr	r0, [pc, #16]	; (d4718 <_Z8chaseOffh+0x38>)
   d4708:	f000 ff3e 	bl	d5588 <_ZN17Adafruit_NeoPixel4showEv>
      delay(wait);
   d470c:	4630      	mov	r0, r6
   d470e:	f001 fc5d 	bl	d5fcc <delay>
      delay(wait);
    }
  }
  else
  {
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   d4712:	e7e9      	b.n	d46e8 <_Z8chaseOffh+0x8>

      strip.show();
      delay(wait);
    }
  }
}
   d4714:	b003      	add	sp, #12
   d4716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4718:	2003d550 	.word	0x2003d550

000d471c <_Z10startStripPKcS0_>:

void startStrip(const char *event, const char *data)
{
   d471c:	b508      	push	{r3, lr}
  if (animationMode == 5)
   d471e:	4b0a      	ldr	r3, [pc, #40]	; (d4748 <_Z10startStripPKcS0_+0x2c>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	2b05      	cmp	r3, #5
   d4724:	d10f      	bne.n	d4746 <_Z10startStripPKcS0_+0x2a>
  {
    chase(CHASE_DELAY);
   d4726:	201e      	movs	r0, #30
   d4728:	f7ff ffae 	bl	d4688 <_Z5chaseh>

    Mesh.publish(PUB_STRING, NULL);
   d472c:	2200      	movs	r2, #0
   d472e:	4907      	ldr	r1, [pc, #28]	; (d474c <_Z10startStripPKcS0_+0x30>)
   d4730:	4807      	ldr	r0, [pc, #28]	; (d4750 <_Z10startStripPKcS0_+0x34>)
   d4732:	f002 fa0f 	bl	d6b54 <_ZN5spark11MeshPublish7publishEPKcS2_>

    delay(50);
   d4736:	2032      	movs	r0, #50	; 0x32
   d4738:	f001 fc48 	bl	d5fcc <delay>

    chaseOff(CHASE_DELAY);
   d473c:	201e      	movs	r0, #30
  }
}
   d473e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    Mesh.publish(PUB_STRING, NULL);

    delay(50);

    chaseOff(CHASE_DELAY);
   d4742:	f7ff bfcd 	b.w	d46e0 <_Z8chaseOffh>
   d4746:	bd08      	pop	{r3, pc}
   d4748:	2003e3d0 	.word	0x2003e3d0
   d474c:	000dba14 	.word	0x000dba14
   d4750:	2003e3ec 	.word	0x2003e3ec

000d4754 <_Z5Wheelh>:
  delay(wait);
}

uint16_t Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
   d4754:	43c0      	mvns	r0, r0
   d4756:	b2c0      	uxtb	r0, r0

  if (WheelPos < 85)
   d4758:	2854      	cmp	r0, #84	; 0x54
  strip.show();
  delay(wait);
}

uint16_t Wheel(byte WheelPos)
{
   d475a:	b508      	push	{r3, lr}
  WheelPos = 255 - WheelPos;

  if (WheelPos < 85)
   d475c:	d80b      	bhi.n	d4776 <_Z5Wheelh+0x22>
  {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   d475e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   d4762:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d4766:	3801      	subs	r0, #1
   d4768:	b2d2      	uxtb	r2, r2
   d476a:	2100      	movs	r1, #0
   d476c:	b2c0      	uxtb	r0, r0
   d476e:	f001 f927 	bl	d59c0 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4772:	b280      	uxth	r0, r0
   d4774:	bd08      	pop	{r3, pc}
  }

  if (WheelPos < 170)
   d4776:	28a9      	cmp	r0, #169	; 0xa9
   d4778:	d80d      	bhi.n	d4796 <_Z5Wheelh+0x42>
  {
    WheelPos -= 85;
   d477a:	3855      	subs	r0, #85	; 0x55
   d477c:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   d477e:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
   d4782:	3a01      	subs	r2, #1
   d4784:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4788:	b2d2      	uxtb	r2, r2
   d478a:	b2c9      	uxtb	r1, r1
   d478c:	2000      	movs	r0, #0
   d478e:	f001 f917 	bl	d59c0 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4792:	b280      	uxth	r0, r0
   d4794:	bd08      	pop	{r3, pc}
  }

  WheelPos -= 170;
   d4796:	3056      	adds	r0, #86	; 0x56
   d4798:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   d479a:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
   d479e:	3901      	subs	r1, #1
   d47a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d47a4:	2200      	movs	r2, #0
   d47a6:	b2c9      	uxtb	r1, r1
   d47a8:	b2c0      	uxtb	r0, r0
   d47aa:	f001 f909 	bl	d59c0 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d47ae:	b280      	uxth	r0, r0
}
   d47b0:	bd08      	pop	{r3, pc}
	...

000d47b4 <_Z12setAllPixelsttt>:
{
  lightUp = false;
}

void setAllPixels(u_int16_t red, u_int16_t green, u_int16_t blue)
{
   d47b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  for (int i = 0; i < strip.numPixels(); i++)
  {
    if (useWheel && lightUp)
   d47b8:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4820 <_Z12setAllPixelsttt+0x6c>
   d47bc:	f8df a064 	ldr.w	sl, [pc, #100]	; d4824 <_Z12setAllPixelsttt+0x70>
{
  lightUp = false;
}

void setAllPixels(u_int16_t red, u_int16_t green, u_int16_t blue)
{
   d47c0:	4606      	mov	r6, r0
   d47c2:	460f      	mov	r7, r1
   d47c4:	4690      	mov	r8, r2
  for (int i = 0; i < strip.numPixels(); i++)
   d47c6:	2400      	movs	r4, #0
   d47c8:	4813      	ldr	r0, [pc, #76]	; (d4818 <_Z12setAllPixelsttt+0x64>)
   d47ca:	f001 f8fe 	bl	d59ca <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d47ce:	4284      	cmp	r4, r0
   d47d0:	da1b      	bge.n	d480a <_Z12setAllPixelsttt+0x56>
  {
    if (useWheel && lightUp)
   d47d2:	f899 3000 	ldrb.w	r3, [r9]
   d47d6:	b2a5      	uxth	r5, r4
   d47d8:	b163      	cbz	r3, d47f4 <_Z12setAllPixelsttt+0x40>
   d47da:	f89a 3000 	ldrb.w	r3, [sl]
   d47de:	b14b      	cbz	r3, d47f4 <_Z12setAllPixelsttt+0x40>
    {
      strip.setPixelColor(i, Wheel(wheelPos));
   d47e0:	4b0e      	ldr	r3, [pc, #56]	; (d481c <_Z12setAllPixelsttt+0x68>)
   d47e2:	7818      	ldrb	r0, [r3, #0]
   d47e4:	f7ff ffb6 	bl	d4754 <_Z5Wheelh>
   d47e8:	4629      	mov	r1, r5
   d47ea:	4602      	mov	r2, r0
   d47ec:	480a      	ldr	r0, [pc, #40]	; (d4818 <_Z12setAllPixelsttt+0x64>)
   d47ee:	f001 f89c 	bl	d592a <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   d47f2:	e008      	b.n	d4806 <_Z12setAllPixelsttt+0x52>
    }
    else
    {
      strip.setPixelColor(i, red, green, blue);
   d47f4:	fa5f f388 	uxtb.w	r3, r8
   d47f8:	9300      	str	r3, [sp, #0]
   d47fa:	b2f2      	uxtb	r2, r6
   d47fc:	b2fb      	uxtb	r3, r7
   d47fe:	4629      	mov	r1, r5
   d4800:	4805      	ldr	r0, [pc, #20]	; (d4818 <_Z12setAllPixelsttt+0x64>)
   d4802:	f001 f863 	bl	d58cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  lightUp = false;
}

void setAllPixels(u_int16_t red, u_int16_t green, u_int16_t blue)
{
  for (int i = 0; i < strip.numPixels(); i++)
   d4806:	3401      	adds	r4, #1
   d4808:	e7de      	b.n	d47c8 <_Z12setAllPixelsttt+0x14>
    else
    {
      strip.setPixelColor(i, red, green, blue);
    }
  }
  strip.show();
   d480a:	4803      	ldr	r0, [pc, #12]	; (d4818 <_Z12setAllPixelsttt+0x64>)
}
   d480c:	b002      	add	sp, #8
   d480e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    else
    {
      strip.setPixelColor(i, red, green, blue);
    }
  }
  strip.show();
   d4812:	f000 beb9 	b.w	d5588 <_ZN17Adafruit_NeoPixel4showEv>
   d4816:	bf00      	nop
   d4818:	2003d550 	.word	0x2003d550
   d481c:	2003d544 	.word	0x2003d544
   d4820:	2003d548 	.word	0x2003d548
   d4824:	2003d549 	.word	0x2003d549

000d4828 <setup>:
    chaseOff(CHASE_DELAY);
  }
}

void setup()
{
   d4828:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);

  strip.setBrightness(BRIGHTNESS);
   d482a:	4c21      	ldr	r4, [pc, #132]	; (d48b0 <setup+0x88>)
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d482c:	4d21      	ldr	r5, [pc, #132]	; (d48b4 <setup+0x8c>)
  }
}

void setup()
{
  Serial.begin(9600);
   d482e:	f003 f8f9 	bl	d7a24 <_Z16_fetch_usbserialv>
   d4832:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4836:	f003 f8e9 	bl	d7a0c <_ZN9USBSerial5beginEl>

  strip.setBrightness(BRIGHTNESS);
   d483a:	2196      	movs	r1, #150	; 0x96
   d483c:	4620      	mov	r0, r4
   d483e:	f001 f8c6 	bl	d59ce <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  strip.begin();
   d4842:	4620      	mov	r0, r4
   d4844:	f000 fe69 	bl	d551a <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
   d4848:	4620      	mov	r0, r4
   d484a:	f000 fe9d 	bl	d5588 <_ZN17Adafruit_NeoPixel4showEv>

  setAllPixels(0, 0, 255);
   d484e:	2100      	movs	r1, #0
  delay(1000);

  Mesh.subscribe("tone", playTone);
   d4850:	4c19      	ldr	r4, [pc, #100]	; (d48b8 <setup+0x90>)

  strip.setBrightness(BRIGHTNESS);
  strip.begin();
  strip.show();

  setAllPixels(0, 0, 255);
   d4852:	4608      	mov	r0, r1
   d4854:	22ff      	movs	r2, #255	; 0xff
   d4856:	f7ff ffad 	bl	d47b4 <_Z12setAllPixelsttt>
  delay(1000);
   d485a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d485e:	f001 fbb5 	bl	d5fcc <delay>

  Mesh.subscribe("tone", playTone);
   d4862:	4a16      	ldr	r2, [pc, #88]	; (d48bc <setup+0x94>)
   d4864:	4916      	ldr	r1, [pc, #88]	; (d48c0 <setup+0x98>)
   d4866:	4620      	mov	r0, r4
   d4868:	f002 f9ec 	bl	d6c44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("no-tone", stopTone);
   d486c:	4a15      	ldr	r2, [pc, #84]	; (d48c4 <setup+0x9c>)
   d486e:	4916      	ldr	r1, [pc, #88]	; (d48c8 <setup+0xa0>)
   d4870:	4620      	mov	r0, r4
   d4872:	f002 f9e7 	bl	d6c44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d4876:	462a      	mov	r2, r5
   d4878:	4914      	ldr	r1, [pc, #80]	; (d48cc <setup+0xa4>)
   d487a:	4815      	ldr	r0, [pc, #84]	; (d48d0 <setup+0xa8>)
   d487c:	f001 fc08 	bl	d6090 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4880:	2300      	movs	r3, #0
   d4882:	2202      	movs	r2, #2
   d4884:	4913      	ldr	r1, [pc, #76]	; (d48d4 <setup+0xac>)
   d4886:	4814      	ldr	r0, [pc, #80]	; (d48d8 <setup+0xb0>)
   d4888:	f001 faf8 	bl	d5e7c <spark_variable>

  Particle.function("setMode", setModeCloud);
  Particle.variable("mode", animationMode);

  Mesh.subscribe(SUB_STRING, startStrip);
   d488c:	4a13      	ldr	r2, [pc, #76]	; (d48dc <setup+0xb4>)
   d488e:	4914      	ldr	r1, [pc, #80]	; (d48e0 <setup+0xb8>)
   d4890:	4620      	mov	r0, r4
   d4892:	f002 f9d7 	bl	d6c44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("setMode", setModeMesh);
   d4896:	4629      	mov	r1, r5
   d4898:	4a12      	ldr	r2, [pc, #72]	; (d48e4 <setup+0xbc>)
   d489a:	4620      	mov	r0, r4
   d489c:	f002 f9d2 	bl	d6c44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("setColor", setColor);
   d48a0:	4620      	mov	r0, r4
   d48a2:	4a11      	ldr	r2, [pc, #68]	; (d48e8 <setup+0xc0>)
   d48a4:	4911      	ldr	r1, [pc, #68]	; (d48ec <setup+0xc4>)
}
   d48a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Particle.function("setMode", setModeCloud);
  Particle.variable("mode", animationMode);

  Mesh.subscribe(SUB_STRING, startStrip);
  Mesh.subscribe("setMode", setModeMesh);
  Mesh.subscribe("setColor", setColor);
   d48aa:	f002 b9cb 	b.w	d6c44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d48ae:	bf00      	nop
   d48b0:	2003d550 	.word	0x2003d550
   d48b4:	000dba26 	.word	0x000dba26
   d48b8:	2003e3ec 	.word	0x2003e3ec
   d48bc:	000d4661 	.word	0x000d4661
   d48c0:	000dba21 	.word	0x000dba21
   d48c4:	000d4509 	.word	0x000d4509
   d48c8:	000dba1e 	.word	0x000dba1e
   d48cc:	000d4515 	.word	0x000d4515
   d48d0:	000d6065 	.word	0x000d6065
   d48d4:	2003e3d0 	.word	0x2003e3d0
   d48d8:	000dba2e 	.word	0x000dba2e
   d48dc:	000d471d 	.word	0x000d471d
   d48e0:	000dba33 	.word	0x000dba33
   d48e4:	000d4529 	.word	0x000d4529
   d48e8:	000d4b65 	.word	0x000d4b65
   d48ec:	000dba3e 	.word	0x000dba3e

000d48f0 <_Z7rainbowh>:
    FadeInOut(0xff, 0x77, 0x00);
  }
}

void rainbow(uint8_t wait)
{
   d48f0:	b570      	push	{r4, r5, r6, lr}
   d48f2:	4606      	mov	r6, r0
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d48f4:	2500      	movs	r5, #0
   d48f6:	2400      	movs	r4, #0
  {
    for (i = 0; i < strip.numPixels(); i++)
   d48f8:	480e      	ldr	r0, [pc, #56]	; (d4934 <_Z7rainbowh+0x44>)
   d48fa:	f001 f866 	bl	d59ca <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d48fe:	4284      	cmp	r4, r0
   d4900:	d20b      	bcs.n	d491a <_Z7rainbowh+0x2a>
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
   d4902:	1960      	adds	r0, r4, r5
   d4904:	b2c0      	uxtb	r0, r0
   d4906:	f7ff ff25 	bl	d4754 <_Z5Wheelh>
   d490a:	4621      	mov	r1, r4
   d490c:	4602      	mov	r2, r0
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
  {
    for (i = 0; i < strip.numPixels(); i++)
   d490e:	3401      	adds	r4, #1
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
   d4910:	4808      	ldr	r0, [pc, #32]	; (d4934 <_Z7rainbowh+0x44>)
   d4912:	f001 f80a 	bl	d592a <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
  {
    for (i = 0; i < strip.numPixels(); i++)
   d4916:	b2a4      	uxth	r4, r4
   d4918:	e7ee      	b.n	d48f8 <_Z7rainbowh+0x8>
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
   d491a:	4806      	ldr	r0, [pc, #24]	; (d4934 <_Z7rainbowh+0x44>)

void rainbow(uint8_t wait)
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d491c:	3501      	adds	r5, #1
  {
    for (i = 0; i < strip.numPixels(); i++)
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
   d491e:	f000 fe33 	bl	d5588 <_ZN17Adafruit_NeoPixel4showEv>

void rainbow(uint8_t wait)
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d4922:	b2ad      	uxth	r5, r5
    for (i = 0; i < strip.numPixels(); i++)
    {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
   d4924:	4630      	mov	r0, r6
   d4926:	f001 fb51 	bl	d5fcc <delay>

void rainbow(uint8_t wait)
{
  uint16_t i, j;

  for (j = 0; j < 256; j++)
   d492a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   d492e:	d1e2      	bne.n	d48f6 <_Z7rainbowh+0x6>
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
   d4930:	bd70      	pop	{r4, r5, r6, pc}
   d4932:	bf00      	nop
   d4934:	2003d550 	.word	0x2003d550

000d4938 <_Z6setAllhhh>:
    strip.show();
  }
}

void setAll(byte red, byte green, byte blue)
{
   d4938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d493a:	4605      	mov	r5, r0
   d493c:	460e      	mov	r6, r1
   d493e:	4617      	mov	r7, r2
  for (int i = 0; i < PIXEL_COUNT; i++)
   d4940:	2400      	movs	r4, #0
  {
    strip.setPixelColor(i, strip.Color(red, green, blue));
   d4942:	463a      	mov	r2, r7
   d4944:	4631      	mov	r1, r6
   d4946:	4628      	mov	r0, r5
   d4948:	f001 f83a 	bl	d59c0 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d494c:	b2a1      	uxth	r1, r4
   d494e:	4602      	mov	r2, r0
  }
}

void setAll(byte red, byte green, byte blue)
{
  for (int i = 0; i < PIXEL_COUNT; i++)
   d4950:	3401      	adds	r4, #1
  {
    strip.setPixelColor(i, strip.Color(red, green, blue));
   d4952:	4805      	ldr	r0, [pc, #20]	; (d4968 <_Z6setAllhhh+0x30>)
   d4954:	f000 ffe9 	bl	d592a <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  }
}

void setAll(byte red, byte green, byte blue)
{
  for (int i = 0; i < PIXEL_COUNT; i++)
   d4958:	2c3c      	cmp	r4, #60	; 0x3c
   d495a:	d1f2      	bne.n	d4942 <_Z6setAllhhh+0xa>
  {
    strip.setPixelColor(i, strip.Color(red, green, blue));
  }

  strip.show();
   d495c:	4802      	ldr	r0, [pc, #8]	; (d4968 <_Z6setAllhhh+0x30>)
   d495e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < PIXEL_COUNT; i++)
  {
    strip.setPixelColor(i, strip.Color(red, green, blue));
  }

  strip.show();
   d4962:	f000 be11 	b.w	d5588 <_ZN17Adafruit_NeoPixel4showEv>
   d4966:	bf00      	nop
   d4968:	2003d550 	.word	0x2003d550

000d496c <_Z9FadeInOuthhh>:
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

void FadeInOut(byte red, byte green, byte blue)
{
   d496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4970:	4683      	mov	fp, r0
   d4972:	b089      	sub	sp, #36	; 0x24
   d4974:	468a      	mov	sl, r1
   d4976:	4617      	mov	r7, r2
  float r, g, b;

  for (int k = 0; k < 256; k = k + 1)
   d4978:	2400      	movs	r4, #0
  {
    r = (k / 256.0) * red;
   d497a:	4620      	mov	r0, r4
   d497c:	f004 fdc6 	bl	d950c <__aeabi_i2d>
   d4980:	2200      	movs	r2, #0
   d4982:	4b4b      	ldr	r3, [pc, #300]	; (d4ab0 <_Z9FadeInOuthhh+0x144>)
   d4984:	f004 fe28 	bl	d95d8 <__aeabi_dmul>
   d4988:	4680      	mov	r8, r0
   d498a:	4658      	mov	r0, fp
   d498c:	4689      	mov	r9, r1
   d498e:	f004 fdbd 	bl	d950c <__aeabi_i2d>
   d4992:	e9cd 0100 	strd	r0, r1, [sp]
    g = (k / 256.0) * green;
   d4996:	4650      	mov	r0, sl
   d4998:	f004 fdb8 	bl	d950c <__aeabi_i2d>
   d499c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b = (k / 256.0) * blue;
   d49a0:	4638      	mov	r0, r7
   d49a2:	f004 fdb3 	bl	d950c <__aeabi_i2d>
    setAll(r, g, b);
   d49a6:	4602      	mov	r2, r0
   d49a8:	460b      	mov	r3, r1

  for (int k = 0; k < 256; k = k + 1)
  {
    r = (k / 256.0) * red;
    g = (k / 256.0) * green;
    b = (k / 256.0) * blue;
   d49aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
    setAll(r, g, b);
   d49ae:	4640      	mov	r0, r8
   d49b0:	4649      	mov	r1, r9
   d49b2:	f004 fe11 	bl	d95d8 <__aeabi_dmul>
   d49b6:	f005 f907 	bl	d9bc8 <__aeabi_d2f>
   d49ba:	ee07 0a90 	vmov	s15, r0
   d49be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d49c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d49c6:	4640      	mov	r0, r8
   d49c8:	4649      	mov	r1, r9
   d49ca:	edcd 7a07 	vstr	s15, [sp, #28]
   d49ce:	f004 fe03 	bl	d95d8 <__aeabi_dmul>
   d49d2:	f005 f8f9 	bl	d9bc8 <__aeabi_d2f>
   d49d6:	ee07 0a90 	vmov	s15, r0
   d49da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d49de:	e9dd 2300 	ldrd	r2, r3, [sp]
   d49e2:	4640      	mov	r0, r8
   d49e4:	4649      	mov	r1, r9
   d49e6:	f89d 601c 	ldrb.w	r6, [sp, #28]
   d49ea:	edcd 7a07 	vstr	s15, [sp, #28]
   d49ee:	f004 fdf3 	bl	d95d8 <__aeabi_dmul>
   d49f2:	f005 f8e9 	bl	d9bc8 <__aeabi_d2f>
   d49f6:	ee07 0a90 	vmov	s15, r0
   d49fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d49fe:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d4a02:	edcd 7a07 	vstr	s15, [sp, #28]
   d4a06:	4632      	mov	r2, r6
   d4a08:	4629      	mov	r1, r5
   d4a0a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   d4a0e:	f7ff ff93 	bl	d4938 <_Z6setAllhhh>

void FadeInOut(byte red, byte green, byte blue)
{
  float r, g, b;

  for (int k = 0; k < 256; k = k + 1)
   d4a12:	3401      	adds	r4, #1
  {
    r = (k / 256.0) * red;
    g = (k / 256.0) * green;
    b = (k / 256.0) * blue;
    setAll(r, g, b);
    strip.show();
   d4a14:	4827      	ldr	r0, [pc, #156]	; (d4ab4 <_Z9FadeInOuthhh+0x148>)
   d4a16:	f000 fdb7 	bl	d5588 <_ZN17Adafruit_NeoPixel4showEv>

void FadeInOut(byte red, byte green, byte blue)
{
  float r, g, b;

  for (int k = 0; k < 256; k = k + 1)
   d4a1a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   d4a1e:	d1ac      	bne.n	d497a <_Z9FadeInOuthhh+0xe>
   d4a20:	24ff      	movs	r4, #255	; 0xff
    strip.show();
  }

  for (int k = 255; k >= 0; k = k - 2)
  {
    r = (k / 256.0) * red;
   d4a22:	4620      	mov	r0, r4
   d4a24:	f004 fd72 	bl	d950c <__aeabi_i2d>
   d4a28:	2200      	movs	r2, #0
   d4a2a:	4b21      	ldr	r3, [pc, #132]	; (d4ab0 <_Z9FadeInOuthhh+0x144>)
   d4a2c:	f004 fdd4 	bl	d95d8 <__aeabi_dmul>
    g = (k / 256.0) * green;
    b = (k / 256.0) * blue;
    setAll(r, g, b);
   d4a30:	4602      	mov	r2, r0
   d4a32:	460b      	mov	r3, r1
    strip.show();
  }

  for (int k = 255; k >= 0; k = k - 2)
  {
    r = (k / 256.0) * red;
   d4a34:	4606      	mov	r6, r0
   d4a36:	460f      	mov	r7, r1
    g = (k / 256.0) * green;
    b = (k / 256.0) * blue;
    setAll(r, g, b);
   d4a38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d4a3c:	f004 fdcc 	bl	d95d8 <__aeabi_dmul>
   d4a40:	f005 f8c2 	bl	d9bc8 <__aeabi_d2f>
   d4a44:	ee07 0a90 	vmov	s15, r0
   d4a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4a4c:	4632      	mov	r2, r6
   d4a4e:	463b      	mov	r3, r7
   d4a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d4a54:	edcd 7a07 	vstr	s15, [sp, #28]
   d4a58:	f004 fdbe 	bl	d95d8 <__aeabi_dmul>
   d4a5c:	f005 f8b4 	bl	d9bc8 <__aeabi_d2f>
   d4a60:	ee07 0a90 	vmov	s15, r0
   d4a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4a68:	463b      	mov	r3, r7
   d4a6a:	4632      	mov	r2, r6
   d4a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4a70:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d4a74:	edcd 7a07 	vstr	s15, [sp, #28]
   d4a78:	f004 fdae 	bl	d95d8 <__aeabi_dmul>
   d4a7c:	f005 f8a4 	bl	d9bc8 <__aeabi_d2f>
   d4a80:	ee07 0a90 	vmov	s15, r0
   d4a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4a88:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d4a8c:	edcd 7a07 	vstr	s15, [sp, #28]
   d4a90:	4642      	mov	r2, r8
   d4a92:	4629      	mov	r1, r5
   d4a94:	f89d 001c 	ldrb.w	r0, [sp, #28]
   d4a98:	f7ff ff4e 	bl	d4938 <_Z6setAllhhh>
    b = (k / 256.0) * blue;
    setAll(r, g, b);
    strip.show();
  }

  for (int k = 255; k >= 0; k = k - 2)
   d4a9c:	3c02      	subs	r4, #2
  {
    r = (k / 256.0) * red;
    g = (k / 256.0) * green;
    b = (k / 256.0) * blue;
    setAll(r, g, b);
    strip.show();
   d4a9e:	4805      	ldr	r0, [pc, #20]	; (d4ab4 <_Z9FadeInOuthhh+0x148>)
   d4aa0:	f000 fd72 	bl	d5588 <_ZN17Adafruit_NeoPixel4showEv>
    b = (k / 256.0) * blue;
    setAll(r, g, b);
    strip.show();
  }

  for (int k = 255; k >= 0; k = k - 2)
   d4aa4:	1c63      	adds	r3, r4, #1
   d4aa6:	d1bc      	bne.n	d4a22 <_Z9FadeInOuthhh+0xb6>
    g = (k / 256.0) * green;
    b = (k / 256.0) * blue;
    setAll(r, g, b);
    strip.show();
  }
}
   d4aa8:	b009      	add	sp, #36	; 0x24
   d4aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4aae:	bf00      	nop
   d4ab0:	3f700000 	.word	0x3f700000
   d4ab4:	2003d550 	.word	0x2003d550

000d4ab8 <loop>:
  Mesh.subscribe("setColor", setColor);
}

void loop()
{
  if (animationMode != 4 && animationMode != 5 && animationMode != 6)
   d4ab8:	4b0c      	ldr	r3, [pc, #48]	; (d4aec <loop+0x34>)
   d4aba:	681b      	ldr	r3, [r3, #0]
   d4abc:	1f1a      	subs	r2, r3, #4
   d4abe:	2a02      	cmp	r2, #2
   d4ac0:	d906      	bls.n	d4ad0 <loop+0x18>
  {
    if (!lightUp)
   d4ac2:	4b0b      	ldr	r3, [pc, #44]	; (d4af0 <loop+0x38>)
   d4ac4:	781a      	ldrb	r2, [r3, #0]
   d4ac6:	b97a      	cbnz	r2, d4ae8 <loop+0x30>
    {
      setAllPixels(0, 0, 0);
   d4ac8:	4611      	mov	r1, r2
   d4aca:	4610      	mov	r0, r2
   d4acc:	f7ff be72 	b.w	d47b4 <_Z12setAllPixelsttt>
    }
  }
  else if (animationMode == 4)
   d4ad0:	2b04      	cmp	r3, #4
   d4ad2:	d102      	bne.n	d4ada <loop+0x22>
  {
    rainbow(20);
   d4ad4:	2014      	movs	r0, #20
   d4ad6:	f7ff bf0b 	b.w	d48f0 <_Z7rainbowh>
  }
  else if (animationMode == 6)
   d4ada:	2b06      	cmp	r3, #6
   d4adc:	d104      	bne.n	d4ae8 <loop+0x30>
  {
    FadeInOut(0xff, 0x77, 0x00);
   d4ade:	2200      	movs	r2, #0
   d4ae0:	2177      	movs	r1, #119	; 0x77
   d4ae2:	20ff      	movs	r0, #255	; 0xff
   d4ae4:	f7ff bf42 	b.w	d496c <_Z9FadeInOuthhh>
   d4ae8:	4770      	bx	lr
   d4aea:	bf00      	nop
   d4aec:	2003e3d0 	.word	0x2003e3d0
   d4af0:	2003d549 	.word	0x2003d549

000d4af4 <_GLOBAL__sub_I_jsonParser>:
  {
    strip.setPixelColor(i, strip.Color(red, green, blue));
  }

  strip.show();
   d4af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4af6:	4b14      	ldr	r3, [pc, #80]	; (d4b48 <_GLOBAL__sub_I_jsonParser+0x54>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d4af8:	4c14      	ldr	r4, [pc, #80]	; (d4b4c <_GLOBAL__sub_I_jsonParser+0x58>)
#include "application.h"
#include "soundtocolor.h"
#include "neopixel.h"

#include "JsonParserGeneratorRK.h"
JsonParserStatic<2048, 100> jsonParser;
   d4afa:	4d15      	ldr	r5, [pc, #84]	; (d4b50 <_GLOBAL__sub_I_jsonParser+0x5c>)
   d4afc:	2200      	movs	r2, #0
   d4afe:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4b00:	f001 f806 	bl	d5b10 <HAL_Pin_Map>
   d4b04:	2364      	movs	r3, #100	; 0x64
   d4b06:	9300      	str	r3, [sp, #0]
   d4b08:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d4b0c:	f604 032c 	addw	r3, r4, #2092	; 0x82c
   d4b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d4b14:	4620      	mov	r0, r4
   d4b16:	f000 f921 	bl	d4d5c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d4b1a:	4b0e      	ldr	r3, [pc, #56]	; (d4b54 <_GLOBAL__sub_I_jsonParser+0x60>)
   d4b1c:	6023      	str	r3, [r4, #0]
   d4b1e:	462a      	mov	r2, r5
   d4b20:	490d      	ldr	r1, [pc, #52]	; (d4b58 <_GLOBAL__sub_I_jsonParser+0x64>)
   d4b22:	4620      	mov	r0, r4
*/
int animationMode = 0;
bool useWheel = false;
int wheelPos;

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4b24:	4c0d      	ldr	r4, [pc, #52]	; (d4b5c <_GLOBAL__sub_I_jsonParser+0x68>)
#include "application.h"
#include "soundtocolor.h"
#include "neopixel.h"

#include "JsonParserGeneratorRK.h"
JsonParserStatic<2048, 100> jsonParser;
   d4b26:	f003 f8a5 	bl	d7c74 <__aeabi_atexit>
*/
int animationMode = 0;
bool useWheel = false;
int wheelPos;

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4b2a:	2302      	movs	r3, #2
   d4b2c:	461a      	mov	r2, r3
   d4b2e:	213c      	movs	r1, #60	; 0x3c
   d4b30:	4620      	mov	r0, r4
   d4b32:	f000 fd17 	bl	d5564 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4b36:	490a      	ldr	r1, [pc, #40]	; (d4b60 <_GLOBAL__sub_I_jsonParser+0x6c>)
   d4b38:	462a      	mov	r2, r5
   d4b3a:	4620      	mov	r0, r4
  {
    strip.setPixelColor(i, strip.Color(red, green, blue));
  }

  strip.show();
   d4b3c:	b003      	add	sp, #12
   d4b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
*/
int animationMode = 0;
bool useWheel = false;
int wheelPos;

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4b42:	f003 b897 	b.w	d7c74 <__aeabi_atexit>
   d4b46:	bf00      	nop
   d4b48:	2003d54a 	.word	0x2003d54a
   d4b4c:	2003d564 	.word	0x2003d564
   d4b50:	2003d540 	.word	0x2003d540
   d4b54:	000dba0c 	.word	0x000dba0c
   d4b58:	000d454d 	.word	0x000d454d
   d4b5c:	2003d550 	.word	0x2003d550
   d4b60:	000d54c5 	.word	0x000d54c5

000d4b64 <_Z8setColorPKcS0_>:
    blueValue = random(1, 256);
  }
}

void setColor(const char *event, const char *data)
{
   d4b64:	b510      	push	{r4, lr}
  // Split the comma-delimited list into RGB values
  jsonParser.clear();
   d4b66:	483b      	ldr	r0, [pc, #236]	; (d4c54 <_Z8setColorPKcS0_+0xf0>)
    blueValue = random(1, 256);
  }
}

void setColor(const char *event, const char *data)
{
   d4b68:	b08a      	sub	sp, #40	; 0x28
   d4b6a:	460c      	mov	r4, r1
  // Split the comma-delimited list into RGB values
  jsonParser.clear();
   d4b6c:	f000 f8f2 	bl	d4d54 <_ZN10JsonBuffer5clearEv>
	/**
	 * @brief Add a c-string to the end of the buffer
	 *
	 * @param data Pointer to a c-string (null terminated).
	 */
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d4b70:	4620      	mov	r0, r4
   d4b72:	f005 f944 	bl	d9dfe <strlen>
   d4b76:	4621      	mov	r1, r4
   d4b78:	4602      	mov	r2, r0
   d4b7a:	4836      	ldr	r0, [pc, #216]	; (d4c54 <_Z8setColorPKcS0_+0xf0>)
   d4b7c:	f000 f8cc 	bl	d4d18 <_ZN10JsonBuffer7addDataEPKcj>
  jsonParser.addString(data);

  if (jsonParser.parse())
   d4b80:	4834      	ldr	r0, [pc, #208]	; (d4c54 <_Z8setColorPKcS0_+0xf0>)
   d4b82:	f000 fc4a 	bl	d541a <_ZN10JsonParser5parseEv>
   d4b86:	2800      	cmp	r0, #0
   d4b88:	d03f      	beq.n	d4c0a <_Z8setColorPKcS0_+0xa6>
  {
    // set to R, G and B
    redValue = jsonParser.getReference().key("red").valueInt();
   d4b8a:	a806      	add	r0, sp, #24
   d4b8c:	4931      	ldr	r1, [pc, #196]	; (d4c54 <_Z8setColorPKcS0_+0xf0>)
   d4b8e:	f000 f8f5 	bl	d4d7c <_ZNK10JsonParser12getReferenceEv>
   d4b92:	4a31      	ldr	r2, [pc, #196]	; (d4c58 <_Z8setColorPKcS0_+0xf4>)
   d4b94:	a906      	add	r1, sp, #24
   d4b96:	a803      	add	r0, sp, #12
   d4b98:	f000 fa58 	bl	d504c <_ZNK13JsonReference3keyEPKc>
   d4b9c:	2100      	movs	r1, #0
   d4b9e:	a803      	add	r0, sp, #12
   d4ba0:	f000 f96c 	bl	d4e7c <_ZNK13JsonReference8valueIntEi>
   d4ba4:	4b2d      	ldr	r3, [pc, #180]	; (d4c5c <_Z8setColorPKcS0_+0xf8>)
   d4ba6:	6018      	str	r0, [r3, #0]
   d4ba8:	a803      	add	r0, sp, #12
   d4baa:	f000 f865 	bl	d4c78 <_ZN13JsonReferenceD1Ev>
   d4bae:	a806      	add	r0, sp, #24
   d4bb0:	f000 f862 	bl	d4c78 <_ZN13JsonReferenceD1Ev>
    greenValue = jsonParser.getReference().key("green").valueInt();
   d4bb4:	a806      	add	r0, sp, #24
   d4bb6:	4927      	ldr	r1, [pc, #156]	; (d4c54 <_Z8setColorPKcS0_+0xf0>)
   d4bb8:	f000 f8e0 	bl	d4d7c <_ZNK10JsonParser12getReferenceEv>
   d4bbc:	4a28      	ldr	r2, [pc, #160]	; (d4c60 <_Z8setColorPKcS0_+0xfc>)
   d4bbe:	a906      	add	r1, sp, #24
   d4bc0:	a803      	add	r0, sp, #12
   d4bc2:	f000 fa43 	bl	d504c <_ZNK13JsonReference3keyEPKc>
   d4bc6:	2100      	movs	r1, #0
   d4bc8:	a803      	add	r0, sp, #12
   d4bca:	f000 f957 	bl	d4e7c <_ZNK13JsonReference8valueIntEi>
   d4bce:	4b25      	ldr	r3, [pc, #148]	; (d4c64 <_Z8setColorPKcS0_+0x100>)
   d4bd0:	6018      	str	r0, [r3, #0]
   d4bd2:	a803      	add	r0, sp, #12
   d4bd4:	f000 f850 	bl	d4c78 <_ZN13JsonReferenceD1Ev>
   d4bd8:	a806      	add	r0, sp, #24
   d4bda:	f000 f84d 	bl	d4c78 <_ZN13JsonReferenceD1Ev>
    blueValue = jsonParser.getReference().key("blue").valueInt();
   d4bde:	a806      	add	r0, sp, #24
   d4be0:	491c      	ldr	r1, [pc, #112]	; (d4c54 <_Z8setColorPKcS0_+0xf0>)
   d4be2:	f000 f8cb 	bl	d4d7c <_ZNK10JsonParser12getReferenceEv>
   d4be6:	4a20      	ldr	r2, [pc, #128]	; (d4c68 <_Z8setColorPKcS0_+0x104>)
   d4be8:	a906      	add	r1, sp, #24
   d4bea:	a803      	add	r0, sp, #12
   d4bec:	f000 fa2e 	bl	d504c <_ZNK13JsonReference3keyEPKc>
   d4bf0:	2100      	movs	r1, #0
   d4bf2:	a803      	add	r0, sp, #12
   d4bf4:	f000 f942 	bl	d4e7c <_ZNK13JsonReference8valueIntEi>
   d4bf8:	4b1c      	ldr	r3, [pc, #112]	; (d4c6c <_Z8setColorPKcS0_+0x108>)
   d4bfa:	6018      	str	r0, [r3, #0]
   d4bfc:	a803      	add	r0, sp, #12
   d4bfe:	f000 f83b 	bl	d4c78 <_ZN13JsonReferenceD1Ev>
   d4c02:	a806      	add	r0, sp, #24
   d4c04:	f000 f838 	bl	d4c78 <_ZN13JsonReferenceD1Ev>
   d4c08:	e022      	b.n	d4c50 <_Z8setColorPKcS0_+0xec>
  }
  else
  {
    Particle.publish("parse-fail", String(data));
   d4c0a:	4621      	mov	r1, r4
   d4c0c:	a806      	add	r0, sp, #24
   d4c0e:	f002 fa7f 	bl	d7110 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c12:	4b17      	ldr	r3, [pc, #92]	; (d4c70 <_Z8setColorPKcS0_+0x10c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c14:	9a06      	ldr	r2, [sp, #24]
   d4c16:	781b      	ldrb	r3, [r3, #0]
   d4c18:	f88d 3000 	strb.w	r3, [sp]
   d4c1c:	4915      	ldr	r1, [pc, #84]	; (d4c74 <_Z8setColorPKcS0_+0x110>)
   d4c1e:	233c      	movs	r3, #60	; 0x3c
   d4c20:	a803      	add	r0, sp, #12
   d4c22:	f001 fb6b 	bl	d62fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4c26:	9c04      	ldr	r4, [sp, #16]
   d4c28:	b17c      	cbz	r4, d4c4a <_Z8setColorPKcS0_+0xe6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4c2a:	6863      	ldr	r3, [r4, #4]
   d4c2c:	3b01      	subs	r3, #1
   d4c2e:	6063      	str	r3, [r4, #4]
   d4c30:	b95b      	cbnz	r3, d4c4a <_Z8setColorPKcS0_+0xe6>
        {
          _M_dispose();
   d4c32:	6823      	ldr	r3, [r4, #0]
   d4c34:	4620      	mov	r0, r4
   d4c36:	689b      	ldr	r3, [r3, #8]
   d4c38:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c3a:	68a3      	ldr	r3, [r4, #8]
   d4c3c:	3b01      	subs	r3, #1
   d4c3e:	60a3      	str	r3, [r4, #8]
   d4c40:	b91b      	cbnz	r3, d4c4a <_Z8setColorPKcS0_+0xe6>
            _M_destroy();
   d4c42:	6823      	ldr	r3, [r4, #0]
   d4c44:	4620      	mov	r0, r4
   d4c46:	68db      	ldr	r3, [r3, #12]
   d4c48:	4798      	blx	r3
   d4c4a:	a806      	add	r0, sp, #24
   d4c4c:	f002 fa19 	bl	d7082 <_ZN6StringD1Ev>
  }
}
   d4c50:	b00a      	add	sp, #40	; 0x28
   d4c52:	bd10      	pop	{r4, pc}
   d4c54:	2003d564 	.word	0x2003d564
   d4c58:	000dba47 	.word	0x000dba47
   d4c5c:	2003d54c 	.word	0x2003d54c
   d4c60:	000dba4b 	.word	0x000dba4b
   d4c64:	2003d490 	.word	0x2003d490
   d4c68:	000dba51 	.word	0x000dba51
   d4c6c:	2003d494 	.word	0x2003d494
   d4c70:	2003d54a 	.word	0x2003d54a
   d4c74:	000dba56 	.word	0x000dba56

000d4c78 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   d4c78:	4770      	bx	lr

000d4c7a <_ZN13JsonReferenceD0Ev>:

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
   d4c7a:	b510      	push	{r4, lr}
   d4c7c:	4604      	mov	r4, r0
}
   d4c7e:	f7ff fa0e 	bl	d409e <_ZdlPv>
   d4c82:	4620      	mov	r0, r4
   d4c84:	bd10      	pop	{r4, pc}
	...

000d4c88 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4c88:	b510      	push	{r4, lr}
   d4c8a:	4b05      	ldr	r3, [pc, #20]	; (d4ca0 <_ZN10JsonBufferD1Ev+0x18>)
   d4c8c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4c8e:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4c90:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4c92:	b91b      	cbnz	r3, d4c9c <_ZN10JsonBufferD1Ev+0x14>
   d4c94:	6840      	ldr	r0, [r0, #4]
   d4c96:	b108      	cbz	r0, d4c9c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4c98:	f001 f968 	bl	d5f6c <free>
	}
}
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	bd10      	pop	{r4, pc}
   d4ca0:	000dba7c 	.word	0x000dba7c

000d4ca4 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4ca8:	f7ff ffee 	bl	d4c88 <_ZN10JsonBufferD1Ev>
   d4cac:	4620      	mov	r0, r4
   d4cae:	f7ff f9f6 	bl	d409e <_ZdlPv>
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	bd10      	pop	{r4, pc}
	...

000d4cb8 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4cb8:	b510      	push	{r4, lr}
   d4cba:	4b07      	ldr	r3, [pc, #28]	; (d4cd8 <_ZN10JsonParserD1Ev+0x20>)
   d4cbc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d4cbe:	7c03      	ldrb	r3, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4cc0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d4cc2:	b91b      	cbnz	r3, d4ccc <_ZN10JsonParserD1Ev+0x14>
   d4cc4:	6940      	ldr	r0, [r0, #20]
   d4cc6:	b108      	cbz	r0, d4ccc <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d4cc8:	f001 f950 	bl	d5f6c <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4ccc:	4620      	mov	r0, r4
   d4cce:	f7ff ffdb 	bl	d4c88 <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	bd10      	pop	{r4, pc}
   d4cd6:	bf00      	nop
   d4cd8:	000dbabc 	.word	0x000dbabc

000d4cdc <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4cdc:	b510      	push	{r4, lr}
   d4cde:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d4ce0:	f7ff ffea 	bl	d4cb8 <_ZN10JsonParserD1Ev>
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	f7ff f9da 	bl	d409e <_ZdlPv>
   d4cea:	4620      	mov	r0, r4
   d4cec:	bd10      	pop	{r4, pc}

000d4cee <_ZN10JsonBuffer8allocateEj>:

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d4cee:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d4cf0:	7c03      	ldrb	r3, [r0, #16]

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d4cf2:	4604      	mov	r4, r0
   d4cf4:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d4cf6:	b10b      	cbz	r3, d4cfc <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
   d4cf8:	2000      	movs	r0, #0
   d4cfa:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
   d4cfc:	6840      	ldr	r0, [r0, #4]
   d4cfe:	b110      	cbz	r0, d4d06 <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
   d4d00:	f001 f93c 	bl	d5f7c <realloc>
   d4d04:	e002      	b.n	d4d0c <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
   d4d06:	4608      	mov	r0, r1
   d4d08:	f001 f928 	bl	d5f5c <malloc>
		}
		if (newBuffer) {
   d4d0c:	2800      	cmp	r0, #0
   d4d0e:	d0f3      	beq.n	d4cf8 <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
   d4d10:	6060      	str	r0, [r4, #4]
			bufferLen = len;
   d4d12:	60a5      	str	r5, [r4, #8]
			return true;
   d4d14:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
   d4d16:	bd38      	pop	{r3, r4, r5, pc}

000d4d18 <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d4d18:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   d4d1a:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d4d1c:	460e      	mov	r6, r1
   d4d1e:	4604      	mov	r4, r0
   d4d20:	4615      	mov	r5, r2
   d4d22:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
   d4d24:	b17b      	cbz	r3, d4d46 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d4d26:	1853      	adds	r3, r2, r1
   d4d28:	6882      	ldr	r2, [r0, #8]
   d4d2a:	4293      	cmp	r3, r2
   d4d2c:	d80b      	bhi.n	d4d46 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
   d4d2e:	68e3      	ldr	r3, [r4, #12]
   d4d30:	6860      	ldr	r0, [r4, #4]
   d4d32:	462a      	mov	r2, r5
   d4d34:	4631      	mov	r1, r6
   d4d36:	4418      	add	r0, r3
   d4d38:	f004 ffbf 	bl	d9cba <memcpy>
	offset += dataLen;
   d4d3c:	68e3      	ldr	r3, [r4, #12]
   d4d3e:	441d      	add	r5, r3
   d4d40:	60e5      	str	r5, [r4, #12]

	return true;
   d4d42:	2001      	movs	r0, #1
   d4d44:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
   d4d46:	4429      	add	r1, r5
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f7ff ffd0 	bl	d4cee <_ZN10JsonBuffer8allocateEj>
   d4d4e:	2800      	cmp	r0, #0
   d4d50:	d1ed      	bne.n	d4d2e <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
   d4d52:	bd70      	pop	{r4, r5, r6, pc}

000d4d54 <_ZN10JsonBuffer5clearEv>:

void JsonBuffer::clear() {
	offset = 0;
   d4d54:	2300      	movs	r3, #0
   d4d56:	60c3      	str	r3, [r0, #12]
   d4d58:	4770      	bx	lr
	...

000d4d5c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d4d5c:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4d5e:	6082      	str	r2, [r0, #8]
   d4d60:	2200      	movs	r2, #0
   d4d62:	60c2      	str	r2, [r0, #12]
   d4d64:	2201      	movs	r2, #1
   d4d66:	7402      	strb	r2, [r0, #16]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d4d68:	6143      	str	r3, [r0, #20]
   d4d6a:	4a03      	ldr	r2, [pc, #12]	; (d4d78 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d4d6c:	9b02      	ldr	r3, [sp, #8]
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4d6e:	6041      	str	r1, [r0, #4]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d4d70:	6002      	str	r2, [r0, #0]
   d4d72:	61c3      	str	r3, [r0, #28]

}
   d4d74:	bd10      	pop	{r4, pc}
   d4d76:	bf00      	nop
   d4d78:	000dbabc 	.word	0x000dbabc

000d4d7c <_ZNK10JsonParser12getReferenceEv>:
	return true;
}

JsonReference JsonParser::getReference() const {

	if (tokens < tokensEnd) {
   d4d7c:	698b      	ldr	r3, [r1, #24]
   d4d7e:	694a      	ldr	r2, [r1, #20]
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4d80:	6041      	str	r1, [r0, #4]
	return true;
}

JsonReference JsonParser::getReference() const {

	if (tokens < tokensEnd) {
   d4d82:	429a      	cmp	r2, r3
   d4d84:	4b03      	ldr	r3, [pc, #12]	; (d4d94 <_ZNK10JsonParser12getReferenceEv+0x18>)
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4d86:	6003      	str	r3, [r0, #0]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4d88:	bf2a      	itet	cs
   d4d8a:	2300      	movcs	r3, #0
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4d8c:	6082      	strcc	r2, [r0, #8]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4d8e:	6083      	strcs	r3, [r0, #8]
		return JsonReference(this, &tokens[0]);
	}
	else {
		return JsonReference(this);
	}
}
   d4d90:	4770      	bx	lr
   d4d92:	bf00      	nop
   d4d94:	000dba6c 	.word	0x000dba6c

000d4d98 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d4d98:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d4d9a:	6813      	ldr	r3, [r2, #0]
   d4d9c:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d4d9e:	6813      	ldr	r3, [r2, #0]
   d4da0:	f103 0410 	add.w	r4, r3, #16
   d4da4:	6014      	str	r4, [r2, #0]
   d4da6:	6986      	ldr	r6, [r0, #24]
   d4da8:	42b4      	cmp	r4, r6
   d4daa:	d20a      	bcs.n	d4dc2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d4dac:	699b      	ldr	r3, [r3, #24]
   d4dae:	688c      	ldr	r4, [r1, #8]
   d4db0:	42a3      	cmp	r3, r4
   d4db2:	da01      	bge.n	d4db8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d4db4:	429d      	cmp	r5, r3
   d4db6:	daf2      	bge.n	d4d9e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   d4db8:	42a3      	cmp	r3, r4
   d4dba:	bfcc      	ite	gt
   d4dbc:	2000      	movgt	r0, #0
   d4dbe:	2001      	movle	r0, #1
   d4dc0:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
   d4dc2:	2000      	movs	r0, #0
	}
	return true;
}
   d4dc4:	bd70      	pop	{r4, r5, r6, pc}

000d4dc6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4dc6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4dca:	ad02      	add	r5, sp, #8
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4dcc:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4dce:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4dd2:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4dd4:	f845 3d04 	str.w	r3, [r5, #-4]!
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4dd8:	4607      	mov	r7, r0
   d4dda:	460c      	mov	r4, r1
   d4ddc:	4691      	mov	r9, r2

	size_t index = 0;
   d4dde:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d4de2:	9b01      	ldr	r3, [sp, #4]
   d4de4:	69ba      	ldr	r2, [r7, #24]
   d4de6:	429a      	cmp	r2, r3
   d4de8:	d91e      	bls.n	d4e28 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
   d4dea:	6899      	ldr	r1, [r3, #8]
   d4dec:	68a2      	ldr	r2, [r4, #8]
   d4dee:	4291      	cmp	r1, r2
   d4df0:	da1a      	bge.n	d4e28 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
   d4df2:	45b0      	cmp	r8, r6
   d4df4:	d10b      	bne.n	d4e0e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
   d4df6:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
   d4dfa:	462a      	mov	r2, r5
   d4dfc:	4621      	mov	r1, r4
   d4dfe:	4638      	mov	r0, r7
   d4e00:	f7ff ffca 	bl	d4d98 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d4e04:	b118      	cbz	r0, d4e0e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
   d4e06:	9b01      	ldr	r3, [sp, #4]
   d4e08:	f8ca 3000 	str.w	r3, [sl]
				return true;
   d4e0c:	e00d      	b.n	d4e2a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
   d4e0e:	462a      	mov	r2, r5
   d4e10:	4621      	mov	r1, r4
   d4e12:	4638      	mov	r0, r7
   d4e14:	f7ff ffc0 	bl	d4d98 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d4e18:	462a      	mov	r2, r5
   d4e1a:	4621      	mov	r1, r4
   d4e1c:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
   d4e1e:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
   d4e22:	f7ff ffb9 	bl	d4d98 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d4e26:	e7dc      	b.n	d4de2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
   d4e28:	2000      	movs	r0, #0
}
   d4e2a:	b002      	add	sp, #8
   d4e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4e30 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
	}

	return index;
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   d4e30:	b570      	push	{r4, r5, r6, lr}

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   d4e32:	3b01      	subs	r3, #1
   d4e34:	2400      	movs	r4, #0
   d4e36:	684e      	ldr	r6, [r1, #4]
   d4e38:	688d      	ldr	r5, [r1, #8]
   d4e3a:	1bad      	subs	r5, r5, r6
   d4e3c:	42ac      	cmp	r4, r5
   d4e3e:	da07      	bge.n	d4e50 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
   d4e40:	429c      	cmp	r4, r3
   d4e42:	da05      	bge.n	d4e50 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
		dst[ii] = buffer[token->start + ii];
   d4e44:	6845      	ldr	r5, [r0, #4]
   d4e46:	4425      	add	r5, r4
   d4e48:	5dad      	ldrb	r5, [r5, r6]
   d4e4a:	5515      	strb	r5, [r2, r4]
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   d4e4c:	3401      	adds	r4, #1
   d4e4e:	e7f2      	b.n	d4e36 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
		dst[ii] = buffer[token->start + ii];
 	}
	dst[ii] = 0;
   d4e50:	2300      	movs	r3, #0
   d4e52:	5513      	strb	r3, [r2, r4]
   d4e54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e58 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
	else {
		return false;
	}
}

bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   d4e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4e5a:	4614      	mov	r4, r2
	// Copy data here, because tokens are not null terminated
	char tmp[16];
	copyTokenValue(token, tmp, sizeof(tmp));
   d4e5c:	2310      	movs	r3, #16
   d4e5e:	466a      	mov	r2, sp
   d4e60:	f7ff ffe6 	bl	d4e30 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>

	if (sscanf(tmp, "%d", &result) == 1) {
   d4e64:	4622      	mov	r2, r4
   d4e66:	4904      	ldr	r1, [pc, #16]	; (d4e78 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   d4e68:	4668      	mov	r0, sp
   d4e6a:	f001 f88f 	bl	d5f8c <sscanf>
		return true;
	}
	else {
		return false;
	}
}
   d4e6e:	1e43      	subs	r3, r0, #1
   d4e70:	4258      	negs	r0, r3
   d4e72:	4158      	adcs	r0, r3
   d4e74:	b004      	add	sp, #16
   d4e76:	bd10      	pop	{r4, pc}
   d4e78:	000dbcad 	.word	0x000dbcad

000d4e7c <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   d4e7c:	b507      	push	{r0, r1, r2, lr}
   d4e7e:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   d4e80:	6881      	ldr	r1, [r0, #8]
   d4e82:	b119      	cbz	r1, d4e8c <_ZNK13JsonReference8valueIntEi+0x10>
   d4e84:	aa01      	add	r2, sp, #4
   d4e86:	6840      	ldr	r0, [r0, #4]
   d4e88:	f7ff ffe6 	bl	d4e58 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   d4e8c:	9801      	ldr	r0, [sp, #4]
   d4e8e:	b003      	add	sp, #12
   d4e90:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e94 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d4e94:	b538      	push	{r3, r4, r5, lr}
   d4e96:	4604      	mov	r4, r0
	if (str) {
   d4e98:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d4e9a:	460d      	mov	r5, r1
	if (str) {
   d4e9c:	b110      	cbz	r0, d4ea4 <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
   d4e9e:	f002 f98c 	bl	d71ba <_ZN6String6concatEc>
   d4ea2:	e007      	b.n	d4eb4 <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
   d4ea4:	6861      	ldr	r1, [r4, #4]
   d4ea6:	b129      	cbz	r1, d4eb4 <_ZN16JsonParserString6appendEc+0x20>
   d4ea8:	68a3      	ldr	r3, [r4, #8]
   d4eaa:	68e2      	ldr	r2, [r4, #12]
   d4eac:	3b01      	subs	r3, #1
   d4eae:	429a      	cmp	r2, r3
			buf[length] = ch;
   d4eb0:	bf38      	it	cc
   d4eb2:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
   d4eb4:	68e3      	ldr	r3, [r4, #12]
   d4eb6:	3301      	adds	r3, #1
   d4eb8:	60e3      	str	r3, [r4, #12]
   d4eba:	bd38      	pop	{r3, r4, r5, pc}

000d4ebc <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
   d4ebc:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d4ebe:	b570      	push	{r4, r5, r6, lr}
   d4ec0:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
   d4ec2:	d801      	bhi.n	d4ec8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
   d4ec4:	b2c1      	uxtb	r1, r0
   d4ec6:	e019      	b.n	d4efc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
   d4ec8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   d4ecc:	ea4f 15a0 	mov.w	r5, r0, asr #6
   d4ed0:	f000 063f 	and.w	r6, r0, #63	; 0x3f
   d4ed4:	d203      	bcs.n	d4ede <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
   d4ed6:	f065 013f 	orn	r1, r5, #63	; 0x3f
   d4eda:	b2c9      	uxtb	r1, r1
   d4edc:	e009      	b.n	d4ef2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
   d4ede:	0b01      	lsrs	r1, r0, #12
   d4ee0:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	f7ff ffd5 	bl	d4e94 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
   d4eea:	f005 013f 	and.w	r1, r5, #63	; 0x3f
   d4eee:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	f7ff ffce 	bl	d4e94 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d4ef8:	f046 0180 	orr.w	r1, r6, #128	; 0x80
   d4efc:	4620      	mov	r0, r4
	}
}
   d4efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d4f02:	f7ff bfc7 	b.w	d4e94 <_ZN16JsonParserString6appendEc>
	...

000d4f08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d4f08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d4f0c:	684d      	ldr	r5, [r1, #4]
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d4f0e:	4680      	mov	r8, r0
   d4f10:	460f      	mov	r7, r1
   d4f12:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;
   d4f14:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
   d4f16:	68b8      	ldr	r0, [r7, #8]
   d4f18:	4285      	cmp	r5, r0
   d4f1a:	da46      	bge.n	d4faa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa2>
   d4f1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
   d4f20:	b3cc      	cbz	r4, d4f96 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8e>
			escape = false;
			switch(buffer[ii]) {
   d4f22:	5d59      	ldrb	r1, [r3, r5]
   d4f24:	296e      	cmp	r1, #110	; 0x6e
   d4f26:	eb03 0205 	add.w	r2, r3, r5
   d4f2a:	d00f      	beq.n	d4f4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
   d4f2c:	d805      	bhi.n	d4f3a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x32>
   d4f2e:	2962      	cmp	r1, #98	; 0x62
   d4f30:	d00a      	beq.n	d4f48 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x40>
   d4f32:	2966      	cmp	r1, #102	; 0x66
   d4f34:	d10b      	bne.n	d4f4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d4f36:	210c      	movs	r1, #12
   d4f38:	e009      	b.n	d4f4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
   d4f3a:	2974      	cmp	r1, #116	; 0x74
   d4f3c:	d00e      	beq.n	d4f5c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x54>
   d4f3e:	2975      	cmp	r1, #117	; 0x75
   d4f40:	d00e      	beq.n	d4f60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x58>
   d4f42:	2972      	cmp	r1, #114	; 0x72
   d4f44:	d103      	bne.n	d4f4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
   d4f46:	e007      	b.n	d4f58 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x50>
			case 'b':
				str.append('\b');
   d4f48:	2108      	movs	r1, #8
   d4f4a:	e000      	b.n	d4f4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
   d4f4c:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d4f4e:	4630      	mov	r0, r6
   d4f50:	f7ff ffa0 	bl	d4e94 <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
   d4f54:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
   d4f56:	e026      	b.n	d4fa6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
   d4f58:	210d      	movs	r1, #13
   d4f5a:	e7f8      	b.n	d4f4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 't':
				str.append('\t');
   d4f5c:	2109      	movs	r1, #9
   d4f5e:	e7f6      	b.n	d4f4e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
   d4f60:	1d2b      	adds	r3, r5, #4
   d4f62:	4298      	cmp	r0, r3
   d4f64:	ddf6      	ble.n	d4f54 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
   d4f66:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
   d4f68:	a802      	add	r0, sp, #8
   d4f6a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d4f6e:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
   d4f70:	3301      	adds	r3, #1
   d4f72:	2b04      	cmp	r3, #4
   d4f74:	d1f8      	bne.n	d4f68 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x60>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d4f76:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4f78:	aa01      	add	r2, sp, #4
   d4f7a:	490e      	ldr	r1, [pc, #56]	; (d4fb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xac>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d4f7c:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4f80:	f001 f804 	bl	d5f8c <sscanf>
   d4f84:	2801      	cmp	r0, #1
   d4f86:	d1e5      	bne.n	d4f54 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
						appendUtf8((uint16_t)unicode, str);
   d4f88:	4631      	mov	r1, r6
   d4f8a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4f8e:	f7ff ff95 	bl	d4ebc <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d4f92:	3505      	adds	r5, #5
   d4f94:	e7de      	b.n	d4f54 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
   d4f96:	5d59      	ldrb	r1, [r3, r5]
   d4f98:	295c      	cmp	r1, #92	; 0x5c
   d4f9a:	d003      	beq.n	d4fa4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	f7ff ff79 	bl	d4e94 <_ZN16JsonParserString6appendEc>
   d4fa2:	e000      	b.n	d4fa6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
   d4fa4:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d4fa6:	3501      	adds	r5, #1
   d4fa8:	e7b5      	b.n	d4f16 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
   d4faa:	2001      	movs	r0, #1
   d4fac:	b004      	add	sp, #16
   d4fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4fb2:	bf00      	nop
   d4fb4:	000dba88 	.word	0x000dba88

000d4fb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d4fb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4fba:	460c      	mov	r4, r1
   d4fbc:	4606      	mov	r6, r0

	result = "";
   d4fbe:	490c      	ldr	r1, [pc, #48]	; (d4ff0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d4fc0:	4610      	mov	r0, r2
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d4fc2:	4615      	mov	r5, r2

	result = "";
   d4fc4:	f002 f8d1 	bl	d716a <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d4fc8:	68a3      	ldr	r3, [r4, #8]
   d4fca:	6861      	ldr	r1, [r4, #4]
   d4fcc:	1a59      	subs	r1, r3, r1
   d4fce:	3101      	adds	r1, #1
   d4fd0:	4628      	mov	r0, r5
   d4fd2:	f002 f874 	bl	d70be <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d4fd6:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d4fd8:	466a      	mov	r2, sp
   d4fda:	4621      	mov	r1, r4
   d4fdc:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d4fde:	9500      	str	r5, [sp, #0]
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	9302      	str	r3, [sp, #8]
   d4fe4:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d4fe6:	f7ff ff8f 	bl	d4f08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d4fea:	b004      	add	sp, #16
   d4fec:	bd70      	pop	{r4, r5, r6, pc}
   d4fee:	bf00      	nop
   d4ff0:	000dbb84 	.word	0x000dbb84

000d4ff4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ff8:	b089      	sub	sp, #36	; 0x24
   d4ffa:	4606      	mov	r6, r0
   d4ffc:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4ffe:	a804      	add	r0, sp, #16
   d5000:	4911      	ldr	r1, [pc, #68]	; (d5048 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d5002:	4690      	mov	r8, r2
   d5004:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d5006:	f002 f883 	bl	d7110 <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d500a:	2500      	movs	r5, #0
   d500c:	9500      	str	r5, [sp, #0]
   d500e:	464b      	mov	r3, r9
   d5010:	aa03      	add	r2, sp, #12
   d5012:	4639      	mov	r1, r7
   d5014:	4630      	mov	r0, r6
   d5016:	f7ff fed6 	bl	d4dc6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d501a:	4604      	mov	r4, r0
   d501c:	b168      	cbz	r0, d503a <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
   d501e:	aa04      	add	r2, sp, #16
   d5020:	9903      	ldr	r1, [sp, #12]
   d5022:	4630      	mov	r0, r6
   d5024:	f7ff ffc8 	bl	d4fb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d5028:	4604      	mov	r4, r0
   d502a:	b120      	cbz	r0, d5036 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d502c:	4641      	mov	r1, r8
   d502e:	a804      	add	r0, sp, #16
   d5030:	f002 f8d0 	bl	d71d4 <_ZNK6String6equalsEPKc>
   d5034:	b908      	cbnz	r0, d503a <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d5036:	3501      	adds	r5, #1
   d5038:	e7e8      	b.n	d500c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d503a:	a804      	add	r0, sp, #16
   d503c:	f002 f821 	bl	d7082 <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
   d5040:	4620      	mov	r0, r4
   d5042:	b009      	add	sp, #36	; 0x24
   d5044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5048:	000dbb84 	.word	0x000dbb84

000d504c <_ZNK13JsonReference3keyEPKc>:
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
}

JsonReference JsonReference::key(const char *name) const {
   d504c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d504e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d5050:	6889      	ldr	r1, [r1, #8]
   d5052:	4e0a      	ldr	r6, [pc, #40]	; (d507c <_ZNK13JsonReference3keyEPKc+0x30>)
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
}

JsonReference JsonReference::key(const char *name) const {
   d5054:	4604      	mov	r4, r0
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d5056:	b121      	cbz	r1, d5062 <_ZNK13JsonReference3keyEPKc+0x16>
   d5058:	ab01      	add	r3, sp, #4
   d505a:	6868      	ldr	r0, [r5, #4]
   d505c:	f7ff ffca 	bl	d4ff4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d5060:	b920      	cbnz	r0, d506c <_ZNK13JsonReference3keyEPKc+0x20>
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
   d5062:	686b      	ldr	r3, [r5, #4]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5064:	6063      	str	r3, [r4, #4]
   d5066:	6026      	str	r6, [r4, #0]
   d5068:	2300      	movs	r3, #0
   d506a:	e003      	b.n	d5074 <_ZNK13JsonReference3keyEPKc+0x28>

JsonReference JsonReference::key(const char *name) const {
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
		return JsonReference(parser, newToken);
   d506c:	686b      	ldr	r3, [r5, #4]
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d506e:	6063      	str	r3, [r4, #4]
   d5070:	9b01      	ldr	r3, [sp, #4]
   d5072:	6026      	str	r6, [r4, #0]
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
	}
}
   d5074:	4620      	mov	r0, r4
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d5076:	60a3      	str	r3, [r4, #8]
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
	}
}
   d5078:	b002      	add	sp, #8
   d507a:	bd70      	pop	{r4, r5, r6, pc}
   d507c:	000dba6c 	.word	0x000dba6c

000d5080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d5080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d5084:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5086:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d508a:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d508e:	f8d0 c000 	ldr.w	ip, [r0]
   d5092:	4594      	cmp	ip, r2
   d5094:	f080 819e 	bcs.w	d53d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
   d5098:	f811 800c 	ldrb.w	r8, [r1, ip]
   d509c:	f1b8 0f00 	cmp.w	r8, #0
   d50a0:	f000 8198 	beq.w	d53d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d50a4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d50a8:	f000 8116 	beq.w	d52d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
   d50ac:	d818      	bhi.n	d50e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
   d50ae:	f1b8 0f0d 	cmp.w	r8, #13
   d50b2:	f000 818b 	beq.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d50b6:	d806      	bhi.n	d50c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
   d50b8:	f1a8 0809 	sub.w	r8, r8, #9
   d50bc:	f1b8 0f01 	cmp.w	r8, #1
   d50c0:	f240 8184 	bls.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d50c4:	e13d      	b.n	d5342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d50c6:	f1b8 0f20 	cmp.w	r8, #32
   d50ca:	f000 817f 	beq.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d50ce:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d50d2:	f040 8136 	bne.w	d5342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
   d50d6:	f10c 0901 	add.w	r9, ip, #1
   d50da:	f8c0 9000 	str.w	r9, [r0]
   d50de:	e092      	b.n	d5206 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d50e0:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d50e4:	d03c      	beq.n	d5160 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d50e6:	d807      	bhi.n	d50f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
   d50e8:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d50ec:	f000 80f0 	beq.w	d52d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
   d50f0:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d50f4:	d007      	beq.n	d5106 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d50f6:	e124      	b.n	d5342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d50f8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d50fc:	d003      	beq.n	d5106 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d50fe:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d5102:	d02d      	beq.n	d5160 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d5104:	e11d      	b.n	d5342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
   d5106:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d5108:	2b00      	cmp	r3, #0
   d510a:	f000 815f 	beq.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d510e:	6847      	ldr	r7, [r0, #4]
   d5110:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5112:	42be      	cmp	r6, r7
   d5114:	f240 817d 	bls.w	d5412 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x392>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d5118:	f107 0c01 	add.w	ip, r7, #1
   d511c:	f8c0 c004 	str.w	ip, [r0, #4]
   d5120:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   d5124:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
   d5128:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d512a:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
   d512e:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5132:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
   d5136:	6887      	ldr	r7, [r0, #8]
   d5138:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d513a:	bf1f      	itttt	ne
   d513c:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d5140:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d5144:	3701      	addne	r7, #1
   d5146:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d514a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d514e:	bf14      	ite	ne
   d5150:	2702      	movne	r7, #2
   d5152:	2701      	moveq	r7, #1
   d5154:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
   d5158:	6807      	ldr	r7, [r0, #0]
   d515a:	f8ca 7004 	str.w	r7, [sl, #4]
   d515e:	e0b7      	b.n	d52d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d5160:	2b00      	cmp	r3, #0
   d5162:	f000 8133 	beq.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d5166:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d5168:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d516c:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
   d5170:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d5174:	bf14      	ite	ne
   d5176:	f04f 0a02 	movne.w	sl, #2
   d517a:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d517e:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
   d5182:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   d5186:	f1b9 0f00 	cmp.w	r9, #0
   d518a:	db19      	blt.n	d51c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d518c:	f8d8 7004 	ldr.w	r7, [r8, #4]
   d5190:	3701      	adds	r7, #1
   d5192:	d010      	beq.n	d51b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
   d5194:	f8d8 7008 	ldr.w	r7, [r8, #8]
   d5198:	1c7e      	adds	r6, r7, #1
   d519a:	d10c      	bne.n	d51b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
   d519c:	f898 b000 	ldrb.w	fp, [r8]
   d51a0:	45d3      	cmp	fp, sl
   d51a2:	f040 8129 	bne.w	d53f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d51a6:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d51a8:	f10c 0701 	add.w	r7, ip, #1
   d51ac:	f8c8 7008 	str.w	r7, [r8, #8]
   d51b0:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
   d51b4:	e011      	b.n	d51da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d51b6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   d51ba:	f1a8 0810 	sub.w	r8, r8, #16
   d51be:	e7e2      	b.n	d5186 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d51c0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d51c4:	f040 8102 	bne.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d51c8:	e116      	b.n	d53f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
				for (; i >= 0; i--) {
   d51ca:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   d51ce:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d51d2:	f1ac 0c10 	sub.w	ip, ip, #16
   d51d6:	f000 80f9 	beq.w	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d51da:	f8dc 7004 	ldr.w	r7, [ip, #4]
   d51de:	3701      	adds	r7, #1
   d51e0:	d0f3      	beq.n	d51ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
   d51e2:	f8dc 7008 	ldr.w	r7, [ip, #8]
   d51e6:	3701      	adds	r7, #1
   d51e8:	d1ef      	bne.n	d51ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
   d51ea:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
   d51ee:	e0ed      	b.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d51f0:	f811 7008 	ldrb.w	r7, [r1, r8]
   d51f4:	2f00      	cmp	r7, #0
   d51f6:	d068      	beq.n	d52ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
   d51f8:	2f22      	cmp	r7, #34	; 0x22
   d51fa:	d009      	beq.n	d5210 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d51fc:	2f5c      	cmp	r7, #92	; 0x5c
   d51fe:	d026      	beq.n	d524e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5200:	6807      	ldr	r7, [r0, #0]
   d5202:	3701      	adds	r7, #1
   d5204:	6007      	str	r7, [r0, #0]
   d5206:	f8d0 8000 	ldr.w	r8, [r0]
   d520a:	4542      	cmp	r2, r8
   d520c:	d8f0      	bhi.n	d51f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
   d520e:	e05c      	b.n	d52ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
   d5210:	2b00      	cmp	r3, #0
   d5212:	f000 80ce 	beq.w	d53b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d5216:	6847      	ldr	r7, [r0, #4]
   d5218:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d521a:	42be      	cmp	r6, r7
   d521c:	f240 80f7 	bls.w	d540e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d5220:	f107 0c01 	add.w	ip, r7, #1
   d5224:	013f      	lsls	r7, r7, #4
   d5226:	f8c0 c004 	str.w	ip, [r0, #4]
   d522a:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d522e:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5230:	f8cc 5008 	str.w	r5, [ip, #8]
   d5234:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
   d5238:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d523c:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d5240:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
   d5244:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
   d5248:	f8cc 8008 	str.w	r8, [ip, #8]
   d524c:	e0b1      	b.n	d53b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d524e:	f108 0701 	add.w	r7, r8, #1
   d5252:	42ba      	cmp	r2, r7
   d5254:	d9d4      	bls.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
   d5256:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d5258:	5dcf      	ldrb	r7, [r1, r7]
   d525a:	2f66      	cmp	r7, #102	; 0x66
   d525c:	d0d0      	beq.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d525e:	d808      	bhi.n	d5272 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
   d5260:	2f2f      	cmp	r7, #47	; 0x2f
   d5262:	d0cd      	beq.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5264:	d801      	bhi.n	d526a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
   d5266:	2f22      	cmp	r7, #34	; 0x22
   d5268:	e007      	b.n	d527a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d526a:	2f5c      	cmp	r7, #92	; 0x5c
   d526c:	d0c8      	beq.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d526e:	2f62      	cmp	r7, #98	; 0x62
   d5270:	e003      	b.n	d527a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d5272:	2f72      	cmp	r7, #114	; 0x72
   d5274:	d0c4      	beq.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5276:	d802      	bhi.n	d527e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
   d5278:	2f6e      	cmp	r7, #110	; 0x6e
   d527a:	d175      	bne.n	d5368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
   d527c:	e7c0      	b.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d527e:	2f74      	cmp	r7, #116	; 0x74
   d5280:	d0be      	beq.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5282:	2f75      	cmp	r7, #117	; 0x75
   d5284:	d170      	bne.n	d5368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
   d5286:	f108 0702 	add.w	r7, r8, #2
   d528a:	6007      	str	r7, [r0, #0]
   d528c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5290:	f8d0 8000 	ldr.w	r8, [r0]
   d5294:	4542      	cmp	r2, r8
   d5296:	d803      	bhi.n	d52a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
   d5298:	6807      	ldr	r7, [r0, #0]
   d529a:	3f01      	subs	r7, #1
   d529c:	6007      	str	r7, [r0, #0]
   d529e:	e7af      	b.n	d5200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d52a0:	f811 7008 	ldrb.w	r7, [r1, r8]
   d52a4:	2f00      	cmp	r7, #0
   d52a6:	d0f7      	beq.n	d5298 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d52a8:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d52ac:	f1bb 0f09 	cmp.w	fp, #9
   d52b0:	d904      	bls.n	d52bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
   d52b2:	f027 0720 	bic.w	r7, r7, #32
   d52b6:	3f41      	subs	r7, #65	; 0x41
   d52b8:	2f05      	cmp	r7, #5
   d52ba:	d855      	bhi.n	d5368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d52bc:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d52c0:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d52c4:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d52c6:	d1e3      	bne.n	d5290 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
   d52c8:	e7e6      	b.n	d5298 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
   d52ca:	f8c0 c000 	str.w	ip, [r0]
   d52ce:	e09a      	b.n	d5406 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   d52d0:	6847      	ldr	r7, [r0, #4]
   d52d2:	3f01      	subs	r7, #1
   d52d4:	6087      	str	r7, [r0, #8]
				break;
   d52d6:	e079      	b.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
   d52d8:	2b00      	cmp	r3, #0
   d52da:	d077      	beq.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d52dc:	6887      	ldr	r7, [r0, #8]
   d52de:	1c7e      	adds	r6, r7, #1
   d52e0:	d074      	beq.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d52e2:	013f      	lsls	r7, r7, #4
   d52e4:	5ddf      	ldrb	r7, [r3, r7]
   d52e6:	3f01      	subs	r7, #1
   d52e8:	2f01      	cmp	r7, #1
   d52ea:	d96f      	bls.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d52ec:	6847      	ldr	r7, [r0, #4]
   d52ee:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
   d52f2:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d52f6:	f1b8 0f00 	cmp.w	r8, #0
   d52fa:	db67      	blt.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d52fc:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
   d5300:	3f01      	subs	r7, #1
   d5302:	2f01      	cmp	r7, #1
   d5304:	d80a      	bhi.n	d531c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d5306:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   d530a:	3701      	adds	r7, #1
   d530c:	d006      	beq.n	d531c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
   d530e:	f85c 7c08 	ldr.w	r7, [ip, #-8]
   d5312:	3701      	adds	r7, #1
   d5314:	d102      	bne.n	d531c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
   d5316:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d531a:	e057      	b.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d531c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d5320:	f1ac 0c10 	sub.w	ip, ip, #16
   d5324:	e7e7      	b.n	d52f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5326:	f811 7008 	ldrb.w	r7, [r1, r8]
   d532a:	b307      	cbz	r7, d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d532c:	2f20      	cmp	r7, #32
   d532e:	d01e      	beq.n	d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5330:	d810      	bhi.n	d5354 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
   d5332:	2f09      	cmp	r7, #9
   d5334:	d20a      	bcs.n	d534c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d5336:	3f20      	subs	r7, #32
   d5338:	2f5e      	cmp	r7, #94	; 0x5e
   d533a:	d815      	bhi.n	d5368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d533c:	f108 0701 	add.w	r7, r8, #1
   d5340:	6007      	str	r7, [r0, #0]
   d5342:	f8d0 8000 	ldr.w	r8, [r0]
   d5346:	4542      	cmp	r2, r8
   d5348:	d8ed      	bhi.n	d5326 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
   d534a:	e010      	b.n	d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d534c:	2f0a      	cmp	r7, #10
   d534e:	d90e      	bls.n	d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5350:	2f0d      	cmp	r7, #13
   d5352:	e007      	b.n	d5364 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d5354:	2f3a      	cmp	r7, #58	; 0x3a
   d5356:	d00a      	beq.n	d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5358:	d801      	bhi.n	d535e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
   d535a:	2f2c      	cmp	r7, #44	; 0x2c
   d535c:	e002      	b.n	d5364 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d535e:	2f5d      	cmp	r7, #93	; 0x5d
   d5360:	d005      	beq.n	d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5362:	2f7d      	cmp	r7, #125	; 0x7d
   d5364:	d1e7      	bne.n	d5336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
   d5366:	e002      	b.n	d536e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
   d5368:	f8c0 c000 	str.w	ip, [r0]
   d536c:	e044      	b.n	d53f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
   d536e:	b913      	cbnz	r3, d5376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
   d5370:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   d5374:	e01c      	b.n	d53b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d5376:	6847      	ldr	r7, [r0, #4]
   d5378:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d537a:	42be      	cmp	r6, r7
   d537c:	d947      	bls.n	d540e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d537e:	f107 0801 	add.w	r8, r7, #1
   d5382:	013f      	lsls	r7, r7, #4
   d5384:	f8c0 8004 	str.w	r8, [r0, #4]
   d5388:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d538c:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d538e:	f8c8 5008 	str.w	r5, [r8, #8]
   d5392:	f8c8 5004 	str.w	r5, [r8, #4]
	tok->size = 0;
   d5396:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d539a:	f04f 0604 	mov.w	r6, #4
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d539e:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d53a2:	55de      	strb	r6, [r3, r7]
	token->start = start;
   d53a4:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
   d53a8:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
   d53ac:	6807      	ldr	r7, [r0, #0]
   d53ae:	3f01      	subs	r7, #1
   d53b0:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
   d53b2:	6887      	ldr	r7, [r0, #8]
   d53b4:	1c7e      	adds	r6, r7, #1
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
   d53b6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d53ba:	d007      	beq.n	d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d53bc:	b133      	cbz	r3, d53cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					tokens[parser->toksuper].size++;
   d53be:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d53c2:	f8dc 700c 	ldr.w	r7, [ip, #12]
   d53c6:	3701      	adds	r7, #1
   d53c8:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d53cc:	6807      	ldr	r7, [r0, #0]
   d53ce:	3701      	adds	r7, #1
   d53d0:	6007      	str	r7, [r0, #0]
   d53d2:	e65c      	b.n	d508e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
   d53d4:	b1a3      	cbz	r3, d5400 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d53d6:	6842      	ldr	r2, [r0, #4]
   d53d8:	1e51      	subs	r1, r2, #1
   d53da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d53de:	2900      	cmp	r1, #0
   d53e0:	db0e      	blt.n	d5400 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d53e2:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d53e6:	3201      	adds	r2, #1
   d53e8:	d003      	beq.n	d53f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x372>
   d53ea:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d53ee:	3201      	adds	r2, #1
   d53f0:	d009      	beq.n	d5406 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
   d53f2:	3901      	subs	r1, #1
   d53f4:	3b10      	subs	r3, #16
   d53f6:	e7f2      	b.n	d53de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
   d53f8:	f06f 0001 	mvn.w	r0, #1
   d53fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5400:	4620      	mov	r0, r4
   d5402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
   d5406:	f06f 0002 	mvn.w	r0, #2
   d540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
   d540e:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
   d5412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d541a <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d541a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
   d541c:	6943      	ldr	r3, [r0, #20]
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d541e:	4604      	mov	r4, r0
   d5420:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   d5424:	b1f3      	cbz	r3, d5464 <_ZN10JsonParser5parseEv+0x4a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5426:	2200      	movs	r2, #0
   d5428:	6202      	str	r2, [r0, #32]
	parser->toknext = 0;
   d542a:	6242      	str	r2, [r0, #36]	; 0x24
	parser->toksuper = -1;
   d542c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5430:	6282      	str	r2, [r0, #40]	; 0x28

bool JsonParser::parse() {
	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5432:	69c2      	ldr	r2, [r0, #28]
   d5434:	9200      	str	r2, [sp, #0]
   d5436:	68c2      	ldr	r2, [r0, #12]
   d5438:	6841      	ldr	r1, [r0, #4]
   d543a:	4630      	mov	r0, r6
   d543c:	f7ff fe20 	bl	d5080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d5440:	1c43      	adds	r3, r0, #1
   d5442:	d109      	bne.n	d5458 <_ZN10JsonParser5parseEv+0x3e>
			if (staticBuffers) {
   d5444:	7c25      	ldrb	r5, [r4, #16]
   d5446:	b10d      	cbz	r5, d544c <_ZN10JsonParser5parseEv+0x32>
				// If using static buffers and there is not enough space, fail
				return false;
   d5448:	2000      	movs	r0, #0
   d544a:	e033      	b.n	d54b4 <_ZN10JsonParser5parseEv+0x9a>
			}
			free(tokens);
   d544c:	6960      	ldr	r0, [r4, #20]
   d544e:	f000 fd8d 	bl	d5f6c <free>
			tokens = 0;
   d5452:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d5454:	61e5      	str	r5, [r4, #28]
   d5456:	e005      	b.n	d5464 <_ZN10JsonParser5parseEv+0x4a>
		}
		else
		if (result < 0) {
   d5458:	2800      	cmp	r0, #0
   d545a:	dbf5      	blt.n	d5448 <_ZN10JsonParser5parseEv+0x2e>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
   d545c:	6963      	ldr	r3, [r4, #20]
   d545e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   d5462:	e025      	b.n	d54b0 <_ZN10JsonParser5parseEv+0x96>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5464:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
   d5466:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d546a:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d546c:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d546e:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d5470:	9500      	str	r5, [sp, #0]
   d5472:	462b      	mov	r3, r5
   d5474:	68e2      	ldr	r2, [r4, #12]
   d5476:	6861      	ldr	r1, [r4, #4]
   d5478:	4630      	mov	r0, r6
   d547a:	f7ff fe01 	bl	d5080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d547e:	2800      	cmp	r0, #0
   d5480:	dbe2      	blt.n	d5448 <_ZN10JsonParser5parseEv+0x2e>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
   d5482:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d5484:	d013      	beq.n	d54ae <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d5486:	0100      	lsls	r0, r0, #4
   d5488:	f000 fd68 	bl	d5f5c <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d548c:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d548e:	6160      	str	r0, [r4, #20]
   d5490:	4603      	mov	r3, r0

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5492:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5494:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d5496:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d5498:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d549a:	68e2      	ldr	r2, [r4, #12]
   d549c:	6861      	ldr	r1, [r4, #4]
   d549e:	4630      	mov	r0, r6
   d54a0:	f7ff fdee 	bl	d5080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
   d54a4:	6963      	ldr	r3, [r4, #20]
   d54a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d54aa:	61a0      	str	r0, [r4, #24]
   d54ac:	e001      	b.n	d54b2 <_ZN10JsonParser5parseEv+0x98>
	}
	else {
		tokensEnd = tokens;
   d54ae:	6963      	ldr	r3, [r4, #20]
   d54b0:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
   d54b2:	2001      	movs	r0, #1
}
   d54b4:	b003      	add	sp, #12
   d54b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54b8 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d54b8:	f000 bb2a 	b.w	d5b10 <HAL_Pin_Map>

000d54bc <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d54bc:	f000 bb18 	b.w	d5af0 <HAL_Timer_Get_Micro_Seconds>

000d54c0 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d54c0:	f000 bb0e 	b.w	d5ae0 <HAL_Delay_Microseconds>

000d54c4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d54c4:	b510      	push	{r4, lr}
   d54c6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d54c8:	68c0      	ldr	r0, [r0, #12]
   d54ca:	b108      	cbz	r0, d54d0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d54cc:	f000 fd4e 	bl	d5f6c <free>
  if (begun) pinMode(pin, INPUT);
   d54d0:	7823      	ldrb	r3, [r4, #0]
   d54d2:	b11b      	cbz	r3, d54dc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d54d4:	2100      	movs	r1, #0
   d54d6:	79e0      	ldrb	r0, [r4, #7]
   d54d8:	f002 fb60 	bl	d7b9c <pinMode>
}
   d54dc:	4620      	mov	r0, r4
   d54de:	bd10      	pop	{r4, pc}

000d54e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d54e0:	b538      	push	{r3, r4, r5, lr}
   d54e2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d54e4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d54e6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d54e8:	b108      	cbz	r0, d54ee <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d54ea:	f000 fd3f 	bl	d5f6c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d54ee:	79a3      	ldrb	r3, [r4, #6]
   d54f0:	2b06      	cmp	r3, #6
   d54f2:	bf0c      	ite	eq
   d54f4:	2004      	moveq	r0, #4
   d54f6:	2003      	movne	r0, #3
   d54f8:	fb10 f005 	smulbb	r0, r0, r5
   d54fc:	b280      	uxth	r0, r0
   d54fe:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d5500:	f000 fd2c 	bl	d5f5c <malloc>
   d5504:	60e0      	str	r0, [r4, #12]
   d5506:	b128      	cbz	r0, d5514 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d5508:	88a2      	ldrh	r2, [r4, #4]
   d550a:	2100      	movs	r1, #0
   d550c:	f004 fbe0 	bl	d9cd0 <memset>
    numLEDs = n;
   d5510:	8065      	strh	r5, [r4, #2]
   d5512:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d5514:	80a0      	strh	r0, [r4, #4]
   d5516:	8060      	strh	r0, [r4, #2]
   d5518:	bd38      	pop	{r3, r4, r5, pc}

000d551a <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d551a:	b510      	push	{r4, lr}
   d551c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d551e:	2101      	movs	r1, #1
   d5520:	79c0      	ldrb	r0, [r0, #7]
   d5522:	f002 fb3b 	bl	d7b9c <pinMode>
  digitalWrite(pin, LOW);
   d5526:	2100      	movs	r1, #0
   d5528:	79e0      	ldrb	r0, [r4, #7]
   d552a:	f002 fb48 	bl	d7bbe <digitalWrite>
  begun = true;
   d552e:	2301      	movs	r3, #1
   d5530:	7023      	strb	r3, [r4, #0]
   d5532:	bd10      	pop	{r4, pc}

000d5534 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d5534:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d5536:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d5538:	4605      	mov	r5, r0
   d553a:	460c      	mov	r4, r1
    if (begun) {
   d553c:	b11b      	cbz	r3, d5546 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d553e:	2100      	movs	r1, #0
   d5540:	79c0      	ldrb	r0, [r0, #7]
   d5542:	f002 fb2b 	bl	d7b9c <pinMode>
    }
    pin = p;
    if (begun) {
   d5546:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d5548:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d554a:	b153      	cbz	r3, d5562 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d554c:	b2a4      	uxth	r4, r4
   d554e:	4620      	mov	r0, r4
   d5550:	2101      	movs	r1, #1
   d5552:	f002 fb23 	bl	d7b9c <pinMode>
        digitalWrite(p, LOW);
   d5556:	4620      	mov	r0, r4
   d5558:	2100      	movs	r1, #0
    }
}
   d555a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d555e:	f002 bb2e 	b.w	d7bbe <digitalWrite>
   d5562:	bd38      	pop	{r3, r4, r5, pc}

000d5564 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d5564:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d5566:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d5568:	4604      	mov	r4, r0
   d556a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d556c:	7183      	strb	r3, [r0, #6]
   d556e:	7005      	strb	r5, [r0, #0]
   d5570:	7205      	strb	r5, [r0, #8]
   d5572:	60c5      	str	r5, [r0, #12]
   d5574:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d5576:	f7ff ffb3 	bl	d54e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d557a:	4620      	mov	r0, r4
   d557c:	4631      	mov	r1, r6
   d557e:	f7ff ffd9 	bl	d5534 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d5582:	4620      	mov	r0, r4
   d5584:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5588 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d5588:	68c3      	ldr	r3, [r0, #12]
   d558a:	2b00      	cmp	r3, #0
   d558c:	f000 818b 	beq.w	d58a6 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d5590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5594:	7983      	ldrb	r3, [r0, #6]
   d5596:	3b02      	subs	r3, #2
   d5598:	b2db      	uxtb	r3, r3
   d559a:	2b04      	cmp	r3, #4
   d559c:	bf9c      	itt	ls
   d559e:	4ac4      	ldrls	r2, [pc, #784]	; (d58b0 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d55a0:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d55a4:	b087      	sub	sp, #28
   d55a6:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d55a8:	bf88      	it	hi
   d55aa:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d55ac:	f7ff ff86 	bl	d54bc <micros>
   d55b0:	692b      	ldr	r3, [r5, #16]
   d55b2:	1ac0      	subs	r0, r0, r3
   d55b4:	42a0      	cmp	r0, r4
   d55b6:	d3f9      	bcc.n	d55ac <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d55b8:	4abe      	ldr	r2, [pc, #760]	; (d58b4 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d55ba:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d55bc:	ca07      	ldmia	r2, {r0, r1, r2}
   d55be:	ac06      	add	r4, sp, #24
   d55c0:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d55c4:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d55c6:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d55c8:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d55cc:	3304      	adds	r3, #4
   d55ce:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55d0:	b922      	cbnz	r2, d55dc <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55d2:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d55d6:	2b00      	cmp	r3, #0
   d55d8:	f2c0 8155 	blt.w	d5886 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d55dc:	9c04      	ldr	r4, [sp, #16]
   d55de:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55e2:	b923      	cbnz	r3, d55ee <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55e4:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d55e8:	2b00      	cmp	r3, #0
   d55ea:	f2c0 813c 	blt.w	d5866 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d55ee:	9c05      	ldr	r4, [sp, #20]
   d55f0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55f4:	b91b      	cbnz	r3, d55fe <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55f6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d55fa:	2b00      	cmp	r3, #0
   d55fc:	db6e      	blt.n	d56dc <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d55fe:	4bae      	ldr	r3, [pc, #696]	; (d58b8 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d5600:	79ea      	ldrb	r2, [r5, #7]
   d5602:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d5604:	4cad      	ldr	r4, [pc, #692]	; (d58bc <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d5606:	49ae      	ldr	r1, [pc, #696]	; (d58c0 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d5608:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d560a:	0112      	lsls	r2, r2, #4
   d560c:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d560e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5612:	785b      	ldrb	r3, [r3, #1]
   d5614:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d5616:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d5618:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d561a:	f003 031f 	and.w	r3, r3, #31
   d561e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d5622:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d5624:	433a      	orrs	r2, r7
   d5626:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d5628:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d562a:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d562c:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d5630:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5634:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d5636:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d5638:	2800      	cmp	r0, #0
   d563a:	d044      	beq.n	d56c6 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d563c:	46cc      	mov	ip, r9
   d563e:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d5640:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d5644:	f81c eb01 	ldrb.w	lr, [ip], #1
   d5648:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d564a:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d564c:	6863      	ldr	r3, [r4, #4]
   d564e:	1a9b      	subs	r3, r3, r2
   d5650:	2b46      	cmp	r3, #70	; 0x46
   d5652:	d9fb      	bls.n	d564c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d5654:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d5658:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d565c:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d5660:	ea43 0307 	orr.w	r3, r3, r7
   d5664:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d5668:	d02f      	beq.n	d56ca <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d566a:	6863      	ldr	r3, [r4, #4]
   d566c:	1a9b      	subs	r3, r3, r2
   d566e:	2b28      	cmp	r3, #40	; 0x28
   d5670:	d9fb      	bls.n	d566a <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d5672:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5676:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d5678:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d567c:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d5680:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5684:	d1e2      	bne.n	d564c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d5686:	ebc9 030c 	rsb	r3, r9, ip
   d568a:	88a8      	ldrh	r0, [r5, #4]
   d568c:	b29b      	uxth	r3, r3
   d568e:	4298      	cmp	r0, r3
   d5690:	d8d8      	bhi.n	d5644 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d5692:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d5696:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d569a:	6863      	ldr	r3, [r4, #4]
   d569c:	1a9b      	subs	r3, r3, r2
   d569e:	2b46      	cmp	r3, #70	; 0x46
   d56a0:	d9fb      	bls.n	d569a <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d56a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d56a6:	ebca 0a03 	rsb	sl, sl, r3
   d56aa:	4582      	cmp	sl, r0
   d56ac:	f0c0 80d5 	bcc.w	d585a <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d56b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d56b4:	f7ff ff04 	bl	d54c0 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d56b8:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d56ba:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d56be:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d56c2:	2800      	cmp	r0, #0
   d56c4:	d1ba      	bne.n	d563c <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d56c6:	4602      	mov	r2, r0
   d56c8:	e7e7      	b.n	d569a <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d56ca:	6863      	ldr	r3, [r4, #4]
   d56cc:	1a9b      	subs	r3, r3, r2
   d56ce:	2b11      	cmp	r3, #17
   d56d0:	d8cf      	bhi.n	d5672 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d56d2:	6863      	ldr	r3, [r4, #4]
   d56d4:	1a9b      	subs	r3, r3, r2
   d56d6:	2b11      	cmp	r3, #17
   d56d8:	d9f7      	bls.n	d56ca <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d56da:	e7ca      	b.n	d5672 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d56dc:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d56e0:	2b00      	cmp	r3, #0
   d56e2:	da8c      	bge.n	d55fe <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d56e4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d56e8:	2b00      	cmp	r3, #0
   d56ea:	da88      	bge.n	d55fe <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d56ec:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d56f0:	2b00      	cmp	r3, #0
   d56f2:	da84      	bge.n	d55fe <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d56f4:	9801      	ldr	r0, [sp, #4]
   d56f6:	f000 fc31 	bl	d5f5c <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d56fa:	2800      	cmp	r0, #0
   d56fc:	f43f af7f 	beq.w	d55fe <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5700:	88ab      	ldrh	r3, [r5, #4]
   d5702:	2b00      	cmp	r3, #0
   d5704:	f000 80d0 	beq.w	d58a8 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d5708:	2700      	movs	r7, #0
   d570a:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d570c:	4e6d      	ldr	r6, [pc, #436]	; (d58c4 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d570e:	496e      	ldr	r1, [pc, #440]	; (d58c8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d5710:	e000      	b.n	d5714 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d5712:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d5714:	68ea      	ldr	r2, [r5, #12]
   d5716:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5718:	f103 0e01 	add.w	lr, r3, #1
   d571c:	f012 0f80 	tst.w	r2, #128	; 0x80
   d5720:	bf14      	ite	ne
   d5722:	46b0      	movne	r8, r6
   d5724:	4688      	moveq	r8, r1
   d5726:	fa1f fe8e 	uxth.w	lr, lr
   d572a:	f012 0f40 	tst.w	r2, #64	; 0x40
   d572e:	bf14      	ite	ne
   d5730:	46b1      	movne	r9, r6
   d5732:	4689      	moveq	r9, r1
   d5734:	f012 0f20 	tst.w	r2, #32
   d5738:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d573c:	bf18      	it	ne
   d573e:	46b2      	movne	sl, r6
   d5740:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d5744:	bf08      	it	eq
   d5746:	468a      	moveq	sl, r1
   d5748:	f103 0802 	add.w	r8, r3, #2
   d574c:	f012 0f10 	tst.w	r2, #16
   d5750:	f103 0e03 	add.w	lr, r3, #3
   d5754:	bf14      	ite	ne
   d5756:	46b4      	movne	ip, r6
   d5758:	468c      	moveq	ip, r1
   d575a:	fa1f f888 	uxth.w	r8, r8
   d575e:	f012 0f08 	tst.w	r2, #8
   d5762:	fa1f fe8e 	uxth.w	lr, lr
   d5766:	f103 0904 	add.w	r9, r3, #4
   d576a:	fa1f f989 	uxth.w	r9, r9
   d576e:	bf14      	ite	ne
   d5770:	46b3      	movne	fp, r6
   d5772:	468b      	moveq	fp, r1
   d5774:	f012 0f04 	tst.w	r2, #4
   d5778:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d577c:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d5780:	bf14      	ite	ne
   d5782:	46b2      	movne	sl, r6
   d5784:	468a      	moveq	sl, r1
   d5786:	f103 0805 	add.w	r8, r3, #5
   d578a:	f012 0f02 	tst.w	r2, #2
   d578e:	f103 0c06 	add.w	ip, r3, #6
   d5792:	f103 0e07 	add.w	lr, r3, #7
   d5796:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d579a:	fa1f fe8e 	uxth.w	lr, lr
   d579e:	bf14      	ite	ne
   d57a0:	46b1      	movne	r9, r6
   d57a2:	4689      	moveq	r9, r1
   d57a4:	fa1f f888 	uxth.w	r8, r8
   d57a8:	f012 0f01 	tst.w	r2, #1
   d57ac:	fa1f fc8c 	uxth.w	ip, ip
   d57b0:	bf14      	ite	ne
   d57b2:	4632      	movne	r2, r6
   d57b4:	460a      	moveq	r2, r1
   d57b6:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d57ba:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d57be:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d57c2:	3701      	adds	r7, #1
   d57c4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d57c8:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d57ca:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d57ce:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d57d0:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d57d2:	d89e      	bhi.n	d5712 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d57d4:	f103 0209 	add.w	r2, r3, #9
   d57d8:	330a      	adds	r3, #10
   d57da:	b292      	uxth	r2, r2
   d57dc:	b29b      	uxth	r3, r3
   d57de:	0052      	lsls	r2, r2, #1
   d57e0:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d57e2:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d57e4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d57e8:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d57ea:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d57ec:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d57ee:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d57f0:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d57f2:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d57f6:	4e30      	ldr	r6, [pc, #192]	; (d58b8 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d57f8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d57fc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d5800:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d5804:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d5808:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d580c:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d5810:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d5814:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5818:	79eb      	ldrb	r3, [r5, #7]
   d581a:	6831      	ldr	r1, [r6, #0]
   d581c:	011b      	lsls	r3, r3, #4
   d581e:	18ce      	adds	r6, r1, r3
   d5820:	5cc9      	ldrb	r1, [r1, r3]
   d5822:	7873      	ldrb	r3, [r6, #1]
   d5824:	f003 031f 	and.w	r3, r3, #31
   d5828:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d582c:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d582e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d5832:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d5836:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d583a:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d583c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d5840:	2b00      	cmp	r3, #0
   d5842:	d0fb      	beq.n	d583c <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d5844:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d5846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d584a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d584e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d5852:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d5856:	f000 fb89 	bl	d5f6c <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d585a:	f7ff fe2f 	bl	d54bc <micros>
   d585e:	6128      	str	r0, [r5, #16]
}
   d5860:	b007      	add	sp, #28
   d5862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5866:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d586a:	2b00      	cmp	r3, #0
   d586c:	f6bf aebf 	bge.w	d55ee <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5870:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5874:	2b00      	cmp	r3, #0
   d5876:	f6bf aeba 	bge.w	d55ee <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d587a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d587e:	2b00      	cmp	r3, #0
   d5880:	f6bf aeb5 	bge.w	d55ee <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d5884:	e736      	b.n	d56f4 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5886:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d588a:	2b00      	cmp	r3, #0
   d588c:	f6bf aea6 	bge.w	d55dc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5890:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5894:	2b00      	cmp	r3, #0
   d5896:	f6bf aea1 	bge.w	d55dc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d589a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d589e:	2b00      	cmp	r3, #0
   d58a0:	f6bf ae9c 	bge.w	d55dc <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d58a4:	e726      	b.n	d56f4 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d58a6:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d58a8:	2304      	movs	r3, #4
   d58aa:	2202      	movs	r2, #2
   d58ac:	e799      	b.n	d57e2 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d58ae:	bf00      	nop
   d58b0:	000dbad0 	.word	0x000dbad0
   d58b4:	000dbac4 	.word	0x000dbac4
   d58b8:	2003e3d4 	.word	0x2003e3d4
   d58bc:	e000edf0 	.word	0xe000edf0
   d58c0:	e0001000 	.word	0xe0001000
   d58c4:	ffff800d 	.word	0xffff800d
   d58c8:	ffff8006 	.word	0xffff8006

000d58cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d58ce:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d58d0:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d58d4:	428c      	cmp	r4, r1
   d58d6:	d927      	bls.n	d5928 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d58d8:	7a04      	ldrb	r4, [r0, #8]
   d58da:	b144      	cbz	r4, d58ee <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d58dc:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d58e0:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d58e4:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d58e8:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d58ea:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d58ec:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d58ee:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d58f0:	68c6      	ldr	r6, [r0, #12]
   d58f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d58f6:	2f08      	cmp	r7, #8
   d58f8:	eb06 0401 	add.w	r4, r6, r1
   d58fc:	d811      	bhi.n	d5922 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d58fe:	2001      	movs	r0, #1
   d5900:	40b8      	lsls	r0, r7
   d5902:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d5906:	d108      	bne.n	d591a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d5908:	06c0      	lsls	r0, r0, #27
   d590a:	d50a      	bpl.n	d5922 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d590c:	2aff      	cmp	r2, #255	; 0xff
   d590e:	bf08      	it	eq
   d5910:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d5912:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d5914:	7065      	strb	r5, [r4, #1]
          *p = g;
   d5916:	70a3      	strb	r3, [r4, #2]
   d5918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d591a:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d591c:	7062      	strb	r2, [r4, #1]
          *p = b;
   d591e:	70a5      	strb	r5, [r4, #2]
   d5920:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d5922:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d5924:	7063      	strb	r3, [r4, #1]
          *p = b;
   d5926:	70a5      	strb	r5, [r4, #2]
   d5928:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d592a <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d592a:	8843      	ldrh	r3, [r0, #2]
   d592c:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d592e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d5930:	d945      	bls.n	d59be <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d5932:	7a05      	ldrb	r5, [r0, #8]
   d5934:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d5938:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d593c:	b2d6      	uxtb	r6, r2
   d593e:	b145      	cbz	r5, d5952 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d5940:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d5942:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d5944:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d5946:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d594a:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d594e:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d5952:	f890 c006 	ldrb.w	ip, [r0, #6]
   d5956:	68c7      	ldr	r7, [r0, #12]
   d5958:	f1bc 0f06 	cmp.w	ip, #6
   d595c:	bf0c      	ite	eq
   d595e:	2504      	moveq	r5, #4
   d5960:	2503      	movne	r5, #3
   d5962:	4369      	muls	r1, r5
   d5964:	f1bc 0f08 	cmp.w	ip, #8
   d5968:	eb07 0501 	add.w	r5, r7, r1
   d596c:	d824      	bhi.n	d59b8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d596e:	f04f 0e01 	mov.w	lr, #1
   d5972:	fa0e fe0c 	lsl.w	lr, lr, ip
   d5976:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d597a:	d10c      	bne.n	d5996 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d597c:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d5980:	d10d      	bne.n	d599e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d5982:	f01e 0f10 	tst.w	lr, #16
   d5986:	d017      	beq.n	d59b8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d5988:	2bff      	cmp	r3, #255	; 0xff
   d598a:	bf08      	it	eq
   d598c:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d598e:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d5990:	706e      	strb	r6, [r5, #1]
          *p = g;
   d5992:	70ac      	strb	r4, [r5, #2]
        } break;
   d5994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d5996:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d5998:	706b      	strb	r3, [r5, #1]
          *p = b;
   d599a:	70ae      	strb	r6, [r5, #2]
        } break;
   d599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d599e:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d59a0:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d59a2:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d59a4:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d59a6:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d59a8:	b90b      	cbnz	r3, d59ae <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d59aa:	b2d2      	uxtb	r2, r2
   d59ac:	e002      	b.n	d59b4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d59ae:	435a      	muls	r2, r3
   d59b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d59b4:	70ea      	strb	r2, [r5, #3]
        } break;
   d59b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d59b8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d59ba:	706c      	strb	r4, [r5, #1]
          *p = b;
   d59bc:	70ae      	strb	r6, [r5, #2]
   d59be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59c0 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d59c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d59c4:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d59c8:	4770      	bx	lr

000d59ca <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
   d59ca:	8840      	ldrh	r0, [r0, #2]
   d59cc:	4770      	bx	lr

000d59ce <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d59ce:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d59d0:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d59d2:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d59d4:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d59d6:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d59d8:	d01e      	beq.n	d5a18 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d59da:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d59dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d59e0:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d59e2:	d00c      	beq.n	d59fe <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d59e4:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d59e6:	bf1f      	itttt	ne
   d59e8:	0211      	lslne	r1, r2, #8
   d59ea:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   d59ee:	fb91 f3f3 	sdivne	r3, r1, r3
   d59f2:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d59f4:	bf04      	itt	eq
   d59f6:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d59fa:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d59fe:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d5a00:	1b29      	subs	r1, r5, r4
   d5a02:	8886      	ldrh	r6, [r0, #4]
   d5a04:	b289      	uxth	r1, r1
   d5a06:	428e      	cmp	r6, r1
   d5a08:	d905      	bls.n	d5a16 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d5a0a:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d5a0c:	4359      	muls	r1, r3
   d5a0e:	1209      	asrs	r1, r1, #8
   d5a10:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d5a14:	e7f4      	b.n	d5a00 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d5a16:	7202      	strb	r2, [r0, #8]
   d5a18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a1c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	f000 f877 	bl	d5b10 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d5a22:	f000 f875 	bl	d5b10 <HAL_Pin_Map>
   d5a26:	4b01      	ldr	r3, [pc, #4]	; (d5a2c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d5a28:	6018      	str	r0, [r3, #0]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	2003e3d4 	.word	0x2003e3d4

000d5a30 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <os_thread_create+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	685b      	ldr	r3, [r3, #4]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030248 	.word	0x00030248

000d5a40 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <os_thread_is_current+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	689b      	ldr	r3, [r3, #8]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030248 	.word	0x00030248

000d5a50 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <os_thread_join+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	691b      	ldr	r3, [r3, #16]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030248 	.word	0x00030248

000d5a60 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <os_thread_cleanup+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	695b      	ldr	r3, [r3, #20]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030248 	.word	0x00030248

000d5a70 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <os_mutex_create+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030248 	.word	0x00030248

000d5a80 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <os_mutex_recursive_create+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030248 	.word	0x00030248

000d5a90 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <os_mutex_recursive_lock+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030248 	.word	0x00030248

000d5aa0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <os_mutex_recursive_unlock+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030248 	.word	0x00030248

000d5ab0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <os_thread_exit+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030248 	.word	0x00030248

000d5ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_RNG_GetRandomNumber+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	685b      	ldr	r3, [r3, #4]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030218 	.word	0x00030218

000d5ad0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_Delay_Milliseconds+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	689b      	ldr	r3, [r3, #8]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030218 	.word	0x00030218

000d5ae0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_Delay_Microseconds+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	68db      	ldr	r3, [r3, #12]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030218 	.word	0x00030218

000d5af0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	691b      	ldr	r3, [r3, #16]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030218 	.word	0x00030218

000d5b00 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	695b      	ldr	r3, [r3, #20]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030218 	.word	0x00030218

000d5b10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <HAL_Pin_Map+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	681b      	ldr	r3, [r3, #0]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003022c 	.word	0x0003022c

000d5b20 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <HAL_Pin_Mode+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	689b      	ldr	r3, [r3, #8]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003022c 	.word	0x0003022c

000d5b30 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_Get_Pin_Mode+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	68db      	ldr	r3, [r3, #12]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003022c 	.word	0x0003022c

000d5b40 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_GPIO_Write+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	691b      	ldr	r3, [r3, #16]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	0003022c 	.word	0x0003022c

000d5b50 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_I2C_Write_Data+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6a1b      	ldr	r3, [r3, #32]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030228 	.word	0x00030228

000d5b60 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_I2C_Available_Data+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030228 	.word	0x00030228

000d5b70 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_I2C_Read_Data+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030228 	.word	0x00030228

000d5b80 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_I2C_Peek_Data+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030228 	.word	0x00030228

000d5b90 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_I2C_Flush_Data+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030228 	.word	0x00030228

000d5ba0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_I2C_Is_Enabled+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030228 	.word	0x00030228

000d5bb0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_I2C_Init+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030228 	.word	0x00030228

000d5bc0 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <if_name_to_index+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	691b      	ldr	r3, [r3, #16]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	0003026c 	.word	0x0003026c

000d5bd0 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <if_index_to_name+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	695b      	ldr	r3, [r3, #20]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	0003026c 	.word	0x0003026c

000d5be0 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <if_get_by_index+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	699b      	ldr	r3, [r3, #24]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	0003026c 	.word	0x0003026c

000d5bf0 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <if_get_addrs+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	0003026c 	.word	0x0003026c

000d5c00 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <if_free_if_addrs+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	0003026c 	.word	0x0003026c

000d5c10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <inet_inet_ntop+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	695b      	ldr	r3, [r3, #20]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030264 	.word	0x00030264

000d5c20 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <inet_inet_pton+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	699b      	ldr	r3, [r3, #24]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030264 	.word	0x00030264

000d5c30 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <inet_htonl+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	6a1b      	ldr	r3, [r3, #32]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030264 	.word	0x00030264

000d5c40 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <inet_ntohs+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030264 	.word	0x00030264

000d5c50 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <inet_htons+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030264 	.word	0x00030264

000d5c60 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <netdb_freeaddrinfo+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	689b      	ldr	r3, [r3, #8]
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030268 	.word	0x00030268

000d5c70 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <netdb_getaddrinfo+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	68db      	ldr	r3, [r3, #12]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030268 	.word	0x00030268

000d5c80 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <sock_bind+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	685b      	ldr	r3, [r3, #4]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030238 	.word	0x00030238

000d5c90 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <sock_setsockopt+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	699b      	ldr	r3, [r3, #24]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030238 	.word	0x00030238

000d5ca0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <sock_close+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	69db      	ldr	r3, [r3, #28]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030238 	.word	0x00030238

000d5cb0 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <sock_recvfrom+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030238 	.word	0x00030238

000d5cc0 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <sock_sendto+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030238 	.word	0x00030238

000d5cd0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <sock_socket+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030238 	.word	0x00030238

000d5ce0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <HAL_SPI_Init+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	69db      	ldr	r3, [r3, #28]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030230 	.word	0x00030230

000d5cf0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_SPI_Is_Enabled+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6a1b      	ldr	r3, [r3, #32]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030230 	.word	0x00030230

000d5d00 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_USART_Init+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	681b      	ldr	r3, [r3, #0]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003023c 	.word	0x0003023c

000d5d10 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_USART_Write_Data+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	68db      	ldr	r3, [r3, #12]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	0003023c 	.word	0x0003023c

000d5d20 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_USART_Available_Data+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	691b      	ldr	r3, [r3, #16]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003023c 	.word	0x0003023c

000d5d30 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_USART_Read_Data+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	695b      	ldr	r3, [r3, #20]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	0003023c 	.word	0x0003023c

000d5d40 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_USART_Peek_Data+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	699b      	ldr	r3, [r3, #24]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	0003023c 	.word	0x0003023c

000d5d50 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_USART_Flush_Data+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	69db      	ldr	r3, [r3, #28]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	0003023c 	.word	0x0003023c

000d5d60 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <HAL_USART_Is_Enabled+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6a1b      	ldr	r3, [r3, #32]
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	0003023c 	.word	0x0003023c

000d5d70 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <HAL_USART_Available_Data_For_Write+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	0003023c 	.word	0x0003023c

000d5d80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <HAL_USB_USART_Init+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	681b      	ldr	r3, [r3, #0]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	0003024c 	.word	0x0003024c

000d5d90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <HAL_USB_USART_Begin+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	685b      	ldr	r3, [r3, #4]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	0003024c 	.word	0x0003024c

000d5da0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <HAL_USB_USART_Available_Data+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	691b      	ldr	r3, [r3, #16]
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	0003024c 	.word	0x0003024c

000d5db0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	695b      	ldr	r3, [r3, #20]
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	0003024c 	.word	0x0003024c

000d5dc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <HAL_USB_USART_Receive_Data+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	699b      	ldr	r3, [r3, #24]
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	0003024c 	.word	0x0003024c

000d5dd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <HAL_USB_USART_Send_Data+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	69db      	ldr	r3, [r3, #28]
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	0003024c 	.word	0x0003024c

000d5de0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <HAL_USB_USART_Flush_Data+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	6a1b      	ldr	r3, [r3, #32]
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	0003024c 	.word	0x0003024c

000d5df0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <log_message+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	00030260 	.word	0x00030260

000d5e00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <set_system_mode+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	685b      	ldr	r3, [r3, #4]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	00030220 	.word	0x00030220

000d5e10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <system_delay_ms+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	695b      	ldr	r3, [r3, #20]
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030220 	.word	0x00030220

000d5e20 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <application_thread_current+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030220 	.word	0x00030220

000d5e30 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <application_thread_invoke+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030220 	.word	0x00030220

000d5e40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b03      	ldr	r3, [pc, #12]	; (d5e50 <system_ctrl_set_app_request_handler+0x10>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5e4a:	9301      	str	r3, [sp, #4]
   d5e4c:	bd08      	pop	{r3, pc}
   d5e4e:	0000      	.short	0x0000
   d5e50:	00030220 	.word	0x00030220

000d5e54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b03      	ldr	r3, [pc, #12]	; (d5e64 <system_ctrl_set_result+0x10>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5e5e:	9301      	str	r3, [sp, #4]
   d5e60:	bd08      	pop	{r3, pc}
   d5e62:	0000      	.short	0x0000
   d5e64:	00030220 	.word	0x00030220

000d5e68 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b03      	ldr	r3, [pc, #12]	; (d5e78 <system_invoke_event_handler+0x10>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d5e72:	9301      	str	r3, [sp, #4]
   d5e74:	bd08      	pop	{r3, pc}
   d5e76:	0000      	.short	0x0000
   d5e78:	00030220 	.word	0x00030220

000d5e7c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <spark_variable+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	681b      	ldr	r3, [r3, #0]
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030244 	.word	0x00030244

000d5e8c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <spark_function+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	685b      	ldr	r3, [r3, #4]
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030244 	.word	0x00030244

000d5e9c <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <spark_send_event+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6a1b      	ldr	r3, [r3, #32]
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030244 	.word	0x00030244

000d5eac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030244 	.word	0x00030244

000d5ebc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <network_connect+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	685b      	ldr	r3, [r3, #4]
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030240 	.word	0x00030240

000d5ecc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <network_connecting+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	689b      	ldr	r3, [r3, #8]
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030240 	.word	0x00030240

000d5edc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <network_disconnect+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	68db      	ldr	r3, [r3, #12]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030240 	.word	0x00030240

000d5eec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <network_ready+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	691b      	ldr	r3, [r3, #16]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030240 	.word	0x00030240

000d5efc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <network_on+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	695b      	ldr	r3, [r3, #20]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030240 	.word	0x00030240

000d5f0c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <network_off+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	699b      	ldr	r3, [r3, #24]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030240 	.word	0x00030240

000d5f1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <network_listen+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	69db      	ldr	r3, [r3, #28]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030240 	.word	0x00030240

000d5f2c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <network_listening+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6a1b      	ldr	r3, [r3, #32]
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030240 	.word	0x00030240

000d5f3c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <network_set_listen_timeout+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030240 	.word	0x00030240

000d5f4c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <network_get_listen_timeout+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030240 	.word	0x00030240

000d5f5c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <malloc+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	681b      	ldr	r3, [r3, #0]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	0003021c 	.word	0x0003021c

000d5f6c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <free+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	685b      	ldr	r3, [r3, #4]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	0003021c 	.word	0x0003021c

000d5f7c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <realloc+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	689b      	ldr	r3, [r3, #8]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	0003021c 	.word	0x0003021c

000d5f8c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <sscanf+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	695b      	ldr	r3, [r3, #20]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	0003021c 	.word	0x0003021c

000d5f9c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <abort+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	0003021c 	.word	0x0003021c

000d5fac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <_malloc_r+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	0003021c 	.word	0x0003021c

000d5fbc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <__errno+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	0003021c 	.word	0x0003021c

000d5fcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5fcc:	2100      	movs	r1, #0
   d5fce:	f7ff bf1f 	b.w	d5e10 <system_delay_ms>

000d5fd2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5fd2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5fd4:	6883      	ldr	r3, [r0, #8]
   d5fd6:	4604      	mov	r4, r0
   d5fd8:	b90b      	cbnz	r3, d5fde <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5fda:	f001 fe6a 	bl	d7cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5fde:	68c3      	ldr	r3, [r0, #12]
   d5fe0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5fe2:	68a3      	ldr	r3, [r4, #8]
   d5fe4:	b11b      	cbz	r3, d5fee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fe6:	2203      	movs	r2, #3
   d5fe8:	4621      	mov	r1, r4
   d5fea:	4620      	mov	r0, r4
   d5fec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5fee:	4620      	mov	r0, r4
}
   d5ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5ff4:	f7fe b853 	b.w	d409e <_ZdlPv>

000d5ff8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5ff8:	4770      	bx	lr

000d5ffa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5ffa:	2000      	movs	r0, #0
   d5ffc:	4770      	bx	lr

000d5ffe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5ffe:	b510      	push	{r4, lr}
   d6000:	4604      	mov	r4, r0
   d6002:	f7fe f84c 	bl	d409e <_ZdlPv>
   d6006:	4620      	mov	r0, r4
   d6008:	bd10      	pop	{r4, pc}

000d600a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d600a:	b508      	push	{r3, lr}
      { delete this; }
   d600c:	b108      	cbz	r0, d6012 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d600e:	f7ff fff6 	bl	d5ffe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6012:	bd08      	pop	{r3, pc}

000d6014 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6014:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6016:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6018:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d601a:	b113      	cbz	r3, d6022 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d601c:	2203      	movs	r2, #3
   d601e:	4601      	mov	r1, r0
   d6020:	4798      	blx	r3
    }
   d6022:	4620      	mov	r0, r4
   d6024:	bd10      	pop	{r4, pc}

000d6026 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6026:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6028:	68c4      	ldr	r4, [r0, #12]
   d602a:	b1d4      	cbz	r4, d6062 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d602c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d602e:	2b02      	cmp	r3, #2
   d6030:	d102      	bne.n	d6038 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6032:	68e0      	ldr	r0, [r4, #12]
   d6034:	f7ff ff9a 	bl	d5f6c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6038:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d603a:	b12d      	cbz	r5, d6048 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d603c:	4628      	mov	r0, r5
   d603e:	f7ff ffe9 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
   d6042:	4628      	mov	r0, r5
   d6044:	f7fe f82b 	bl	d409e <_ZdlPv>
   d6048:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d604a:	b12d      	cbz	r5, d6058 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d604c:	4628      	mov	r0, r5
   d604e:	f7ff ffe1 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
   d6052:	4628      	mov	r0, r5
   d6054:	f7fe f823 	bl	d409e <_ZdlPv>
   d6058:	4620      	mov	r0, r4
   d605a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d605e:	f7fe b81e 	b.w	d409e <_ZdlPv>
   d6062:	bd38      	pop	{r3, r4, r5, pc}

000d6064 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6064:	b510      	push	{r4, lr}
   d6066:	b088      	sub	sp, #32
   d6068:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d606a:	4668      	mov	r0, sp
   d606c:	f001 f850 	bl	d7110 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d6070:	4669      	mov	r1, sp
   d6072:	a804      	add	r0, sp, #16
   d6074:	f001 f86e 	bl	d7154 <_ZN6StringC1ERKS_>
   d6078:	a804      	add	r0, sp, #16
   d607a:	47a0      	blx	r4
   d607c:	4604      	mov	r4, r0
   d607e:	a804      	add	r0, sp, #16
   d6080:	f000 ffff 	bl	d7082 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6084:	4668      	mov	r0, sp
   d6086:	f000 fffc 	bl	d7082 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d608a:	4620      	mov	r0, r4
   d608c:	b008      	add	sp, #32
   d608e:	bd10      	pop	{r4, pc}

000d6090 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6090:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d6092:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6094:	b085      	sub	sp, #20
   d6096:	4607      	mov	r7, r0
   d6098:	460e      	mov	r6, r1
   d609a:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d609c:	2100      	movs	r1, #0
   d609e:	4622      	mov	r2, r4
   d60a0:	4668      	mov	r0, sp
   d60a2:	f003 fe15 	bl	d9cd0 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d60a6:	2200      	movs	r2, #0
   d60a8:	4669      	mov	r1, sp
   d60aa:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d60ac:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d60b0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d60b2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d60b4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d60b6:	f7ff fee9 	bl	d5e8c <spark_function>
}
   d60ba:	b005      	add	sp, #20
   d60bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d60be:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d60c0:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d60c2:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d60c4:	b17c      	cbz	r4, d60e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d60c6:	6863      	ldr	r3, [r4, #4]
   d60c8:	3b01      	subs	r3, #1
   d60ca:	6063      	str	r3, [r4, #4]
   d60cc:	b95b      	cbnz	r3, d60e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d60ce:	6823      	ldr	r3, [r4, #0]
   d60d0:	4620      	mov	r0, r4
   d60d2:	689b      	ldr	r3, [r3, #8]
   d60d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60d6:	68a3      	ldr	r3, [r4, #8]
   d60d8:	3b01      	subs	r3, #1
   d60da:	60a3      	str	r3, [r4, #8]
   d60dc:	b91b      	cbnz	r3, d60e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d60de:	6823      	ldr	r3, [r4, #0]
   d60e0:	4620      	mov	r0, r4
   d60e2:	68db      	ldr	r3, [r3, #12]
   d60e4:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d60e6:	4628      	mov	r0, r5
   d60e8:	bd38      	pop	{r3, r4, r5, pc}

000d60ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d60ea:	b513      	push	{r0, r1, r4, lr}
   d60ec:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d60ee:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d60f2:	2300      	movs	r3, #0
   d60f4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d60f6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d60f8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d60fa:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60fc:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d60fe:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6100:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6102:	f7ff ffdc 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6106:	4620      	mov	r0, r4
   d6108:	b002      	add	sp, #8
   d610a:	bd10      	pop	{r4, pc}

000d610c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d610c:	680b      	ldr	r3, [r1, #0]
   d610e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6110:	b113      	cbz	r3, d6118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6112:	685a      	ldr	r2, [r3, #4]
   d6114:	3201      	adds	r2, #1
   d6116:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6118:	4770      	bx	lr

000d611a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d611a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d611c:	460c      	mov	r4, r1
   d611e:	ad02      	add	r5, sp, #8
   d6120:	f854 3b04 	ldr.w	r3, [r4], #4
   d6124:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6128:	4606      	mov	r6, r0
   d612a:	460f      	mov	r7, r1
   d612c:	a801      	add	r0, sp, #4
   d612e:	4621      	mov	r1, r4
   d6130:	f7ff ffec 	bl	d610c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6134:	4629      	mov	r1, r5
   d6136:	4630      	mov	r0, r6
   d6138:	f7ff ffd7 	bl	d60ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d613c:	a801      	add	r0, sp, #4
   d613e:	f7ff ffbe 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6142:	4620      	mov	r0, r4
   d6144:	f7ff ffbb 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6148:	4638      	mov	r0, r7
   d614a:	f7fd ffa8 	bl	d409e <_ZdlPv>
        return p;
    }
   d614e:	4630      	mov	r0, r6
   d6150:	b003      	add	sp, #12
   d6152:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6154 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6154:	b513      	push	{r0, r1, r4, lr}
   d6156:	460b      	mov	r3, r1
   d6158:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d615a:	c803      	ldmia	r0, {r0, r1}
   d615c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6160:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6164:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6168:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d616c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6170:	b002      	add	sp, #8
   d6172:	bd10      	pop	{r4, pc}

000d6174 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6174:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6176:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6178:	b90a      	cbnz	r2, d617e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d617a:	f001 fd9a 	bl	d7cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d617e:	68c3      	ldr	r3, [r0, #12]
    }
   d6180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6184:	4718      	bx	r3

000d6186 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6186:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6188:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d618a:	f100 0110 	add.w	r1, r0, #16
   d618e:	f7ff fff1 	bl	d6174 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6192:	bd08      	pop	{r3, pc}

000d6194 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6194:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6196:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6198:	b90a      	cbnz	r2, d619e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d619a:	f001 fd8a 	bl	d7cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d619e:	68c3      	ldr	r3, [r0, #12]
    }
   d61a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61a4:	4718      	bx	r3

000d61a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d61a6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d61a8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d61aa:	f100 0110 	add.w	r1, r0, #16
   d61ae:	f7ff fff1 	bl	d6194 <_ZNKSt8functionIFvRKbEEclES1_>
   d61b2:	bd08      	pop	{r3, pc}

000d61b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d61b4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61b6:	2300      	movs	r3, #0
   d61b8:	6083      	str	r3, [r0, #8]
   d61ba:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d61bc:	4604      	mov	r4, r0
   d61be:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d61c0:	b12b      	cbz	r3, d61ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d61c2:	2202      	movs	r2, #2
   d61c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d61c6:	68eb      	ldr	r3, [r5, #12]
   d61c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d61ca:	68ab      	ldr	r3, [r5, #8]
   d61cc:	60a3      	str	r3, [r4, #8]
	}
    }
   d61ce:	4620      	mov	r0, r4
   d61d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d61d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d61d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d61d8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d61dc:	b086      	sub	sp, #24
   d61de:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61e0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d61e4:	808b      	strh	r3, [r1, #4]
   d61e6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61e8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d61ea:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ee:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d61f0:	f04f 0002 	mov.w	r0, #2
   d61f4:	e8d4 1f4f 	ldrexb	r1, [r4]
   d61f8:	4299      	cmp	r1, r3
   d61fa:	d103      	bne.n	d6204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d61fc:	e8c4 0f45 	strexb	r5, r0, [r4]
   d6200:	2d00      	cmp	r5, #0
   d6202:	d1f7      	bne.n	d61f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6204:	d002      	beq.n	d620c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d6206:	f88d 1000 	strb.w	r1, [sp]
   d620a:	e06a      	b.n	d62e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d620c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6210:	bf1e      	ittt	ne
   d6212:	60e7      	strne	r7, [r4, #12]
   d6214:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6216:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6218:	2301      	movs	r3, #1
   d621a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d621e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6220:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6222:	f104 0308 	add.w	r3, r4, #8
   d6226:	f3bf 8f5f 	dmb	sy
   d622a:	e853 6f00 	ldrex	r6, [r3]
   d622e:	e843 0200 	strex	r2, r0, [r3]
   d6232:	2a00      	cmp	r2, #0
   d6234:	d1f9      	bne.n	d622a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d6236:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d623a:	2e00      	cmp	r6, #0
   d623c:	d051      	beq.n	d62e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d623e:	f7ff fdef 	bl	d5e20 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6242:	b120      	cbz	r0, d624e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6244:	4629      	mov	r1, r5
   d6246:	4630      	mov	r0, r6
   d6248:	f7ff ff94 	bl	d6174 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d624c:	e043      	b.n	d62d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d624e:	4631      	mov	r1, r6
   d6250:	4668      	mov	r0, sp
   d6252:	f7ff ffaf 	bl	d61b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6256:	68e0      	ldr	r0, [r4, #12]
   d6258:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d625c:	b108      	cbz	r0, d6262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d625e:	f003 fdb3 	bl	d9dc8 <strdup>
   d6262:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6264:	2010      	movs	r0, #16
   d6266:	f8ad 5014 	strh.w	r5, [sp, #20]
   d626a:	f7fd ff14 	bl	d4096 <_Znwj>
   d626e:	4605      	mov	r5, r0
   d6270:	b330      	cbz	r0, d62c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6272:	f04f 0800 	mov.w	r8, #0
   d6276:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d627a:	2018      	movs	r0, #24
   d627c:	f7fd ff0b 	bl	d4096 <_Znwj>
   d6280:	4604      	mov	r4, r0
   d6282:	b1c0      	cbz	r0, d62b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6284:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6288:	4601      	mov	r1, r0
   d628a:	4668      	mov	r0, sp
   d628c:	f7ff ff62 	bl	d6154 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6290:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6292:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6294:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6296:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6298:	9202      	str	r2, [sp, #8]
   d629a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d629c:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d629e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d62a2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d62a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d62a8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d62ac:	9b04      	ldr	r3, [sp, #16]
   d62ae:	9203      	str	r2, [sp, #12]
   d62b0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d62b2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d62b6:	4b0e      	ldr	r3, [pc, #56]	; (d62f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d62b8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d62ba:	4b0e      	ldr	r3, [pc, #56]	; (d62f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62bc:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d62be:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d62c0:	9804      	ldr	r0, [sp, #16]
   d62c2:	f7ff fe53 	bl	d5f6c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d62c6:	4668      	mov	r0, sp
   d62c8:	f7ff fea4 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d62cc:	2200      	movs	r2, #0
   d62ce:	4629      	mov	r1, r5
   d62d0:	4809      	ldr	r0, [pc, #36]	; (d62f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d62d2:	f7ff fdad 	bl	d5e30 <application_thread_invoke>
   d62d6:	4630      	mov	r0, r6
   d62d8:	f7ff fe9c 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d62dc:	4630      	mov	r0, r6
   d62de:	f7fd fede 	bl	d409e <_ZdlPv>
   d62e2:	4638      	mov	r0, r7
   d62e4:	f7ff fe42 	bl	d5f6c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d62e8:	b006      	add	sp, #24
   d62ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62ee:	bf00      	nop
   d62f0:	000d6187 	.word	0x000d6187
   d62f4:	000d63e5 	.word	0x000d63e5
   d62f8:	000d5fd3 	.word	0x000d5fd3

000d62fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d62fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6300:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6302:	ad07      	add	r5, sp, #28
   d6304:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6308:	4606      	mov	r6, r0
   d630a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d630c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d630e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6310:	460f      	mov	r7, r1
   d6312:	4690      	mov	r8, r2
   d6314:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6318:	f8c5 b004 	str.w	fp, [r5, #4]
   d631c:	f8c5 b008 	str.w	fp, [r5, #8]
   d6320:	9307      	str	r3, [sp, #28]
   d6322:	f7fd feb8 	bl	d4096 <_Znwj>
   d6326:	4604      	mov	r4, r0
   d6328:	b138      	cbz	r0, d633a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d632a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d632e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6332:	f8c0 b004 	str.w	fp, [r0, #4]
   d6336:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d633a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d633c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d633e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6340:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6342:	f7fd fea8 	bl	d4096 <_Znwj>
   d6346:	b128      	cbz	r0, d6354 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6348:	2301      	movs	r3, #1
   d634a:	6043      	str	r3, [r0, #4]
   d634c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d634e:	4b23      	ldr	r3, [pc, #140]	; (d63dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d6350:	6003      	str	r3, [r0, #0]
   d6352:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6354:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6356:	4b22      	ldr	r3, [pc, #136]	; (d63e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d6358:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d635a:	2008      	movs	r0, #8
   d635c:	f7fd fe9b 	bl	d4096 <_Znwj>
   d6360:	4604      	mov	r4, r0
   d6362:	b128      	cbz	r0, d6370 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6364:	9b03      	ldr	r3, [sp, #12]
   d6366:	f840 3b04 	str.w	r3, [r0], #4
   d636a:	a904      	add	r1, sp, #16
   d636c:	f7ff fece 	bl	d610c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6370:	9500      	str	r5, [sp, #0]
   d6372:	fa5f f38a 	uxtb.w	r3, sl
   d6376:	464a      	mov	r2, r9
   d6378:	4641      	mov	r1, r8
   d637a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d637c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d637e:	f7ff fd8d 	bl	d5e9c <spark_send_event>
   d6382:	b9b8      	cbnz	r0, d63b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6384:	9b03      	ldr	r3, [sp, #12]
   d6386:	785b      	ldrb	r3, [r3, #1]
   d6388:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d638c:	b993      	cbnz	r3, d63b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d638e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6392:	a905      	add	r1, sp, #20
   d6394:	a803      	add	r0, sp, #12
   d6396:	9205      	str	r2, [sp, #20]
   d6398:	f8ad 3018 	strh.w	r3, [sp, #24]
   d639c:	f7ff ff1a 	bl	d61d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d63a0:	9805      	ldr	r0, [sp, #20]
   d63a2:	f7ff fde3 	bl	d5f6c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d63a6:	a805      	add	r0, sp, #20
   d63a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d63aa:	f7ff feb6 	bl	d611a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63ae:	a806      	add	r0, sp, #24
   d63b0:	f7ff fe85 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63b4:	9b03      	ldr	r3, [sp, #12]
   d63b6:	9305      	str	r3, [sp, #20]
   d63b8:	a904      	add	r1, sp, #16
   d63ba:	a806      	add	r0, sp, #24
   d63bc:	f7ff fea6 	bl	d610c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d63c0:	a905      	add	r1, sp, #20
   d63c2:	4630      	mov	r0, r6
   d63c4:	f7ff fe91 	bl	d60ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63c8:	a806      	add	r0, sp, #24
   d63ca:	f7ff fe78 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63ce:	a804      	add	r0, sp, #16
   d63d0:	f7ff fe75 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d63d4:	4630      	mov	r0, r6
   d63d6:	b00b      	add	sp, #44	; 0x2c
   d63d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63dc:	000dbaec 	.word	0x000dbaec
   d63e0:	000d654d 	.word	0x000d654d

000d63e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d63e4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d63e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63e8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d63ea:	d006      	beq.n	d63fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d63ec:	2a03      	cmp	r2, #3
   d63ee:	d017      	beq.n	d6420 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d63f0:	2a01      	cmp	r2, #1
   d63f2:	d120      	bne.n	d6436 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d63f4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d63f6:	6003      	str	r3, [r0, #0]
	      break;
   d63f8:	e01d      	b.n	d6436 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d63fa:	2018      	movs	r0, #24
   d63fc:	680e      	ldr	r6, [r1, #0]
   d63fe:	f7fd fe4a 	bl	d4096 <_Znwj>
   d6402:	4605      	mov	r5, r0
   d6404:	b150      	cbz	r0, d641c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6406:	4631      	mov	r1, r6
   d6408:	f7ff fed4 	bl	d61b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d640c:	6930      	ldr	r0, [r6, #16]
   d640e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6412:	b108      	cbz	r0, d6418 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6414:	f003 fcd8 	bl	d9dc8 <strdup>
   d6418:	6128      	str	r0, [r5, #16]
   d641a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d641c:	6025      	str	r5, [r4, #0]
   d641e:	e00a      	b.n	d6436 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6420:	6804      	ldr	r4, [r0, #0]
   d6422:	b144      	cbz	r4, d6436 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6424:	6920      	ldr	r0, [r4, #16]
   d6426:	f7ff fda1 	bl	d5f6c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d642a:	4620      	mov	r0, r4
   d642c:	f7ff fdf2 	bl	d6014 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6430:	4620      	mov	r0, r4
   d6432:	f7fd fe34 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6436:	2000      	movs	r0, #0
   d6438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d643a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d643a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d643c:	2300      	movs	r3, #0
   d643e:	6083      	str	r3, [r0, #8]
   d6440:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6442:	4604      	mov	r4, r0
   d6444:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6446:	b12b      	cbz	r3, d6454 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6448:	2202      	movs	r2, #2
   d644a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d644c:	68eb      	ldr	r3, [r5, #12]
   d644e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6450:	68ab      	ldr	r3, [r5, #8]
   d6452:	60a3      	str	r3, [r4, #8]
	}
    }
   d6454:	4620      	mov	r0, r4
   d6456:	bd38      	pop	{r3, r4, r5, pc}

000d6458 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6458:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d645a:	b570      	push	{r4, r5, r6, lr}
   d645c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d645e:	d006      	beq.n	d646e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6460:	2a03      	cmp	r2, #3
   d6462:	d011      	beq.n	d6488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6464:	2a01      	cmp	r2, #1
   d6466:	d117      	bne.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6468:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d646a:	6003      	str	r3, [r0, #0]
	      break;
   d646c:	e014      	b.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d646e:	2014      	movs	r0, #20
   d6470:	680e      	ldr	r6, [r1, #0]
   d6472:	f7fd fe10 	bl	d4096 <_Znwj>
   d6476:	4605      	mov	r5, r0
   d6478:	b120      	cbz	r0, d6484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d647a:	4631      	mov	r1, r6
   d647c:	f7ff ffdd 	bl	d643a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6480:	7c33      	ldrb	r3, [r6, #16]
   d6482:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6484:	6025      	str	r5, [r4, #0]
   d6486:	e007      	b.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6488:	6804      	ldr	r4, [r0, #0]
   d648a:	b12c      	cbz	r4, d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d648c:	4620      	mov	r0, r4
   d648e:	f7ff fdc1 	bl	d6014 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6492:	4620      	mov	r0, r4
   d6494:	f7fd fe03 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6498:	2000      	movs	r0, #0
   d649a:	bd70      	pop	{r4, r5, r6, pc}

000d649c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d649c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d649e:	2300      	movs	r3, #0
   d64a0:	b087      	sub	sp, #28
   d64a2:	460c      	mov	r4, r1
   d64a4:	f3bf 8f5f 	dmb	sy
   d64a8:	e850 6f00 	ldrex	r6, [r0]
   d64ac:	e840 3200 	strex	r2, r3, [r0]
   d64b0:	2a00      	cmp	r2, #0
   d64b2:	d1f9      	bne.n	d64a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d64b4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d64b8:	2e00      	cmp	r6, #0
   d64ba:	d03e      	beq.n	d653a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d64bc:	4618      	mov	r0, r3
   d64be:	f7ff fcaf 	bl	d5e20 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d64c2:	4607      	mov	r7, r0
   d64c4:	b120      	cbz	r0, d64d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d64c6:	4621      	mov	r1, r4
   d64c8:	4630      	mov	r0, r6
   d64ca:	f7ff fe63 	bl	d6194 <_ZNKSt8functionIFvRKbEEclES1_>
   d64ce:	e02e      	b.n	d652e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d64d0:	4631      	mov	r1, r6
   d64d2:	a801      	add	r0, sp, #4
   d64d4:	f7ff ffb1 	bl	d643a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d64d8:	7823      	ldrb	r3, [r4, #0]
   d64da:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d64de:	2010      	movs	r0, #16
   d64e0:	f7fd fdd9 	bl	d4096 <_Znwj>
   d64e4:	4605      	mov	r5, r0
   d64e6:	b1d0      	cbz	r0, d651e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d64e8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d64ea:	2014      	movs	r0, #20
   d64ec:	f7fd fdd3 	bl	d4096 <_Znwj>
   d64f0:	4604      	mov	r4, r0
   d64f2:	b178      	cbz	r0, d6514 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d64f4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d64f6:	4601      	mov	r1, r0
   d64f8:	a801      	add	r0, sp, #4
   d64fa:	f7ff fe2b 	bl	d6154 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64fe:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6500:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6502:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6504:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6506:	9203      	str	r2, [sp, #12]
   d6508:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d650a:	60e3      	str	r3, [r4, #12]
   d650c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6510:	9204      	str	r2, [sp, #16]
   d6512:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6514:	4b0a      	ldr	r3, [pc, #40]	; (d6540 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6516:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6518:	4b0a      	ldr	r3, [pc, #40]	; (d6544 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d651a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d651c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d651e:	a801      	add	r0, sp, #4
   d6520:	f7ff fd78 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6524:	2200      	movs	r2, #0
   d6526:	4629      	mov	r1, r5
   d6528:	4807      	ldr	r0, [pc, #28]	; (d6548 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d652a:	f7ff fc81 	bl	d5e30 <application_thread_invoke>
   d652e:	4630      	mov	r0, r6
   d6530:	f7ff fd70 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6534:	4630      	mov	r0, r6
   d6536:	f7fd fdb2 	bl	d409e <_ZdlPv>
        }
    }
   d653a:	b007      	add	sp, #28
   d653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d653e:	bf00      	nop
   d6540:	000d61a7 	.word	0x000d61a7
   d6544:	000d6459 	.word	0x000d6459
   d6548:	000d5fd3 	.word	0x000d5fd3

000d654c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d654c:	b530      	push	{r4, r5, lr}
   d654e:	b085      	sub	sp, #20
   d6550:	4604      	mov	r4, r0
   d6552:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6554:	4668      	mov	r0, sp
   d6556:	4611      	mov	r1, r2
   d6558:	f7ff fddf 	bl	d611a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d655c:	b17c      	cbz	r4, d657e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d655e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6560:	4628      	mov	r0, r5
   d6562:	b10d      	cbz	r5, d6568 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6564:	f003 fc30 	bl	d9dc8 <strdup>
   d6568:	9002      	str	r0, [sp, #8]
   d656a:	a902      	add	r1, sp, #8
   d656c:	4668      	mov	r0, sp
   d656e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6572:	f7ff fe2f 	bl	d61d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6576:	9802      	ldr	r0, [sp, #8]
   d6578:	f7ff fcf8 	bl	d5f6c <free>
   d657c:	e01d      	b.n	d65ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d657e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6580:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6584:	f04f 0201 	mov.w	r2, #1
   d6588:	e8d0 3f4f 	ldrexb	r3, [r0]
   d658c:	42a3      	cmp	r3, r4
   d658e:	d103      	bne.n	d6598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6590:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6594:	2900      	cmp	r1, #0
   d6596:	d1f7      	bne.n	d6588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6598:	d002      	beq.n	d65a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d659a:	f88d 3008 	strb.w	r3, [sp, #8]
   d659e:	e00c      	b.n	d65ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d65a0:	f110 010c 	adds.w	r1, r0, #12
   d65a4:	f04f 0301 	mov.w	r3, #1
   d65a8:	bf18      	it	ne
   d65aa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d65ac:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d65b0:	3004      	adds	r0, #4
   d65b2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d65b6:	f7ff ff71 	bl	d649c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d65ba:	a801      	add	r0, sp, #4
   d65bc:	f7ff fd7f 	bl	d60be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d65c0:	b005      	add	sp, #20
   d65c2:	bd30      	pop	{r4, r5, pc}

000d65c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d65c4:	2200      	movs	r2, #0
   d65c6:	4611      	mov	r1, r2
   d65c8:	6840      	ldr	r0, [r0, #4]
   d65ca:	f7ff bcaf 	b.w	d5f2c <network_listening>

000d65ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d65ce:	2200      	movs	r2, #0
   d65d0:	4611      	mov	r1, r2
   d65d2:	6840      	ldr	r0, [r0, #4]
   d65d4:	f7ff bcba 	b.w	d5f4c <network_get_listen_timeout>

000d65d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d65d8:	2200      	movs	r2, #0
   d65da:	6840      	ldr	r0, [r0, #4]
   d65dc:	f7ff bcae 	b.w	d5f3c <network_set_listen_timeout>

000d65e0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d65e0:	2200      	movs	r2, #0
   d65e2:	f081 0101 	eor.w	r1, r1, #1
   d65e6:	6840      	ldr	r0, [r0, #4]
   d65e8:	f7ff bc98 	b.w	d5f1c <network_listen>

000d65ec <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d65ec:	2300      	movs	r3, #0
   d65ee:	461a      	mov	r2, r3
   d65f0:	4619      	mov	r1, r3
   d65f2:	6840      	ldr	r0, [r0, #4]
   d65f4:	f7ff bc8a 	b.w	d5f0c <network_off>

000d65f8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d65f8:	2300      	movs	r3, #0
   d65fa:	461a      	mov	r2, r3
   d65fc:	4619      	mov	r1, r3
   d65fe:	6840      	ldr	r0, [r0, #4]
   d6600:	f7ff bc7c 	b.w	d5efc <network_on>

000d6604 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6604:	2200      	movs	r2, #0
   d6606:	4611      	mov	r1, r2
   d6608:	6840      	ldr	r0, [r0, #4]
   d660a:	f7ff bc6f 	b.w	d5eec <network_ready>

000d660e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d660e:	2200      	movs	r2, #0
   d6610:	4611      	mov	r1, r2
   d6612:	6840      	ldr	r0, [r0, #4]
   d6614:	f7ff bc5a 	b.w	d5ecc <network_connecting>

000d6618 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6618:	2200      	movs	r2, #0
   d661a:	2102      	movs	r1, #2
   d661c:	6840      	ldr	r0, [r0, #4]
   d661e:	f7ff bc5d 	b.w	d5edc <network_disconnect>

000d6622 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6622:	2300      	movs	r3, #0
   d6624:	461a      	mov	r2, r3
   d6626:	6840      	ldr	r0, [r0, #4]
   d6628:	f7ff bc48 	b.w	d5ebc <network_connect>

000d662c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d662c:	4b02      	ldr	r3, [pc, #8]	; (d6638 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d662e:	2203      	movs	r2, #3
   d6630:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6632:	4a02      	ldr	r2, [pc, #8]	; (d663c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6634:	601a      	str	r2, [r3, #0]
   d6636:	4770      	bx	lr
   d6638:	2003e3d8 	.word	0x2003e3d8
   d663c:	000dbb08 	.word	0x000dbb08

000d6640 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6640:	4770      	bx	lr

000d6642 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6644:	4606      	mov	r6, r0
   d6646:	4615      	mov	r5, r2
   d6648:	460c      	mov	r4, r1
   d664a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d664c:	42bc      	cmp	r4, r7
   d664e:	d006      	beq.n	d665e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6650:	6833      	ldr	r3, [r6, #0]
   d6652:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6656:	689b      	ldr	r3, [r3, #8]
   d6658:	4630      	mov	r0, r6
   d665a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d665c:	e7f6      	b.n	d664c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d665e:	4628      	mov	r0, r5
   d6660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6662 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6662:	2200      	movs	r2, #0
   d6664:	7c00      	ldrb	r0, [r0, #16]
   d6666:	f7ff ba73 	b.w	d5b50 <HAL_I2C_Write_Data>

000d666a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d666a:	2100      	movs	r1, #0
   d666c:	7c00      	ldrb	r0, [r0, #16]
   d666e:	f7ff ba77 	b.w	d5b60 <HAL_I2C_Available_Data>

000d6672 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6672:	2100      	movs	r1, #0
   d6674:	7c00      	ldrb	r0, [r0, #16]
   d6676:	f7ff ba7b 	b.w	d5b70 <HAL_I2C_Read_Data>

000d667a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d667a:	2100      	movs	r1, #0
   d667c:	7c00      	ldrb	r0, [r0, #16]
   d667e:	f7ff ba7f 	b.w	d5b80 <HAL_I2C_Peek_Data>

000d6682 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6682:	2100      	movs	r1, #0
   d6684:	7c00      	ldrb	r0, [r0, #16]
   d6686:	f7ff ba83 	b.w	d5b90 <HAL_I2C_Flush_Data>

000d668a <_ZN7TwoWireD0Ev>:
   d668a:	b510      	push	{r4, lr}
   d668c:	4604      	mov	r4, r0
   d668e:	f7fd fd06 	bl	d409e <_ZdlPv>
   d6692:	4620      	mov	r0, r4
   d6694:	bd10      	pop	{r4, pc}
	...

000d6698 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6698:	b510      	push	{r4, lr}
   d669a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d669c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66a0:	4608      	mov	r0, r1
   d66a2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d66a4:	2100      	movs	r1, #0
   d66a6:	4b04      	ldr	r3, [pc, #16]	; (d66b8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d66a8:	7420      	strb	r0, [r4, #16]
   d66aa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d66ac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d66ae:	f7ff fa7f 	bl	d5bb0 <HAL_I2C_Init>

}
   d66b2:	4620      	mov	r0, r4
   d66b4:	bd10      	pop	{r4, pc}
   d66b6:	bf00      	nop
   d66b8:	000dbb3c 	.word	0x000dbb3c

000d66bc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d66bc:	2100      	movs	r1, #0
   d66be:	7c00      	ldrb	r0, [r0, #16]
   d66c0:	f7ff ba6e 	b.w	d5ba0 <HAL_I2C_Is_Enabled>

000d66c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d66c4:	4770      	bx	lr

000d66c6 <_ZN9IPAddressD0Ev>:
   d66c6:	b510      	push	{r4, lr}
   d66c8:	4604      	mov	r4, r0
   d66ca:	f7fd fce8 	bl	d409e <_ZdlPv>
   d66ce:	4620      	mov	r0, r4
   d66d0:	bd10      	pop	{r4, pc}

000d66d2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d66d2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d66d4:	7d03      	ldrb	r3, [r0, #20]
   d66d6:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d66d8:	b08d      	sub	sp, #52	; 0x34
   d66da:	460e      	mov	r6, r1
   d66dc:	f100 0704 	add.w	r7, r0, #4
   d66e0:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d66e4:	d002      	beq.n	d66ec <_ZNK9IPAddress7printToER5Print+0x1a>
   d66e6:	f100 0508 	add.w	r5, r0, #8
   d66ea:	e018      	b.n	d671e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d66ec:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d66ee:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d66f0:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d66f4:	232f      	movs	r3, #47	; 0x2f
   d66f6:	462a      	mov	r2, r5
   d66f8:	200a      	movs	r0, #10
   d66fa:	f7ff fa89 	bl	d5c10 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d66fe:	4628      	mov	r0, r5
   d6700:	f003 fb7d 	bl	d9dfe <strlen>
   d6704:	6833      	ldr	r3, [r6, #0]
   d6706:	4602      	mov	r2, r0
   d6708:	68db      	ldr	r3, [r3, #12]
   d670a:	4629      	mov	r1, r5
   d670c:	4630      	mov	r0, r6
   d670e:	4798      	blx	r3
   d6710:	e00f      	b.n	d6732 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6712:	b124      	cbz	r4, d671e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6714:	212e      	movs	r1, #46	; 0x2e
   d6716:	4630      	mov	r0, r6
   d6718:	f000 fc38 	bl	d6f8c <_ZN5Print5printEc>
   d671c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d671e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6722:	220a      	movs	r2, #10
   d6724:	4630      	mov	r0, r6
   d6726:	f000 fc61 	bl	d6fec <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d672a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d672c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d672e:	d1f0      	bne.n	d6712 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6730:	4620      	mov	r0, r4
    }
    return n;
}
   d6732:	b00d      	add	sp, #52	; 0x34
   d6734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6738 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d6738:	b510      	push	{r4, lr}
   d673a:	4b05      	ldr	r3, [pc, #20]	; (d6750 <_ZN9IPAddressC1Ev+0x18>)
   d673c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d673e:	2211      	movs	r2, #17
   d6740:	f840 3b04 	str.w	r3, [r0], #4
   d6744:	2100      	movs	r1, #0
   d6746:	f003 fac3 	bl	d9cd0 <memset>
{
    clear();
}
   d674a:	4620      	mov	r0, r4
   d674c:	bd10      	pop	{r4, pc}
   d674e:	bf00      	nop
   d6750:	000dbb64 	.word	0x000dbb64

000d6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6754:	4603      	mov	r3, r0
   d6756:	4a07      	ldr	r2, [pc, #28]	; (d6774 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6758:	b510      	push	{r4, lr}
   d675a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d675e:	f101 0210 	add.w	r2, r1, #16
   d6762:	f851 4b04 	ldr.w	r4, [r1], #4
   d6766:	f843 4b04 	str.w	r4, [r3], #4
   d676a:	4291      	cmp	r1, r2
   d676c:	d1f9      	bne.n	d6762 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d676e:	780a      	ldrb	r2, [r1, #0]
   d6770:	701a      	strb	r2, [r3, #0]
}
   d6772:	bd10      	pop	{r4, pc}
   d6774:	000dbb64 	.word	0x000dbb64

000d6778 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6778:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d677a:	2b04      	cmp	r3, #4
   d677c:	d101      	bne.n	d6782 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d677e:	6840      	ldr	r0, [r0, #4]
   d6780:	e008      	b.n	d6794 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6782:	2b06      	cmp	r3, #6
   d6784:	d10a      	bne.n	d679c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d6786:	6843      	ldr	r3, [r0, #4]
   d6788:	b153      	cbz	r3, d67a0 <_ZNK9IPAddresscvbEv+0x28>
   d678a:	6883      	ldr	r3, [r0, #8]
   d678c:	b143      	cbz	r3, d67a0 <_ZNK9IPAddresscvbEv+0x28>
   d678e:	68c3      	ldr	r3, [r0, #12]
   d6790:	b133      	cbz	r3, d67a0 <_ZNK9IPAddresscvbEv+0x28>
   d6792:	6900      	ldr	r0, [r0, #16]
   d6794:	3000      	adds	r0, #0
   d6796:	bf18      	it	ne
   d6798:	2001      	movne	r0, #1
   d679a:	4770      	bx	lr
   d679c:	2000      	movs	r0, #0
   d679e:	4770      	bx	lr
   d67a0:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d67a2:	4770      	bx	lr

000d67a4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d67a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d67a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d67aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d67ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d67b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d67b6:	2304      	movs	r3, #4
   d67b8:	6041      	str	r1, [r0, #4]
   d67ba:	7503      	strb	r3, [r0, #20]
   d67bc:	bd10      	pop	{r4, pc}

000d67be <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d67be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d67c0:	780d      	ldrb	r5, [r1, #0]
   d67c2:	788b      	ldrb	r3, [r1, #2]
   d67c4:	784a      	ldrb	r2, [r1, #1]
   d67c6:	78c9      	ldrb	r1, [r1, #3]
   d67c8:	9100      	str	r1, [sp, #0]
   d67ca:	4629      	mov	r1, r5
   d67cc:	f7ff ffea 	bl	d67a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d67d0:	b003      	add	sp, #12
   d67d2:	bd30      	pop	{r4, r5, pc}

000d67d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d67d4:	4b01      	ldr	r3, [pc, #4]	; (d67dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d67d6:	4a02      	ldr	r2, [pc, #8]	; (d67e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d67d8:	601a      	str	r2, [r3, #0]
   d67da:	4770      	bx	lr
   d67dc:	2003e3e0 	.word	0x2003e3e0
   d67e0:	000dbc23 	.word	0x000dbc23

000d67e4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d67e4:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d67e6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d67e8:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d67ea:	b10b      	cbz	r3, d67f0 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d67ec:	68c0      	ldr	r0, [r0, #12]
   d67ee:	e006      	b.n	d67fe <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d67f0:	6840      	ldr	r0, [r0, #4]
   d67f2:	b128      	cbz	r0, d6800 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67f4:	6883      	ldr	r3, [r0, #8]
   d67f6:	b90b      	cbnz	r3, d67fc <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d67f8:	f001 fa5b 	bl	d7cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67fc:	68c3      	ldr	r3, [r0, #12]
   d67fe:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d6800:	2301      	movs	r3, #1
   d6802:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d6804:	2000      	movs	r0, #0
    }
   d6806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d680a:	f7ff b951 	b.w	d5ab0 <os_thread_exit>

000d680e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d680e:	2200      	movs	r2, #0
   d6810:	4611      	mov	r1, r2
   d6812:	6840      	ldr	r0, [r0, #4]
   d6814:	f7ff bb8a 	b.w	d5f2c <network_listening>

000d6818 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6818:	2200      	movs	r2, #0
   d681a:	4611      	mov	r1, r2
   d681c:	6840      	ldr	r0, [r0, #4]
   d681e:	f7ff bb95 	b.w	d5f4c <network_get_listen_timeout>

000d6822 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6822:	2200      	movs	r2, #0
   d6824:	6840      	ldr	r0, [r0, #4]
   d6826:	f7ff bb89 	b.w	d5f3c <network_set_listen_timeout>

000d682a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d682a:	2200      	movs	r2, #0
   d682c:	f081 0101 	eor.w	r1, r1, #1
   d6830:	6840      	ldr	r0, [r0, #4]
   d6832:	f7ff bb73 	b.w	d5f1c <network_listen>

000d6836 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6836:	2300      	movs	r3, #0
   d6838:	461a      	mov	r2, r3
   d683a:	4619      	mov	r1, r3
   d683c:	6840      	ldr	r0, [r0, #4]
   d683e:	f7ff bb65 	b.w	d5f0c <network_off>

000d6842 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6842:	2300      	movs	r3, #0
   d6844:	461a      	mov	r2, r3
   d6846:	4619      	mov	r1, r3
   d6848:	6840      	ldr	r0, [r0, #4]
   d684a:	f7ff bb57 	b.w	d5efc <network_on>

000d684e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d684e:	2200      	movs	r2, #0
   d6850:	4611      	mov	r1, r2
   d6852:	6840      	ldr	r0, [r0, #4]
   d6854:	f7ff bb4a 	b.w	d5eec <network_ready>

000d6858 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6858:	2200      	movs	r2, #0
   d685a:	4611      	mov	r1, r2
   d685c:	6840      	ldr	r0, [r0, #4]
   d685e:	f7ff bb35 	b.w	d5ecc <network_connecting>

000d6862 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6862:	2200      	movs	r2, #0
   d6864:	2102      	movs	r1, #2
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	f7ff bb38 	b.w	d5edc <network_disconnect>

000d686c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d686c:	2300      	movs	r3, #0
   d686e:	461a      	mov	r2, r3
   d6870:	6840      	ldr	r0, [r0, #4]
   d6872:	f7ff bb23 	b.w	d5ebc <network_connect>

000d6876 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6876:	b110      	cbz	r0, d687e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6878:	6803      	ldr	r3, [r0, #0]
   d687a:	685b      	ldr	r3, [r3, #4]
   d687c:	4718      	bx	r3
   d687e:	4770      	bx	lr

000d6880 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d6880:	b538      	push	{r3, r4, r5, lr}
   d6882:	4604      	mov	r4, r0
   d6884:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d6886:	b1d0      	cbz	r0, d68be <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d6888:	f7ff f8da 	bl	d5a40 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d688c:	b9b8      	cbnz	r0, d68be <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d688e:	7c23      	ldrb	r3, [r4, #16]
   d6890:	b91b      	cbnz	r3, d689a <_ZN6Thread7disposeEv+0x1a>
   d6892:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d6894:	b108      	cbz	r0, d689a <_ZN6Thread7disposeEv+0x1a>
   d6896:	f7ff f8db 	bl	d5a50 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d689a:	6865      	ldr	r5, [r4, #4]
   d689c:	b155      	cbz	r5, d68b4 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d689e:	68ab      	ldr	r3, [r5, #8]
   d68a0:	b11b      	cbz	r3, d68aa <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68a2:	2203      	movs	r2, #3
   d68a4:	4629      	mov	r1, r5
   d68a6:	4628      	mov	r0, r5
   d68a8:	4798      	blx	r3
            delete wrapper;
   d68aa:	4628      	mov	r0, r5
   d68ac:	f7fd fbf7 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d68b0:	2300      	movs	r3, #0
   d68b2:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d68b4:	6820      	ldr	r0, [r4, #0]
   d68b6:	f7ff f8d3 	bl	d5a60 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d68ba:	2300      	movs	r3, #0
   d68bc:	6023      	str	r3, [r4, #0]
   d68be:	bd38      	pop	{r3, r4, r5, pc}

000d68c0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d68c0:	b538      	push	{r3, r4, r5, lr}
   d68c2:	4b0b      	ldr	r3, [pc, #44]	; (d68f0 <_ZN5spark9MeshClassD1Ev+0x30>)
   d68c4:	6003      	str	r3, [r0, #0]
   d68c6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68c8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d68cc:	b108      	cbz	r0, d68d2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d68ce:	f7fd fbe8 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68d2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d68d6:	b12d      	cbz	r5, d68e4 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d68d8:	4628      	mov	r0, r5
   d68da:	f7ff ffd1 	bl	d6880 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68de:	4628      	mov	r0, r5
   d68e0:	f7fd fbdd 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68e4:	68a0      	ldr	r0, [r4, #8]
   d68e6:	b108      	cbz	r0, d68ec <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d68e8:	f7ff ffc5 	bl	d6876 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d68ec:	4620      	mov	r0, r4
   d68ee:	bd38      	pop	{r3, r4, r5, pc}
   d68f0:	000dbc54 	.word	0x000dbc54

000d68f4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d68f4:	6800      	ldr	r0, [r0, #0]
   d68f6:	f7ff b8cb 	b.w	d5a90 <os_mutex_recursive_lock>

000d68fa <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d68fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6900:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d6904:	4606      	mov	r6, r0
   d6906:	4688      	mov	r8, r1
   d6908:	4691      	mov	r9, r2
   d690a:	469a      	mov	sl, r3
   d690c:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d690e:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6910:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6912:	454b      	cmp	r3, r9
   d6914:	d129      	bne.n	d696a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d6916:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d6918:	4553      	cmp	r3, sl
   d691a:	d126      	bne.n	d696a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d691c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d6920:	455b      	cmp	r3, fp
   d6922:	d122      	bne.n	d696a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6924:	2140      	movs	r1, #64	; 0x40
   d6926:	4640      	mov	r0, r8
   d6928:	f003 fa86 	bl	d9e38 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d692c:	4641      	mov	r1, r8
   d692e:	4602      	mov	r2, r0
   d6930:	4620      	mov	r0, r4
   d6932:	f003 fa6c 	bl	d9e0e <strncmp>
   d6936:	b9c0      	cbnz	r0, d696a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6938:	b16f      	cbz	r7, d6956 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d693a:	210c      	movs	r1, #12
   d693c:	4638      	mov	r0, r7
   d693e:	f003 fa7b 	bl	d9e38 <strnlen>
                if (id_len)
   d6942:	4602      	mov	r2, r0
   d6944:	b138      	cbz	r0, d6956 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d6946:	2358      	movs	r3, #88	; 0x58
   d6948:	fb03 6005 	mla	r0, r3, r5, r6
   d694c:	4639      	mov	r1, r7
   d694e:	3049      	adds	r0, #73	; 0x49
   d6950:	f003 fa5d 	bl	d9e0e <strncmp>
   d6954:	e004      	b.n	d6960 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d6956:	2058      	movs	r0, #88	; 0x58
   d6958:	fb00 6505 	mla	r5, r0, r5, r6
   d695c:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d6960:	fab0 f080 	clz	r0, r0
   d6964:	0940      	lsrs	r0, r0, #5
   d6966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d696a:	3501      	adds	r5, #1
   d696c:	2d05      	cmp	r5, #5
   d696e:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d6972:	d1cd      	bne.n	d6910 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d6974:	2000      	movs	r0, #0
}
   d6976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d697c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6980:	b085      	sub	sp, #20
   d6982:	4607      	mov	r7, r0
   d6984:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6988:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d698a:	9601      	str	r6, [sp, #4]
   d698c:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6990:	4689      	mov	r9, r1
   d6992:	9202      	str	r2, [sp, #8]
   d6994:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d6996:	f7ff ffb0 	bl	d68fa <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d699a:	2800      	cmp	r0, #0
   d699c:	d13c      	bne.n	d6a18 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d699e:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d69a0:	2358      	movs	r3, #88	; 0x58
   d69a2:	fb03 7504 	mla	r5, r3, r4, r7
   d69a6:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d69aa:	f1b8 0f00 	cmp.w	r8, #0
   d69ae:	d12e      	bne.n	d6a0e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d69b0:	2140      	movs	r1, #64	; 0x40
   d69b2:	4648      	mov	r0, r9
   d69b4:	f003 fa40 	bl	d9e38 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d69b8:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d69ba:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d69bc:	4602      	mov	r2, r0
   d69be:	4628      	mov	r0, r5
   d69c0:	f003 f97b 	bl	d9cba <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d69c4:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d69c8:	4641      	mov	r1, r8
   d69ca:	eb05 000b 	add.w	r0, r5, fp
   d69ce:	f003 f97f 	bl	d9cd0 <memset>
            event_handlers[i].handler = handler;
   d69d2:	9b02      	ldr	r3, [sp, #8]
   d69d4:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d69d6:	9b03      	ldr	r3, [sp, #12]
   d69d8:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d69da:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d69de:	b12e      	cbz	r6, d69ec <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d69e0:	210c      	movs	r1, #12
   d69e2:	4630      	mov	r0, r6
   d69e4:	f003 fa28 	bl	d9e38 <strnlen>
   d69e8:	4605      	mov	r5, r0
   d69ea:	e000      	b.n	d69ee <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d69ec:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d69ee:	2058      	movs	r0, #88	; 0x58
   d69f0:	4344      	muls	r4, r0
   d69f2:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d69f4:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d69f6:	462a      	mov	r2, r5
   d69f8:	4631      	mov	r1, r6
   d69fa:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d69fc:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d69fe:	f003 f95c 	bl	d9cba <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6a02:	2000      	movs	r0, #0
   d6a04:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d6a08:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d6a0c:	e005      	b.n	d6a1a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6a0e:	3401      	adds	r4, #1
   d6a10:	2c05      	cmp	r4, #5
   d6a12:	d1c6      	bne.n	d69a2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6a14:	4802      	ldr	r0, [pc, #8]	; (d6a20 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d6a16:	e000      	b.n	d6a1a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d6a18:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d6a1a:	b005      	add	sp, #20
   d6a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a20:	fffffefc 	.word	0xfffffefc

000d6a24 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6a24:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d6a26:	2300      	movs	r3, #0
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	9300      	str	r3, [sp, #0]
   d6a2c:	f7ff ffa6 	bl	d697c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6a30:	b003      	add	sp, #12
   d6a32:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a36 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6a36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6a3a:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d6a3c:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6a3e:	460d      	mov	r5, r1
   d6a40:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6a42:	f003 f9dc 	bl	d9dfe <strlen>
   d6a46:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d6a4a:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6a4e:	b1ab      	cbz	r3, d6a7c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6a50:	2140      	movs	r1, #64	; 0x40
   d6a52:	4620      	mov	r0, r4
   d6a54:	f003 f9f0 	bl	d9e38 <strnlen>

        if (event_name_length < filter_length)
   d6a58:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6a5a:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d6a5c:	d30b      	bcc.n	d6a76 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d6a5e:	4629      	mov	r1, r5
   d6a60:	4620      	mov	r0, r4
   d6a62:	f003 f91b 	bl	d9c9c <memcmp>
        if (0 == cmp)
   d6a66:	b930      	cbnz	r0, d6a76 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d6a68:	9000      	str	r0, [sp, #0]
   d6a6a:	4643      	mov	r3, r8
   d6a6c:	462a      	mov	r2, r5
   d6a6e:	4621      	mov	r1, r4
   d6a70:	2058      	movs	r0, #88	; 0x58
   d6a72:	f7ff f9f9 	bl	d5e68 <system_invoke_event_handler>
   d6a76:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6a78:	42b4      	cmp	r4, r6
   d6a7a:	d1e7      	bne.n	d6a4c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d6a7c:	b002      	add	sp, #8
   d6a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6a84 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6a84:	b530      	push	{r4, r5, lr}
   d6a86:	b08d      	sub	sp, #52	; 0x34
   d6a88:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d6a8a:	2211      	movs	r2, #17
   d6a8c:	2100      	movs	r1, #0
   d6a8e:	a801      	add	r0, sp, #4
   d6a90:	f003 f91e 	bl	d9cd0 <memset>
    addr.v = 6;
   d6a94:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6a96:	aa01      	add	r2, sp, #4
   d6a98:	4909      	ldr	r1, [pc, #36]	; (d6ac0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d6a9a:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6a9e:	200a      	movs	r0, #10
   d6aa0:	f7ff f8be 	bl	d5c20 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6aa4:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d6aa6:	a901      	add	r1, sp, #4
   d6aa8:	a806      	add	r0, sp, #24
   d6aaa:	f7ff fe53 	bl	d6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ab0:	3404      	adds	r4, #4
   d6ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ab4:	682b      	ldr	r3, [r5, #0]
   d6ab6:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d6ab8:	2000      	movs	r0, #0
   d6aba:	b00d      	add	sp, #52	; 0x34
   d6abc:	bd30      	pop	{r4, r5, pc}
   d6abe:	bf00      	nop
   d6ac0:	000dbc80 	.word	0x000dbc80

000d6ac4 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d6ac4:	b530      	push	{r4, r5, lr}
   d6ac6:	4604      	mov	r4, r0
   d6ac8:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6aca:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6ace:	f7ff ff11 	bl	d68f4 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d6ad2:	6823      	ldr	r3, [r4, #0]
   d6ad4:	bb83      	cbnz	r3, d6b38 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d6ad6:	204c      	movs	r0, #76	; 0x4c
   d6ad8:	f7fd fadd 	bl	d4096 <_Znwj>
   d6adc:	4605      	mov	r5, r0
   d6ade:	b108      	cbz	r0, d6ae4 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d6ae0:	f000 fe48 	bl	d7774 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ae4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ae6:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6ae8:	b108      	cbz	r0, d6aee <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d6aea:	f7ff fec4 	bl	d6876 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6aee:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d6af0:	b320      	cbz	r0, d6b3c <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d6af2:	2200      	movs	r2, #0
   d6af4:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d6af8:	f000 fe6b 	bl	d77d2 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6afc:	a908      	add	r1, sp, #32
   d6afe:	2500      	movs	r5, #0
   d6b00:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d6b04:	4811      	ldr	r0, [pc, #68]	; (d6b4c <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d6b06:	f7ff f85b 	bl	d5bc0 <if_name_to_index>
   d6b0a:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d6b0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d6b10:	6803      	ldr	r3, [r0, #0]
   d6b12:	f249 0169 	movw	r1, #36969	; 0x9069
   d6b16:	6a1b      	ldr	r3, [r3, #32]
   d6b18:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d6b1a:	a802      	add	r0, sp, #8
   d6b1c:	f7ff fe0c 	bl	d6738 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6b20:	a802      	add	r0, sp, #8
   d6b22:	f7ff ffaf 	bl	d6a84 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6b26:	2800      	cmp	r0, #0
   d6b28:	db04      	blt.n	d6b34 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d6b2a:	a902      	add	r1, sp, #8
   d6b2c:	6820      	ldr	r0, [r4, #0]
   d6b2e:	f000 feb8 	bl	d78a2 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d6b32:	e004      	b.n	d6b3e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d6b34:	4605      	mov	r5, r0
   d6b36:	e002      	b.n	d6b3e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d6b38:	2500      	movs	r5, #0
   d6b3a:	e000      	b.n	d6b3e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d6b3c:	4d04      	ldr	r5, [pc, #16]	; (d6b50 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6b3e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6b42:	f7fe ffad 	bl	d5aa0 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d6b46:	4628      	mov	r0, r5
   d6b48:	b009      	add	sp, #36	; 0x24
   d6b4a:	bd30      	pop	{r4, r5, pc}
   d6b4c:	000dbc8d 	.word	0x000dbc8d
   d6b50:	fffffefc 	.word	0xfffffefc

000d6b54 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d6b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b58:	4605      	mov	r5, r0
   d6b5a:	b08c      	sub	sp, #48	; 0x30
   d6b5c:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d6b5e:	460f      	mov	r7, r1
   d6b60:	b109      	cbz	r1, d6b66 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d6b62:	780b      	ldrb	r3, [r1, #0]
   d6b64:	b90b      	cbnz	r3, d6b6a <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d6b66:	4c35      	ldr	r4, [pc, #212]	; (d6c3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d6b68:	e064      	b.n	d6c34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d6b6a:	4608      	mov	r0, r1
   d6b6c:	f003 f947 	bl	d9dfe <strlen>
   d6b70:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6b72:	2e00      	cmp	r6, #0
   d6b74:	d05c      	beq.n	d6c30 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d6b76:	4630      	mov	r0, r6
   d6b78:	f003 f941 	bl	d9dfe <strlen>
   d6b7c:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6b7e:	f108 0302 	add.w	r3, r8, #2
   d6b82:	4423      	add	r3, r4
   d6b84:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d6b88:	d84f      	bhi.n	d6c2a <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d6b8a:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d6b8e:	f7ff feb1 	bl	d68f4 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d6b92:	4628      	mov	r0, r5
   d6b94:	f7ff ff96 	bl	d6ac4 <_ZN5spark11MeshPublish14initialize_udpEv>
   d6b98:	2800      	cmp	r0, #0
   d6b9a:	db40      	blt.n	d6c1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d6b9c:	4668      	mov	r0, sp
   d6b9e:	f7ff fdcb 	bl	d6738 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6ba2:	4668      	mov	r0, sp
   d6ba4:	f7ff ff6e 	bl	d6a84 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6ba8:	2800      	cmp	r0, #0
   d6baa:	db38      	blt.n	d6c1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d6bac:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d6bb0:	f8da 3000 	ldr.w	r3, [sl]
   d6bb4:	f10d 0c04 	add.w	ip, sp, #4
   d6bb8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d6bbc:	4b20      	ldr	r3, [pc, #128]	; (d6c40 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d6bbe:	9306      	str	r3, [sp, #24]
   d6bc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6bc4:	f10d 0e1c 	add.w	lr, sp, #28
   d6bc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6bcc:	f8dc 3000 	ldr.w	r3, [ip]
   d6bd0:	f88e 3000 	strb.w	r3, [lr]
   d6bd4:	f249 0269 	movw	r2, #36969	; 0x9069
   d6bd8:	a906      	add	r1, sp, #24
   d6bda:	4650      	mov	r0, sl
   d6bdc:	47c8      	blx	r9
   d6bde:	2800      	cmp	r0, #0
   d6be0:	db1d      	blt.n	d6c1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d6be2:	2300      	movs	r3, #0
   d6be4:	6828      	ldr	r0, [r5, #0]
   d6be6:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d6bea:	6803      	ldr	r3, [r0, #0]
   d6bec:	2201      	movs	r2, #1
   d6bee:	68db      	ldr	r3, [r3, #12]
   d6bf0:	a906      	add	r1, sp, #24
   d6bf2:	4798      	blx	r3
   d6bf4:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d6bf6:	6803      	ldr	r3, [r0, #0]
   d6bf8:	f108 0201 	add.w	r2, r8, #1
   d6bfc:	68db      	ldr	r3, [r3, #12]
   d6bfe:	4639      	mov	r1, r7
   d6c00:	4798      	blx	r3
    if (dataLen > 0) {
   d6c02:	b12c      	cbz	r4, d6c10 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d6c04:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d6c06:	6803      	ldr	r3, [r0, #0]
   d6c08:	4622      	mov	r2, r4
   d6c0a:	68db      	ldr	r3, [r3, #12]
   d6c0c:	4631      	mov	r1, r6
   d6c0e:	4798      	blx	r3
   d6c10:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d6c12:	6803      	ldr	r3, [r0, #0]
   d6c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c16:	4798      	blx	r3
   d6c18:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6c1c:	e000      	b.n	d6c20 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6c1e:	4604      	mov	r4, r0
   d6c20:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6c24:	f7fe ff3c 	bl	d5aa0 <os_mutex_recursive_unlock>
   d6c28:	e004      	b.n	d6c34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6c2a:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6c2e:	e001      	b.n	d6c34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6c30:	4634      	mov	r4, r6
   d6c32:	e7a4      	b.n	d6b7e <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d6c34:	4620      	mov	r0, r4
   d6c36:	b00c      	add	sp, #48	; 0x30
   d6c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c3c:	fffffef2 	.word	0xfffffef2
   d6c40:	000dbb64 	.word	0x000dbb64

000d6c44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d6c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6c48:	4604      	mov	r4, r0
   d6c4a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6c4e:	460f      	mov	r7, r1
   d6c50:	4690      	mov	r8, r2
   d6c52:	f7ff fe4f 	bl	d68f4 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d6c56:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d6c5a:	b9fe      	cbnz	r6, d6c9c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6c5c:	491a      	ldr	r1, [pc, #104]	; (d6cc8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x84>)
   d6c5e:	2014      	movs	r0, #20
   d6c60:	f001 f816 	bl	d7c90 <_ZnwjRKSt9nothrow_t>
   d6c64:	4605      	mov	r5, r0
   d6c66:	b170      	cbz	r0, d6c86 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x42>

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d6c68:	4b18      	ldr	r3, [pc, #96]	; (d6ccc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x88>)
   d6c6a:	6083      	str	r3, [r0, #8]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d6c6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d6c70:	6006      	str	r6, [r0, #0]
   d6c72:	6046      	str	r6, [r0, #4]
   d6c74:	60c4      	str	r4, [r0, #12]
   d6c76:	7406      	strb	r6, [r0, #16]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d6c78:	2203      	movs	r2, #3
   d6c7a:	9301      	str	r3, [sp, #4]
   d6c7c:	9000      	str	r0, [sp, #0]
   d6c7e:	4b14      	ldr	r3, [pc, #80]	; (d6cd0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8c>)
   d6c80:	4914      	ldr	r1, [pc, #80]	; (d6cd4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>)
   d6c82:	f7fe fed5 	bl	d5a30 <os_thread_create>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c86:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d6c8a:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6c8e:	b12e      	cbz	r6, d6c9c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        }
    }

    ~Thread()
    {
        dispose();
   d6c90:	4630      	mov	r0, r6
   d6c92:	f7ff fdf5 	bl	d6880 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c96:	4630      	mov	r0, r6
   d6c98:	f7fd fa01 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d6c9c:	4620      	mov	r0, r4
   d6c9e:	f7ff ff11 	bl	d6ac4 <_ZN5spark11MeshPublish14initialize_udpEv>
   d6ca2:	2800      	cmp	r0, #0
   d6ca4:	db07      	blt.n	d6cb6 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x72>
    CHECK(subscriptions.add(prefix, handler));
   d6ca6:	4642      	mov	r2, r8
   d6ca8:	4639      	mov	r1, r7
   d6caa:	1d20      	adds	r0, r4, #4
   d6cac:	f7ff feba 	bl	d6a24 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d6cb0:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d6cb4:	e000      	b.n	d6cb8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x74>
   d6cb6:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6cb8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6cbc:	f7fe fef0 	bl	d5aa0 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d6cc0:	4628      	mov	r0, r5
   d6cc2:	b002      	add	sp, #8
   d6cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6cc8:	000dbdf0 	.word	0x000dbdf0
   d6ccc:	000d6de9 	.word	0x000d6de9
   d6cd0:	000d67e5 	.word	0x000d67e5
   d6cd4:	000dbc91 	.word	0x000dbc91

000d6cd8 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6cdc:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d6cde:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6ce2:	b08a      	sub	sp, #40	; 0x28
   d6ce4:	4630      	mov	r0, r6
   d6ce6:	f7ff fe05 	bl	d68f4 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6cea:	682c      	ldr	r4, [r5, #0]
   d6cec:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6cf0:	f7fe fed6 	bl	d5aa0 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d6cf4:	2c00      	cmp	r4, #0
   d6cf6:	d063      	beq.n	d6dc0 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d6cf8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6cfc:	b163      	cbz	r3, d6d18 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d6cfe:	6823      	ldr	r3, [r4, #0]
   d6d00:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d6d04:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d6d06:	4620      	mov	r0, r4
   d6d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d0c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d6d10:	47b8      	blx	r7
        if (len > 0) {
   d6d12:	1e04      	subs	r4, r0, #0
   d6d14:	dc13      	bgt.n	d6d3e <_ZN5spark11MeshPublish4pollEv+0x66>
   d6d16:	e056      	b.n	d6dc6 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d6d18:	492d      	ldr	r1, [pc, #180]	; (d6dd0 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d6d1a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d6d1e:	f000 ffc6 	bl	d7cae <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d22:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d6d26:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d6d2a:	b113      	cbz	r3, d6d32 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d2c:	4618      	mov	r0, r3
   d6d2e:	f7fd f9b8 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d6d32:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6d36:	2b00      	cmp	r3, #0
   d6d38:	d1e1      	bne.n	d6cfe <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d6d3a:	4826      	ldr	r0, [pc, #152]	; (d6dd4 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d6d3c:	e044      	b.n	d6dc8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d6d3e:	2320      	movs	r3, #32
   d6d40:	4a25      	ldr	r2, [pc, #148]	; (d6dd8 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d6d42:	9302      	str	r3, [sp, #8]
   d6d44:	9200      	str	r2, [sp, #0]
   d6d46:	2300      	movs	r3, #0
   d6d48:	9401      	str	r4, [sp, #4]
   d6d4a:	aa02      	add	r2, sp, #8
   d6d4c:	4923      	ldr	r1, [pc, #140]	; (d6ddc <_ZN5spark11MeshPublish4pollEv+0x104>)
   d6d4e:	9303      	str	r3, [sp, #12]
   d6d50:	2001      	movs	r0, #1
   d6d52:	f7ff f84d 	bl	d5df0 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6d56:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d6d5a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d6d5c:	781b      	ldrb	r3, [r3, #0]
   d6d5e:	bb6b      	cbnz	r3, d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d6d60:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d6d62:	4621      	mov	r1, r4
   d6d64:	4638      	mov	r0, r7
   d6d66:	f003 f867 	bl	d9e38 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d6d6a:	b338      	cbz	r0, d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d6d6c:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6d6e:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d6d70:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6d74:	dd22      	ble.n	d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6d76:	5c3b      	ldrb	r3, [r7, r0]
   d6d78:	bb03      	cbnz	r3, d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d6d7a:	3c01      	subs	r4, #1
   d6d7c:	d00e      	beq.n	d6d9c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d6d7e:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d6d82:	4621      	mov	r1, r4
   d6d84:	4640      	mov	r0, r8
   d6d86:	f003 f857 	bl	d9e38 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d6d8a:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6d8c:	2c00      	cmp	r4, #0
   d6d8e:	dd15      	ble.n	d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6d90:	f818 3000 	ldrb.w	r3, [r8, r0]
   d6d94:	b993      	cbnz	r3, d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d6d96:	2c01      	cmp	r4, #1
   d6d98:	d002      	beq.n	d6da0 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d6d9a:	e00f      	b.n	d6dbc <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d6d9c:	f8df 8044 	ldr.w	r8, [pc, #68]	; d6de4 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d6da0:	4630      	mov	r0, r6
   d6da2:	f7ff fda7 	bl	d68f4 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d6da6:	4642      	mov	r2, r8
   d6da8:	4639      	mov	r1, r7
   d6daa:	1d28      	adds	r0, r5, #4
   d6dac:	f7ff fe43 	bl	d6a36 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d6db0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6db4:	f7fe fe74 	bl	d5aa0 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6db8:	2000      	movs	r0, #0
   d6dba:	e005      	b.n	d6dc8 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d6dbc:	4808      	ldr	r0, [pc, #32]	; (d6de0 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d6dbe:	e003      	b.n	d6dc8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d6dc0:	2064      	movs	r0, #100	; 0x64
   d6dc2:	f7fe fe85 	bl	d5ad0 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6dc6:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d6dc8:	b00a      	add	sp, #40	; 0x28
   d6dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6dce:	bf00      	nop
   d6dd0:	000dbdf0 	.word	0x000dbdf0
   d6dd4:	fffffefc 	.word	0xfffffefc
   d6dd8:	000dbca0 	.word	0x000dbca0
   d6ddc:	000dbc99 	.word	0x000dbc99
   d6de0:	fffffee8 	.word	0xfffffee8
   d6de4:	000dbb84 	.word	0x000dbb84

000d6de8 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d6dec:	4620      	mov	r0, r4
   d6dee:	f7ff ff73 	bl	d6cd8 <_ZN5spark11MeshPublish4pollEv>
   d6df2:	e7fb      	b.n	d6dec <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d6df4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6df4:	b538      	push	{r3, r4, r5, lr}
   d6df6:	4c0d      	ldr	r4, [pc, #52]	; (d6e2c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6df8:	4b0d      	ldr	r3, [pc, #52]	; (d6e30 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d6dfa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6dfc:	2500      	movs	r5, #0
   d6dfe:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6e00:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6e04:	6063      	str	r3, [r4, #4]
   d6e06:	60a5      	str	r5, [r4, #8]
   d6e08:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6e0c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6e10:	f7fe fe36 	bl	d5a80 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6e14:	4b07      	ldr	r3, [pc, #28]	; (d6e34 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6e16:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d6e1a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	4a06      	ldr	r2, [pc, #24]	; (d6e38 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6e20:	4906      	ldr	r1, [pc, #24]	; (d6e3c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6e26:	f000 bf25 	b.w	d7c74 <__aeabi_atexit>
   d6e2a:	bf00      	nop
   d6e2c:	2003e3e4 	.word	0x2003e3e4
   d6e30:	000dbcb8 	.word	0x000dbcb8
   d6e34:	000dbc54 	.word	0x000dbc54
   d6e38:	2003d540 	.word	0x2003d540
   d6e3c:	000d68c1 	.word	0x000d68c1

000d6e40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6e40:	2300      	movs	r3, #0
   d6e42:	461a      	mov	r2, r3
   d6e44:	6840      	ldr	r0, [r0, #4]
   d6e46:	f7ff b839 	b.w	d5ebc <network_connect>

000d6e4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e4a:	2200      	movs	r2, #0
   d6e4c:	2102      	movs	r1, #2
   d6e4e:	6840      	ldr	r0, [r0, #4]
   d6e50:	f7ff b844 	b.w	d5edc <network_disconnect>

000d6e54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e54:	2200      	movs	r2, #0
   d6e56:	4611      	mov	r1, r2
   d6e58:	6840      	ldr	r0, [r0, #4]
   d6e5a:	f7ff b837 	b.w	d5ecc <network_connecting>

000d6e5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e5e:	2200      	movs	r2, #0
   d6e60:	4611      	mov	r1, r2
   d6e62:	6840      	ldr	r0, [r0, #4]
   d6e64:	f7ff b842 	b.w	d5eec <network_ready>

000d6e68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e68:	2300      	movs	r3, #0
   d6e6a:	461a      	mov	r2, r3
   d6e6c:	4619      	mov	r1, r3
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	f7ff b844 	b.w	d5efc <network_on>

000d6e74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e74:	2300      	movs	r3, #0
   d6e76:	461a      	mov	r2, r3
   d6e78:	4619      	mov	r1, r3
   d6e7a:	6840      	ldr	r0, [r0, #4]
   d6e7c:	f7ff b846 	b.w	d5f0c <network_off>

000d6e80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6e80:	2200      	movs	r2, #0
   d6e82:	f081 0101 	eor.w	r1, r1, #1
   d6e86:	6840      	ldr	r0, [r0, #4]
   d6e88:	f7ff b848 	b.w	d5f1c <network_listen>

000d6e8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6e8c:	2200      	movs	r2, #0
   d6e8e:	6840      	ldr	r0, [r0, #4]
   d6e90:	f7ff b854 	b.w	d5f3c <network_set_listen_timeout>

000d6e94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6e94:	2200      	movs	r2, #0
   d6e96:	4611      	mov	r1, r2
   d6e98:	6840      	ldr	r0, [r0, #4]
   d6e9a:	f7ff b857 	b.w	d5f4c <network_get_listen_timeout>

000d6e9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e9e:	2200      	movs	r2, #0
   d6ea0:	4611      	mov	r1, r2
   d6ea2:	6840      	ldr	r0, [r0, #4]
   d6ea4:	f7ff b842 	b.w	d5f2c <network_listening>

000d6ea8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ea8:	b570      	push	{r4, r5, r6, lr}
   d6eaa:	b08c      	sub	sp, #48	; 0x30
   d6eac:	4614      	mov	r4, r2
   d6eae:	4606      	mov	r6, r0
    IPAddress addr;
   d6eb0:	f7ff fc42 	bl	d6738 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6eb4:	ab0c      	add	r3, sp, #48	; 0x30
   d6eb6:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6eb8:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6eba:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	f7fe fed6 	bl	d5c70 <netdb_getaddrinfo>
    if (!r && ai) {
   d6ec4:	4601      	mov	r1, r0
   d6ec6:	bb58      	cbnz	r0, d6f20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d6ec8:	9b00      	ldr	r3, [sp, #0]
   d6eca:	b34b      	cbz	r3, d6f20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d6ecc:	685a      	ldr	r2, [r3, #4]
   d6ece:	2a02      	cmp	r2, #2
   d6ed0:	d00e      	beq.n	d6ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d6ed2:	2a0a      	cmp	r2, #10
   d6ed4:	d124      	bne.n	d6f20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d6ed6:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d6ed8:	2211      	movs	r2, #17
   d6eda:	a801      	add	r0, sp, #4
   d6edc:	f002 fef8 	bl	d9cd0 <memset>
                a.v = 6;
   d6ee0:	2306      	movs	r3, #6
   d6ee2:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ee6:	ad01      	add	r5, sp, #4
   d6ee8:	f104 0308 	add.w	r3, r4, #8
   d6eec:	3418      	adds	r4, #24
   d6eee:	e005      	b.n	d6efc <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6ef0:	6959      	ldr	r1, [r3, #20]
   d6ef2:	4630      	mov	r0, r6
   d6ef4:	3104      	adds	r1, #4
   d6ef6:	f7ff fc62 	bl	d67be <_ZN9IPAddressaSEPKh>
                break;
   d6efa:	e011      	b.n	d6f20 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6efc:	6818      	ldr	r0, [r3, #0]
   d6efe:	6859      	ldr	r1, [r3, #4]
   d6f00:	462a      	mov	r2, r5
   d6f02:	c203      	stmia	r2!, {r0, r1}
   d6f04:	3308      	adds	r3, #8
   d6f06:	42a3      	cmp	r3, r4
   d6f08:	4615      	mov	r5, r2
   d6f0a:	d1f7      	bne.n	d6efc <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d6f0c:	a901      	add	r1, sp, #4
   d6f0e:	a806      	add	r0, sp, #24
   d6f10:	ad07      	add	r5, sp, #28
   d6f12:	f7ff fc1f 	bl	d6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f18:	1d34      	adds	r4, r6, #4
   d6f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f1c:	682b      	ldr	r3, [r5, #0]
   d6f1e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d6f20:	9800      	ldr	r0, [sp, #0]
   d6f22:	f7fe fe9d 	bl	d5c60 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6f26:	4630      	mov	r0, r6
   d6f28:	b00c      	add	sp, #48	; 0x30
   d6f2a:	bd70      	pop	{r4, r5, r6, pc}

000d6f2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6f2c:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6f2e:	4a03      	ldr	r2, [pc, #12]	; (d6f3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6f30:	601a      	str	r2, [r3, #0]
   d6f32:	2200      	movs	r2, #0
   d6f34:	605a      	str	r2, [r3, #4]
   d6f36:	4770      	bx	lr
   d6f38:	2003e5b4 	.word	0x2003e5b4
   d6f3c:	000dbcb8 	.word	0x000dbcb8

000d6f40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f42:	4606      	mov	r6, r0
   d6f44:	460d      	mov	r5, r1
   d6f46:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6f48:	2400      	movs	r4, #0
  while (size--) {
   d6f4a:	42bd      	cmp	r5, r7
   d6f4c:	d00c      	beq.n	d6f68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6f4e:	6833      	ldr	r3, [r6, #0]
   d6f50:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f54:	689b      	ldr	r3, [r3, #8]
   d6f56:	4630      	mov	r0, r6
   d6f58:	4798      	blx	r3
     if (chunk>=0)
   d6f5a:	2800      	cmp	r0, #0
   d6f5c:	db01      	blt.n	d6f62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6f5e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6f60:	e7f3      	b.n	d6f4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6f62:	2c00      	cmp	r4, #0
   d6f64:	bf08      	it	eq
   d6f66:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6f68:	4620      	mov	r0, r4
   d6f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f6c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6f6c:	b570      	push	{r4, r5, r6, lr}
   d6f6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6f70:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6f72:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6f74:	b149      	cbz	r1, d6f8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6f76:	f002 ff42 	bl	d9dfe <strlen>
   d6f7a:	682b      	ldr	r3, [r5, #0]
   d6f7c:	4602      	mov	r2, r0
   d6f7e:	4621      	mov	r1, r4
   d6f80:	4628      	mov	r0, r5
   d6f82:	68db      	ldr	r3, [r3, #12]
    }
   d6f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6f88:	4718      	bx	r3
    }
   d6f8a:	bd70      	pop	{r4, r5, r6, pc}

000d6f8c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6f8c:	6803      	ldr	r3, [r0, #0]
   d6f8e:	689b      	ldr	r3, [r3, #8]
   d6f90:	4718      	bx	r3

000d6f92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6f92:	b530      	push	{r4, r5, lr}
   d6f94:	b08b      	sub	sp, #44	; 0x2c
   d6f96:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6f98:	2100      	movs	r1, #0
   d6f9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6f9e:	2a01      	cmp	r2, #1
   d6fa0:	bf98      	it	ls
   d6fa2:	220a      	movls	r2, #10
   d6fa4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6fa8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6fac:	fb05 3312 	mls	r3, r5, r2, r3
   d6fb0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fb4:	2b09      	cmp	r3, #9
   d6fb6:	bf94      	ite	ls
   d6fb8:	3330      	addls	r3, #48	; 0x30
   d6fba:	3337      	addhi	r3, #55	; 0x37
   d6fbc:	b2db      	uxtb	r3, r3
   d6fbe:	4621      	mov	r1, r4
   d6fc0:	f804 3901 	strb.w	r3, [r4], #-1
   d6fc4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6fc6:	2d00      	cmp	r5, #0
   d6fc8:	d1ee      	bne.n	d6fa8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6fca:	f7ff ffcf 	bl	d6f6c <_ZN5Print5writeEPKc>
}
   d6fce:	b00b      	add	sp, #44	; 0x2c
   d6fd0:	bd30      	pop	{r4, r5, pc}

000d6fd2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6fd2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6fd4:	b92a      	cbnz	r2, d6fe2 <_ZN5Print5printEmi+0x10>
   d6fd6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6fdc:	689b      	ldr	r3, [r3, #8]
   d6fde:	b2c9      	uxtb	r1, r1
   d6fe0:	4718      	bx	r3
  else return printNumber(n, base);
   d6fe2:	b2d2      	uxtb	r2, r2
}
   d6fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6fe8:	f7ff bfd3 	b.w	d6f92 <_ZN5Print11printNumberEmh>

000d6fec <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6fec:	f7ff bff1 	b.w	d6fd2 <_ZN5Print5printEmi>

000d6ff0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6ff0:	b510      	push	{r4, lr}
  if (0 == max) {
   d6ff2:	4604      	mov	r4, r0
   d6ff4:	b130      	cbz	r0, d7004 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6ff6:	f002 fe9b 	bl	d9d30 <rand>
   d6ffa:	fb90 f3f4 	sdiv	r3, r0, r4
   d6ffe:	fb03 0014 	mls	r0, r3, r4, r0
   d7002:	bd10      	pop	{r4, pc}
}
   d7004:	bd10      	pop	{r4, pc}

000d7006 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d7006:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d7008:	b510      	push	{r4, lr}
   d700a:	4604      	mov	r4, r0
  if (min >= max) {
   d700c:	da04      	bge.n	d7018 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d700e:	1a08      	subs	r0, r1, r0
   d7010:	f7ff ffee 	bl	d6ff0 <_Z6randomi>
   d7014:	4420      	add	r0, r4
   d7016:	bd10      	pop	{r4, pc}
}
   d7018:	bd10      	pop	{r4, pc}

000d701a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d701a:	b510      	push	{r4, lr}
   d701c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d701e:	f7fe fff9 	bl	d6014 <_ZNSt14_Function_baseD1Ev>
   d7022:	4620      	mov	r0, r4
   d7024:	bd10      	pop	{r4, pc}
	...

000d7028 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7028:	4803      	ldr	r0, [pc, #12]	; (d7038 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d702a:	4a04      	ldr	r2, [pc, #16]	; (d703c <_GLOBAL__sub_I_RGB+0x14>)
   d702c:	4904      	ldr	r1, [pc, #16]	; (d7040 <_GLOBAL__sub_I_RGB+0x18>)
   d702e:	2300      	movs	r3, #0
   d7030:	6083      	str	r3, [r0, #8]
   d7032:	f000 be1f 	b.w	d7c74 <__aeabi_atexit>
   d7036:	bf00      	nop
   d7038:	2003e5bc 	.word	0x2003e5bc
   d703c:	2003d540 	.word	0x2003d540
   d7040:	000d701b 	.word	0x000d701b

000d7044 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7044:	4770      	bx	lr

000d7046 <_ZN8SPIClassD0Ev>:
   d7046:	b510      	push	{r4, lr}
   d7048:	4604      	mov	r4, r0
   d704a:	f7fd f828 	bl	d409e <_ZdlPv>
   d704e:	4620      	mov	r0, r4
   d7050:	bd10      	pop	{r4, pc}
	...

000d7054 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7054:	b570      	push	{r4, r5, r6, lr}
   d7056:	4b08      	ldr	r3, [pc, #32]	; (d7078 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7058:	6003      	str	r3, [r0, #0]
   d705a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d705c:	2500      	movs	r5, #0
   d705e:	460e      	mov	r6, r1
   d7060:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d7064:	f7fe fd04 	bl	d5a70 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7068:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d706a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d706c:	f7fe fe38 	bl	d5ce0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7070:	60a5      	str	r5, [r4, #8]
}
   d7072:	4620      	mov	r0, r4
   d7074:	bd70      	pop	{r4, r5, r6, pc}
   d7076:	bf00      	nop
   d7078:	000dbcec 	.word	0x000dbcec

000d707c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d707c:	7900      	ldrb	r0, [r0, #4]
   d707e:	f7fe be37 	b.w	d5cf0 <HAL_SPI_Is_Enabled>

000d7082 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7082:	b510      	push	{r4, lr}
   d7084:	4604      	mov	r4, r0
{
	free(buffer);
   d7086:	6800      	ldr	r0, [r0, #0]
   d7088:	f7fe ff70 	bl	d5f6c <free>
}
   d708c:	4620      	mov	r0, r4
   d708e:	bd10      	pop	{r4, pc}

000d7090 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7090:	b510      	push	{r4, lr}
   d7092:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7094:	6800      	ldr	r0, [r0, #0]
   d7096:	b108      	cbz	r0, d709c <_ZN6String10invalidateEv+0xc>
   d7098:	f7fe ff68 	bl	d5f6c <free>
	buffer = NULL;
   d709c:	2300      	movs	r3, #0
   d709e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d70a0:	60a3      	str	r3, [r4, #8]
   d70a2:	6063      	str	r3, [r4, #4]
   d70a4:	bd10      	pop	{r4, pc}

000d70a6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d70a6:	b538      	push	{r3, r4, r5, lr}
   d70a8:	4604      	mov	r4, r0
   d70aa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d70ac:	6800      	ldr	r0, [r0, #0]
   d70ae:	3101      	adds	r1, #1
   d70b0:	f7fe ff64 	bl	d5f7c <realloc>
	if (newbuffer) {
   d70b4:	b110      	cbz	r0, d70bc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d70b6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d70ba:	2001      	movs	r0, #1
	}
	return 0;
}
   d70bc:	bd38      	pop	{r3, r4, r5, pc}

000d70be <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d70be:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d70c0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d70c2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d70c4:	b113      	cbz	r3, d70cc <_ZN6String7reserveEj+0xe>
   d70c6:	6843      	ldr	r3, [r0, #4]
   d70c8:	428b      	cmp	r3, r1
   d70ca:	d207      	bcs.n	d70dc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d70cc:	4620      	mov	r0, r4
   d70ce:	f7ff ffea 	bl	d70a6 <_ZN6String12changeBufferEj>
   d70d2:	b120      	cbz	r0, d70de <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d70d4:	68a3      	ldr	r3, [r4, #8]
   d70d6:	b90b      	cbnz	r3, d70dc <_ZN6String7reserveEj+0x1e>
   d70d8:	6822      	ldr	r2, [r4, #0]
   d70da:	7013      	strb	r3, [r2, #0]
   d70dc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d70de:	bd10      	pop	{r4, pc}

000d70e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d70e0:	b570      	push	{r4, r5, r6, lr}
   d70e2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d70e4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d70e6:	4604      	mov	r4, r0
   d70e8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d70ea:	f7ff ffe8 	bl	d70be <_ZN6String7reserveEj>
   d70ee:	b918      	cbnz	r0, d70f8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d70f0:	4620      	mov	r0, r4
   d70f2:	f7ff ffcd 	bl	d7090 <_ZN6String10invalidateEv>
		return *this;
   d70f6:	e009      	b.n	d710c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d70f8:	462a      	mov	r2, r5
   d70fa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d70fc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d70fe:	6820      	ldr	r0, [r4, #0]
   d7100:	f002 fddb 	bl	d9cba <memcpy>
	buffer[len] = 0;
   d7104:	6822      	ldr	r2, [r4, #0]
   d7106:	68a3      	ldr	r3, [r4, #8]
   d7108:	2100      	movs	r1, #0
   d710a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d710c:	4620      	mov	r0, r4
   d710e:	bd70      	pop	{r4, r5, r6, pc}

000d7110 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7110:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7112:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7114:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7116:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7118:	6043      	str	r3, [r0, #4]
	len = 0;
   d711a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d711c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d711e:	460d      	mov	r5, r1
   d7120:	b139      	cbz	r1, d7132 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7122:	4608      	mov	r0, r1
   d7124:	f002 fe6b 	bl	d9dfe <strlen>
   d7128:	4629      	mov	r1, r5
   d712a:	4602      	mov	r2, r0
   d712c:	4620      	mov	r0, r4
   d712e:	f7ff ffd7 	bl	d70e0 <_ZN6String4copyEPKcj>
}
   d7132:	4620      	mov	r0, r4
   d7134:	bd38      	pop	{r3, r4, r5, pc}

000d7136 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7136:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7138:	b510      	push	{r4, lr}
   d713a:	460b      	mov	r3, r1
   d713c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d713e:	d007      	beq.n	d7150 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7140:	6809      	ldr	r1, [r1, #0]
   d7142:	b119      	cbz	r1, d714c <_ZN6StringaSERKS_+0x16>
   d7144:	689a      	ldr	r2, [r3, #8]
   d7146:	f7ff ffcb 	bl	d70e0 <_ZN6String4copyEPKcj>
   d714a:	e001      	b.n	d7150 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d714c:	f7ff ffa0 	bl	d7090 <_ZN6String10invalidateEv>

	return *this;
}
   d7150:	4620      	mov	r0, r4
   d7152:	bd10      	pop	{r4, pc}

000d7154 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7154:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7156:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7158:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d715a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d715c:	6043      	str	r3, [r0, #4]
	len = 0;
   d715e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7160:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7162:	f7ff ffe8 	bl	d7136 <_ZN6StringaSERKS_>
}
   d7166:	4620      	mov	r0, r4
   d7168:	bd10      	pop	{r4, pc}

000d716a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d716a:	b538      	push	{r3, r4, r5, lr}
   d716c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d716e:	460c      	mov	r4, r1
   d7170:	b141      	cbz	r1, d7184 <_ZN6StringaSEPKc+0x1a>
   d7172:	4608      	mov	r0, r1
   d7174:	f002 fe43 	bl	d9dfe <strlen>
   d7178:	4621      	mov	r1, r4
   d717a:	4602      	mov	r2, r0
   d717c:	4628      	mov	r0, r5
   d717e:	f7ff ffaf 	bl	d70e0 <_ZN6String4copyEPKcj>
   d7182:	e001      	b.n	d7188 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7184:	f7ff ff84 	bl	d7090 <_ZN6String10invalidateEv>

	return *this;
}
   d7188:	4628      	mov	r0, r5
   d718a:	bd38      	pop	{r3, r4, r5, pc}

000d718c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d718c:	b570      	push	{r4, r5, r6, lr}
   d718e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7190:	460e      	mov	r6, r1
   d7192:	b909      	cbnz	r1, d7198 <_ZN6String6concatEPKcj+0xc>
   d7194:	2000      	movs	r0, #0
   d7196:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7198:	b16a      	cbz	r2, d71b6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d719a:	6883      	ldr	r3, [r0, #8]
   d719c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d719e:	4629      	mov	r1, r5
   d71a0:	f7ff ff8d 	bl	d70be <_ZN6String7reserveEj>
   d71a4:	2800      	cmp	r0, #0
   d71a6:	d0f5      	beq.n	d7194 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d71a8:	6820      	ldr	r0, [r4, #0]
   d71aa:	68a3      	ldr	r3, [r4, #8]
   d71ac:	4631      	mov	r1, r6
   d71ae:	4418      	add	r0, r3
   d71b0:	f002 fe02 	bl	d9db8 <strcpy>
	len = newlen;
   d71b4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d71b6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d71b8:	bd70      	pop	{r4, r5, r6, pc}

000d71ba <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d71ba:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d71bc:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d71be:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d71c2:	2201      	movs	r2, #1
   d71c4:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d71c6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d71ca:	f7ff ffdf 	bl	d718c <_ZN6String6concatEPKcj>
}
   d71ce:	b003      	add	sp, #12
   d71d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d71d4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d71d4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d71d6:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d71d8:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d71da:	b912      	cbnz	r2, d71e2 <_ZNK6String6equalsEPKc+0xe>
   d71dc:	b919      	cbnz	r1, d71e6 <_ZNK6String6equalsEPKc+0x12>
   d71de:	2001      	movs	r0, #1
   d71e0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d71e2:	b911      	cbnz	r1, d71ea <_ZNK6String6equalsEPKc+0x16>
   d71e4:	6803      	ldr	r3, [r0, #0]
   d71e6:	7818      	ldrb	r0, [r3, #0]
   d71e8:	e002      	b.n	d71f0 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d71ea:	6800      	ldr	r0, [r0, #0]
   d71ec:	f002 fdda 	bl	d9da4 <strcmp>
   d71f0:	fab0 f080 	clz	r0, r0
   d71f4:	0940      	lsrs	r0, r0, #5
}
   d71f6:	bd08      	pop	{r3, pc}

000d71f8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d71f8:	6800      	ldr	r0, [r0, #0]
   d71fa:	b108      	cbz	r0, d7200 <_ZNK6String5toIntEv+0x8>
   d71fc:	f002 bd38 	b.w	d9c70 <atol>
	return 0;
}
   d7200:	4770      	bx	lr
	...

000d7204 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7204:	4b04      	ldr	r3, [pc, #16]	; (d7218 <_GLOBAL__sub_I_System+0x14>)
   d7206:	2000      	movs	r0, #0
   d7208:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d720c:	7018      	strb	r0, [r3, #0]
   d720e:	8058      	strh	r0, [r3, #2]
   d7210:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7212:	f7fe bdf5 	b.w	d5e00 <set_system_mode>
   d7216:	bf00      	nop
   d7218:	2003e5cc 	.word	0x2003e5cc

000d721c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d721c:	4b02      	ldr	r3, [pc, #8]	; (d7228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d721e:	681a      	ldr	r2, [r3, #0]
   d7220:	4b02      	ldr	r3, [pc, #8]	; (d722c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7222:	601a      	str	r2, [r3, #0]
   d7224:	4770      	bx	lr
   d7226:	bf00      	nop
   d7228:	2003d498 	.word	0x2003d498
   d722c:	2003e5d4 	.word	0x2003e5d4

000d7230 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7230:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7232:	6804      	ldr	r4, [r0, #0]
   d7234:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7236:	46a4      	mov	ip, r4
    }
   d7238:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d723c:	4760      	bx	ip

000d723e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d723e:	6803      	ldr	r3, [r0, #0]
   d7240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7242:	4718      	bx	r3

000d7244 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7244:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7246:	4770      	bx	lr

000d7248 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7248:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d724a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d724c:	1a10      	subs	r0, r2, r0
   d724e:	4770      	bx	lr

000d7250 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7250:	b513      	push	{r0, r1, r4, lr}
   d7252:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d7254:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7256:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d725a:	68d4      	ldr	r4, [r2, #12]
   d725c:	4619      	mov	r1, r3
   d725e:	2201      	movs	r2, #1
   d7260:	47a0      	blx	r4
}
   d7262:	b002      	add	sp, #8
   d7264:	bd10      	pop	{r4, pc}

000d7266 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d7266:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d7268:	6803      	ldr	r3, [r0, #0]
   d726a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d726c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d726e:	4798      	blx	r3
   d7270:	b128      	cbz	r0, d727e <_ZN3UDP4readEv+0x18>
   d7272:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7274:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7276:	1c59      	adds	r1, r3, #1
   d7278:	86e1      	strh	r1, [r4, #54]	; 0x36
   d727a:	5cd0      	ldrb	r0, [r2, r3]
   d727c:	bd10      	pop	{r4, pc}
   d727e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7282:	bd10      	pop	{r4, pc}

000d7284 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7284:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d7286:	6803      	ldr	r3, [r0, #0]
   d7288:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d728a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d728c:	4798      	blx	r3
   d728e:	b118      	cbz	r0, d7298 <_ZN3UDP4peekEv+0x14>
   d7290:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7292:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7294:	5cd0      	ldrb	r0, [r2, r3]
   d7296:	bd10      	pop	{r4, pc}
   d7298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d729c:	bd10      	pop	{r4, pc}

000d729e <_ZN3UDP5flushEv>:

void UDP::flush() {
   d729e:	4770      	bx	lr

000d72a0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d72a0:	b410      	push	{r4}
   d72a2:	4603      	mov	r3, r0
   d72a4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d72a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d72a8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d72aa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d72ac:	6803      	ldr	r3, [r0, #0]
   d72ae:	1a52      	subs	r2, r2, r1
   d72b0:	68db      	ldr	r3, [r3, #12]
   d72b2:	4421      	add	r1, r4
}
   d72b4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d72b8:	4718      	bx	r3

000d72ba <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d72ba:	f1a0 0010 	sub.w	r0, r0, #16
   d72be:	f7ff bfef 	b.w	d72a0 <_ZNK3UDP7printToER5Print>

000d72c2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d72c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d72c4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d72c6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d72c8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d72ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d72cc:	4604      	mov	r4, r0
   d72ce:	460f      	mov	r7, r1
   d72d0:	4615      	mov	r5, r2
    stop();
   d72d2:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d72d4:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d72d6:	4632      	mov	r2, r6
   d72d8:	2100      	movs	r1, #0
   d72da:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d72dc:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d72de:	f002 fcf7 	bl	d9cd0 <memset>
    saddr.sin6_len = sizeof(saddr);
   d72e2:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d72e6:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d72e8:	260a      	movs	r6, #10
   d72ea:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d72ee:	f7fe fcaf 	bl	d5c50 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d72f2:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d72f4:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d72f8:	2102      	movs	r1, #2
   d72fa:	4630      	mov	r0, r6
   d72fc:	f7fe fce8 	bl	d5cd0 <sock_socket>

    if (_sock < 0) {
   d7300:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7302:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7304:	db24      	blt.n	d7350 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7306:	2204      	movs	r2, #4
   d7308:	9200      	str	r2, [sp, #0]
   d730a:	ab02      	add	r3, sp, #8
   d730c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7310:	f7fe fcbe 	bl	d5c90 <sock_setsockopt>
   d7314:	b9e0      	cbnz	r0, d7350 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7316:	b195      	cbz	r5, d733e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7318:	9003      	str	r0, [sp, #12]
   d731a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d731e:	a903      	add	r1, sp, #12
   d7320:	b2e8      	uxtb	r0, r5
   d7322:	f7fe fc55 	bl	d5bd0 <if_index_to_name>
   d7326:	b998      	cbnz	r0, d7350 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7328:	2306      	movs	r3, #6
   d732a:	9300      	str	r3, [sp, #0]
   d732c:	f241 020b 	movw	r2, #4107	; 0x100b
   d7330:	ab03      	add	r3, sp, #12
   d7332:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7336:	6960      	ldr	r0, [r4, #20]
   d7338:	f7fe fcaa 	bl	d5c90 <sock_setsockopt>
   d733c:	b940      	cbnz	r0, d7350 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d733e:	221c      	movs	r2, #28
   d7340:	a905      	add	r1, sp, #20
   d7342:	6960      	ldr	r0, [r4, #20]
   d7344:	f7fe fc9c 	bl	d5c80 <sock_bind>
   d7348:	b910      	cbnz	r0, d7350 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d734a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d734c:	2001      	movs	r0, #1
   d734e:	e004      	b.n	d735a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d7350:	6823      	ldr	r3, [r4, #0]
   d7352:	4620      	mov	r0, r4
   d7354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7356:	4798      	blx	r3
   d7358:	2000      	movs	r0, #0
    }
    return bound;
}
   d735a:	b00d      	add	sp, #52	; 0x34
   d735c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d735e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d735e:	b510      	push	{r4, lr}
   d7360:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d7362:	6940      	ldr	r0, [r0, #20]
   d7364:	2800      	cmp	r0, #0
   d7366:	db01      	blt.n	d736c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d7368:	f7fe fc9a 	bl	d5ca0 <sock_close>
    }

    _sock = -1;
   d736c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7370:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7372:	2300      	movs	r3, #0
   d7374:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7376:	8723      	strh	r3, [r4, #56]	; 0x38
   d7378:	bd10      	pop	{r4, pc}

000d737a <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d737a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d737c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d737e:	4605      	mov	r5, r0
   d7380:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7382:	b113      	cbz	r3, d738a <_ZN3UDP5writeEPKhj+0x10>
   d7384:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d7386:	1a24      	subs	r4, r4, r0
   d7388:	e000      	b.n	d738c <_ZN3UDP5writeEPKhj+0x12>
   d738a:	461c      	mov	r4, r3
   d738c:	4294      	cmp	r4, r2
   d738e:	bf28      	it	cs
   d7390:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d7392:	4622      	mov	r2, r4
   d7394:	4418      	add	r0, r3
   d7396:	f002 fc90 	bl	d9cba <memcpy>
    _offset += size;
   d739a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d739c:	4423      	add	r3, r4
   d739e:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d73a0:	4620      	mov	r0, r4
   d73a2:	bd38      	pop	{r3, r4, r5, pc}

000d73a4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d73a4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d73a6:	6803      	ldr	r3, [r0, #0]
   d73a8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d73aa:	4604      	mov	r4, r0
   d73ac:	460e      	mov	r6, r1
   d73ae:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d73b0:	4798      	blx	r3
   d73b2:	b188      	cbz	r0, d73d8 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d73b4:	6823      	ldr	r3, [r4, #0]
   d73b6:	4620      	mov	r0, r4
   d73b8:	691b      	ldr	r3, [r3, #16]
   d73ba:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d73bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d73be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d73c0:	4285      	cmp	r5, r0
   d73c2:	bfa8      	it	ge
   d73c4:	4605      	movge	r5, r0
   d73c6:	4419      	add	r1, r3
   d73c8:	462a      	mov	r2, r5
   d73ca:	4630      	mov	r0, r6
   d73cc:	f002 fc75 	bl	d9cba <memcpy>
        _offset += read;
   d73d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d73d2:	442b      	add	r3, r5
   d73d4:	86e3      	strh	r3, [r4, #54]	; 0x36
   d73d6:	e001      	b.n	d73dc <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d73d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d73dc:	4628      	mov	r0, r5
   d73de:	bd70      	pop	{r4, r5, r6, pc}

000d73e0 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d73e0:	b570      	push	{r4, r5, r6, lr}
   d73e2:	4604      	mov	r4, r0
   d73e4:	4b05      	ldr	r3, [pc, #20]	; (d73fc <_ZN3UDP8remoteIPEv+0x1c>)
   d73e6:	f844 3b04 	str.w	r3, [r4], #4
   d73ea:	f101 0520 	add.w	r5, r1, #32
   d73ee:	4606      	mov	r6, r0
   d73f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73f4:	682b      	ldr	r3, [r5, #0]
   d73f6:	7023      	strb	r3, [r4, #0]
   d73f8:	4630      	mov	r0, r6
   d73fa:	bd70      	pop	{r4, r5, r6, pc}
   d73fc:	000dbb64 	.word	0x000dbb64

000d7400 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7400:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7402:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7404:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7406:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7408:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d740a:	4a0a      	ldr	r2, [pc, #40]	; (d7434 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d740c:	9202      	str	r2, [sp, #8]
   d740e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7410:	468e      	mov	lr, r1
   d7412:	4606      	mov	r6, r0
   d7414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7416:	ac03      	add	r4, sp, #12
   d7418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d741a:	682b      	ldr	r3, [r5, #0]
   d741c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d741e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d7422:	9300      	str	r3, [sp, #0]
   d7424:	4662      	mov	r2, ip
   d7426:	ab02      	add	r3, sp, #8
   d7428:	4671      	mov	r1, lr
   d742a:	4630      	mov	r0, r6
   d742c:	47b8      	blx	r7
    }
   d742e:	b009      	add	sp, #36	; 0x24
   d7430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7432:	bf00      	nop
   d7434:	000dbb64 	.word	0x000dbb64

000d7438 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7438:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d743a:	6803      	ldr	r3, [r0, #0]
   d743c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d7440:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7442:	4b0d      	ldr	r3, [pc, #52]	; (d7478 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7444:	b089      	sub	sp, #36	; 0x24
   d7446:	f100 0620 	add.w	r6, r0, #32
   d744a:	4604      	mov	r4, r0
   d744c:	9302      	str	r3, [sp, #8]
   d744e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7450:	ad03      	add	r5, sp, #12
   d7452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7454:	6833      	ldr	r3, [r6, #0]
   d7456:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7458:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d745a:	9300      	str	r3, [sp, #0]
   d745c:	4672      	mov	r2, lr
   d745e:	ab02      	add	r3, sp, #8
   d7460:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7462:	4620      	mov	r0, r4
   d7464:	47b8      	blx	r7
    flush(); // wait for send to complete
   d7466:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7468:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d746a:	69db      	ldr	r3, [r3, #28]
   d746c:	4620      	mov	r0, r4
   d746e:	4798      	blx	r3
    return result;
}
   d7470:	4628      	mov	r0, r5
   d7472:	b009      	add	sp, #36	; 0x24
   d7474:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7476:	bf00      	nop
   d7478:	000dbb64 	.word	0x000dbb64

000d747c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d747c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d747e:	7843      	ldrb	r3, [r0, #1]
   d7480:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d7482:	b08d      	sub	sp, #52	; 0x34
   d7484:	4605      	mov	r5, r0
   d7486:	460c      	mov	r4, r1
   d7488:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d748a:	d101      	bne.n	d7490 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d748c:	1d01      	adds	r1, r0, #4
   d748e:	e033      	b.n	d74f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7490:	2b0a      	cmp	r3, #10
   d7492:	d135      	bne.n	d7500 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7494:	2211      	movs	r2, #17
   d7496:	2100      	movs	r1, #0
   d7498:	a801      	add	r0, sp, #4
   d749a:	f002 fc19 	bl	d9cd0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d749e:	68ab      	ldr	r3, [r5, #8]
   d74a0:	b943      	cbnz	r3, d74b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d74a2:	68eb      	ldr	r3, [r5, #12]
   d74a4:	b933      	cbnz	r3, d74b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d74a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d74aa:	692e      	ldr	r6, [r5, #16]
   d74ac:	f7fe fbc0 	bl	d5c30 <inet_htonl>
   d74b0:	4286      	cmp	r6, r0
   d74b2:	d01f      	beq.n	d74f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d74b4:	f105 0308 	add.w	r3, r5, #8
   d74b8:	ae01      	add	r6, sp, #4
   d74ba:	f105 0e18 	add.w	lr, r5, #24
   d74be:	6818      	ldr	r0, [r3, #0]
   d74c0:	6859      	ldr	r1, [r3, #4]
   d74c2:	4632      	mov	r2, r6
   d74c4:	c203      	stmia	r2!, {r0, r1}
   d74c6:	3308      	adds	r3, #8
   d74c8:	4573      	cmp	r3, lr
   d74ca:	4616      	mov	r6, r2
   d74cc:	d1f7      	bne.n	d74be <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d74ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d74d0:	a901      	add	r1, sp, #4
   d74d2:	a806      	add	r0, sp, #24
   d74d4:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d74d6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d74da:	f7ff f93b 	bl	d6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d74de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d74e0:	3404      	adds	r4, #4
   d74e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74e4:	6833      	ldr	r3, [r6, #0]
   d74e6:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d74e8:	b157      	cbz	r7, d7500 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d74ea:	8868      	ldrh	r0, [r5, #2]
   d74ec:	f7fe fba8 	bl	d5c40 <inet_ntohs>
   d74f0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d74f2:	e005      	b.n	d7500 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d74f4:	f105 0114 	add.w	r1, r5, #20
   d74f8:	4620      	mov	r0, r4
   d74fa:	f7ff f960 	bl	d67be <_ZN9IPAddressaSEPKh>
   d74fe:	e7f3      	b.n	d74e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d7500:	b00d      	add	sp, #52	; 0x34
   d7502:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7504 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d7504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7508:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d750a:	ab0e      	add	r3, sp, #56	; 0x38
   d750c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d750e:	4606      	mov	r6, r0
   d7510:	4617      	mov	r7, r2
   d7512:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d7514:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7518:	462a      	mov	r2, r5
   d751a:	4629      	mov	r1, r5
   d751c:	f7fe fba8 	bl	d5c70 <netdb_getaddrinfo>
   d7520:	2800      	cmp	r0, #0
   d7522:	db1f      	blt.n	d7564 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7524:	9b01      	ldr	r3, [sp, #4]
   d7526:	b1fb      	cbz	r3, d7568 <_ZN3UDP11beginPacketEPKct+0x64>
   d7528:	695b      	ldr	r3, [r3, #20]
   d752a:	b1eb      	cbz	r3, d7568 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d752c:	a802      	add	r0, sp, #8
   d752e:	f7ff f903 	bl	d6738 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7532:	9b01      	ldr	r3, [sp, #4]
   d7534:	462a      	mov	r2, r5
   d7536:	6958      	ldr	r0, [r3, #20]
   d7538:	a902      	add	r1, sp, #8
   d753a:	f7ff ff9f 	bl	d747c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d753e:	a802      	add	r0, sp, #8
   d7540:	f7ff f91a 	bl	d6778 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7544:	b180      	cbz	r0, d7568 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d7546:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7548:	ad03      	add	r5, sp, #12
   d754a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d754e:	4b0b      	ldr	r3, [pc, #44]	; (d757c <_ZN3UDP11beginPacketEPKct+0x78>)
   d7550:	9308      	str	r3, [sp, #32]
   d7552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7554:	ac09      	add	r4, sp, #36	; 0x24
   d7556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7558:	682b      	ldr	r3, [r5, #0]
   d755a:	7023      	strb	r3, [r4, #0]
   d755c:	463a      	mov	r2, r7
   d755e:	a908      	add	r1, sp, #32
   d7560:	4630      	mov	r0, r6
   d7562:	47c0      	blx	r8
   d7564:	4604      	mov	r4, r0
   d7566:	e001      	b.n	d756c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d7568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d756c:	9801      	ldr	r0, [sp, #4]
   d756e:	f7fe fb77 	bl	d5c60 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d7572:	4620      	mov	r0, r4
   d7574:	b00e      	add	sp, #56	; 0x38
   d7576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d757a:	bf00      	nop
   d757c:	000dbb64 	.word	0x000dbb64

000d7580 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d7580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d7584:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d7588:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d758c:	b08c      	sub	sp, #48	; 0x30
   d758e:	4605      	mov	r5, r0
   d7590:	460c      	mov	r4, r1
   d7592:	4617      	mov	r7, r2
   d7594:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d7596:	db00      	blt.n	d759a <_ZN3UDP13receivePacketEPhjm+0x1a>
   d7598:	b911      	cbnz	r1, d75a0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d759a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d759e:	e035      	b.n	d760c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d75a0:	f04f 0a1c 	mov.w	sl, #28
   d75a4:	ae05      	add	r6, sp, #20
   d75a6:	4652      	mov	r2, sl
   d75a8:	2100      	movs	r1, #0
   d75aa:	4630      	mov	r0, r6
   d75ac:	f002 fb90 	bl	d9cd0 <memset>
        socklen_t slen = sizeof(saddr);
   d75b0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d75b4:	f1b9 0f00 	cmp.w	r9, #0
   d75b8:	d014      	beq.n	d75e4 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d75ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d75be:	fbb9 f1f2 	udiv	r1, r9, r2
   d75c2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d75c4:	fb02 9111 	mls	r1, r2, r1, r9
   d75c8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d75ca:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d75cc:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d75ce:	9300      	str	r3, [sp, #0]
   d75d0:	f241 0206 	movw	r2, #4102	; 0x1006
   d75d4:	ab03      	add	r3, sp, #12
   d75d6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d75da:	4640      	mov	r0, r8
   d75dc:	f7fe fb58 	bl	d5c90 <sock_setsockopt>
            if (ret) {
   d75e0:	b108      	cbz	r0, d75e6 <_ZN3UDP13receivePacketEPhjm+0x66>
   d75e2:	e013      	b.n	d760c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d75e4:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d75e6:	ab02      	add	r3, sp, #8
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	4621      	mov	r1, r4
   d75ec:	4603      	mov	r3, r0
   d75ee:	9600      	str	r6, [sp, #0]
   d75f0:	463a      	mov	r2, r7
   d75f2:	6968      	ldr	r0, [r5, #20]
   d75f4:	f7fe fb5c 	bl	d5cb0 <sock_recvfrom>
        if (ret >= 0) {
   d75f8:	1e04      	subs	r4, r0, #0
   d75fa:	db06      	blt.n	d760a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d75fc:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d7600:	f105 011c 	add.w	r1, r5, #28
   d7604:	4630      	mov	r0, r6
   d7606:	f7ff ff39 	bl	d747c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d760a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d760c:	b00c      	add	sp, #48	; 0x30
   d760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7612 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d7612:	b538      	push	{r3, r4, r5, lr}
   d7614:	4605      	mov	r5, r0
   d7616:	4614      	mov	r4, r2
   d7618:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d761a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d761c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d761e:	d111      	bne.n	d7644 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d7620:	231c      	movs	r3, #28
   d7622:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d7624:	230a      	movs	r3, #10
   d7626:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d7628:	f7fe fb12 	bl	d5c50 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d762c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d762e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d7632:	1d2b      	adds	r3, r5, #4
   d7634:	3514      	adds	r5, #20
   d7636:	f853 2b04 	ldr.w	r2, [r3], #4
   d763a:	f844 2b04 	str.w	r2, [r4], #4
   d763e:	42ab      	cmp	r3, r5
   d7640:	d1f9      	bne.n	d7636 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d7642:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d7644:	2b04      	cmp	r3, #4
   d7646:	d10a      	bne.n	d765e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d7648:	2310      	movs	r3, #16
   d764a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d764c:	2302      	movs	r3, #2
   d764e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d7650:	f7fe fafe 	bl	d5c50 <inet_htons>
   d7654:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d7656:	6868      	ldr	r0, [r5, #4]
   d7658:	f7fe faea 	bl	d5c30 <inet_htonl>
   d765c:	6060      	str	r0, [r4, #4]
   d765e:	bd38      	pop	{r3, r4, r5, pc}

000d7660 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d7660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7664:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d7666:	ac03      	add	r4, sp, #12
   d7668:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d766a:	4699      	mov	r9, r3
   d766c:	4606      	mov	r6, r0
   d766e:	460f      	mov	r7, r1
   d7670:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d7672:	2100      	movs	r1, #0
   d7674:	462a      	mov	r2, r5
   d7676:	4620      	mov	r0, r4
   d7678:	f002 fb2a 	bl	d9cd0 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d767c:	4622      	mov	r2, r4
   d767e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d7682:	4648      	mov	r0, r9
   d7684:	f7ff ffc5 	bl	d7612 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d7688:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d768c:	b143      	cbz	r3, d76a0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d768e:	e88d 0030 	stmia.w	sp, {r4, r5}
   d7692:	2300      	movs	r3, #0
   d7694:	4642      	mov	r2, r8
   d7696:	4639      	mov	r1, r7
   d7698:	6970      	ldr	r0, [r6, #20]
   d769a:	f7fe fb11 	bl	d5cc0 <sock_sendto>
   d769e:	e001      	b.n	d76a4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d76a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d76a4:	b00b      	add	sp, #44	; 0x2c
   d76a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d76aa <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d76aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   d76ac:	b091      	sub	sp, #68	; 0x44
   d76ae:	460c      	mov	r4, r1
   d76b0:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d76b2:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d76b4:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d76b6:	a809      	add	r0, sp, #36	; 0x24
   d76b8:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d76ba:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d76bc:	f002 fb08 	bl	d9cd0 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d76c0:	aa09      	add	r2, sp, #36	; 0x24
   d76c2:	2100      	movs	r1, #0
   d76c4:	4620      	mov	r0, r4
   d76c6:	f7ff ffa4 	bl	d7612 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d76ca:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d76ce:	2b02      	cmp	r3, #2
   d76d0:	d12e      	bne.n	d7730 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d76d2:	2300      	movs	r3, #0
   d76d4:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d76d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d76d8:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d76da:	b1dd      	cbz	r5, d7714 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d76dc:	a902      	add	r1, sp, #8
   d76de:	4628      	mov	r0, r5
   d76e0:	f7fe fa7e 	bl	d5be0 <if_get_by_index>
   d76e4:	b9b0      	cbnz	r0, d7714 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d76e6:	a910      	add	r1, sp, #64	; 0x40
   d76e8:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d76ec:	9802      	ldr	r0, [sp, #8]
   d76ee:	f7fe fa7f 	bl	d5bf0 <if_get_addrs>
   d76f2:	b960      	cbnz	r0, d770e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d76f4:	9b03      	ldr	r3, [sp, #12]
   d76f6:	b153      	cbz	r3, d770e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d76f8:	68da      	ldr	r2, [r3, #12]
   d76fa:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d76fc:	7851      	ldrb	r1, [r2, #1]
   d76fe:	2902      	cmp	r1, #2
   d7700:	d103      	bne.n	d770a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d7702:	6852      	ldr	r2, [r2, #4]
   d7704:	b10a      	cbz	r2, d770a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d7706:	9205      	str	r2, [sp, #20]
   d7708:	e001      	b.n	d770e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d770a:	681b      	ldr	r3, [r3, #0]
   d770c:	e7f3      	b.n	d76f6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d770e:	9803      	ldr	r0, [sp, #12]
   d7710:	f7fe fa76 	bl	d5c00 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d7714:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d7716:	f04f 0308 	mov.w	r3, #8
   d771a:	9300      	str	r3, [sp, #0]
   d771c:	bf18      	it	ne
   d771e:	2203      	movne	r2, #3
   d7720:	ab04      	add	r3, sp, #16
   d7722:	bf08      	it	eq
   d7724:	2204      	moveq	r2, #4
   d7726:	2100      	movs	r1, #0
   d7728:	4630      	mov	r0, r6
   d772a:	f7fe fab1 	bl	d5c90 <sock_setsockopt>
   d772e:	e01e      	b.n	d776e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d7730:	2b0a      	cmp	r3, #10
   d7732:	d11a      	bne.n	d776a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d7734:	ac04      	add	r4, sp, #16
   d7736:	2214      	movs	r2, #20
   d7738:	2100      	movs	r1, #0
   d773a:	4620      	mov	r0, r4
   d773c:	f002 fac8 	bl	d9cd0 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d7740:	ab0b      	add	r3, sp, #44	; 0x2c
   d7742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d7744:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d7746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d774a:	f04f 0314 	mov.w	r3, #20
   d774e:	9300      	str	r3, [sp, #0]
   d7750:	bf18      	it	ne
   d7752:	220c      	movne	r2, #12
   d7754:	4623      	mov	r3, r4
   d7756:	bf08      	it	eq
   d7758:	220d      	moveq	r2, #13
   d775a:	2129      	movs	r1, #41	; 0x29
   d775c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d775e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d7760:	f7fe fa96 	bl	d5c90 <sock_setsockopt>
   d7764:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d7768:	e001      	b.n	d776e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d776a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d776e:	b011      	add	sp, #68	; 0x44
   d7770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7774 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d7774:	b538      	push	{r3, r4, r5, lr}
   d7776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d777a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d777c:	4b0b      	ldr	r3, [pc, #44]	; (d77ac <_ZN3UDPC1Ev+0x38>)
   d777e:	f103 0208 	add.w	r2, r3, #8
   d7782:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7784:	2500      	movs	r5, #0
   d7786:	6103      	str	r3, [r0, #16]
   d7788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d778c:	4604      	mov	r4, r0
   d778e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d7790:	6002      	str	r2, [r0, #0]
   d7792:	6143      	str	r3, [r0, #20]
   d7794:	301c      	adds	r0, #28
   d7796:	f7fe ffcf 	bl	d6738 <_ZN9IPAddressC1Ev>
   d779a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d779e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d77a0:	8725      	strh	r5, [r4, #56]	; 0x38
   d77a2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d77a4:	6423      	str	r3, [r4, #64]	; 0x40
   d77a6:	6465      	str	r5, [r4, #68]	; 0x44
}
   d77a8:	4620      	mov	r0, r4
   d77aa:	bd38      	pop	{r3, r4, r5, pc}
   d77ac:	000dbd20 	.word	0x000dbd20

000d77b0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d77b0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d77b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d77b6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d77b8:	b11b      	cbz	r3, d77c2 <_ZN3UDP13releaseBufferEv+0x12>
   d77ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d77bc:	b108      	cbz	r0, d77c2 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d77be:	f7fc fc6e 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d77c2:	2300      	movs	r3, #0
   d77c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d77c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d77ca:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d77cc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d77ce:	8723      	strh	r3, [r4, #56]	; 0x38
   d77d0:	bd10      	pop	{r4, pc}

000d77d2 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d77d2:	b570      	push	{r4, r5, r6, lr}
   d77d4:	4604      	mov	r4, r0
   d77d6:	4616      	mov	r6, r2
   d77d8:	460d      	mov	r5, r1
    releaseBuffer();
   d77da:	f7ff ffe9 	bl	d77b0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d77de:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d77e0:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d77e2:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d77e4:	b93e      	cbnz	r6, d77f6 <_ZN3UDP9setBufferEjPh+0x24>
   d77e6:	b135      	cbz	r5, d77f6 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d77e8:	4628      	mov	r0, r5
   d77ea:	f7fc fc56 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d77ee:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d77f0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d77f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d77f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d77f8:	b103      	cbz	r3, d77fc <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d77fa:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d77fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d77fe:	3000      	adds	r0, #0
   d7800:	bf18      	it	ne
   d7802:	2001      	movne	r0, #1
   d7804:	bd70      	pop	{r4, r5, r6, pc}

000d7806 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7808:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d780a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d780c:	4605      	mov	r5, r0
   d780e:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d7810:	b91a      	cbnz	r2, d781a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d7812:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7814:	b109      	cbz	r1, d781a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d7816:	f7ff ffdc 	bl	d77d2 <_ZN3UDP9setBufferEjPh>
   d781a:	3404      	adds	r4, #4
   d781c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d781e:	f105 0620 	add.w	r6, r5, #32
   d7822:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7824:	6823      	ldr	r3, [r4, #0]
   d7826:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7828:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d782a:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d782c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d782e:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d7830:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d7832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7834 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d7834:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d7836:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d7838:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d783a:	b91a      	cbnz	r2, d7844 <_ZN3UDP11parsePacketEm+0x10>
   d783c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d783e:	b109      	cbz	r1, d7844 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d7840:	f7ff ffc7 	bl	d77d2 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d7844:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7846:	2300      	movs	r3, #0
   d7848:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d784a:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d784c:	b141      	cbz	r1, d7860 <_ZN3UDP11parsePacketEm+0x2c>
   d784e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d7850:	b132      	cbz	r2, d7860 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d7852:	6820      	ldr	r0, [r4, #0]
   d7854:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d7856:	4620      	mov	r0, r4
   d7858:	47a8      	blx	r5
        if (result > 0) {
   d785a:	2800      	cmp	r0, #0
            _total = result;
   d785c:	bfc8      	it	gt
   d785e:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d7860:	6823      	ldr	r3, [r4, #0]
   d7862:	4620      	mov	r0, r4
   d7864:	691b      	ldr	r3, [r3, #16]
}
   d7866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d786a:	4718      	bx	r3

000d786c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d786c:	b510      	push	{r4, lr}
   d786e:	4b07      	ldr	r3, [pc, #28]	; (d788c <_ZN3UDPD1Ev+0x20>)
   d7870:	f103 0208 	add.w	r2, r3, #8
   d7874:	336c      	adds	r3, #108	; 0x6c
   d7876:	4604      	mov	r4, r0
   d7878:	6002      	str	r2, [r0, #0]
   d787a:	6103      	str	r3, [r0, #16]
   d787c:	f7ff fd6f 	bl	d735e <_ZN3UDP4stopEv>
   d7880:	4620      	mov	r0, r4
   d7882:	f7ff ff95 	bl	d77b0 <_ZN3UDP13releaseBufferEv>
   d7886:	4620      	mov	r0, r4
   d7888:	bd10      	pop	{r4, pc}
   d788a:	bf00      	nop
   d788c:	000dbd20 	.word	0x000dbd20

000d7890 <_ZN3UDPD0Ev>:
   d7890:	b510      	push	{r4, lr}
   d7892:	4604      	mov	r4, r0
   d7894:	f7ff ffea 	bl	d786c <_ZN3UDPD1Ev>
   d7898:	4620      	mov	r0, r4
   d789a:	f7fc fc00 	bl	d409e <_ZdlPv>
   d789e:	4620      	mov	r0, r4
   d78a0:	bd10      	pop	{r4, pc}

000d78a2 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d78a2:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d78a4:	6940      	ldr	r0, [r0, #20]
   d78a6:	2800      	cmp	r0, #0
   d78a8:	db04      	blt.n	d78b4 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d78aa:	2301      	movs	r3, #1
   d78ac:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d78b0:	f7ff befb 	b.w	d76aa <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d78b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d78b8:	4770      	bx	lr

000d78ba <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d78ba:	4770      	bx	lr

000d78bc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78bc:	7441      	strb	r1, [r0, #17]
   d78be:	4770      	bx	lr

000d78c0 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d78c0:	7c00      	ldrb	r0, [r0, #16]
   d78c2:	f7fe ba55 	b.w	d5d70 <HAL_USART_Available_Data_For_Write>

000d78c6 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d78c6:	7c00      	ldrb	r0, [r0, #16]
   d78c8:	f7fe ba2a 	b.w	d5d20 <HAL_USART_Available_Data>

000d78cc <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d78cc:	7c00      	ldrb	r0, [r0, #16]
   d78ce:	f7fe ba37 	b.w	d5d40 <HAL_USART_Peek_Data>

000d78d2 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d78d2:	7c00      	ldrb	r0, [r0, #16]
   d78d4:	f7fe ba2c 	b.w	d5d30 <HAL_USART_Read_Data>

000d78d8 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d78d8:	7c00      	ldrb	r0, [r0, #16]
   d78da:	f7fe ba39 	b.w	d5d50 <HAL_USART_Flush_Data>

000d78de <_ZN11USARTSerialD0Ev>:
   d78de:	b510      	push	{r4, lr}
   d78e0:	4604      	mov	r4, r0
   d78e2:	f7fc fbdc 	bl	d409e <_ZdlPv>
   d78e6:	4620      	mov	r0, r4
   d78e8:	bd10      	pop	{r4, pc}

000d78ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d78ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d78ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d78ee:	4604      	mov	r4, r0
   d78f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d78f2:	b925      	cbnz	r5, d78fe <_ZN11USARTSerial5writeEh+0x14>
   d78f4:	7c00      	ldrb	r0, [r0, #16]
   d78f6:	f7fe fa3b 	bl	d5d70 <HAL_USART_Available_Data_For_Write>
   d78fa:	2800      	cmp	r0, #0
   d78fc:	dd05      	ble.n	d790a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d78fe:	4631      	mov	r1, r6
   d7900:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7906:	f7fe ba03 	b.w	d5d10 <HAL_USART_Write_Data>
  }
  return 0;
}
   d790a:	4628      	mov	r0, r5
   d790c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7910 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7910:	b510      	push	{r4, lr}
   d7912:	4604      	mov	r4, r0
   d7914:	4608      	mov	r0, r1
   d7916:	4611      	mov	r1, r2
   d7918:	2200      	movs	r2, #0
   d791a:	6062      	str	r2, [r4, #4]
   d791c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7920:	60a2      	str	r2, [r4, #8]
   d7922:	4a05      	ldr	r2, [pc, #20]	; (d7938 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7924:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7926:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7928:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d792a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d792c:	461a      	mov	r2, r3
   d792e:	f7fe f9e7 	bl	d5d00 <HAL_USART_Init>
}
   d7932:	4620      	mov	r0, r4
   d7934:	bd10      	pop	{r4, pc}
   d7936:	bf00      	nop
   d7938:	000dbd98 	.word	0x000dbd98

000d793c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d793c:	7c00      	ldrb	r0, [r0, #16]
   d793e:	f7fe ba0f 	b.w	d5d60 <HAL_USART_Is_Enabled>
	...

000d7944 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7944:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7946:	4d0c      	ldr	r5, [pc, #48]	; (d7978 <_Z22__fetch_global_Serial1v+0x34>)
   d7948:	6829      	ldr	r1, [r5, #0]
   d794a:	f011 0401 	ands.w	r4, r1, #1
   d794e:	d111      	bne.n	d7974 <_Z22__fetch_global_Serial1v+0x30>
   d7950:	4628      	mov	r0, r5
   d7952:	f7fc fba8 	bl	d40a6 <__cxa_guard_acquire>
   d7956:	b168      	cbz	r0, d7974 <_Z22__fetch_global_Serial1v+0x30>
   d7958:	4a08      	ldr	r2, [pc, #32]	; (d797c <_Z22__fetch_global_Serial1v+0x38>)
   d795a:	4b09      	ldr	r3, [pc, #36]	; (d7980 <_Z22__fetch_global_Serial1v+0x3c>)
   d795c:	4809      	ldr	r0, [pc, #36]	; (d7984 <_Z22__fetch_global_Serial1v+0x40>)
   d795e:	4621      	mov	r1, r4
   d7960:	f7ff ffd6 	bl	d7910 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7964:	4628      	mov	r0, r5
   d7966:	f7fc fba3 	bl	d40b0 <__cxa_guard_release>
   d796a:	4a07      	ldr	r2, [pc, #28]	; (d7988 <_Z22__fetch_global_Serial1v+0x44>)
   d796c:	4907      	ldr	r1, [pc, #28]	; (d798c <_Z22__fetch_global_Serial1v+0x48>)
   d796e:	4805      	ldr	r0, [pc, #20]	; (d7984 <_Z22__fetch_global_Serial1v+0x40>)
   d7970:	f000 f980 	bl	d7c74 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7974:	4803      	ldr	r0, [pc, #12]	; (d7984 <_Z22__fetch_global_Serial1v+0x40>)
   d7976:	bd38      	pop	{r3, r4, r5, pc}
   d7978:	2003e670 	.word	0x2003e670
   d797c:	2003e674 	.word	0x2003e674
   d7980:	2003e5ec 	.word	0x2003e5ec
   d7984:	2003e5d8 	.word	0x2003e5d8
   d7988:	2003d540 	.word	0x2003d540
   d798c:	000d78bb 	.word	0x000d78bb

000d7990 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7990:	7441      	strb	r1, [r0, #17]
   d7992:	4770      	bx	lr

000d7994 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7994:	4770      	bx	lr

000d7996 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d7996:	2100      	movs	r1, #0
   d7998:	7c00      	ldrb	r0, [r0, #16]
   d799a:	f7fe ba11 	b.w	d5dc0 <HAL_USB_USART_Receive_Data>

000d799e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d799e:	2101      	movs	r1, #1
   d79a0:	7c00      	ldrb	r0, [r0, #16]
   d79a2:	f7fe ba0d 	b.w	d5dc0 <HAL_USB_USART_Receive_Data>

000d79a6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d79a6:	7c00      	ldrb	r0, [r0, #16]
   d79a8:	f7fe ba02 	b.w	d5db0 <HAL_USB_USART_Available_Data_For_Write>

000d79ac <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d79ac:	7c00      	ldrb	r0, [r0, #16]
   d79ae:	f7fe b9f7 	b.w	d5da0 <HAL_USB_USART_Available_Data>

000d79b2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d79b2:	b538      	push	{r3, r4, r5, lr}
   d79b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d79b6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d79b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d79ba:	f7fe f9f9 	bl	d5db0 <HAL_USB_USART_Available_Data_For_Write>
   d79be:	2800      	cmp	r0, #0
   d79c0:	dc01      	bgt.n	d79c6 <_ZN9USBSerial5writeEh+0x14>
   d79c2:	7c60      	ldrb	r0, [r4, #17]
   d79c4:	b120      	cbz	r0, d79d0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d79c6:	4629      	mov	r1, r5
   d79c8:	7c20      	ldrb	r0, [r4, #16]
   d79ca:	f7fe fa01 	bl	d5dd0 <HAL_USB_USART_Send_Data>
    return 1;
   d79ce:	2001      	movs	r0, #1
  }
  return 0;
}
   d79d0:	bd38      	pop	{r3, r4, r5, pc}

000d79d2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d79d2:	7c00      	ldrb	r0, [r0, #16]
   d79d4:	f7fe ba04 	b.w	d5de0 <HAL_USB_USART_Flush_Data>

000d79d8 <_ZN9USBSerialD0Ev>:
   d79d8:	b510      	push	{r4, lr}
   d79da:	4604      	mov	r4, r0
   d79dc:	f7fc fb5f 	bl	d409e <_ZdlPv>
   d79e0:	4620      	mov	r0, r4
   d79e2:	bd10      	pop	{r4, pc}

000d79e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d79e4:	b510      	push	{r4, lr}
   d79e6:	4604      	mov	r4, r0
   d79e8:	2300      	movs	r3, #0
   d79ea:	6063      	str	r3, [r4, #4]
   d79ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d79f0:	60a3      	str	r3, [r4, #8]
   d79f2:	4b05      	ldr	r3, [pc, #20]	; (d7a08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d79f4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d79f6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d79f8:	4608      	mov	r0, r1
{
  _serial = serial;
   d79fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d79fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d79fe:	4611      	mov	r1, r2
   d7a00:	f7fe f9be 	bl	d5d80 <HAL_USB_USART_Init>
}
   d7a04:	4620      	mov	r0, r4
   d7a06:	bd10      	pop	{r4, pc}
   d7a08:	000dbdc8 	.word	0x000dbdc8

000d7a0c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7a0c:	2200      	movs	r2, #0
   d7a0e:	7c00      	ldrb	r0, [r0, #16]
   d7a10:	f7fe b9be 	b.w	d5d90 <HAL_USB_USART_Begin>

000d7a14 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a16:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a18:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a1a:	2100      	movs	r1, #0
   d7a1c:	f002 f958 	bl	d9cd0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a20:	4620      	mov	r0, r4
   d7a22:	bd10      	pop	{r4, pc}

000d7a24 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7a24:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a26:	4d0e      	ldr	r5, [pc, #56]	; (d7a60 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7a28:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7a2a:	a801      	add	r0, sp, #4
   d7a2c:	f7ff fff2 	bl	d7a14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a30:	6829      	ldr	r1, [r5, #0]
   d7a32:	f011 0401 	ands.w	r4, r1, #1
   d7a36:	d110      	bne.n	d7a5a <_Z16_fetch_usbserialv+0x36>
   d7a38:	4628      	mov	r0, r5
   d7a3a:	f7fc fb34 	bl	d40a6 <__cxa_guard_acquire>
   d7a3e:	b160      	cbz	r0, d7a5a <_Z16_fetch_usbserialv+0x36>
   d7a40:	aa01      	add	r2, sp, #4
   d7a42:	4621      	mov	r1, r4
   d7a44:	4807      	ldr	r0, [pc, #28]	; (d7a64 <_Z16_fetch_usbserialv+0x40>)
   d7a46:	f7ff ffcd 	bl	d79e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7a4a:	4628      	mov	r0, r5
   d7a4c:	f7fc fb30 	bl	d40b0 <__cxa_guard_release>
   d7a50:	4a05      	ldr	r2, [pc, #20]	; (d7a68 <_Z16_fetch_usbserialv+0x44>)
   d7a52:	4906      	ldr	r1, [pc, #24]	; (d7a6c <_Z16_fetch_usbserialv+0x48>)
   d7a54:	4803      	ldr	r0, [pc, #12]	; (d7a64 <_Z16_fetch_usbserialv+0x40>)
   d7a56:	f000 f90d 	bl	d7c74 <__aeabi_atexit>
	return _usbserial;
}
   d7a5a:	4802      	ldr	r0, [pc, #8]	; (d7a64 <_Z16_fetch_usbserialv+0x40>)
   d7a5c:	b007      	add	sp, #28
   d7a5e:	bd30      	pop	{r4, r5, pc}
   d7a60:	2003e6f8 	.word	0x2003e6f8
   d7a64:	2003e6fc 	.word	0x2003e6fc
   d7a68:	2003d540 	.word	0x2003d540
   d7a6c:	000d7995 	.word	0x000d7995

000d7a70 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7a70:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7a72:	4b0f      	ldr	r3, [pc, #60]	; (d7ab0 <serialEventRun+0x40>)
   d7a74:	b133      	cbz	r3, d7a84 <serialEventRun+0x14>
   d7a76:	f7ff ffd5 	bl	d7a24 <_Z16_fetch_usbserialv>
   d7a7a:	6803      	ldr	r3, [r0, #0]
   d7a7c:	691b      	ldr	r3, [r3, #16]
   d7a7e:	4798      	blx	r3
   d7a80:	2800      	cmp	r0, #0
   d7a82:	dc0d      	bgt.n	d7aa0 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7a84:	4b0b      	ldr	r3, [pc, #44]	; (d7ab4 <serialEventRun+0x44>)
   d7a86:	b133      	cbz	r3, d7a96 <serialEventRun+0x26>
   d7a88:	f7ff ff5c 	bl	d7944 <_Z22__fetch_global_Serial1v>
   d7a8c:	6803      	ldr	r3, [r0, #0]
   d7a8e:	691b      	ldr	r3, [r3, #16]
   d7a90:	4798      	blx	r3
   d7a92:	2800      	cmp	r0, #0
   d7a94:	dc07      	bgt.n	d7aa6 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d7a96:	4b08      	ldr	r3, [pc, #32]	; (d7ab8 <serialEventRun+0x48>)
   d7a98:	b143      	cbz	r3, d7aac <serialEventRun+0x3c>
   d7a9a:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d7a9e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7aa0:	f3af 8000 	nop.w
   d7aa4:	e7ee      	b.n	d7a84 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7aa6:	f3af 8000 	nop.w
   d7aaa:	e7f4      	b.n	d7a96 <serialEventRun+0x26>
   d7aac:	bd08      	pop	{r3, pc}
   d7aae:	bf00      	nop
	...

000d7abc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7abc:	b508      	push	{r3, lr}
	serialEventRun();
   d7abe:	f7ff ffd7 	bl	d7a70 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7ac2:	f7fe f81d 	bl	d5b00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7ac6:	4b01      	ldr	r3, [pc, #4]	; (d7acc <_post_loop+0x10>)
   d7ac8:	6018      	str	r0, [r3, #0]
   d7aca:	bd08      	pop	{r3, pc}
   d7acc:	2003e714 	.word	0x2003e714

000d7ad0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7ad0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ad2:	2300      	movs	r3, #0
   d7ad4:	9300      	str	r3, [sp, #0]
   d7ad6:	461a      	mov	r2, r3
   d7ad8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7adc:	f7fe f9ba 	bl	d5e54 <system_ctrl_set_result>
}
   d7ae0:	b003      	add	sp, #12
   d7ae2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7ae8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7ae8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7aea:	8843      	ldrh	r3, [r0, #2]
   d7aec:	2b0a      	cmp	r3, #10
   d7aee:	d008      	beq.n	d7b02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7af0:	2b50      	cmp	r3, #80	; 0x50
   d7af2:	d109      	bne.n	d7b08 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7af4:	4b09      	ldr	r3, [pc, #36]	; (d7b1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7af6:	681b      	ldr	r3, [r3, #0]
   d7af8:	b13b      	cbz	r3, d7b0a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7afa:	b003      	add	sp, #12
   d7afc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7b00:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7b02:	f7ff ffe5 	bl	d7ad0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7b06:	e006      	b.n	d7b16 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7b08:	2300      	movs	r3, #0
   d7b0a:	9300      	str	r3, [sp, #0]
   d7b0c:	461a      	mov	r2, r3
   d7b0e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7b12:	f7fe f99f 	bl	d5e54 <system_ctrl_set_result>
        break;
    }
}
   d7b16:	b003      	add	sp, #12
   d7b18:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b1c:	2003e710 	.word	0x2003e710

000d7b20 <module_user_init_hook>:

void module_user_init_hook()
{
   d7b20:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7b22:	f7fd ffcd 	bl	d5ac0 <HAL_RNG_GetRandomNumber>
   d7b26:	4604      	mov	r4, r0
    srand(seed);
   d7b28:	f002 f8da 	bl	d9ce0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7b2c:	4b07      	ldr	r3, [pc, #28]	; (d7b4c <module_user_init_hook+0x2c>)
   d7b2e:	b113      	cbz	r3, d7b36 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7b30:	4620      	mov	r0, r4
   d7b32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7b36:	2100      	movs	r1, #0
   d7b38:	4804      	ldr	r0, [pc, #16]	; (d7b4c <module_user_init_hook+0x2c>)
   d7b3a:	f7fe f9b7 	bl	d5eac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7b3e:	2100      	movs	r1, #0
   d7b40:	4803      	ldr	r0, [pc, #12]	; (d7b50 <module_user_init_hook+0x30>)
}
   d7b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7b46:	f7fe b97b 	b.w	d5e40 <system_ctrl_set_app_request_handler>
   d7b4a:	bf00      	nop
   d7b4c:	00000000 	.word	0x00000000
   d7b50:	000d7ae9 	.word	0x000d7ae9

000d7b54 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7b54:	b510      	push	{r4, lr}
   d7b56:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7b58:	480f      	ldr	r0, [pc, #60]	; (d7b98 <pinAvailable+0x44>)
   d7b5a:	f7ff fa8f 	bl	d707c <_ZN8SPIClass9isEnabledEv>
   d7b5e:	b128      	cbz	r0, d7b6c <pinAvailable+0x18>
   d7b60:	f1a4 030b 	sub.w	r3, r4, #11
   d7b64:	2b02      	cmp	r3, #2
   d7b66:	d801      	bhi.n	d7b6c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7b68:	2000      	movs	r0, #0
   d7b6a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7b6c:	f000 f840 	bl	d7bf0 <_Z19__fetch_global_Wirev>
   d7b70:	f7fe fda4 	bl	d66bc <_ZN7TwoWire9isEnabledEv>
   d7b74:	b108      	cbz	r0, d7b7a <pinAvailable+0x26>
   d7b76:	2c01      	cmp	r4, #1
   d7b78:	d9f6      	bls.n	d7b68 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7b7a:	f7ff fee3 	bl	d7944 <_Z22__fetch_global_Serial1v>
   d7b7e:	f7ff fedd 	bl	d793c <_ZN11USARTSerial9isEnabledEv>
   d7b82:	b118      	cbz	r0, d7b8c <pinAvailable+0x38>
   d7b84:	f1a4 0309 	sub.w	r3, r4, #9
   d7b88:	2b01      	cmp	r3, #1
   d7b8a:	d9ed      	bls.n	d7b68 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7b8c:	2c1e      	cmp	r4, #30
   d7b8e:	bf8c      	ite	hi
   d7b90:	2000      	movhi	r0, #0
   d7b92:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7b94:	bd10      	pop	{r4, pc}
   d7b96:	bf00      	nop
   d7b98:	2003e730 	.word	0x2003e730

000d7b9c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b9c:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7b9e:	b538      	push	{r3, r4, r5, lr}
   d7ba0:	4604      	mov	r4, r0
   d7ba2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ba4:	d80a      	bhi.n	d7bbc <pinMode+0x20>
   d7ba6:	29ff      	cmp	r1, #255	; 0xff
   d7ba8:	d008      	beq.n	d7bbc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7baa:	f7ff ffd3 	bl	d7b54 <pinAvailable>
   d7bae:	b128      	cbz	r0, d7bbc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bb0:	4629      	mov	r1, r5
   d7bb2:	4620      	mov	r0, r4
}
   d7bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bb8:	f7fd bfb2 	b.w	d5b20 <HAL_Pin_Mode>
   d7bbc:	bd38      	pop	{r3, r4, r5, pc}

000d7bbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7bbe:	b538      	push	{r3, r4, r5, lr}
   d7bc0:	4604      	mov	r4, r0
   d7bc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bc4:	f7fd ffb4 	bl	d5b30 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7bc8:	28ff      	cmp	r0, #255	; 0xff
   d7bca:	d010      	beq.n	d7bee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7bcc:	2806      	cmp	r0, #6
   d7bce:	d804      	bhi.n	d7bda <digitalWrite+0x1c>
   d7bd0:	234d      	movs	r3, #77	; 0x4d
   d7bd2:	fa23 f000 	lsr.w	r0, r3, r0
   d7bd6:	07c3      	lsls	r3, r0, #31
   d7bd8:	d409      	bmi.n	d7bee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7bda:	4620      	mov	r0, r4
   d7bdc:	f7ff ffba 	bl	d7b54 <pinAvailable>
   d7be0:	b128      	cbz	r0, d7bee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7be2:	4629      	mov	r1, r5
   d7be4:	4620      	mov	r0, r4
}
   d7be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bea:	f7fd bfa9 	b.w	d5b40 <HAL_GPIO_Write>
   d7bee:	bd38      	pop	{r3, r4, r5, pc}

000d7bf0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7bf0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7bf2:	4d0b      	ldr	r5, [pc, #44]	; (d7c20 <_Z19__fetch_global_Wirev+0x30>)
   d7bf4:	6829      	ldr	r1, [r5, #0]
   d7bf6:	f011 0401 	ands.w	r4, r1, #1
   d7bfa:	d10f      	bne.n	d7c1c <_Z19__fetch_global_Wirev+0x2c>
   d7bfc:	4628      	mov	r0, r5
   d7bfe:	f7fc fa52 	bl	d40a6 <__cxa_guard_acquire>
   d7c02:	b158      	cbz	r0, d7c1c <_Z19__fetch_global_Wirev+0x2c>
   d7c04:	4621      	mov	r1, r4
   d7c06:	4807      	ldr	r0, [pc, #28]	; (d7c24 <_Z19__fetch_global_Wirev+0x34>)
   d7c08:	f7fe fd46 	bl	d6698 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7c0c:	4628      	mov	r0, r5
   d7c0e:	f7fc fa4f 	bl	d40b0 <__cxa_guard_release>
   d7c12:	4a05      	ldr	r2, [pc, #20]	; (d7c28 <_Z19__fetch_global_Wirev+0x38>)
   d7c14:	4905      	ldr	r1, [pc, #20]	; (d7c2c <_Z19__fetch_global_Wirev+0x3c>)
   d7c16:	4803      	ldr	r0, [pc, #12]	; (d7c24 <_Z19__fetch_global_Wirev+0x34>)
   d7c18:	f000 f82c 	bl	d7c74 <__aeabi_atexit>
	return wire;
}
   d7c1c:	4801      	ldr	r0, [pc, #4]	; (d7c24 <_Z19__fetch_global_Wirev+0x34>)
   d7c1e:	bd38      	pop	{r3, r4, r5, pc}
   d7c20:	2003e718 	.word	0x2003e718
   d7c24:	2003e71c 	.word	0x2003e71c
   d7c28:	2003d540 	.word	0x2003d540
   d7c2c:	000d6641 	.word	0x000d6641

000d7c30 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7c30:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7c32:	4c0c      	ldr	r4, [pc, #48]	; (d7c64 <_GLOBAL__sub_I_SPI+0x34>)
   d7c34:	4e0c      	ldr	r6, [pc, #48]	; (d7c68 <_GLOBAL__sub_I_SPI+0x38>)
   d7c36:	4d0d      	ldr	r5, [pc, #52]	; (d7c6c <_GLOBAL__sub_I_SPI+0x3c>)
   d7c38:	2100      	movs	r1, #0
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	f7ff fa0a 	bl	d7054 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7c40:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7c42:	4c0b      	ldr	r4, [pc, #44]	; (d7c70 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7c44:	4632      	mov	r2, r6
   d7c46:	4629      	mov	r1, r5
   d7c48:	f000 f814 	bl	d7c74 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7c4c:	2101      	movs	r1, #1
   d7c4e:	4620      	mov	r0, r4
   d7c50:	f7ff fa00 	bl	d7054 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7c54:	4632      	mov	r2, r6
   d7c56:	4629      	mov	r1, r5
   d7c58:	4620      	mov	r0, r4
   d7c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7c5e:	f000 b809 	b.w	d7c74 <__aeabi_atexit>
   d7c62:	bf00      	nop
   d7c64:	2003e730 	.word	0x2003e730
   d7c68:	2003d540 	.word	0x2003d540
   d7c6c:	000d7045 	.word	0x000d7045
   d7c70:	2003e740 	.word	0x2003e740

000d7c74 <__aeabi_atexit>:
   d7c74:	460b      	mov	r3, r1
   d7c76:	4601      	mov	r1, r0
   d7c78:	4618      	mov	r0, r3
   d7c7a:	f001 bffd 	b.w	d9c78 <__cxa_atexit>
	...

000d7c80 <_ZSt15get_new_handlerv>:
   d7c80:	4b02      	ldr	r3, [pc, #8]	; (d7c8c <_ZSt15get_new_handlerv+0xc>)
   d7c82:	6818      	ldr	r0, [r3, #0]
   d7c84:	f3bf 8f5f 	dmb	sy
   d7c88:	4770      	bx	lr
   d7c8a:	bf00      	nop
   d7c8c:	2003e750 	.word	0x2003e750

000d7c90 <_ZnwjRKSt9nothrow_t>:
   d7c90:	b510      	push	{r4, lr}
   d7c92:	2800      	cmp	r0, #0
   d7c94:	bf14      	ite	ne
   d7c96:	4604      	movne	r4, r0
   d7c98:	2401      	moveq	r4, #1
   d7c9a:	4620      	mov	r0, r4
   d7c9c:	f7fe f95e 	bl	d5f5c <malloc>
   d7ca0:	b920      	cbnz	r0, d7cac <_ZnwjRKSt9nothrow_t+0x1c>
   d7ca2:	f7ff ffed 	bl	d7c80 <_ZSt15get_new_handlerv>
   d7ca6:	b108      	cbz	r0, d7cac <_ZnwjRKSt9nothrow_t+0x1c>
   d7ca8:	4780      	blx	r0
   d7caa:	e7f6      	b.n	d7c9a <_ZnwjRKSt9nothrow_t+0xa>
   d7cac:	bd10      	pop	{r4, pc}

000d7cae <_ZnajRKSt9nothrow_t>:
   d7cae:	f7ff bfef 	b.w	d7c90 <_ZnwjRKSt9nothrow_t>

000d7cb2 <_ZSt25__throw_bad_function_callv>:
   d7cb2:	b508      	push	{r3, lr}
   d7cb4:	f7fe f972 	bl	d5f9c <abort>

000d7cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7cb8:	4b24      	ldr	r3, [pc, #144]	; (d7d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7cba:	681a      	ldr	r2, [r3, #0]
   d7cbc:	07d0      	lsls	r0, r2, #31
   d7cbe:	bf5c      	itt	pl
   d7cc0:	2201      	movpl	r2, #1
   d7cc2:	601a      	strpl	r2, [r3, #0]
   d7cc4:	4b22      	ldr	r3, [pc, #136]	; (d7d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7cc6:	681a      	ldr	r2, [r3, #0]
   d7cc8:	07d1      	lsls	r1, r2, #31
   d7cca:	bf5c      	itt	pl
   d7ccc:	2201      	movpl	r2, #1
   d7cce:	601a      	strpl	r2, [r3, #0]
   d7cd0:	4b20      	ldr	r3, [pc, #128]	; (d7d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7cd2:	681a      	ldr	r2, [r3, #0]
   d7cd4:	07d2      	lsls	r2, r2, #31
   d7cd6:	bf5c      	itt	pl
   d7cd8:	2201      	movpl	r2, #1
   d7cda:	601a      	strpl	r2, [r3, #0]
   d7cdc:	4b1e      	ldr	r3, [pc, #120]	; (d7d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7cde:	681a      	ldr	r2, [r3, #0]
   d7ce0:	07d0      	lsls	r0, r2, #31
   d7ce2:	bf5c      	itt	pl
   d7ce4:	2201      	movpl	r2, #1
   d7ce6:	601a      	strpl	r2, [r3, #0]
   d7ce8:	4b1c      	ldr	r3, [pc, #112]	; (d7d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7cea:	681a      	ldr	r2, [r3, #0]
   d7cec:	07d1      	lsls	r1, r2, #31
   d7cee:	bf5c      	itt	pl
   d7cf0:	2201      	movpl	r2, #1
   d7cf2:	601a      	strpl	r2, [r3, #0]
   d7cf4:	4b1a      	ldr	r3, [pc, #104]	; (d7d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7cf6:	681a      	ldr	r2, [r3, #0]
   d7cf8:	07d2      	lsls	r2, r2, #31
   d7cfa:	bf5c      	itt	pl
   d7cfc:	2201      	movpl	r2, #1
   d7cfe:	601a      	strpl	r2, [r3, #0]
   d7d00:	4b18      	ldr	r3, [pc, #96]	; (d7d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7d02:	681a      	ldr	r2, [r3, #0]
   d7d04:	07d0      	lsls	r0, r2, #31
   d7d06:	bf5c      	itt	pl
   d7d08:	2201      	movpl	r2, #1
   d7d0a:	601a      	strpl	r2, [r3, #0]
   d7d0c:	4b16      	ldr	r3, [pc, #88]	; (d7d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7d0e:	681a      	ldr	r2, [r3, #0]
   d7d10:	07d1      	lsls	r1, r2, #31
   d7d12:	bf5c      	itt	pl
   d7d14:	2201      	movpl	r2, #1
   d7d16:	601a      	strpl	r2, [r3, #0]
   d7d18:	4b14      	ldr	r3, [pc, #80]	; (d7d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7d1a:	681a      	ldr	r2, [r3, #0]
   d7d1c:	07d2      	lsls	r2, r2, #31
   d7d1e:	bf5c      	itt	pl
   d7d20:	2201      	movpl	r2, #1
   d7d22:	601a      	strpl	r2, [r3, #0]
   d7d24:	4b12      	ldr	r3, [pc, #72]	; (d7d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7d26:	681a      	ldr	r2, [r3, #0]
   d7d28:	07d0      	lsls	r0, r2, #31
   d7d2a:	bf5c      	itt	pl
   d7d2c:	2201      	movpl	r2, #1
   d7d2e:	601a      	strpl	r2, [r3, #0]
   d7d30:	4b10      	ldr	r3, [pc, #64]	; (d7d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7d32:	681a      	ldr	r2, [r3, #0]
   d7d34:	07d1      	lsls	r1, r2, #31
   d7d36:	bf5c      	itt	pl
   d7d38:	2201      	movpl	r2, #1
   d7d3a:	601a      	strpl	r2, [r3, #0]
   d7d3c:	4b0e      	ldr	r3, [pc, #56]	; (d7d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7d3e:	681a      	ldr	r2, [r3, #0]
   d7d40:	07d2      	lsls	r2, r2, #31
   d7d42:	bf5c      	itt	pl
   d7d44:	2201      	movpl	r2, #1
   d7d46:	601a      	strpl	r2, [r3, #0]
   d7d48:	4770      	bx	lr
   d7d4a:	bf00      	nop
   d7d4c:	2003e780 	.word	0x2003e780
   d7d50:	2003e77c 	.word	0x2003e77c
   d7d54:	2003e778 	.word	0x2003e778
   d7d58:	2003e774 	.word	0x2003e774
   d7d5c:	2003e770 	.word	0x2003e770
   d7d60:	2003e76c 	.word	0x2003e76c
   d7d64:	2003e768 	.word	0x2003e768
   d7d68:	2003e764 	.word	0x2003e764
   d7d6c:	2003e760 	.word	0x2003e760
   d7d70:	2003e75c 	.word	0x2003e75c
   d7d74:	2003e758 	.word	0x2003e758
   d7d78:	2003e754 	.word	0x2003e754

000d7d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7d7c:	4b18      	ldr	r3, [pc, #96]	; (d7de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7d7e:	681a      	ldr	r2, [r3, #0]
   d7d80:	07d1      	lsls	r1, r2, #31
   d7d82:	bf5c      	itt	pl
   d7d84:	2201      	movpl	r2, #1
   d7d86:	601a      	strpl	r2, [r3, #0]
   d7d88:	4b16      	ldr	r3, [pc, #88]	; (d7de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7d8a:	681a      	ldr	r2, [r3, #0]
   d7d8c:	07d2      	lsls	r2, r2, #31
   d7d8e:	bf5c      	itt	pl
   d7d90:	2201      	movpl	r2, #1
   d7d92:	601a      	strpl	r2, [r3, #0]
   d7d94:	4b14      	ldr	r3, [pc, #80]	; (d7de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7d96:	681a      	ldr	r2, [r3, #0]
   d7d98:	07d0      	lsls	r0, r2, #31
   d7d9a:	bf5c      	itt	pl
   d7d9c:	2201      	movpl	r2, #1
   d7d9e:	601a      	strpl	r2, [r3, #0]
   d7da0:	4b12      	ldr	r3, [pc, #72]	; (d7dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7da2:	681a      	ldr	r2, [r3, #0]
   d7da4:	07d1      	lsls	r1, r2, #31
   d7da6:	bf5c      	itt	pl
   d7da8:	2201      	movpl	r2, #1
   d7daa:	601a      	strpl	r2, [r3, #0]
   d7dac:	4b10      	ldr	r3, [pc, #64]	; (d7df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7dae:	681a      	ldr	r2, [r3, #0]
   d7db0:	07d2      	lsls	r2, r2, #31
   d7db2:	bf5c      	itt	pl
   d7db4:	2201      	movpl	r2, #1
   d7db6:	601a      	strpl	r2, [r3, #0]
   d7db8:	4b0e      	ldr	r3, [pc, #56]	; (d7df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7dba:	681a      	ldr	r2, [r3, #0]
   d7dbc:	07d0      	lsls	r0, r2, #31
   d7dbe:	bf5c      	itt	pl
   d7dc0:	2201      	movpl	r2, #1
   d7dc2:	601a      	strpl	r2, [r3, #0]
   d7dc4:	4b0c      	ldr	r3, [pc, #48]	; (d7df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7dc6:	681a      	ldr	r2, [r3, #0]
   d7dc8:	07d1      	lsls	r1, r2, #31
   d7dca:	bf5c      	itt	pl
   d7dcc:	2201      	movpl	r2, #1
   d7dce:	601a      	strpl	r2, [r3, #0]
   d7dd0:	4b0a      	ldr	r3, [pc, #40]	; (d7dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7dd2:	681a      	ldr	r2, [r3, #0]
   d7dd4:	07d2      	lsls	r2, r2, #31
   d7dd6:	bf5c      	itt	pl
   d7dd8:	2201      	movpl	r2, #1
   d7dda:	601a      	strpl	r2, [r3, #0]
   d7ddc:	4770      	bx	lr
   d7dde:	bf00      	nop
   d7de0:	2003e7a0 	.word	0x2003e7a0
   d7de4:	2003e79c 	.word	0x2003e79c
   d7de8:	2003e798 	.word	0x2003e798
   d7dec:	2003e794 	.word	0x2003e794
   d7df0:	2003e790 	.word	0x2003e790
   d7df4:	2003e78c 	.word	0x2003e78c
   d7df8:	2003e788 	.word	0x2003e788
   d7dfc:	2003e784 	.word	0x2003e784

000d7e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7e00:	4b18      	ldr	r3, [pc, #96]	; (d7e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7e02:	681a      	ldr	r2, [r3, #0]
   d7e04:	07d1      	lsls	r1, r2, #31
   d7e06:	bf5c      	itt	pl
   d7e08:	2201      	movpl	r2, #1
   d7e0a:	601a      	strpl	r2, [r3, #0]
   d7e0c:	4b16      	ldr	r3, [pc, #88]	; (d7e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7e0e:	681a      	ldr	r2, [r3, #0]
   d7e10:	07d2      	lsls	r2, r2, #31
   d7e12:	bf5c      	itt	pl
   d7e14:	2201      	movpl	r2, #1
   d7e16:	601a      	strpl	r2, [r3, #0]
   d7e18:	4b14      	ldr	r3, [pc, #80]	; (d7e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7e1a:	681a      	ldr	r2, [r3, #0]
   d7e1c:	07d0      	lsls	r0, r2, #31
   d7e1e:	bf5c      	itt	pl
   d7e20:	2201      	movpl	r2, #1
   d7e22:	601a      	strpl	r2, [r3, #0]
   d7e24:	4b12      	ldr	r3, [pc, #72]	; (d7e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7e26:	681a      	ldr	r2, [r3, #0]
   d7e28:	07d1      	lsls	r1, r2, #31
   d7e2a:	bf5c      	itt	pl
   d7e2c:	2201      	movpl	r2, #1
   d7e2e:	601a      	strpl	r2, [r3, #0]
   d7e30:	4b10      	ldr	r3, [pc, #64]	; (d7e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7e32:	681a      	ldr	r2, [r3, #0]
   d7e34:	07d2      	lsls	r2, r2, #31
   d7e36:	bf5c      	itt	pl
   d7e38:	2201      	movpl	r2, #1
   d7e3a:	601a      	strpl	r2, [r3, #0]
   d7e3c:	4b0e      	ldr	r3, [pc, #56]	; (d7e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7e3e:	681a      	ldr	r2, [r3, #0]
   d7e40:	07d0      	lsls	r0, r2, #31
   d7e42:	bf5c      	itt	pl
   d7e44:	2201      	movpl	r2, #1
   d7e46:	601a      	strpl	r2, [r3, #0]
   d7e48:	4b0c      	ldr	r3, [pc, #48]	; (d7e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7e4a:	681a      	ldr	r2, [r3, #0]
   d7e4c:	07d1      	lsls	r1, r2, #31
   d7e4e:	bf5c      	itt	pl
   d7e50:	2201      	movpl	r2, #1
   d7e52:	601a      	strpl	r2, [r3, #0]
   d7e54:	4b0a      	ldr	r3, [pc, #40]	; (d7e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7e56:	681a      	ldr	r2, [r3, #0]
   d7e58:	07d2      	lsls	r2, r2, #31
   d7e5a:	bf5c      	itt	pl
   d7e5c:	2201      	movpl	r2, #1
   d7e5e:	601a      	strpl	r2, [r3, #0]
   d7e60:	4770      	bx	lr
   d7e62:	bf00      	nop
   d7e64:	2003e7c0 	.word	0x2003e7c0
   d7e68:	2003e7bc 	.word	0x2003e7bc
   d7e6c:	2003e7b8 	.word	0x2003e7b8
   d7e70:	2003e7b4 	.word	0x2003e7b4
   d7e74:	2003e7b0 	.word	0x2003e7b0
   d7e78:	2003e7ac 	.word	0x2003e7ac
   d7e7c:	2003e7a8 	.word	0x2003e7a8
   d7e80:	2003e7a4 	.word	0x2003e7a4

000d7e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7e84:	4b24      	ldr	r3, [pc, #144]	; (d7f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7e86:	681a      	ldr	r2, [r3, #0]
   d7e88:	07d0      	lsls	r0, r2, #31
   d7e8a:	bf5c      	itt	pl
   d7e8c:	2201      	movpl	r2, #1
   d7e8e:	601a      	strpl	r2, [r3, #0]
   d7e90:	4b22      	ldr	r3, [pc, #136]	; (d7f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7e92:	681a      	ldr	r2, [r3, #0]
   d7e94:	07d1      	lsls	r1, r2, #31
   d7e96:	bf5c      	itt	pl
   d7e98:	2201      	movpl	r2, #1
   d7e9a:	601a      	strpl	r2, [r3, #0]
   d7e9c:	4b20      	ldr	r3, [pc, #128]	; (d7f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7e9e:	681a      	ldr	r2, [r3, #0]
   d7ea0:	07d2      	lsls	r2, r2, #31
   d7ea2:	bf5c      	itt	pl
   d7ea4:	2201      	movpl	r2, #1
   d7ea6:	601a      	strpl	r2, [r3, #0]
   d7ea8:	4b1e      	ldr	r3, [pc, #120]	; (d7f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7eaa:	681a      	ldr	r2, [r3, #0]
   d7eac:	07d0      	lsls	r0, r2, #31
   d7eae:	bf5c      	itt	pl
   d7eb0:	2201      	movpl	r2, #1
   d7eb2:	601a      	strpl	r2, [r3, #0]
   d7eb4:	4b1c      	ldr	r3, [pc, #112]	; (d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7eb6:	681a      	ldr	r2, [r3, #0]
   d7eb8:	07d1      	lsls	r1, r2, #31
   d7eba:	bf5c      	itt	pl
   d7ebc:	2201      	movpl	r2, #1
   d7ebe:	601a      	strpl	r2, [r3, #0]
   d7ec0:	4b1a      	ldr	r3, [pc, #104]	; (d7f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7ec2:	681a      	ldr	r2, [r3, #0]
   d7ec4:	07d2      	lsls	r2, r2, #31
   d7ec6:	bf5c      	itt	pl
   d7ec8:	2201      	movpl	r2, #1
   d7eca:	601a      	strpl	r2, [r3, #0]
   d7ecc:	4b18      	ldr	r3, [pc, #96]	; (d7f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7ece:	681a      	ldr	r2, [r3, #0]
   d7ed0:	07d0      	lsls	r0, r2, #31
   d7ed2:	bf5c      	itt	pl
   d7ed4:	2201      	movpl	r2, #1
   d7ed6:	601a      	strpl	r2, [r3, #0]
   d7ed8:	4b16      	ldr	r3, [pc, #88]	; (d7f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7eda:	681a      	ldr	r2, [r3, #0]
   d7edc:	07d1      	lsls	r1, r2, #31
   d7ede:	bf5c      	itt	pl
   d7ee0:	2201      	movpl	r2, #1
   d7ee2:	601a      	strpl	r2, [r3, #0]
   d7ee4:	4b14      	ldr	r3, [pc, #80]	; (d7f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7ee6:	681a      	ldr	r2, [r3, #0]
   d7ee8:	07d2      	lsls	r2, r2, #31
   d7eea:	bf5c      	itt	pl
   d7eec:	2201      	movpl	r2, #1
   d7eee:	601a      	strpl	r2, [r3, #0]
   d7ef0:	4b12      	ldr	r3, [pc, #72]	; (d7f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7ef2:	681a      	ldr	r2, [r3, #0]
   d7ef4:	07d0      	lsls	r0, r2, #31
   d7ef6:	bf5c      	itt	pl
   d7ef8:	2201      	movpl	r2, #1
   d7efa:	601a      	strpl	r2, [r3, #0]
   d7efc:	4b10      	ldr	r3, [pc, #64]	; (d7f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7efe:	681a      	ldr	r2, [r3, #0]
   d7f00:	07d1      	lsls	r1, r2, #31
   d7f02:	bf5c      	itt	pl
   d7f04:	2201      	movpl	r2, #1
   d7f06:	601a      	strpl	r2, [r3, #0]
   d7f08:	4b0e      	ldr	r3, [pc, #56]	; (d7f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7f0a:	681a      	ldr	r2, [r3, #0]
   d7f0c:	07d2      	lsls	r2, r2, #31
   d7f0e:	bf5c      	itt	pl
   d7f10:	2201      	movpl	r2, #1
   d7f12:	601a      	strpl	r2, [r3, #0]
   d7f14:	4770      	bx	lr
   d7f16:	bf00      	nop
   d7f18:	2003e7f0 	.word	0x2003e7f0
   d7f1c:	2003e7ec 	.word	0x2003e7ec
   d7f20:	2003e7e8 	.word	0x2003e7e8
   d7f24:	2003e7e4 	.word	0x2003e7e4
   d7f28:	2003e7e0 	.word	0x2003e7e0
   d7f2c:	2003e7dc 	.word	0x2003e7dc
   d7f30:	2003e7d8 	.word	0x2003e7d8
   d7f34:	2003e7d4 	.word	0x2003e7d4
   d7f38:	2003e7d0 	.word	0x2003e7d0
   d7f3c:	2003e7cc 	.word	0x2003e7cc
   d7f40:	2003e7c8 	.word	0x2003e7c8
   d7f44:	2003e7c4 	.word	0x2003e7c4

000d7f48 <round>:
   d7f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f4a:	ec53 2b10 	vmov	r2, r3, d0
   d7f4e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d7f52:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   d7f56:	2813      	cmp	r0, #19
   d7f58:	4619      	mov	r1, r3
   d7f5a:	ee10 7a10 	vmov	r7, s0
   d7f5e:	dc12      	bgt.n	d7f86 <round+0x3e>
   d7f60:	2800      	cmp	r0, #0
   d7f62:	db32      	blt.n	d7fca <round+0x82>
   d7f64:	4e23      	ldr	r6, [pc, #140]	; (d7ff4 <round+0xac>)
   d7f66:	4106      	asrs	r6, r0
   d7f68:	4233      	tst	r3, r6
   d7f6a:	461d      	mov	r5, r3
   d7f6c:	d02a      	beq.n	d7fc4 <round+0x7c>
   d7f6e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d7f72:	4101      	asrs	r1, r0
   d7f74:	4429      	add	r1, r5
   d7f76:	ea21 0106 	bic.w	r1, r1, r6
   d7f7a:	2400      	movs	r4, #0
   d7f7c:	460b      	mov	r3, r1
   d7f7e:	4622      	mov	r2, r4
   d7f80:	ec43 2b10 	vmov	d0, r2, r3
   d7f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7f86:	2833      	cmp	r0, #51	; 0x33
   d7f88:	dd05      	ble.n	d7f96 <round+0x4e>
   d7f8a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7f8e:	d022      	beq.n	d7fd6 <round+0x8e>
   d7f90:	ec43 2b10 	vmov	d0, r2, r3
   d7f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7f96:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   d7f9a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7f9e:	fa25 f404 	lsr.w	r4, r5, r4
   d7fa2:	4222      	tst	r2, r4
   d7fa4:	d0f4      	beq.n	d7f90 <round+0x48>
   d7fa6:	2301      	movs	r3, #1
   d7fa8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   d7fac:	fa03 f000 	lsl.w	r0, r3, r0
   d7fb0:	19c0      	adds	r0, r0, r7
   d7fb2:	bf28      	it	cs
   d7fb4:	18c9      	addcs	r1, r1, r3
   d7fb6:	ea20 0404 	bic.w	r4, r0, r4
   d7fba:	460b      	mov	r3, r1
   d7fbc:	4622      	mov	r2, r4
   d7fbe:	ec43 2b10 	vmov	d0, r2, r3
   d7fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7fc4:	2a00      	cmp	r2, #0
   d7fc6:	d1d2      	bne.n	d7f6e <round+0x26>
   d7fc8:	e7e2      	b.n	d7f90 <round+0x48>
   d7fca:	3001      	adds	r0, #1
   d7fcc:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   d7fd0:	d009      	beq.n	d7fe6 <round+0x9e>
   d7fd2:	2400      	movs	r4, #0
   d7fd4:	e7d2      	b.n	d7f7c <round+0x34>
   d7fd6:	ee10 0a10 	vmov	r0, s0
   d7fda:	4619      	mov	r1, r3
   d7fdc:	f001 f94a 	bl	d9274 <__adddf3>
   d7fe0:	ec41 0b10 	vmov	d0, r0, r1
   d7fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7fe6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   d7fea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   d7fee:	2400      	movs	r4, #0
   d7ff0:	e7c4      	b.n	d7f7c <round+0x34>
   d7ff2:	bf00      	nop
   d7ff4:	000fffff 	.word	0x000fffff

000d7ff8 <pow>:
   d7ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ffc:	ed2d 8b02 	vpush	{d8}
   d8000:	f8df a324 	ldr.w	sl, [pc, #804]	; d8328 <pow+0x330>
   d8004:	b08b      	sub	sp, #44	; 0x2c
   d8006:	ec57 6b10 	vmov	r6, r7, d0
   d800a:	ec55 4b11 	vmov	r4, r5, d1
   d800e:	f000 f98f 	bl	d8330 <__ieee754_pow>
   d8012:	f99a 8000 	ldrsb.w	r8, [sl]
   d8016:	eeb0 8a40 	vmov.f32	s16, s0
   d801a:	eef0 8a60 	vmov.f32	s17, s1
   d801e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d8022:	d048      	beq.n	d80b6 <pow+0xbe>
   d8024:	4622      	mov	r2, r4
   d8026:	462b      	mov	r3, r5
   d8028:	4620      	mov	r0, r4
   d802a:	4629      	mov	r1, r5
   d802c:	f001 fd6e 	bl	d9b0c <__aeabi_dcmpun>
   d8030:	4683      	mov	fp, r0
   d8032:	2800      	cmp	r0, #0
   d8034:	d13f      	bne.n	d80b6 <pow+0xbe>
   d8036:	4632      	mov	r2, r6
   d8038:	463b      	mov	r3, r7
   d803a:	4630      	mov	r0, r6
   d803c:	4639      	mov	r1, r7
   d803e:	f001 fd65 	bl	d9b0c <__aeabi_dcmpun>
   d8042:	4681      	mov	r9, r0
   d8044:	2800      	cmp	r0, #0
   d8046:	f040 8090 	bne.w	d816a <pow+0x172>
   d804a:	4630      	mov	r0, r6
   d804c:	4639      	mov	r1, r7
   d804e:	2200      	movs	r2, #0
   d8050:	2300      	movs	r3, #0
   d8052:	f001 fd29 	bl	d9aa8 <__aeabi_dcmpeq>
   d8056:	2800      	cmp	r0, #0
   d8058:	d036      	beq.n	d80c8 <pow+0xd0>
   d805a:	2200      	movs	r2, #0
   d805c:	2300      	movs	r3, #0
   d805e:	4620      	mov	r0, r4
   d8060:	4629      	mov	r1, r5
   d8062:	f001 fd21 	bl	d9aa8 <__aeabi_dcmpeq>
   d8066:	4683      	mov	fp, r0
   d8068:	b1b8      	cbz	r0, d809a <pow+0xa2>
   d806a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d8300 <pow+0x308>
   d806e:	2201      	movs	r2, #1
   d8070:	4ba9      	ldr	r3, [pc, #676]	; (d8318 <pow+0x320>)
   d8072:	f8cd 9020 	str.w	r9, [sp, #32]
   d8076:	9200      	str	r2, [sp, #0]
   d8078:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d807c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8080:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	f1b8 0f00 	cmp.w	r8, #0
   d808a:	d05b      	beq.n	d8144 <pow+0x14c>
   d808c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d8308 <pow+0x310>
   d8090:	b00b      	add	sp, #44	; 0x2c
   d8092:	ecbd 8b02 	vpop	{d8}
   d8096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d809a:	ec45 4b10 	vmov	d0, r4, r5
   d809e:	f000 ffa7 	bl	d8ff0 <finite>
   d80a2:	b140      	cbz	r0, d80b6 <pow+0xbe>
   d80a4:	2200      	movs	r2, #0
   d80a6:	2300      	movs	r3, #0
   d80a8:	4620      	mov	r0, r4
   d80aa:	4629      	mov	r1, r5
   d80ac:	f001 fd06 	bl	d9abc <__aeabi_dcmplt>
   d80b0:	2800      	cmp	r0, #0
   d80b2:	f040 80c5 	bne.w	d8240 <pow+0x248>
   d80b6:	eeb0 0a48 	vmov.f32	s0, s16
   d80ba:	eef0 0a68 	vmov.f32	s1, s17
   d80be:	b00b      	add	sp, #44	; 0x2c
   d80c0:	ecbd 8b02 	vpop	{d8}
   d80c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80c8:	eeb0 0a48 	vmov.f32	s0, s16
   d80cc:	eef0 0a68 	vmov.f32	s1, s17
   d80d0:	f000 ff8e 	bl	d8ff0 <finite>
   d80d4:	4680      	mov	r8, r0
   d80d6:	2800      	cmp	r0, #0
   d80d8:	d061      	beq.n	d819e <pow+0x1a6>
   d80da:	f04f 0800 	mov.w	r8, #0
   d80de:	f04f 0900 	mov.w	r9, #0
   d80e2:	ec51 0b18 	vmov	r0, r1, d8
   d80e6:	4642      	mov	r2, r8
   d80e8:	464b      	mov	r3, r9
   d80ea:	f001 fcdd 	bl	d9aa8 <__aeabi_dcmpeq>
   d80ee:	2800      	cmp	r0, #0
   d80f0:	d0e1      	beq.n	d80b6 <pow+0xbe>
   d80f2:	ec47 6b10 	vmov	d0, r6, r7
   d80f6:	f000 ff7b 	bl	d8ff0 <finite>
   d80fa:	2800      	cmp	r0, #0
   d80fc:	d0db      	beq.n	d80b6 <pow+0xbe>
   d80fe:	ec45 4b10 	vmov	d0, r4, r5
   d8102:	f000 ff75 	bl	d8ff0 <finite>
   d8106:	2800      	cmp	r0, #0
   d8108:	d0d5      	beq.n	d80b6 <pow+0xbe>
   d810a:	f99a 3000 	ldrsb.w	r3, [sl]
   d810e:	4a82      	ldr	r2, [pc, #520]	; (d8318 <pow+0x320>)
   d8110:	9201      	str	r2, [sp, #4]
   d8112:	2104      	movs	r1, #4
   d8114:	2200      	movs	r2, #0
   d8116:	2b02      	cmp	r3, #2
   d8118:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d811c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8120:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8124:	9100      	str	r1, [sp, #0]
   d8126:	9208      	str	r2, [sp, #32]
   d8128:	d003      	beq.n	d8132 <pow+0x13a>
   d812a:	4668      	mov	r0, sp
   d812c:	f000 ff68 	bl	d9000 <matherr>
   d8130:	b970      	cbnz	r0, d8150 <pow+0x158>
   d8132:	f7fd ff43 	bl	d5fbc <__errno>
   d8136:	2322      	movs	r3, #34	; 0x22
   d8138:	6003      	str	r3, [r0, #0]
   d813a:	e009      	b.n	d8150 <pow+0x158>
   d813c:	ed9f 7b70 	vldr	d7, [pc, #448]	; d8300 <pow+0x308>
   d8140:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8144:	4668      	mov	r0, sp
   d8146:	f000 ff5b 	bl	d9000 <matherr>
   d814a:	2800      	cmp	r0, #0
   d814c:	f000 808e 	beq.w	d826c <pow+0x274>
   d8150:	9b08      	ldr	r3, [sp, #32]
   d8152:	b11b      	cbz	r3, d815c <pow+0x164>
   d8154:	f7fd ff32 	bl	d5fbc <__errno>
   d8158:	9b08      	ldr	r3, [sp, #32]
   d815a:	6003      	str	r3, [r0, #0]
   d815c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8160:	b00b      	add	sp, #44	; 0x2c
   d8162:	ecbd 8b02 	vpop	{d8}
   d8166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d816a:	2200      	movs	r2, #0
   d816c:	2300      	movs	r3, #0
   d816e:	4620      	mov	r0, r4
   d8170:	4629      	mov	r1, r5
   d8172:	f001 fc99 	bl	d9aa8 <__aeabi_dcmpeq>
   d8176:	2800      	cmp	r0, #0
   d8178:	d09d      	beq.n	d80b6 <pow+0xbe>
   d817a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d8308 <pow+0x310>
   d817e:	4b66      	ldr	r3, [pc, #408]	; (d8318 <pow+0x320>)
   d8180:	f8cd b020 	str.w	fp, [sp, #32]
   d8184:	2201      	movs	r2, #1
   d8186:	f1b8 0f02 	cmp.w	r8, #2
   d818a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d818e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8192:	ed8d 0b06 	vstr	d0, [sp, #24]
   d8196:	e88d 000c 	stmia.w	sp, {r2, r3}
   d819a:	d1d3      	bne.n	d8144 <pow+0x14c>
   d819c:	e78f      	b.n	d80be <pow+0xc6>
   d819e:	ec47 6b10 	vmov	d0, r6, r7
   d81a2:	f000 ff25 	bl	d8ff0 <finite>
   d81a6:	2800      	cmp	r0, #0
   d81a8:	d097      	beq.n	d80da <pow+0xe2>
   d81aa:	ec45 4b10 	vmov	d0, r4, r5
   d81ae:	f000 ff1f 	bl	d8ff0 <finite>
   d81b2:	2800      	cmp	r0, #0
   d81b4:	d091      	beq.n	d80da <pow+0xe2>
   d81b6:	ec53 2b18 	vmov	r2, r3, d8
   d81ba:	ee18 0a10 	vmov	r0, s16
   d81be:	4619      	mov	r1, r3
   d81c0:	f001 fca4 	bl	d9b0c <__aeabi_dcmpun>
   d81c4:	2800      	cmp	r0, #0
   d81c6:	d17c      	bne.n	d82c2 <pow+0x2ca>
   d81c8:	2303      	movs	r3, #3
   d81ca:	f99a 8000 	ldrsb.w	r8, [sl]
   d81ce:	9300      	str	r3, [sp, #0]
   d81d0:	4b51      	ldr	r3, [pc, #324]	; (d8318 <pow+0x320>)
   d81d2:	9008      	str	r0, [sp, #32]
   d81d4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d81d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	f1b8 0f00 	cmp.w	r8, #0
   d81e2:	d148      	bne.n	d8276 <pow+0x27e>
   d81e4:	f8df 9144 	ldr.w	r9, [pc, #324]	; d832c <pow+0x334>
   d81e8:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d81ec:	2200      	movs	r2, #0
   d81ee:	2300      	movs	r3, #0
   d81f0:	4630      	mov	r0, r6
   d81f2:	4639      	mov	r1, r7
   d81f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d81f8:	f001 fc60 	bl	d9abc <__aeabi_dcmplt>
   d81fc:	2800      	cmp	r0, #0
   d81fe:	d094      	beq.n	d812a <pow+0x132>
   d8200:	2200      	movs	r2, #0
   d8202:	4b46      	ldr	r3, [pc, #280]	; (d831c <pow+0x324>)
   d8204:	4620      	mov	r0, r4
   d8206:	4629      	mov	r1, r5
   d8208:	f001 f9e6 	bl	d95d8 <__aeabi_dmul>
   d820c:	4604      	mov	r4, r0
   d820e:	460d      	mov	r5, r1
   d8210:	ec45 4b10 	vmov	d0, r4, r5
   d8214:	f000 ff00 	bl	d9018 <rint>
   d8218:	4620      	mov	r0, r4
   d821a:	ec53 2b10 	vmov	r2, r3, d0
   d821e:	4629      	mov	r1, r5
   d8220:	f001 fc42 	bl	d9aa8 <__aeabi_dcmpeq>
   d8224:	2800      	cmp	r0, #0
   d8226:	d149      	bne.n	d82bc <pow+0x2c4>
   d8228:	4b3d      	ldr	r3, [pc, #244]	; (d8320 <pow+0x328>)
   d822a:	f99a 8000 	ldrsb.w	r8, [sl]
   d822e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8232:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d8236:	f1b8 0f02 	cmp.w	r8, #2
   d823a:	f47f af76 	bne.w	d812a <pow+0x132>
   d823e:	e778      	b.n	d8132 <pow+0x13a>
   d8240:	4a35      	ldr	r2, [pc, #212]	; (d8318 <pow+0x320>)
   d8242:	f99a 3000 	ldrsb.w	r3, [sl]
   d8246:	f8cd b020 	str.w	fp, [sp, #32]
   d824a:	2101      	movs	r1, #1
   d824c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8250:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8254:	e88d 0006 	stmia.w	sp, {r1, r2}
   d8258:	2b00      	cmp	r3, #0
   d825a:	f43f af6f 	beq.w	d813c <pow+0x144>
   d825e:	4931      	ldr	r1, [pc, #196]	; (d8324 <pow+0x32c>)
   d8260:	2000      	movs	r0, #0
   d8262:	2b02      	cmp	r3, #2
   d8264:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8268:	f47f af6c 	bne.w	d8144 <pow+0x14c>
   d826c:	f7fd fea6 	bl	d5fbc <__errno>
   d8270:	2321      	movs	r3, #33	; 0x21
   d8272:	6003      	str	r3, [r0, #0]
   d8274:	e76c      	b.n	d8150 <pow+0x158>
   d8276:	ed9f 7b26 	vldr	d7, [pc, #152]	; d8310 <pow+0x318>
   d827a:	2200      	movs	r2, #0
   d827c:	2300      	movs	r3, #0
   d827e:	4630      	mov	r0, r6
   d8280:	4639      	mov	r1, r7
   d8282:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8286:	f001 fc19 	bl	d9abc <__aeabi_dcmplt>
   d828a:	2800      	cmp	r0, #0
   d828c:	d0d3      	beq.n	d8236 <pow+0x23e>
   d828e:	2200      	movs	r2, #0
   d8290:	4b22      	ldr	r3, [pc, #136]	; (d831c <pow+0x324>)
   d8292:	4620      	mov	r0, r4
   d8294:	4629      	mov	r1, r5
   d8296:	f001 f99f 	bl	d95d8 <__aeabi_dmul>
   d829a:	4604      	mov	r4, r0
   d829c:	460d      	mov	r5, r1
   d829e:	ec45 4b10 	vmov	d0, r4, r5
   d82a2:	f000 feb9 	bl	d9018 <rint>
   d82a6:	4620      	mov	r0, r4
   d82a8:	ec53 2b10 	vmov	r2, r3, d0
   d82ac:	4629      	mov	r1, r5
   d82ae:	f001 fbfb 	bl	d9aa8 <__aeabi_dcmpeq>
   d82b2:	b918      	cbnz	r0, d82bc <pow+0x2c4>
   d82b4:	4b1b      	ldr	r3, [pc, #108]	; (d8324 <pow+0x32c>)
   d82b6:	2200      	movs	r2, #0
   d82b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d82bc:	f99a 8000 	ldrsb.w	r8, [sl]
   d82c0:	e7b9      	b.n	d8236 <pow+0x23e>
   d82c2:	4b15      	ldr	r3, [pc, #84]	; (d8318 <pow+0x320>)
   d82c4:	f99a 9000 	ldrsb.w	r9, [sl]
   d82c8:	f8cd 8020 	str.w	r8, [sp, #32]
   d82cc:	2201      	movs	r2, #1
   d82ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d82d2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d82d6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d82da:	f1b9 0f00 	cmp.w	r9, #0
   d82de:	f43f af2d 	beq.w	d813c <pow+0x144>
   d82e2:	2200      	movs	r2, #0
   d82e4:	2300      	movs	r3, #0
   d82e6:	4610      	mov	r0, r2
   d82e8:	4619      	mov	r1, r3
   d82ea:	f001 fa9f 	bl	d982c <__aeabi_ddiv>
   d82ee:	f1b9 0f02 	cmp.w	r9, #2
   d82f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d82f6:	d0b9      	beq.n	d826c <pow+0x274>
   d82f8:	e724      	b.n	d8144 <pow+0x14c>
   d82fa:	bf00      	nop
   d82fc:	f3af 8000 	nop.w
	...
   d830c:	3ff00000 	.word	0x3ff00000
   d8310:	00000000 	.word	0x00000000
   d8314:	7ff00000 	.word	0x7ff00000
   d8318:	000dbdf4 	.word	0x000dbdf4
   d831c:	3fe00000 	.word	0x3fe00000
   d8320:	c7efffff 	.word	0xc7efffff
   d8324:	fff00000 	.word	0xfff00000
   d8328:	2003d49c 	.word	0x2003d49c
   d832c:	47efffff 	.word	0x47efffff

000d8330 <__ieee754_pow>:
   d8330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8334:	ec51 0b11 	vmov	r0, r1, d1
   d8338:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d833c:	ea58 0400 	orrs.w	r4, r8, r0
   d8340:	b093      	sub	sp, #76	; 0x4c
   d8342:	d03c      	beq.n	d83be <__ieee754_pow+0x8e>
   d8344:	ec53 2b10 	vmov	r2, r3, d0
   d8348:	4e6d      	ldr	r6, [pc, #436]	; (d8500 <__ieee754_pow+0x1d0>)
   d834a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d834e:	42b4      	cmp	r4, r6
   d8350:	ee10 aa10 	vmov	sl, s0
   d8354:	461d      	mov	r5, r3
   d8356:	dc2b      	bgt.n	d83b0 <__ieee754_pow+0x80>
   d8358:	4689      	mov	r9, r1
   d835a:	ee11 ea10 	vmov	lr, s2
   d835e:	d026      	beq.n	d83ae <__ieee754_pow+0x7e>
   d8360:	45b0      	cmp	r8, r6
   d8362:	dc25      	bgt.n	d83b0 <__ieee754_pow+0x80>
   d8364:	4e66      	ldr	r6, [pc, #408]	; (d8500 <__ieee754_pow+0x1d0>)
   d8366:	45b0      	cmp	r8, r6
   d8368:	d077      	beq.n	d845a <__ieee754_pow+0x12a>
   d836a:	2d00      	cmp	r5, #0
   d836c:	4616      	mov	r6, r2
   d836e:	461f      	mov	r7, r3
   d8370:	e9cd 0100 	strd	r0, r1, [sp]
   d8374:	db75      	blt.n	d8462 <__ieee754_pow+0x132>
   d8376:	f04f 0b00 	mov.w	fp, #0
   d837a:	f1be 0f00 	cmp.w	lr, #0
   d837e:	d12d      	bne.n	d83dc <__ieee754_pow+0xac>
   d8380:	4b5f      	ldr	r3, [pc, #380]	; (d8500 <__ieee754_pow+0x1d0>)
   d8382:	4598      	cmp	r8, r3
   d8384:	f000 8089 	beq.w	d849a <__ieee754_pow+0x16a>
   d8388:	4b5e      	ldr	r3, [pc, #376]	; (d8504 <__ieee754_pow+0x1d4>)
   d838a:	4598      	cmp	r8, r3
   d838c:	d05e      	beq.n	d844c <__ieee754_pow+0x11c>
   d838e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d8392:	f000 83de 	beq.w	d8b52 <__ieee754_pow+0x822>
   d8396:	4b5c      	ldr	r3, [pc, #368]	; (d8508 <__ieee754_pow+0x1d8>)
   d8398:	4599      	cmp	r9, r3
   d839a:	d11f      	bne.n	d83dc <__ieee754_pow+0xac>
   d839c:	2d00      	cmp	r5, #0
   d839e:	db1d      	blt.n	d83dc <__ieee754_pow+0xac>
   d83a0:	ec47 6b10 	vmov	d0, r6, r7
   d83a4:	b013      	add	sp, #76	; 0x4c
   d83a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83aa:	f000 bd49 	b.w	d8e40 <__ieee754_sqrt>
   d83ae:	b15a      	cbz	r2, d83c8 <__ieee754_pow+0x98>
   d83b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d83b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d83b8:	ea54 030a 	orrs.w	r3, r4, sl
   d83bc:	d106      	bne.n	d83cc <__ieee754_pow+0x9c>
   d83be:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d84e8 <__ieee754_pow+0x1b8>
   d83c2:	b013      	add	sp, #76	; 0x4c
   d83c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d83c8:	45a0      	cmp	r8, r4
   d83ca:	ddcb      	ble.n	d8364 <__ieee754_pow+0x34>
   d83cc:	484f      	ldr	r0, [pc, #316]	; (d850c <__ieee754_pow+0x1dc>)
   d83ce:	b013      	add	sp, #76	; 0x4c
   d83d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83d4:	f000 be18 	b.w	d9008 <nan>
   d83d8:	f04f 0b00 	mov.w	fp, #0
   d83dc:	ec47 6b10 	vmov	d0, r6, r7
   d83e0:	f000 fdfe 	bl	d8fe0 <fabs>
   d83e4:	ec51 0b10 	vmov	r0, r1, d0
   d83e8:	f1ba 0f00 	cmp.w	sl, #0
   d83ec:	d01e      	beq.n	d842c <__ieee754_pow+0xfc>
   d83ee:	0fed      	lsrs	r5, r5, #31
   d83f0:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d83f4:	ea5b 030a 	orrs.w	r3, fp, sl
   d83f8:	d063      	beq.n	d84c2 <__ieee754_pow+0x192>
   d83fa:	4b45      	ldr	r3, [pc, #276]	; (d8510 <__ieee754_pow+0x1e0>)
   d83fc:	4598      	cmp	r8, r3
   d83fe:	f340 808d 	ble.w	d851c <__ieee754_pow+0x1ec>
   d8402:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8406:	4598      	cmp	r8, r3
   d8408:	f340 8438 	ble.w	d8c7c <__ieee754_pow+0x94c>
   d840c:	4b41      	ldr	r3, [pc, #260]	; (d8514 <__ieee754_pow+0x1e4>)
   d840e:	429c      	cmp	r4, r3
   d8410:	dd62      	ble.n	d84d8 <__ieee754_pow+0x1a8>
   d8412:	f1b9 0f00 	cmp.w	r9, #0
   d8416:	dd62      	ble.n	d84de <__ieee754_pow+0x1ae>
   d8418:	a335      	add	r3, pc, #212	; (adr r3, d84f0 <__ieee754_pow+0x1c0>)
   d841a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d841e:	4610      	mov	r0, r2
   d8420:	4619      	mov	r1, r3
   d8422:	f001 f8d9 	bl	d95d8 <__aeabi_dmul>
   d8426:	ec41 0b10 	vmov	d0, r0, r1
   d842a:	e7ca      	b.n	d83c2 <__ieee754_pow+0x92>
   d842c:	b124      	cbz	r4, d8438 <__ieee754_pow+0x108>
   d842e:	4b35      	ldr	r3, [pc, #212]	; (d8504 <__ieee754_pow+0x1d4>)
   d8430:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d8434:	429a      	cmp	r2, r3
   d8436:	d1da      	bne.n	d83ee <__ieee754_pow+0xbe>
   d8438:	f1b9 0f00 	cmp.w	r9, #0
   d843c:	f2c0 83cb 	blt.w	d8bd6 <__ieee754_pow+0x8a6>
   d8440:	2d00      	cmp	r5, #0
   d8442:	f2c0 8374 	blt.w	d8b2e <__ieee754_pow+0x7fe>
   d8446:	ec41 0b10 	vmov	d0, r0, r1
   d844a:	e7ba      	b.n	d83c2 <__ieee754_pow+0x92>
   d844c:	f1b9 0f00 	cmp.w	r9, #0
   d8450:	f2c0 847a 	blt.w	d8d48 <__ieee754_pow+0xa18>
   d8454:	ec47 6b10 	vmov	d0, r6, r7
   d8458:	e7b3      	b.n	d83c2 <__ieee754_pow+0x92>
   d845a:	f1be 0f00 	cmp.w	lr, #0
   d845e:	d084      	beq.n	d836a <__ieee754_pow+0x3a>
   d8460:	e7a6      	b.n	d83b0 <__ieee754_pow+0x80>
   d8462:	4b2d      	ldr	r3, [pc, #180]	; (d8518 <__ieee754_pow+0x1e8>)
   d8464:	4598      	cmp	r8, r3
   d8466:	dc29      	bgt.n	d84bc <__ieee754_pow+0x18c>
   d8468:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d846c:	4598      	cmp	r8, r3
   d846e:	dd82      	ble.n	d8376 <__ieee754_pow+0x46>
   d8470:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8474:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8478:	2b14      	cmp	r3, #20
   d847a:	f340 847f 	ble.w	d8d7c <__ieee754_pow+0xa4c>
   d847e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d8482:	fa2e f203 	lsr.w	r2, lr, r3
   d8486:	fa02 f303 	lsl.w	r3, r2, r3
   d848a:	459e      	cmp	lr, r3
   d848c:	f47f af73 	bne.w	d8376 <__ieee754_pow+0x46>
   d8490:	f002 0201 	and.w	r2, r2, #1
   d8494:	f1c2 0b02 	rsb	fp, r2, #2
   d8498:	e76f      	b.n	d837a <__ieee754_pow+0x4a>
   d849a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d849e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d84a2:	ea53 030a 	orrs.w	r3, r3, sl
   d84a6:	d08a      	beq.n	d83be <__ieee754_pow+0x8e>
   d84a8:	4b1a      	ldr	r3, [pc, #104]	; (d8514 <__ieee754_pow+0x1e4>)
   d84aa:	429c      	cmp	r4, r3
   d84ac:	f340 8385 	ble.w	d8bba <__ieee754_pow+0x88a>
   d84b0:	f1b9 0f00 	cmp.w	r9, #0
   d84b4:	db13      	blt.n	d84de <__ieee754_pow+0x1ae>
   d84b6:	ed9d 0b00 	vldr	d0, [sp]
   d84ba:	e782      	b.n	d83c2 <__ieee754_pow+0x92>
   d84bc:	f04f 0b02 	mov.w	fp, #2
   d84c0:	e75b      	b.n	d837a <__ieee754_pow+0x4a>
   d84c2:	4632      	mov	r2, r6
   d84c4:	463b      	mov	r3, r7
   d84c6:	4610      	mov	r0, r2
   d84c8:	4619      	mov	r1, r3
   d84ca:	f000 fed1 	bl	d9270 <__aeabi_dsub>
   d84ce:	4602      	mov	r2, r0
   d84d0:	460b      	mov	r3, r1
   d84d2:	f001 f9ab 	bl	d982c <__aeabi_ddiv>
   d84d6:	e7b6      	b.n	d8446 <__ieee754_pow+0x116>
   d84d8:	f1b9 0f00 	cmp.w	r9, #0
   d84dc:	db9c      	blt.n	d8418 <__ieee754_pow+0xe8>
   d84de:	ed9f 0b06 	vldr	d0, [pc, #24]	; d84f8 <__ieee754_pow+0x1c8>
   d84e2:	e76e      	b.n	d83c2 <__ieee754_pow+0x92>
   d84e4:	f3af 8000 	nop.w
   d84e8:	00000000 	.word	0x00000000
   d84ec:	3ff00000 	.word	0x3ff00000
   d84f0:	8800759c 	.word	0x8800759c
   d84f4:	7e37e43c 	.word	0x7e37e43c
	...
   d8500:	7ff00000 	.word	0x7ff00000
   d8504:	3ff00000 	.word	0x3ff00000
   d8508:	3fe00000 	.word	0x3fe00000
   d850c:	000dbdf8 	.word	0x000dbdf8
   d8510:	41e00000 	.word	0x41e00000
   d8514:	3fefffff 	.word	0x3fefffff
   d8518:	433fffff 	.word	0x433fffff
   d851c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d8520:	f04f 0200 	mov.w	r2, #0
   d8524:	da05      	bge.n	d8532 <__ieee754_pow+0x202>
   d8526:	4bd6      	ldr	r3, [pc, #856]	; (d8880 <__ieee754_pow+0x550>)
   d8528:	f001 f856 	bl	d95d8 <__aeabi_dmul>
   d852c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d8530:	460c      	mov	r4, r1
   d8532:	1523      	asrs	r3, r4, #20
   d8534:	4ed3      	ldr	r6, [pc, #844]	; (d8884 <__ieee754_pow+0x554>)
   d8536:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d853a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d853e:	4413      	add	r3, r2
   d8540:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d8544:	42b4      	cmp	r4, r6
   d8546:	461a      	mov	r2, r3
   d8548:	930d      	str	r3, [sp, #52]	; 0x34
   d854a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d854e:	f340 8349 	ble.w	d8be4 <__ieee754_pow+0x8b4>
   d8552:	4bcd      	ldr	r3, [pc, #820]	; (d8888 <__ieee754_pow+0x558>)
   d8554:	429c      	cmp	r4, r3
   d8556:	f340 842d 	ble.w	d8db4 <__ieee754_pow+0xa84>
   d855a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d8828 <__ieee754_pow+0x4f8>
   d855e:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8562:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8566:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d8830 <__ieee754_pow+0x500>
   d856a:	4613      	mov	r3, r2
   d856c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8570:	3301      	adds	r3, #1
   d8572:	930d      	str	r3, [sp, #52]	; 0x34
   d8574:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d8578:	f04f 0800 	mov.w	r8, #0
   d857c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8580:	4629      	mov	r1, r5
   d8582:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8586:	f000 fe73 	bl	d9270 <__aeabi_dsub>
   d858a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d858e:	4606      	mov	r6, r0
   d8590:	460f      	mov	r7, r1
   d8592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8596:	f000 fe6d 	bl	d9274 <__adddf3>
   d859a:	4602      	mov	r2, r0
   d859c:	460b      	mov	r3, r1
   d859e:	2000      	movs	r0, #0
   d85a0:	49ba      	ldr	r1, [pc, #744]	; (d888c <__ieee754_pow+0x55c>)
   d85a2:	f001 f943 	bl	d982c <__aeabi_ddiv>
   d85a6:	4603      	mov	r3, r0
   d85a8:	460c      	mov	r4, r1
   d85aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d85ae:	4602      	mov	r2, r0
   d85b0:	460b      	mov	r3, r1
   d85b2:	4630      	mov	r0, r6
   d85b4:	4639      	mov	r1, r7
   d85b6:	f001 f80f 	bl	d95d8 <__aeabi_dmul>
   d85ba:	106b      	asrs	r3, r5, #1
   d85bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d85c0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d85c4:	eb03 0508 	add.w	r5, r3, r8
   d85c8:	460a      	mov	r2, r1
   d85ca:	2300      	movs	r3, #0
   d85cc:	4601      	mov	r1, r0
   d85ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d85d2:	9302      	str	r3, [sp, #8]
   d85d4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d85d8:	2400      	movs	r4, #0
   d85da:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d85de:	462b      	mov	r3, r5
   d85e0:	4622      	mov	r2, r4
   d85e2:	4640      	mov	r0, r8
   d85e4:	4649      	mov	r1, r9
   d85e6:	f000 fff7 	bl	d95d8 <__aeabi_dmul>
   d85ea:	4602      	mov	r2, r0
   d85ec:	460b      	mov	r3, r1
   d85ee:	4630      	mov	r0, r6
   d85f0:	4639      	mov	r1, r7
   d85f2:	f000 fe3d 	bl	d9270 <__aeabi_dsub>
   d85f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d85fa:	4606      	mov	r6, r0
   d85fc:	460f      	mov	r7, r1
   d85fe:	4620      	mov	r0, r4
   d8600:	4629      	mov	r1, r5
   d8602:	f000 fe35 	bl	d9270 <__aeabi_dsub>
   d8606:	4602      	mov	r2, r0
   d8608:	460b      	mov	r3, r1
   d860a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d860e:	f000 fe2f 	bl	d9270 <__aeabi_dsub>
   d8612:	4642      	mov	r2, r8
   d8614:	464b      	mov	r3, r9
   d8616:	f000 ffdf 	bl	d95d8 <__aeabi_dmul>
   d861a:	4602      	mov	r2, r0
   d861c:	460b      	mov	r3, r1
   d861e:	4630      	mov	r0, r6
   d8620:	4639      	mov	r1, r7
   d8622:	f000 fe25 	bl	d9270 <__aeabi_dsub>
   d8626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d862a:	f000 ffd5 	bl	d95d8 <__aeabi_dmul>
   d862e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d8632:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8636:	4622      	mov	r2, r4
   d8638:	462b      	mov	r3, r5
   d863a:	4620      	mov	r0, r4
   d863c:	4629      	mov	r1, r5
   d863e:	f000 ffcb 	bl	d95d8 <__aeabi_dmul>
   d8642:	a37d      	add	r3, pc, #500	; (adr r3, d8838 <__ieee754_pow+0x508>)
   d8644:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8648:	4604      	mov	r4, r0
   d864a:	460d      	mov	r5, r1
   d864c:	f000 ffc4 	bl	d95d8 <__aeabi_dmul>
   d8650:	a37b      	add	r3, pc, #492	; (adr r3, d8840 <__ieee754_pow+0x510>)
   d8652:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8656:	f000 fe0d 	bl	d9274 <__adddf3>
   d865a:	4622      	mov	r2, r4
   d865c:	462b      	mov	r3, r5
   d865e:	f000 ffbb 	bl	d95d8 <__aeabi_dmul>
   d8662:	a379      	add	r3, pc, #484	; (adr r3, d8848 <__ieee754_pow+0x518>)
   d8664:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8668:	f000 fe04 	bl	d9274 <__adddf3>
   d866c:	4622      	mov	r2, r4
   d866e:	462b      	mov	r3, r5
   d8670:	f000 ffb2 	bl	d95d8 <__aeabi_dmul>
   d8674:	a376      	add	r3, pc, #472	; (adr r3, d8850 <__ieee754_pow+0x520>)
   d8676:	e9d3 2300 	ldrd	r2, r3, [r3]
   d867a:	f000 fdfb 	bl	d9274 <__adddf3>
   d867e:	4622      	mov	r2, r4
   d8680:	462b      	mov	r3, r5
   d8682:	f000 ffa9 	bl	d95d8 <__aeabi_dmul>
   d8686:	a374      	add	r3, pc, #464	; (adr r3, d8858 <__ieee754_pow+0x528>)
   d8688:	e9d3 2300 	ldrd	r2, r3, [r3]
   d868c:	f000 fdf2 	bl	d9274 <__adddf3>
   d8690:	4622      	mov	r2, r4
   d8692:	462b      	mov	r3, r5
   d8694:	f000 ffa0 	bl	d95d8 <__aeabi_dmul>
   d8698:	a371      	add	r3, pc, #452	; (adr r3, d8860 <__ieee754_pow+0x530>)
   d869a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d869e:	f000 fde9 	bl	d9274 <__adddf3>
   d86a2:	4622      	mov	r2, r4
   d86a4:	4606      	mov	r6, r0
   d86a6:	460f      	mov	r7, r1
   d86a8:	462b      	mov	r3, r5
   d86aa:	4620      	mov	r0, r4
   d86ac:	4629      	mov	r1, r5
   d86ae:	f000 ff93 	bl	d95d8 <__aeabi_dmul>
   d86b2:	4602      	mov	r2, r0
   d86b4:	460b      	mov	r3, r1
   d86b6:	4630      	mov	r0, r6
   d86b8:	4639      	mov	r1, r7
   d86ba:	f000 ff8d 	bl	d95d8 <__aeabi_dmul>
   d86be:	4642      	mov	r2, r8
   d86c0:	4604      	mov	r4, r0
   d86c2:	460d      	mov	r5, r1
   d86c4:	464b      	mov	r3, r9
   d86c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d86ca:	f000 fdd3 	bl	d9274 <__adddf3>
   d86ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d86d2:	f000 ff81 	bl	d95d8 <__aeabi_dmul>
   d86d6:	4622      	mov	r2, r4
   d86d8:	462b      	mov	r3, r5
   d86da:	f000 fdcb 	bl	d9274 <__adddf3>
   d86de:	4642      	mov	r2, r8
   d86e0:	4606      	mov	r6, r0
   d86e2:	460f      	mov	r7, r1
   d86e4:	464b      	mov	r3, r9
   d86e6:	4640      	mov	r0, r8
   d86e8:	4649      	mov	r1, r9
   d86ea:	f000 ff75 	bl	d95d8 <__aeabi_dmul>
   d86ee:	2200      	movs	r2, #0
   d86f0:	4b67      	ldr	r3, [pc, #412]	; (d8890 <__ieee754_pow+0x560>)
   d86f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d86f6:	f000 fdbd 	bl	d9274 <__adddf3>
   d86fa:	4632      	mov	r2, r6
   d86fc:	463b      	mov	r3, r7
   d86fe:	f000 fdb9 	bl	d9274 <__adddf3>
   d8702:	9802      	ldr	r0, [sp, #8]
   d8704:	460d      	mov	r5, r1
   d8706:	4604      	mov	r4, r0
   d8708:	4622      	mov	r2, r4
   d870a:	462b      	mov	r3, r5
   d870c:	4640      	mov	r0, r8
   d870e:	4649      	mov	r1, r9
   d8710:	f000 ff62 	bl	d95d8 <__aeabi_dmul>
   d8714:	2200      	movs	r2, #0
   d8716:	4680      	mov	r8, r0
   d8718:	4689      	mov	r9, r1
   d871a:	4b5d      	ldr	r3, [pc, #372]	; (d8890 <__ieee754_pow+0x560>)
   d871c:	4620      	mov	r0, r4
   d871e:	4629      	mov	r1, r5
   d8720:	f000 fda6 	bl	d9270 <__aeabi_dsub>
   d8724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8728:	f000 fda2 	bl	d9270 <__aeabi_dsub>
   d872c:	4602      	mov	r2, r0
   d872e:	460b      	mov	r3, r1
   d8730:	4630      	mov	r0, r6
   d8732:	4639      	mov	r1, r7
   d8734:	f000 fd9c 	bl	d9270 <__aeabi_dsub>
   d8738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d873c:	f000 ff4c 	bl	d95d8 <__aeabi_dmul>
   d8740:	4622      	mov	r2, r4
   d8742:	4606      	mov	r6, r0
   d8744:	460f      	mov	r7, r1
   d8746:	462b      	mov	r3, r5
   d8748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d874c:	f000 ff44 	bl	d95d8 <__aeabi_dmul>
   d8750:	4602      	mov	r2, r0
   d8752:	460b      	mov	r3, r1
   d8754:	4630      	mov	r0, r6
   d8756:	4639      	mov	r1, r7
   d8758:	f000 fd8c 	bl	d9274 <__adddf3>
   d875c:	4606      	mov	r6, r0
   d875e:	460f      	mov	r7, r1
   d8760:	4602      	mov	r2, r0
   d8762:	460b      	mov	r3, r1
   d8764:	4640      	mov	r0, r8
   d8766:	4649      	mov	r1, r9
   d8768:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d876c:	f000 fd82 	bl	d9274 <__adddf3>
   d8770:	9802      	ldr	r0, [sp, #8]
   d8772:	a33d      	add	r3, pc, #244	; (adr r3, d8868 <__ieee754_pow+0x538>)
   d8774:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8778:	4604      	mov	r4, r0
   d877a:	460d      	mov	r5, r1
   d877c:	f000 ff2c 	bl	d95d8 <__aeabi_dmul>
   d8780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8784:	4680      	mov	r8, r0
   d8786:	4689      	mov	r9, r1
   d8788:	4620      	mov	r0, r4
   d878a:	4629      	mov	r1, r5
   d878c:	f000 fd70 	bl	d9270 <__aeabi_dsub>
   d8790:	4602      	mov	r2, r0
   d8792:	460b      	mov	r3, r1
   d8794:	4630      	mov	r0, r6
   d8796:	4639      	mov	r1, r7
   d8798:	f000 fd6a 	bl	d9270 <__aeabi_dsub>
   d879c:	a334      	add	r3, pc, #208	; (adr r3, d8870 <__ieee754_pow+0x540>)
   d879e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87a2:	f000 ff19 	bl	d95d8 <__aeabi_dmul>
   d87a6:	a334      	add	r3, pc, #208	; (adr r3, d8878 <__ieee754_pow+0x548>)
   d87a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87ac:	4606      	mov	r6, r0
   d87ae:	460f      	mov	r7, r1
   d87b0:	4620      	mov	r0, r4
   d87b2:	4629      	mov	r1, r5
   d87b4:	f000 ff10 	bl	d95d8 <__aeabi_dmul>
   d87b8:	4602      	mov	r2, r0
   d87ba:	460b      	mov	r3, r1
   d87bc:	4630      	mov	r0, r6
   d87be:	4639      	mov	r1, r7
   d87c0:	f000 fd58 	bl	d9274 <__adddf3>
   d87c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d87c8:	f000 fd54 	bl	d9274 <__adddf3>
   d87cc:	4606      	mov	r6, r0
   d87ce:	980d      	ldr	r0, [sp, #52]	; 0x34
   d87d0:	460f      	mov	r7, r1
   d87d2:	f000 fe9b 	bl	d950c <__aeabi_i2d>
   d87d6:	4632      	mov	r2, r6
   d87d8:	4604      	mov	r4, r0
   d87da:	460d      	mov	r5, r1
   d87dc:	463b      	mov	r3, r7
   d87de:	4640      	mov	r0, r8
   d87e0:	4649      	mov	r1, r9
   d87e2:	f000 fd47 	bl	d9274 <__adddf3>
   d87e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d87ea:	f000 fd43 	bl	d9274 <__adddf3>
   d87ee:	4622      	mov	r2, r4
   d87f0:	462b      	mov	r3, r5
   d87f2:	f000 fd3f 	bl	d9274 <__adddf3>
   d87f6:	9802      	ldr	r0, [sp, #8]
   d87f8:	4622      	mov	r2, r4
   d87fa:	462b      	mov	r3, r5
   d87fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8800:	f000 fd36 	bl	d9270 <__aeabi_dsub>
   d8804:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8808:	f000 fd32 	bl	d9270 <__aeabi_dsub>
   d880c:	4642      	mov	r2, r8
   d880e:	464b      	mov	r3, r9
   d8810:	f000 fd2e 	bl	d9270 <__aeabi_dsub>
   d8814:	4602      	mov	r2, r0
   d8816:	460b      	mov	r3, r1
   d8818:	4630      	mov	r0, r6
   d881a:	4639      	mov	r1, r7
   d881c:	f000 fd28 	bl	d9270 <__aeabi_dsub>
   d8820:	4680      	mov	r8, r0
   d8822:	4689      	mov	r9, r1
   d8824:	e036      	b.n	d8894 <__ieee754_pow+0x564>
   d8826:	bf00      	nop
	...
   d8834:	3ff00000 	.word	0x3ff00000
   d8838:	4a454eef 	.word	0x4a454eef
   d883c:	3fca7e28 	.word	0x3fca7e28
   d8840:	93c9db65 	.word	0x93c9db65
   d8844:	3fcd864a 	.word	0x3fcd864a
   d8848:	a91d4101 	.word	0xa91d4101
   d884c:	3fd17460 	.word	0x3fd17460
   d8850:	518f264d 	.word	0x518f264d
   d8854:	3fd55555 	.word	0x3fd55555
   d8858:	db6fabff 	.word	0xdb6fabff
   d885c:	3fdb6db6 	.word	0x3fdb6db6
   d8860:	33333303 	.word	0x33333303
   d8864:	3fe33333 	.word	0x3fe33333
   d8868:	e0000000 	.word	0xe0000000
   d886c:	3feec709 	.word	0x3feec709
   d8870:	dc3a03fd 	.word	0xdc3a03fd
   d8874:	3feec709 	.word	0x3feec709
   d8878:	145b01f5 	.word	0x145b01f5
   d887c:	be3e2fe0 	.word	0xbe3e2fe0
   d8880:	43400000 	.word	0x43400000
   d8884:	0003988e 	.word	0x0003988e
   d8888:	000bb679 	.word	0x000bb679
   d888c:	3ff00000 	.word	0x3ff00000
   d8890:	40080000 	.word	0x40080000
   d8894:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d8898:	ea53 030a 	orrs.w	r3, r3, sl
   d889c:	f000 8188 	beq.w	d8bb0 <__ieee754_pow+0x880>
   d88a0:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d8c00 <__ieee754_pow+0x8d0>
   d88a4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d88a8:	e9dd ab00 	ldrd	sl, fp, [sp]
   d88ac:	4653      	mov	r3, sl
   d88ae:	465c      	mov	r4, fp
   d88b0:	e9cd 3400 	strd	r3, r4, [sp]
   d88b4:	2300      	movs	r3, #0
   d88b6:	9300      	str	r3, [sp, #0]
   d88b8:	e9dd 4500 	ldrd	r4, r5, [sp]
   d88bc:	4650      	mov	r0, sl
   d88be:	4622      	mov	r2, r4
   d88c0:	462b      	mov	r3, r5
   d88c2:	4659      	mov	r1, fp
   d88c4:	f000 fcd4 	bl	d9270 <__aeabi_dsub>
   d88c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d88cc:	f000 fe84 	bl	d95d8 <__aeabi_dmul>
   d88d0:	4652      	mov	r2, sl
   d88d2:	4606      	mov	r6, r0
   d88d4:	460f      	mov	r7, r1
   d88d6:	465b      	mov	r3, fp
   d88d8:	4640      	mov	r0, r8
   d88da:	4649      	mov	r1, r9
   d88dc:	f000 fe7c 	bl	d95d8 <__aeabi_dmul>
   d88e0:	4602      	mov	r2, r0
   d88e2:	460b      	mov	r3, r1
   d88e4:	4630      	mov	r0, r6
   d88e6:	4639      	mov	r1, r7
   d88e8:	f000 fcc4 	bl	d9274 <__adddf3>
   d88ec:	4622      	mov	r2, r4
   d88ee:	4680      	mov	r8, r0
   d88f0:	4689      	mov	r9, r1
   d88f2:	462b      	mov	r3, r5
   d88f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d88f8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d88fc:	f000 fe6c 	bl	d95d8 <__aeabi_dmul>
   d8900:	460b      	mov	r3, r1
   d8902:	4602      	mov	r2, r0
   d8904:	4606      	mov	r6, r0
   d8906:	460f      	mov	r7, r1
   d8908:	4640      	mov	r0, r8
   d890a:	4649      	mov	r1, r9
   d890c:	f000 fcb2 	bl	d9274 <__adddf3>
   d8910:	4bd5      	ldr	r3, [pc, #852]	; (d8c68 <__ieee754_pow+0x938>)
   d8912:	4299      	cmp	r1, r3
   d8914:	4604      	mov	r4, r0
   d8916:	460d      	mov	r5, r1
   d8918:	468a      	mov	sl, r1
   d891a:	f340 8123 	ble.w	d8b64 <__ieee754_pow+0x834>
   d891e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d8922:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d8926:	4303      	orrs	r3, r0
   d8928:	f040 8218 	bne.w	d8d5c <__ieee754_pow+0xa2c>
   d892c:	a3b6      	add	r3, pc, #728	; (adr r3, d8c08 <__ieee754_pow+0x8d8>)
   d892e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8936:	f000 fc9d 	bl	d9274 <__adddf3>
   d893a:	4632      	mov	r2, r6
   d893c:	4680      	mov	r8, r0
   d893e:	4689      	mov	r9, r1
   d8940:	463b      	mov	r3, r7
   d8942:	4620      	mov	r0, r4
   d8944:	4629      	mov	r1, r5
   d8946:	f000 fc93 	bl	d9270 <__aeabi_dsub>
   d894a:	4602      	mov	r2, r0
   d894c:	460b      	mov	r3, r1
   d894e:	4640      	mov	r0, r8
   d8950:	4649      	mov	r1, r9
   d8952:	f001 f8d1 	bl	d9af8 <__aeabi_dcmpgt>
   d8956:	2800      	cmp	r0, #0
   d8958:	f040 8200 	bne.w	d8d5c <__ieee754_pow+0xa2c>
   d895c:	46a8      	mov	r8, r5
   d895e:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8962:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8966:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d896a:	fa42 f303 	asr.w	r3, r2, r3
   d896e:	4453      	add	r3, sl
   d8970:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8974:	4dbd      	ldr	r5, [pc, #756]	; (d8c6c <__ieee754_pow+0x93c>)
   d8976:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d897a:	4115      	asrs	r5, r2
   d897c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8980:	2000      	movs	r0, #0
   d8982:	f1c2 0414 	rsb	r4, r2, #20
   d8986:	ea23 0105 	bic.w	r1, r3, r5
   d898a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d898e:	f1ba 0f00 	cmp.w	sl, #0
   d8992:	4602      	mov	r2, r0
   d8994:	460b      	mov	r3, r1
   d8996:	fa4b fb04 	asr.w	fp, fp, r4
   d899a:	4630      	mov	r0, r6
   d899c:	4639      	mov	r1, r7
   d899e:	bfb8      	it	lt
   d89a0:	f1cb 0b00 	rsblt	fp, fp, #0
   d89a4:	f000 fc64 	bl	d9270 <__aeabi_dsub>
   d89a8:	4602      	mov	r2, r0
   d89aa:	460b      	mov	r3, r1
   d89ac:	4606      	mov	r6, r0
   d89ae:	460f      	mov	r7, r1
   d89b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d89b4:	f000 fc5e 	bl	d9274 <__adddf3>
   d89b8:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d89bc:	2400      	movs	r4, #0
   d89be:	a394      	add	r3, pc, #592	; (adr r3, d8c10 <__ieee754_pow+0x8e0>)
   d89c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89c4:	4620      	mov	r0, r4
   d89c6:	460d      	mov	r5, r1
   d89c8:	f000 fe06 	bl	d95d8 <__aeabi_dmul>
   d89cc:	4632      	mov	r2, r6
   d89ce:	4680      	mov	r8, r0
   d89d0:	4689      	mov	r9, r1
   d89d2:	463b      	mov	r3, r7
   d89d4:	4620      	mov	r0, r4
   d89d6:	4629      	mov	r1, r5
   d89d8:	f000 fc4a 	bl	d9270 <__aeabi_dsub>
   d89dc:	4602      	mov	r2, r0
   d89de:	460b      	mov	r3, r1
   d89e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d89e4:	f000 fc44 	bl	d9270 <__aeabi_dsub>
   d89e8:	a38b      	add	r3, pc, #556	; (adr r3, d8c18 <__ieee754_pow+0x8e8>)
   d89ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89ee:	f000 fdf3 	bl	d95d8 <__aeabi_dmul>
   d89f2:	a38b      	add	r3, pc, #556	; (adr r3, d8c20 <__ieee754_pow+0x8f0>)
   d89f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89f8:	4606      	mov	r6, r0
   d89fa:	460f      	mov	r7, r1
   d89fc:	4620      	mov	r0, r4
   d89fe:	4629      	mov	r1, r5
   d8a00:	f000 fdea 	bl	d95d8 <__aeabi_dmul>
   d8a04:	4602      	mov	r2, r0
   d8a06:	460b      	mov	r3, r1
   d8a08:	4630      	mov	r0, r6
   d8a0a:	4639      	mov	r1, r7
   d8a0c:	f000 fc32 	bl	d9274 <__adddf3>
   d8a10:	4606      	mov	r6, r0
   d8a12:	460f      	mov	r7, r1
   d8a14:	4602      	mov	r2, r0
   d8a16:	460b      	mov	r3, r1
   d8a18:	4640      	mov	r0, r8
   d8a1a:	4649      	mov	r1, r9
   d8a1c:	f000 fc2a 	bl	d9274 <__adddf3>
   d8a20:	4642      	mov	r2, r8
   d8a22:	464b      	mov	r3, r9
   d8a24:	4604      	mov	r4, r0
   d8a26:	460d      	mov	r5, r1
   d8a28:	f000 fc22 	bl	d9270 <__aeabi_dsub>
   d8a2c:	4602      	mov	r2, r0
   d8a2e:	460b      	mov	r3, r1
   d8a30:	4630      	mov	r0, r6
   d8a32:	4639      	mov	r1, r7
   d8a34:	f000 fc1c 	bl	d9270 <__aeabi_dsub>
   d8a38:	4622      	mov	r2, r4
   d8a3a:	4680      	mov	r8, r0
   d8a3c:	4689      	mov	r9, r1
   d8a3e:	462b      	mov	r3, r5
   d8a40:	4620      	mov	r0, r4
   d8a42:	4629      	mov	r1, r5
   d8a44:	f000 fdc8 	bl	d95d8 <__aeabi_dmul>
   d8a48:	a377      	add	r3, pc, #476	; (adr r3, d8c28 <__ieee754_pow+0x8f8>)
   d8a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a4e:	4606      	mov	r6, r0
   d8a50:	460f      	mov	r7, r1
   d8a52:	f000 fdc1 	bl	d95d8 <__aeabi_dmul>
   d8a56:	a376      	add	r3, pc, #472	; (adr r3, d8c30 <__ieee754_pow+0x900>)
   d8a58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a5c:	f000 fc08 	bl	d9270 <__aeabi_dsub>
   d8a60:	4632      	mov	r2, r6
   d8a62:	463b      	mov	r3, r7
   d8a64:	f000 fdb8 	bl	d95d8 <__aeabi_dmul>
   d8a68:	a373      	add	r3, pc, #460	; (adr r3, d8c38 <__ieee754_pow+0x908>)
   d8a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a6e:	f000 fc01 	bl	d9274 <__adddf3>
   d8a72:	4632      	mov	r2, r6
   d8a74:	463b      	mov	r3, r7
   d8a76:	f000 fdaf 	bl	d95d8 <__aeabi_dmul>
   d8a7a:	a371      	add	r3, pc, #452	; (adr r3, d8c40 <__ieee754_pow+0x910>)
   d8a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a80:	f000 fbf6 	bl	d9270 <__aeabi_dsub>
   d8a84:	4632      	mov	r2, r6
   d8a86:	463b      	mov	r3, r7
   d8a88:	f000 fda6 	bl	d95d8 <__aeabi_dmul>
   d8a8c:	a36e      	add	r3, pc, #440	; (adr r3, d8c48 <__ieee754_pow+0x918>)
   d8a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a92:	f000 fbef 	bl	d9274 <__adddf3>
   d8a96:	4632      	mov	r2, r6
   d8a98:	463b      	mov	r3, r7
   d8a9a:	f000 fd9d 	bl	d95d8 <__aeabi_dmul>
   d8a9e:	4602      	mov	r2, r0
   d8aa0:	460b      	mov	r3, r1
   d8aa2:	4620      	mov	r0, r4
   d8aa4:	4629      	mov	r1, r5
   d8aa6:	f000 fbe3 	bl	d9270 <__aeabi_dsub>
   d8aaa:	4606      	mov	r6, r0
   d8aac:	460f      	mov	r7, r1
   d8aae:	4602      	mov	r2, r0
   d8ab0:	460b      	mov	r3, r1
   d8ab2:	4620      	mov	r0, r4
   d8ab4:	4629      	mov	r1, r5
   d8ab6:	f000 fd8f 	bl	d95d8 <__aeabi_dmul>
   d8aba:	2200      	movs	r2, #0
   d8abc:	e9cd 0100 	strd	r0, r1, [sp]
   d8ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8ac4:	4630      	mov	r0, r6
   d8ac6:	4639      	mov	r1, r7
   d8ac8:	f000 fbd2 	bl	d9270 <__aeabi_dsub>
   d8acc:	4602      	mov	r2, r0
   d8ace:	460b      	mov	r3, r1
   d8ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8ad4:	f000 feaa 	bl	d982c <__aeabi_ddiv>
   d8ad8:	4642      	mov	r2, r8
   d8ada:	4606      	mov	r6, r0
   d8adc:	460f      	mov	r7, r1
   d8ade:	464b      	mov	r3, r9
   d8ae0:	4620      	mov	r0, r4
   d8ae2:	4629      	mov	r1, r5
   d8ae4:	f000 fd78 	bl	d95d8 <__aeabi_dmul>
   d8ae8:	4642      	mov	r2, r8
   d8aea:	464b      	mov	r3, r9
   d8aec:	f000 fbc2 	bl	d9274 <__adddf3>
   d8af0:	4602      	mov	r2, r0
   d8af2:	460b      	mov	r3, r1
   d8af4:	4630      	mov	r0, r6
   d8af6:	4639      	mov	r1, r7
   d8af8:	f000 fbba 	bl	d9270 <__aeabi_dsub>
   d8afc:	4622      	mov	r2, r4
   d8afe:	462b      	mov	r3, r5
   d8b00:	f000 fbb6 	bl	d9270 <__aeabi_dsub>
   d8b04:	4602      	mov	r2, r0
   d8b06:	460b      	mov	r3, r1
   d8b08:	2000      	movs	r0, #0
   d8b0a:	4959      	ldr	r1, [pc, #356]	; (d8c70 <__ieee754_pow+0x940>)
   d8b0c:	f000 fbb0 	bl	d9270 <__aeabi_dsub>
   d8b10:	448a      	add	sl, r1
   d8b12:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d8b16:	4602      	mov	r2, r0
   d8b18:	460b      	mov	r3, r1
   d8b1a:	f2c0 815b 	blt.w	d8dd4 <__ieee754_pow+0xaa4>
   d8b1e:	4651      	mov	r1, sl
   d8b20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8b24:	f000 fd58 	bl	d95d8 <__aeabi_dmul>
   d8b28:	ec41 0b10 	vmov	d0, r0, r1
   d8b2c:	e449      	b.n	d83c2 <__ieee754_pow+0x92>
   d8b2e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8b32:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8b36:	ea54 030b 	orrs.w	r3, r4, fp
   d8b3a:	f000 8137 	beq.w	d8dac <__ieee754_pow+0xa7c>
   d8b3e:	f1bb 0f01 	cmp.w	fp, #1
   d8b42:	f47f ac80 	bne.w	d8446 <__ieee754_pow+0x116>
   d8b46:	4602      	mov	r2, r0
   d8b48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8b4c:	ec43 2b10 	vmov	d0, r2, r3
   d8b50:	e437      	b.n	d83c2 <__ieee754_pow+0x92>
   d8b52:	4632      	mov	r2, r6
   d8b54:	463b      	mov	r3, r7
   d8b56:	4630      	mov	r0, r6
   d8b58:	4639      	mov	r1, r7
   d8b5a:	f000 fd3d 	bl	d95d8 <__aeabi_dmul>
   d8b5e:	ec41 0b10 	vmov	d0, r0, r1
   d8b62:	e42e      	b.n	d83c2 <__ieee754_pow+0x92>
   d8b64:	4b43      	ldr	r3, [pc, #268]	; (d8c74 <__ieee754_pow+0x944>)
   d8b66:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8b6a:	4598      	cmp	r8, r3
   d8b6c:	f340 8115 	ble.w	d8d9a <__ieee754_pow+0xa6a>
   d8b70:	4b41      	ldr	r3, [pc, #260]	; (d8c78 <__ieee754_pow+0x948>)
   d8b72:	440b      	add	r3, r1
   d8b74:	4303      	orrs	r3, r0
   d8b76:	d10c      	bne.n	d8b92 <__ieee754_pow+0x862>
   d8b78:	4632      	mov	r2, r6
   d8b7a:	463b      	mov	r3, r7
   d8b7c:	f000 fb78 	bl	d9270 <__aeabi_dsub>
   d8b80:	4602      	mov	r2, r0
   d8b82:	460b      	mov	r3, r1
   d8b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8b88:	f000 ffa2 	bl	d9ad0 <__aeabi_dcmple>
   d8b8c:	2800      	cmp	r0, #0
   d8b8e:	f43f aee6 	beq.w	d895e <__ieee754_pow+0x62e>
   d8b92:	a32f      	add	r3, pc, #188	; (adr r3, d8c50 <__ieee754_pow+0x920>)
   d8b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8b9c:	f000 fd1c 	bl	d95d8 <__aeabi_dmul>
   d8ba0:	a32b      	add	r3, pc, #172	; (adr r3, d8c50 <__ieee754_pow+0x920>)
   d8ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ba6:	f000 fd17 	bl	d95d8 <__aeabi_dmul>
   d8baa:	ec41 0b10 	vmov	d0, r0, r1
   d8bae:	e408      	b.n	d83c2 <__ieee754_pow+0x92>
   d8bb0:	ed9f 7b29 	vldr	d7, [pc, #164]	; d8c58 <__ieee754_pow+0x928>
   d8bb4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8bb8:	e676      	b.n	d88a8 <__ieee754_pow+0x578>
   d8bba:	f1b9 0f00 	cmp.w	r9, #0
   d8bbe:	f6bf ac8e 	bge.w	d84de <__ieee754_pow+0x1ae>
   d8bc2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8bc6:	ee00 3a10 	vmov	s0, r3
   d8bca:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d8bce:	ee00 3a90 	vmov	s1, r3
   d8bd2:	f7ff bbf6 	b.w	d83c2 <__ieee754_pow+0x92>
   d8bd6:	4602      	mov	r2, r0
   d8bd8:	460b      	mov	r3, r1
   d8bda:	2000      	movs	r0, #0
   d8bdc:	4924      	ldr	r1, [pc, #144]	; (d8c70 <__ieee754_pow+0x940>)
   d8bde:	f000 fe25 	bl	d982c <__aeabi_ddiv>
   d8be2:	e42d      	b.n	d8440 <__ieee754_pow+0x110>
   d8be4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d8c60 <__ieee754_pow+0x930>
   d8be8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8bec:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8bf0:	ed9f 7b03 	vldr	d7, [pc, #12]	; d8c00 <__ieee754_pow+0x8d0>
   d8bf4:	f04f 0800 	mov.w	r8, #0
   d8bf8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8bfc:	e4be      	b.n	d857c <__ieee754_pow+0x24c>
   d8bfe:	bf00      	nop
   d8c00:	00000000 	.word	0x00000000
   d8c04:	3ff00000 	.word	0x3ff00000
   d8c08:	652b82fe 	.word	0x652b82fe
   d8c0c:	3c971547 	.word	0x3c971547
   d8c10:	00000000 	.word	0x00000000
   d8c14:	3fe62e43 	.word	0x3fe62e43
   d8c18:	fefa39ef 	.word	0xfefa39ef
   d8c1c:	3fe62e42 	.word	0x3fe62e42
   d8c20:	0ca86c39 	.word	0x0ca86c39
   d8c24:	be205c61 	.word	0xbe205c61
   d8c28:	72bea4d0 	.word	0x72bea4d0
   d8c2c:	3e663769 	.word	0x3e663769
   d8c30:	c5d26bf1 	.word	0xc5d26bf1
   d8c34:	3ebbbd41 	.word	0x3ebbbd41
   d8c38:	af25de2c 	.word	0xaf25de2c
   d8c3c:	3f11566a 	.word	0x3f11566a
   d8c40:	16bebd93 	.word	0x16bebd93
   d8c44:	3f66c16c 	.word	0x3f66c16c
   d8c48:	5555553e 	.word	0x5555553e
   d8c4c:	3fc55555 	.word	0x3fc55555
   d8c50:	c2f8f359 	.word	0xc2f8f359
   d8c54:	01a56e1f 	.word	0x01a56e1f
   d8c58:	00000000 	.word	0x00000000
   d8c5c:	bff00000 	.word	0xbff00000
	...
   d8c68:	408fffff 	.word	0x408fffff
   d8c6c:	000fffff 	.word	0x000fffff
   d8c70:	3ff00000 	.word	0x3ff00000
   d8c74:	4090cbff 	.word	0x4090cbff
   d8c78:	3f6f3400 	.word	0x3f6f3400
   d8c7c:	4b6c      	ldr	r3, [pc, #432]	; (d8e30 <__ieee754_pow+0xb00>)
   d8c7e:	429c      	cmp	r4, r3
   d8c80:	f77f ac2a 	ble.w	d84d8 <__ieee754_pow+0x1a8>
   d8c84:	4b6b      	ldr	r3, [pc, #428]	; (d8e34 <__ieee754_pow+0xb04>)
   d8c86:	429c      	cmp	r4, r3
   d8c88:	f73f abc3 	bgt.w	d8412 <__ieee754_pow+0xe2>
   d8c8c:	2200      	movs	r2, #0
   d8c8e:	4b69      	ldr	r3, [pc, #420]	; (d8e34 <__ieee754_pow+0xb04>)
   d8c90:	f000 faee 	bl	d9270 <__aeabi_dsub>
   d8c94:	a356      	add	r3, pc, #344	; (adr r3, d8df0 <__ieee754_pow+0xac0>)
   d8c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c9a:	4604      	mov	r4, r0
   d8c9c:	460d      	mov	r5, r1
   d8c9e:	f000 fc9b 	bl	d95d8 <__aeabi_dmul>
   d8ca2:	a355      	add	r3, pc, #340	; (adr r3, d8df8 <__ieee754_pow+0xac8>)
   d8ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ca8:	4680      	mov	r8, r0
   d8caa:	4689      	mov	r9, r1
   d8cac:	4620      	mov	r0, r4
   d8cae:	4629      	mov	r1, r5
   d8cb0:	f000 fc92 	bl	d95d8 <__aeabi_dmul>
   d8cb4:	2200      	movs	r2, #0
   d8cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8cba:	4b5f      	ldr	r3, [pc, #380]	; (d8e38 <__ieee754_pow+0xb08>)
   d8cbc:	4620      	mov	r0, r4
   d8cbe:	4629      	mov	r1, r5
   d8cc0:	f000 fc8a 	bl	d95d8 <__aeabi_dmul>
   d8cc4:	4602      	mov	r2, r0
   d8cc6:	460b      	mov	r3, r1
   d8cc8:	a14d      	add	r1, pc, #308	; (adr r1, d8e00 <__ieee754_pow+0xad0>)
   d8cca:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8cce:	f000 facf 	bl	d9270 <__aeabi_dsub>
   d8cd2:	4622      	mov	r2, r4
   d8cd4:	462b      	mov	r3, r5
   d8cd6:	f000 fc7f 	bl	d95d8 <__aeabi_dmul>
   d8cda:	4602      	mov	r2, r0
   d8cdc:	460b      	mov	r3, r1
   d8cde:	2000      	movs	r0, #0
   d8ce0:	4956      	ldr	r1, [pc, #344]	; (d8e3c <__ieee754_pow+0xb0c>)
   d8ce2:	f000 fac5 	bl	d9270 <__aeabi_dsub>
   d8ce6:	4622      	mov	r2, r4
   d8ce8:	462b      	mov	r3, r5
   d8cea:	4606      	mov	r6, r0
   d8cec:	460f      	mov	r7, r1
   d8cee:	4620      	mov	r0, r4
   d8cf0:	4629      	mov	r1, r5
   d8cf2:	f000 fc71 	bl	d95d8 <__aeabi_dmul>
   d8cf6:	4602      	mov	r2, r0
   d8cf8:	460b      	mov	r3, r1
   d8cfa:	4630      	mov	r0, r6
   d8cfc:	4639      	mov	r1, r7
   d8cfe:	f000 fc6b 	bl	d95d8 <__aeabi_dmul>
   d8d02:	a341      	add	r3, pc, #260	; (adr r3, d8e08 <__ieee754_pow+0xad8>)
   d8d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d08:	f000 fc66 	bl	d95d8 <__aeabi_dmul>
   d8d0c:	4602      	mov	r2, r0
   d8d0e:	460b      	mov	r3, r1
   d8d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8d14:	f000 faac 	bl	d9270 <__aeabi_dsub>
   d8d18:	4602      	mov	r2, r0
   d8d1a:	460b      	mov	r3, r1
   d8d1c:	4604      	mov	r4, r0
   d8d1e:	460d      	mov	r5, r1
   d8d20:	4640      	mov	r0, r8
   d8d22:	4649      	mov	r1, r9
   d8d24:	f000 faa6 	bl	d9274 <__adddf3>
   d8d28:	4642      	mov	r2, r8
   d8d2a:	464b      	mov	r3, r9
   d8d2c:	2000      	movs	r0, #0
   d8d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8d32:	f000 fa9d 	bl	d9270 <__aeabi_dsub>
   d8d36:	4602      	mov	r2, r0
   d8d38:	460b      	mov	r3, r1
   d8d3a:	4620      	mov	r0, r4
   d8d3c:	4629      	mov	r1, r5
   d8d3e:	f000 fa97 	bl	d9270 <__aeabi_dsub>
   d8d42:	4680      	mov	r8, r0
   d8d44:	4689      	mov	r9, r1
   d8d46:	e5a5      	b.n	d8894 <__ieee754_pow+0x564>
   d8d48:	4632      	mov	r2, r6
   d8d4a:	463b      	mov	r3, r7
   d8d4c:	2000      	movs	r0, #0
   d8d4e:	4939      	ldr	r1, [pc, #228]	; (d8e34 <__ieee754_pow+0xb04>)
   d8d50:	f000 fd6c 	bl	d982c <__aeabi_ddiv>
   d8d54:	ec41 0b10 	vmov	d0, r0, r1
   d8d58:	f7ff bb33 	b.w	d83c2 <__ieee754_pow+0x92>
   d8d5c:	a32c      	add	r3, pc, #176	; (adr r3, d8e10 <__ieee754_pow+0xae0>)
   d8d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8d66:	f000 fc37 	bl	d95d8 <__aeabi_dmul>
   d8d6a:	a329      	add	r3, pc, #164	; (adr r3, d8e10 <__ieee754_pow+0xae0>)
   d8d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d70:	f000 fc32 	bl	d95d8 <__aeabi_dmul>
   d8d74:	ec41 0b10 	vmov	d0, r0, r1
   d8d78:	f7ff bb23 	b.w	d83c2 <__ieee754_pow+0x92>
   d8d7c:	f1be 0f00 	cmp.w	lr, #0
   d8d80:	f47f ab2a 	bne.w	d83d8 <__ieee754_pow+0xa8>
   d8d84:	f1c3 0314 	rsb	r3, r3, #20
   d8d88:	fa48 f203 	asr.w	r2, r8, r3
   d8d8c:	fa02 f303 	lsl.w	r3, r2, r3
   d8d90:	4598      	cmp	r8, r3
   d8d92:	d027      	beq.n	d8de4 <__ieee754_pow+0xab4>
   d8d94:	46f3      	mov	fp, lr
   d8d96:	f7ff baf7 	b.w	d8388 <__ieee754_pow+0x58>
   d8d9a:	4b28      	ldr	r3, [pc, #160]	; (d8e3c <__ieee754_pow+0xb0c>)
   d8d9c:	4598      	cmp	r8, r3
   d8d9e:	f73f adde 	bgt.w	d895e <__ieee754_pow+0x62e>
   d8da2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8da6:	469a      	mov	sl, r3
   d8da8:	469b      	mov	fp, r3
   d8daa:	e607      	b.n	d89bc <__ieee754_pow+0x68c>
   d8dac:	4602      	mov	r2, r0
   d8dae:	460b      	mov	r3, r1
   d8db0:	f7ff bb89 	b.w	d84c6 <__ieee754_pow+0x196>
   d8db4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8e18 <__ieee754_pow+0xae8>
   d8db8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8dbc:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8e20 <__ieee754_pow+0xaf0>
   d8dc0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8dc4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8e28 <__ieee754_pow+0xaf8>
   d8dc8:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d8dcc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8dd0:	f7ff bbd4 	b.w	d857c <__ieee754_pow+0x24c>
   d8dd4:	4658      	mov	r0, fp
   d8dd6:	ec43 2b10 	vmov	d0, r2, r3
   d8dda:	f000 f9b1 	bl	d9140 <scalbn>
   d8dde:	ec51 0b10 	vmov	r0, r1, d0
   d8de2:	e69d      	b.n	d8b20 <__ieee754_pow+0x7f0>
   d8de4:	f002 0201 	and.w	r2, r2, #1
   d8de8:	f1c2 0b02 	rsb	fp, r2, #2
   d8dec:	f7ff bacc 	b.w	d8388 <__ieee754_pow+0x58>
   d8df0:	60000000 	.word	0x60000000
   d8df4:	3ff71547 	.word	0x3ff71547
   d8df8:	f85ddf44 	.word	0xf85ddf44
   d8dfc:	3e54ae0b 	.word	0x3e54ae0b
   d8e00:	55555555 	.word	0x55555555
   d8e04:	3fd55555 	.word	0x3fd55555
   d8e08:	652b82fe 	.word	0x652b82fe
   d8e0c:	3ff71547 	.word	0x3ff71547
   d8e10:	8800759c 	.word	0x8800759c
   d8e14:	7e37e43c 	.word	0x7e37e43c
   d8e18:	40000000 	.word	0x40000000
   d8e1c:	3fe2b803 	.word	0x3fe2b803
   d8e20:	43cfd006 	.word	0x43cfd006
   d8e24:	3e4cfdeb 	.word	0x3e4cfdeb
   d8e28:	00000000 	.word	0x00000000
   d8e2c:	3ff80000 	.word	0x3ff80000
   d8e30:	3feffffe 	.word	0x3feffffe
   d8e34:	3ff00000 	.word	0x3ff00000
   d8e38:	3fd00000 	.word	0x3fd00000
   d8e3c:	3fe00000 	.word	0x3fe00000

000d8e40 <__ieee754_sqrt>:
   d8e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e44:	4965      	ldr	r1, [pc, #404]	; (d8fdc <__ieee754_sqrt+0x19c>)
   d8e46:	ec55 4b10 	vmov	r4, r5, d0
   d8e4a:	460e      	mov	r6, r1
   d8e4c:	4029      	ands	r1, r5
   d8e4e:	42b1      	cmp	r1, r6
   d8e50:	f000 8097 	beq.w	d8f82 <__ieee754_sqrt+0x142>
   d8e54:	2d00      	cmp	r5, #0
   d8e56:	462b      	mov	r3, r5
   d8e58:	ee10 2a10 	vmov	r2, s0
   d8e5c:	dd74      	ble.n	d8f48 <__ieee754_sqrt+0x108>
   d8e5e:	152f      	asrs	r7, r5, #20
   d8e60:	d07f      	beq.n	d8f62 <__ieee754_sqrt+0x122>
   d8e62:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d8e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8e6a:	07f9      	lsls	r1, r7, #31
   d8e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8e70:	d465      	bmi.n	d8f3e <__ieee754_sqrt+0xfe>
   d8e72:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d8e76:	2600      	movs	r6, #0
   d8e78:	440b      	add	r3, r1
   d8e7a:	107f      	asrs	r7, r7, #1
   d8e7c:	0052      	lsls	r2, r2, #1
   d8e7e:	46b6      	mov	lr, r6
   d8e80:	2016      	movs	r0, #22
   d8e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d8e86:	eb0e 0401 	add.w	r4, lr, r1
   d8e8a:	429c      	cmp	r4, r3
   d8e8c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8e90:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8e94:	dc03      	bgt.n	d8e9e <__ieee754_sqrt+0x5e>
   d8e96:	1b1b      	subs	r3, r3, r4
   d8e98:	eb04 0e01 	add.w	lr, r4, r1
   d8e9c:	440e      	add	r6, r1
   d8e9e:	3801      	subs	r0, #1
   d8ea0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d8ea4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8ea8:	d1ed      	bne.n	d8e86 <__ieee754_sqrt+0x46>
   d8eaa:	4684      	mov	ip, r0
   d8eac:	2420      	movs	r4, #32
   d8eae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8eb2:	e009      	b.n	d8ec8 <__ieee754_sqrt+0x88>
   d8eb4:	d020      	beq.n	d8ef8 <__ieee754_sqrt+0xb8>
   d8eb6:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d8eba:	3c01      	subs	r4, #1
   d8ebc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8ec0:	442b      	add	r3, r5
   d8ec2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8ec6:	d020      	beq.n	d8f0a <__ieee754_sqrt+0xca>
   d8ec8:	459e      	cmp	lr, r3
   d8eca:	eb01 050c 	add.w	r5, r1, ip
   d8ece:	daf1      	bge.n	d8eb4 <__ieee754_sqrt+0x74>
   d8ed0:	2d00      	cmp	r5, #0
   d8ed2:	eb05 0c01 	add.w	ip, r5, r1
   d8ed6:	db09      	blt.n	d8eec <__ieee754_sqrt+0xac>
   d8ed8:	46f0      	mov	r8, lr
   d8eda:	4295      	cmp	r5, r2
   d8edc:	ebce 0303 	rsb	r3, lr, r3
   d8ee0:	d900      	bls.n	d8ee4 <__ieee754_sqrt+0xa4>
   d8ee2:	3b01      	subs	r3, #1
   d8ee4:	1b52      	subs	r2, r2, r5
   d8ee6:	4408      	add	r0, r1
   d8ee8:	46c6      	mov	lr, r8
   d8eea:	e7e4      	b.n	d8eb6 <__ieee754_sqrt+0x76>
   d8eec:	f1bc 0f00 	cmp.w	ip, #0
   d8ef0:	dbf2      	blt.n	d8ed8 <__ieee754_sqrt+0x98>
   d8ef2:	f10e 0801 	add.w	r8, lr, #1
   d8ef6:	e7f0      	b.n	d8eda <__ieee754_sqrt+0x9a>
   d8ef8:	4295      	cmp	r5, r2
   d8efa:	d81e      	bhi.n	d8f3a <__ieee754_sqrt+0xfa>
   d8efc:	2d00      	cmp	r5, #0
   d8efe:	eb05 0c01 	add.w	ip, r5, r1
   d8f02:	db50      	blt.n	d8fa6 <__ieee754_sqrt+0x166>
   d8f04:	4698      	mov	r8, r3
   d8f06:	2300      	movs	r3, #0
   d8f08:	e7ec      	b.n	d8ee4 <__ieee754_sqrt+0xa4>
   d8f0a:	4313      	orrs	r3, r2
   d8f0c:	d004      	beq.n	d8f18 <__ieee754_sqrt+0xd8>
   d8f0e:	1c42      	adds	r2, r0, #1
   d8f10:	d04d      	beq.n	d8fae <__ieee754_sqrt+0x16e>
   d8f12:	f000 0301 	and.w	r3, r0, #1
   d8f16:	4418      	add	r0, r3
   d8f18:	0840      	lsrs	r0, r0, #1
   d8f1a:	1071      	asrs	r1, r6, #1
   d8f1c:	07f3      	lsls	r3, r6, #31
   d8f1e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8f22:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8f26:	bf48      	it	mi
   d8f28:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d8f2c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d8f30:	4602      	mov	r2, r0
   d8f32:	ec43 2b10 	vmov	d0, r2, r3
   d8f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f3a:	4673      	mov	r3, lr
   d8f3c:	e7bb      	b.n	d8eb6 <__ieee754_sqrt+0x76>
   d8f3e:	005b      	lsls	r3, r3, #1
   d8f40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d8f44:	0052      	lsls	r2, r2, #1
   d8f46:	e794      	b.n	d8e72 <__ieee754_sqrt+0x32>
   d8f48:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d8f4c:	4321      	orrs	r1, r4
   d8f4e:	d028      	beq.n	d8fa2 <__ieee754_sqrt+0x162>
   d8f50:	bbad      	cbnz	r5, d8fbe <__ieee754_sqrt+0x17e>
   d8f52:	462f      	mov	r7, r5
   d8f54:	0ad3      	lsrs	r3, r2, #11
   d8f56:	3f15      	subs	r7, #21
   d8f58:	0552      	lsls	r2, r2, #21
   d8f5a:	2b00      	cmp	r3, #0
   d8f5c:	d0fa      	beq.n	d8f54 <__ieee754_sqrt+0x114>
   d8f5e:	02dd      	lsls	r5, r3, #11
   d8f60:	d428      	bmi.n	d8fb4 <__ieee754_sqrt+0x174>
   d8f62:	2100      	movs	r1, #0
   d8f64:	e000      	b.n	d8f68 <__ieee754_sqrt+0x128>
   d8f66:	4601      	mov	r1, r0
   d8f68:	005b      	lsls	r3, r3, #1
   d8f6a:	02dc      	lsls	r4, r3, #11
   d8f6c:	f101 0001 	add.w	r0, r1, #1
   d8f70:	d5f9      	bpl.n	d8f66 <__ieee754_sqrt+0x126>
   d8f72:	f1c0 0420 	rsb	r4, r0, #32
   d8f76:	fa22 f404 	lsr.w	r4, r2, r4
   d8f7a:	4323      	orrs	r3, r4
   d8f7c:	1a7f      	subs	r7, r7, r1
   d8f7e:	4082      	lsls	r2, r0
   d8f80:	e76f      	b.n	d8e62 <__ieee754_sqrt+0x22>
   d8f82:	ee10 2a10 	vmov	r2, s0
   d8f86:	462b      	mov	r3, r5
   d8f88:	ee10 0a10 	vmov	r0, s0
   d8f8c:	4629      	mov	r1, r5
   d8f8e:	f000 fb23 	bl	d95d8 <__aeabi_dmul>
   d8f92:	4622      	mov	r2, r4
   d8f94:	462b      	mov	r3, r5
   d8f96:	f000 f96d 	bl	d9274 <__adddf3>
   d8f9a:	ec41 0b10 	vmov	d0, r0, r1
   d8f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fa6:	f1bc 0f00 	cmp.w	ip, #0
   d8faa:	daa2      	bge.n	d8ef2 <__ieee754_sqrt+0xb2>
   d8fac:	e7aa      	b.n	d8f04 <__ieee754_sqrt+0xc4>
   d8fae:	3601      	adds	r6, #1
   d8fb0:	4620      	mov	r0, r4
   d8fb2:	e7b2      	b.n	d8f1a <__ieee754_sqrt+0xda>
   d8fb4:	2420      	movs	r4, #32
   d8fb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d8fba:	2000      	movs	r0, #0
   d8fbc:	e7db      	b.n	d8f76 <__ieee754_sqrt+0x136>
   d8fbe:	ee10 2a10 	vmov	r2, s0
   d8fc2:	462b      	mov	r3, r5
   d8fc4:	4620      	mov	r0, r4
   d8fc6:	4629      	mov	r1, r5
   d8fc8:	f000 f952 	bl	d9270 <__aeabi_dsub>
   d8fcc:	4602      	mov	r2, r0
   d8fce:	460b      	mov	r3, r1
   d8fd0:	f000 fc2c 	bl	d982c <__aeabi_ddiv>
   d8fd4:	ec41 0b10 	vmov	d0, r0, r1
   d8fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fdc:	7ff00000 	.word	0x7ff00000

000d8fe0 <fabs>:
   d8fe0:	ec53 2b10 	vmov	r2, r3, d0
   d8fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8fe8:	ec43 2b10 	vmov	d0, r2, r3
   d8fec:	4770      	bx	lr
   d8fee:	bf00      	nop

000d8ff0 <finite>:
   d8ff0:	ee10 3a90 	vmov	r3, s1
   d8ff4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8ff8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8ffc:	0fc0      	lsrs	r0, r0, #31
   d8ffe:	4770      	bx	lr

000d9000 <matherr>:
   d9000:	2000      	movs	r0, #0
   d9002:	4770      	bx	lr
   d9004:	0000      	movs	r0, r0
	...

000d9008 <nan>:
   d9008:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9010 <nan+0x8>
   d900c:	4770      	bx	lr
   d900e:	bf00      	nop
   d9010:	00000000 	.word	0x00000000
   d9014:	7ff80000 	.word	0x7ff80000

000d9018 <rint>:
   d9018:	b5f0      	push	{r4, r5, r6, r7, lr}
   d901a:	ec53 2b10 	vmov	r2, r3, d0
   d901e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d9022:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d9026:	2813      	cmp	r0, #19
   d9028:	b083      	sub	sp, #12
   d902a:	4619      	mov	r1, r3
   d902c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d9030:	ee10 5a10 	vmov	r5, s0
   d9034:	dc2f      	bgt.n	d9096 <rint+0x7e>
   d9036:	2800      	cmp	r0, #0
   d9038:	db49      	blt.n	d90ce <rint+0xb6>
   d903a:	4e3f      	ldr	r6, [pc, #252]	; (d9138 <rint+0x120>)
   d903c:	4106      	asrs	r6, r0
   d903e:	ea03 0706 	and.w	r7, r3, r6
   d9042:	4317      	orrs	r7, r2
   d9044:	d02c      	beq.n	d90a0 <rint+0x88>
   d9046:	0876      	lsrs	r6, r6, #1
   d9048:	4033      	ands	r3, r6
   d904a:	431d      	orrs	r5, r3
   d904c:	d00c      	beq.n	d9068 <rint+0x50>
   d904e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d9052:	2813      	cmp	r0, #19
   d9054:	ea21 0606 	bic.w	r6, r1, r6
   d9058:	fa43 f100 	asr.w	r1, r3, r0
   d905c:	ea41 0106 	orr.w	r1, r1, r6
   d9060:	bf0c      	ite	eq
   d9062:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d9066:	2500      	movne	r5, #0
   d9068:	4834      	ldr	r0, [pc, #208]	; (d913c <rint+0x124>)
   d906a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d906e:	462a      	mov	r2, r5
   d9070:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9074:	4610      	mov	r0, r2
   d9076:	462b      	mov	r3, r5
   d9078:	4622      	mov	r2, r4
   d907a:	f000 f8fb 	bl	d9274 <__adddf3>
   d907e:	e9cd 0100 	strd	r0, r1, [sp]
   d9082:	4622      	mov	r2, r4
   d9084:	462b      	mov	r3, r5
   d9086:	e9dd 0100 	ldrd	r0, r1, [sp]
   d908a:	f000 f8f1 	bl	d9270 <__aeabi_dsub>
   d908e:	ec41 0b10 	vmov	d0, r0, r1
   d9092:	b003      	add	sp, #12
   d9094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9096:	2833      	cmp	r0, #51	; 0x33
   d9098:	dd06      	ble.n	d90a8 <rint+0x90>
   d909a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d909e:	d042      	beq.n	d9126 <rint+0x10e>
   d90a0:	ec43 2b10 	vmov	d0, r2, r3
   d90a4:	b003      	add	sp, #12
   d90a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d90a8:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d90ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d90b0:	40f0      	lsrs	r0, r6
   d90b2:	4202      	tst	r2, r0
   d90b4:	d0f4      	beq.n	d90a0 <rint+0x88>
   d90b6:	0840      	lsrs	r0, r0, #1
   d90b8:	4202      	tst	r2, r0
   d90ba:	d0d5      	beq.n	d9068 <rint+0x50>
   d90bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d90c0:	ea25 0000 	bic.w	r0, r5, r0
   d90c4:	fa43 f606 	asr.w	r6, r3, r6
   d90c8:	ea46 0500 	orr.w	r5, r6, r0
   d90cc:	e7cc      	b.n	d9068 <rint+0x50>
   d90ce:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d90d2:	4310      	orrs	r0, r2
   d90d4:	ee10 7a10 	vmov	r7, s0
   d90d8:	d0e2      	beq.n	d90a0 <rint+0x88>
   d90da:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d90de:	4307      	orrs	r7, r0
   d90e0:	4278      	negs	r0, r7
   d90e2:	4307      	orrs	r7, r0
   d90e4:	4815      	ldr	r0, [pc, #84]	; (d913c <rint+0x124>)
   d90e6:	0c59      	lsrs	r1, r3, #17
   d90e8:	0b3f      	lsrs	r7, r7, #12
   d90ea:	0449      	lsls	r1, r1, #17
   d90ec:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d90f0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d90f4:	ea47 0301 	orr.w	r3, r7, r1
   d90f8:	e9d0 6700 	ldrd	r6, r7, [r0]
   d90fc:	4619      	mov	r1, r3
   d90fe:	4610      	mov	r0, r2
   d9100:	463b      	mov	r3, r7
   d9102:	4632      	mov	r2, r6
   d9104:	f000 f8b6 	bl	d9274 <__adddf3>
   d9108:	e9cd 0100 	strd	r0, r1, [sp]
   d910c:	463b      	mov	r3, r7
   d910e:	4632      	mov	r2, r6
   d9110:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9114:	f000 f8ac 	bl	d9270 <__aeabi_dsub>
   d9118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d911c:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d9120:	ec41 0b10 	vmov	d0, r0, r1
   d9124:	e7be      	b.n	d90a4 <rint+0x8c>
   d9126:	ee10 0a10 	vmov	r0, s0
   d912a:	4619      	mov	r1, r3
   d912c:	f000 f8a2 	bl	d9274 <__adddf3>
   d9130:	ec41 0b10 	vmov	d0, r0, r1
   d9134:	e7b6      	b.n	d90a4 <rint+0x8c>
   d9136:	bf00      	nop
   d9138:	000fffff 	.word	0x000fffff
   d913c:	000dbe00 	.word	0x000dbe00

000d9140 <scalbn>:
   d9140:	ec53 2b10 	vmov	r2, r3, d0
   d9144:	b570      	push	{r4, r5, r6, lr}
   d9146:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d914a:	4619      	mov	r1, r3
   d914c:	4605      	mov	r5, r0
   d914e:	bb14      	cbnz	r4, d9196 <scalbn+0x56>
   d9150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9154:	4311      	orrs	r1, r2
   d9156:	d02a      	beq.n	d91ae <scalbn+0x6e>
   d9158:	4619      	mov	r1, r3
   d915a:	2200      	movs	r2, #0
   d915c:	4b38      	ldr	r3, [pc, #224]	; (d9240 <scalbn+0x100>)
   d915e:	4e39      	ldr	r6, [pc, #228]	; (d9244 <scalbn+0x104>)
   d9160:	ee10 0a10 	vmov	r0, s0
   d9164:	f000 fa38 	bl	d95d8 <__aeabi_dmul>
   d9168:	42b5      	cmp	r5, r6
   d916a:	4602      	mov	r2, r0
   d916c:	460b      	mov	r3, r1
   d916e:	db1f      	blt.n	d91b0 <scalbn+0x70>
   d9170:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d9174:	3c36      	subs	r4, #54	; 0x36
   d9176:	442c      	add	r4, r5
   d9178:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d917c:	4284      	cmp	r4, r0
   d917e:	dc1f      	bgt.n	d91c0 <scalbn+0x80>
   d9180:	2c00      	cmp	r4, #0
   d9182:	dd2d      	ble.n	d91e0 <scalbn+0xa0>
   d9184:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9188:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d918c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9190:	ec43 2b10 	vmov	d0, r2, r3
   d9194:	bd70      	pop	{r4, r5, r6, pc}
   d9196:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d919a:	4284      	cmp	r4, r0
   d919c:	d1eb      	bne.n	d9176 <scalbn+0x36>
   d919e:	ee10 0a10 	vmov	r0, s0
   d91a2:	4619      	mov	r1, r3
   d91a4:	f000 f866 	bl	d9274 <__adddf3>
   d91a8:	ec41 0b10 	vmov	d0, r0, r1
   d91ac:	bd70      	pop	{r4, r5, r6, pc}
   d91ae:	bd70      	pop	{r4, r5, r6, pc}
   d91b0:	a31f      	add	r3, pc, #124	; (adr r3, d9230 <scalbn+0xf0>)
   d91b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91b6:	f000 fa0f 	bl	d95d8 <__aeabi_dmul>
   d91ba:	ec41 0b10 	vmov	d0, r0, r1
   d91be:	bd70      	pop	{r4, r5, r6, pc}
   d91c0:	ec43 2b11 	vmov	d1, r2, r3
   d91c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d9238 <scalbn+0xf8>
   d91c8:	f000 f840 	bl	d924c <copysign>
   d91cc:	a31a      	add	r3, pc, #104	; (adr r3, d9238 <scalbn+0xf8>)
   d91ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91d2:	ec51 0b10 	vmov	r0, r1, d0
   d91d6:	f000 f9ff 	bl	d95d8 <__aeabi_dmul>
   d91da:	ec41 0b10 	vmov	d0, r0, r1
   d91de:	bd70      	pop	{r4, r5, r6, pc}
   d91e0:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d91e4:	da13      	bge.n	d920e <scalbn+0xce>
   d91e6:	f24c 3150 	movw	r1, #50000	; 0xc350
   d91ea:	428d      	cmp	r5, r1
   d91ec:	ec43 2b11 	vmov	d1, r2, r3
   d91f0:	dce8      	bgt.n	d91c4 <scalbn+0x84>
   d91f2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d9230 <scalbn+0xf0>
   d91f6:	f000 f829 	bl	d924c <copysign>
   d91fa:	a30d      	add	r3, pc, #52	; (adr r3, d9230 <scalbn+0xf0>)
   d91fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9200:	ec51 0b10 	vmov	r0, r1, d0
   d9204:	f000 f9e8 	bl	d95d8 <__aeabi_dmul>
   d9208:	ec41 0b10 	vmov	d0, r0, r1
   d920c:	bd70      	pop	{r4, r5, r6, pc}
   d920e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9212:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d9216:	3436      	adds	r4, #54	; 0x36
   d9218:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d921c:	4610      	mov	r0, r2
   d921e:	4619      	mov	r1, r3
   d9220:	2200      	movs	r2, #0
   d9222:	4b09      	ldr	r3, [pc, #36]	; (d9248 <scalbn+0x108>)
   d9224:	f000 f9d8 	bl	d95d8 <__aeabi_dmul>
   d9228:	ec41 0b10 	vmov	d0, r0, r1
   d922c:	bd70      	pop	{r4, r5, r6, pc}
   d922e:	bf00      	nop
   d9230:	c2f8f359 	.word	0xc2f8f359
   d9234:	01a56e1f 	.word	0x01a56e1f
   d9238:	8800759c 	.word	0x8800759c
   d923c:	7e37e43c 	.word	0x7e37e43c
   d9240:	43500000 	.word	0x43500000
   d9244:	ffff3cb0 	.word	0xffff3cb0
   d9248:	3c900000 	.word	0x3c900000

000d924c <copysign>:
   d924c:	ec53 2b10 	vmov	r2, r3, d0
   d9250:	ee11 0a90 	vmov	r0, s3
   d9254:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9258:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d925c:	ea41 0300 	orr.w	r3, r1, r0
   d9260:	ec43 2b10 	vmov	d0, r2, r3
   d9264:	4770      	bx	lr
   d9266:	bf00      	nop

000d9268 <__aeabi_drsub>:
   d9268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d926c:	e002      	b.n	d9274 <__adddf3>
   d926e:	bf00      	nop

000d9270 <__aeabi_dsub>:
   d9270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9274 <__adddf3>:
   d9274:	b530      	push	{r4, r5, lr}
   d9276:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d927a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d927e:	ea94 0f05 	teq	r4, r5
   d9282:	bf08      	it	eq
   d9284:	ea90 0f02 	teqeq	r0, r2
   d9288:	bf1f      	itttt	ne
   d928a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d928e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d929a:	f000 80e2 	beq.w	d9462 <__adddf3+0x1ee>
   d929e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d92a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d92a6:	bfb8      	it	lt
   d92a8:	426d      	neglt	r5, r5
   d92aa:	dd0c      	ble.n	d92c6 <__adddf3+0x52>
   d92ac:	442c      	add	r4, r5
   d92ae:	ea80 0202 	eor.w	r2, r0, r2
   d92b2:	ea81 0303 	eor.w	r3, r1, r3
   d92b6:	ea82 0000 	eor.w	r0, r2, r0
   d92ba:	ea83 0101 	eor.w	r1, r3, r1
   d92be:	ea80 0202 	eor.w	r2, r0, r2
   d92c2:	ea81 0303 	eor.w	r3, r1, r3
   d92c6:	2d36      	cmp	r5, #54	; 0x36
   d92c8:	bf88      	it	hi
   d92ca:	bd30      	pophi	{r4, r5, pc}
   d92cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d92d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d92d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d92d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d92dc:	d002      	beq.n	d92e4 <__adddf3+0x70>
   d92de:	4240      	negs	r0, r0
   d92e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d92e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d92e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d92ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d92f0:	d002      	beq.n	d92f8 <__adddf3+0x84>
   d92f2:	4252      	negs	r2, r2
   d92f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d92f8:	ea94 0f05 	teq	r4, r5
   d92fc:	f000 80a7 	beq.w	d944e <__adddf3+0x1da>
   d9300:	f1a4 0401 	sub.w	r4, r4, #1
   d9304:	f1d5 0e20 	rsbs	lr, r5, #32
   d9308:	db0d      	blt.n	d9326 <__adddf3+0xb2>
   d930a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d930e:	fa22 f205 	lsr.w	r2, r2, r5
   d9312:	1880      	adds	r0, r0, r2
   d9314:	f141 0100 	adc.w	r1, r1, #0
   d9318:	fa03 f20e 	lsl.w	r2, r3, lr
   d931c:	1880      	adds	r0, r0, r2
   d931e:	fa43 f305 	asr.w	r3, r3, r5
   d9322:	4159      	adcs	r1, r3
   d9324:	e00e      	b.n	d9344 <__adddf3+0xd0>
   d9326:	f1a5 0520 	sub.w	r5, r5, #32
   d932a:	f10e 0e20 	add.w	lr, lr, #32
   d932e:	2a01      	cmp	r2, #1
   d9330:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9334:	bf28      	it	cs
   d9336:	f04c 0c02 	orrcs.w	ip, ip, #2
   d933a:	fa43 f305 	asr.w	r3, r3, r5
   d933e:	18c0      	adds	r0, r0, r3
   d9340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9348:	d507      	bpl.n	d935a <__adddf3+0xe6>
   d934a:	f04f 0e00 	mov.w	lr, #0
   d934e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9352:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9356:	eb6e 0101 	sbc.w	r1, lr, r1
   d935a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d935e:	d31b      	bcc.n	d9398 <__adddf3+0x124>
   d9360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9364:	d30c      	bcc.n	d9380 <__adddf3+0x10c>
   d9366:	0849      	lsrs	r1, r1, #1
   d9368:	ea5f 0030 	movs.w	r0, r0, rrx
   d936c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9370:	f104 0401 	add.w	r4, r4, #1
   d9374:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d937c:	f080 809a 	bcs.w	d94b4 <__adddf3+0x240>
   d9380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9384:	bf08      	it	eq
   d9386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d938a:	f150 0000 	adcs.w	r0, r0, #0
   d938e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9392:	ea41 0105 	orr.w	r1, r1, r5
   d9396:	bd30      	pop	{r4, r5, pc}
   d9398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d939c:	4140      	adcs	r0, r0
   d939e:	eb41 0101 	adc.w	r1, r1, r1
   d93a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d93a6:	f1a4 0401 	sub.w	r4, r4, #1
   d93aa:	d1e9      	bne.n	d9380 <__adddf3+0x10c>
   d93ac:	f091 0f00 	teq	r1, #0
   d93b0:	bf04      	itt	eq
   d93b2:	4601      	moveq	r1, r0
   d93b4:	2000      	moveq	r0, #0
   d93b6:	fab1 f381 	clz	r3, r1
   d93ba:	bf08      	it	eq
   d93bc:	3320      	addeq	r3, #32
   d93be:	f1a3 030b 	sub.w	r3, r3, #11
   d93c2:	f1b3 0220 	subs.w	r2, r3, #32
   d93c6:	da0c      	bge.n	d93e2 <__adddf3+0x16e>
   d93c8:	320c      	adds	r2, #12
   d93ca:	dd08      	ble.n	d93de <__adddf3+0x16a>
   d93cc:	f102 0c14 	add.w	ip, r2, #20
   d93d0:	f1c2 020c 	rsb	r2, r2, #12
   d93d4:	fa01 f00c 	lsl.w	r0, r1, ip
   d93d8:	fa21 f102 	lsr.w	r1, r1, r2
   d93dc:	e00c      	b.n	d93f8 <__adddf3+0x184>
   d93de:	f102 0214 	add.w	r2, r2, #20
   d93e2:	bfd8      	it	le
   d93e4:	f1c2 0c20 	rsble	ip, r2, #32
   d93e8:	fa01 f102 	lsl.w	r1, r1, r2
   d93ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d93f0:	bfdc      	itt	le
   d93f2:	ea41 010c 	orrle.w	r1, r1, ip
   d93f6:	4090      	lslle	r0, r2
   d93f8:	1ae4      	subs	r4, r4, r3
   d93fa:	bfa2      	ittt	ge
   d93fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9400:	4329      	orrge	r1, r5
   d9402:	bd30      	popge	{r4, r5, pc}
   d9404:	ea6f 0404 	mvn.w	r4, r4
   d9408:	3c1f      	subs	r4, #31
   d940a:	da1c      	bge.n	d9446 <__adddf3+0x1d2>
   d940c:	340c      	adds	r4, #12
   d940e:	dc0e      	bgt.n	d942e <__adddf3+0x1ba>
   d9410:	f104 0414 	add.w	r4, r4, #20
   d9414:	f1c4 0220 	rsb	r2, r4, #32
   d9418:	fa20 f004 	lsr.w	r0, r0, r4
   d941c:	fa01 f302 	lsl.w	r3, r1, r2
   d9420:	ea40 0003 	orr.w	r0, r0, r3
   d9424:	fa21 f304 	lsr.w	r3, r1, r4
   d9428:	ea45 0103 	orr.w	r1, r5, r3
   d942c:	bd30      	pop	{r4, r5, pc}
   d942e:	f1c4 040c 	rsb	r4, r4, #12
   d9432:	f1c4 0220 	rsb	r2, r4, #32
   d9436:	fa20 f002 	lsr.w	r0, r0, r2
   d943a:	fa01 f304 	lsl.w	r3, r1, r4
   d943e:	ea40 0003 	orr.w	r0, r0, r3
   d9442:	4629      	mov	r1, r5
   d9444:	bd30      	pop	{r4, r5, pc}
   d9446:	fa21 f004 	lsr.w	r0, r1, r4
   d944a:	4629      	mov	r1, r5
   d944c:	bd30      	pop	{r4, r5, pc}
   d944e:	f094 0f00 	teq	r4, #0
   d9452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9456:	bf06      	itte	eq
   d9458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d945c:	3401      	addeq	r4, #1
   d945e:	3d01      	subne	r5, #1
   d9460:	e74e      	b.n	d9300 <__adddf3+0x8c>
   d9462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9466:	bf18      	it	ne
   d9468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d946c:	d029      	beq.n	d94c2 <__adddf3+0x24e>
   d946e:	ea94 0f05 	teq	r4, r5
   d9472:	bf08      	it	eq
   d9474:	ea90 0f02 	teqeq	r0, r2
   d9478:	d005      	beq.n	d9486 <__adddf3+0x212>
   d947a:	ea54 0c00 	orrs.w	ip, r4, r0
   d947e:	bf04      	itt	eq
   d9480:	4619      	moveq	r1, r3
   d9482:	4610      	moveq	r0, r2
   d9484:	bd30      	pop	{r4, r5, pc}
   d9486:	ea91 0f03 	teq	r1, r3
   d948a:	bf1e      	ittt	ne
   d948c:	2100      	movne	r1, #0
   d948e:	2000      	movne	r0, #0
   d9490:	bd30      	popne	{r4, r5, pc}
   d9492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9496:	d105      	bne.n	d94a4 <__adddf3+0x230>
   d9498:	0040      	lsls	r0, r0, #1
   d949a:	4149      	adcs	r1, r1
   d949c:	bf28      	it	cs
   d949e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d94a2:	bd30      	pop	{r4, r5, pc}
   d94a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d94a8:	bf3c      	itt	cc
   d94aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d94ae:	bd30      	popcc	{r4, r5, pc}
   d94b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d94b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d94b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d94bc:	f04f 0000 	mov.w	r0, #0
   d94c0:	bd30      	pop	{r4, r5, pc}
   d94c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d94c6:	bf1a      	itte	ne
   d94c8:	4619      	movne	r1, r3
   d94ca:	4610      	movne	r0, r2
   d94cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d94d0:	bf1c      	itt	ne
   d94d2:	460b      	movne	r3, r1
   d94d4:	4602      	movne	r2, r0
   d94d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d94da:	bf06      	itte	eq
   d94dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d94e0:	ea91 0f03 	teqeq	r1, r3
   d94e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d94e8:	bd30      	pop	{r4, r5, pc}
   d94ea:	bf00      	nop

000d94ec <__aeabi_ui2d>:
   d94ec:	f090 0f00 	teq	r0, #0
   d94f0:	bf04      	itt	eq
   d94f2:	2100      	moveq	r1, #0
   d94f4:	4770      	bxeq	lr
   d94f6:	b530      	push	{r4, r5, lr}
   d94f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9500:	f04f 0500 	mov.w	r5, #0
   d9504:	f04f 0100 	mov.w	r1, #0
   d9508:	e750      	b.n	d93ac <__adddf3+0x138>
   d950a:	bf00      	nop

000d950c <__aeabi_i2d>:
   d950c:	f090 0f00 	teq	r0, #0
   d9510:	bf04      	itt	eq
   d9512:	2100      	moveq	r1, #0
   d9514:	4770      	bxeq	lr
   d9516:	b530      	push	{r4, r5, lr}
   d9518:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d951c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9524:	bf48      	it	mi
   d9526:	4240      	negmi	r0, r0
   d9528:	f04f 0100 	mov.w	r1, #0
   d952c:	e73e      	b.n	d93ac <__adddf3+0x138>
   d952e:	bf00      	nop

000d9530 <__aeabi_f2d>:
   d9530:	0042      	lsls	r2, r0, #1
   d9532:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9536:	ea4f 0131 	mov.w	r1, r1, rrx
   d953a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d953e:	bf1f      	itttt	ne
   d9540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d954c:	4770      	bxne	lr
   d954e:	f092 0f00 	teq	r2, #0
   d9552:	bf14      	ite	ne
   d9554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9558:	4770      	bxeq	lr
   d955a:	b530      	push	{r4, r5, lr}
   d955c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9568:	e720      	b.n	d93ac <__adddf3+0x138>
   d956a:	bf00      	nop

000d956c <__aeabi_ul2d>:
   d956c:	ea50 0201 	orrs.w	r2, r0, r1
   d9570:	bf08      	it	eq
   d9572:	4770      	bxeq	lr
   d9574:	b530      	push	{r4, r5, lr}
   d9576:	f04f 0500 	mov.w	r5, #0
   d957a:	e00a      	b.n	d9592 <__aeabi_l2d+0x16>

000d957c <__aeabi_l2d>:
   d957c:	ea50 0201 	orrs.w	r2, r0, r1
   d9580:	bf08      	it	eq
   d9582:	4770      	bxeq	lr
   d9584:	b530      	push	{r4, r5, lr}
   d9586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d958a:	d502      	bpl.n	d9592 <__aeabi_l2d+0x16>
   d958c:	4240      	negs	r0, r0
   d958e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9592:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9596:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d959a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d959e:	f43f aedc 	beq.w	d935a <__adddf3+0xe6>
   d95a2:	f04f 0203 	mov.w	r2, #3
   d95a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d95aa:	bf18      	it	ne
   d95ac:	3203      	addne	r2, #3
   d95ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d95b2:	bf18      	it	ne
   d95b4:	3203      	addne	r2, #3
   d95b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d95ba:	f1c2 0320 	rsb	r3, r2, #32
   d95be:	fa00 fc03 	lsl.w	ip, r0, r3
   d95c2:	fa20 f002 	lsr.w	r0, r0, r2
   d95c6:	fa01 fe03 	lsl.w	lr, r1, r3
   d95ca:	ea40 000e 	orr.w	r0, r0, lr
   d95ce:	fa21 f102 	lsr.w	r1, r1, r2
   d95d2:	4414      	add	r4, r2
   d95d4:	e6c1      	b.n	d935a <__adddf3+0xe6>
   d95d6:	bf00      	nop

000d95d8 <__aeabi_dmul>:
   d95d8:	b570      	push	{r4, r5, r6, lr}
   d95da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d95de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d95e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d95e6:	bf1d      	ittte	ne
   d95e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d95ec:	ea94 0f0c 	teqne	r4, ip
   d95f0:	ea95 0f0c 	teqne	r5, ip
   d95f4:	f000 f8de 	bleq	d97b4 <__aeabi_dmul+0x1dc>
   d95f8:	442c      	add	r4, r5
   d95fa:	ea81 0603 	eor.w	r6, r1, r3
   d95fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d960a:	bf18      	it	ne
   d960c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9618:	d038      	beq.n	d968c <__aeabi_dmul+0xb4>
   d961a:	fba0 ce02 	umull	ip, lr, r0, r2
   d961e:	f04f 0500 	mov.w	r5, #0
   d9622:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9626:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d962a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d962e:	f04f 0600 	mov.w	r6, #0
   d9632:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9636:	f09c 0f00 	teq	ip, #0
   d963a:	bf18      	it	ne
   d963c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9640:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9644:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9648:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d964c:	d204      	bcs.n	d9658 <__aeabi_dmul+0x80>
   d964e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9652:	416d      	adcs	r5, r5
   d9654:	eb46 0606 	adc.w	r6, r6, r6
   d9658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d965c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d966c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9670:	bf88      	it	hi
   d9672:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9676:	d81e      	bhi.n	d96b6 <__aeabi_dmul+0xde>
   d9678:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d967c:	bf08      	it	eq
   d967e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9682:	f150 0000 	adcs.w	r0, r0, #0
   d9686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d968a:	bd70      	pop	{r4, r5, r6, pc}
   d968c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9690:	ea46 0101 	orr.w	r1, r6, r1
   d9694:	ea40 0002 	orr.w	r0, r0, r2
   d9698:	ea81 0103 	eor.w	r1, r1, r3
   d969c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d96a0:	bfc2      	ittt	gt
   d96a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d96a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d96aa:	bd70      	popgt	{r4, r5, r6, pc}
   d96ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d96b0:	f04f 0e00 	mov.w	lr, #0
   d96b4:	3c01      	subs	r4, #1
   d96b6:	f300 80ab 	bgt.w	d9810 <__aeabi_dmul+0x238>
   d96ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d96be:	bfde      	ittt	le
   d96c0:	2000      	movle	r0, #0
   d96c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d96c6:	bd70      	pople	{r4, r5, r6, pc}
   d96c8:	f1c4 0400 	rsb	r4, r4, #0
   d96cc:	3c20      	subs	r4, #32
   d96ce:	da35      	bge.n	d973c <__aeabi_dmul+0x164>
   d96d0:	340c      	adds	r4, #12
   d96d2:	dc1b      	bgt.n	d970c <__aeabi_dmul+0x134>
   d96d4:	f104 0414 	add.w	r4, r4, #20
   d96d8:	f1c4 0520 	rsb	r5, r4, #32
   d96dc:	fa00 f305 	lsl.w	r3, r0, r5
   d96e0:	fa20 f004 	lsr.w	r0, r0, r4
   d96e4:	fa01 f205 	lsl.w	r2, r1, r5
   d96e8:	ea40 0002 	orr.w	r0, r0, r2
   d96ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d96f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d96f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d96f8:	fa21 f604 	lsr.w	r6, r1, r4
   d96fc:	eb42 0106 	adc.w	r1, r2, r6
   d9700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9704:	bf08      	it	eq
   d9706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d970a:	bd70      	pop	{r4, r5, r6, pc}
   d970c:	f1c4 040c 	rsb	r4, r4, #12
   d9710:	f1c4 0520 	rsb	r5, r4, #32
   d9714:	fa00 f304 	lsl.w	r3, r0, r4
   d9718:	fa20 f005 	lsr.w	r0, r0, r5
   d971c:	fa01 f204 	lsl.w	r2, r1, r4
   d9720:	ea40 0002 	orr.w	r0, r0, r2
   d9724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d972c:	f141 0100 	adc.w	r1, r1, #0
   d9730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9734:	bf08      	it	eq
   d9736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d973a:	bd70      	pop	{r4, r5, r6, pc}
   d973c:	f1c4 0520 	rsb	r5, r4, #32
   d9740:	fa00 f205 	lsl.w	r2, r0, r5
   d9744:	ea4e 0e02 	orr.w	lr, lr, r2
   d9748:	fa20 f304 	lsr.w	r3, r0, r4
   d974c:	fa01 f205 	lsl.w	r2, r1, r5
   d9750:	ea43 0302 	orr.w	r3, r3, r2
   d9754:	fa21 f004 	lsr.w	r0, r1, r4
   d9758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d975c:	fa21 f204 	lsr.w	r2, r1, r4
   d9760:	ea20 0002 	bic.w	r0, r0, r2
   d9764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d976c:	bf08      	it	eq
   d976e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9772:	bd70      	pop	{r4, r5, r6, pc}
   d9774:	f094 0f00 	teq	r4, #0
   d9778:	d10f      	bne.n	d979a <__aeabi_dmul+0x1c2>
   d977a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d977e:	0040      	lsls	r0, r0, #1
   d9780:	eb41 0101 	adc.w	r1, r1, r1
   d9784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9788:	bf08      	it	eq
   d978a:	3c01      	subeq	r4, #1
   d978c:	d0f7      	beq.n	d977e <__aeabi_dmul+0x1a6>
   d978e:	ea41 0106 	orr.w	r1, r1, r6
   d9792:	f095 0f00 	teq	r5, #0
   d9796:	bf18      	it	ne
   d9798:	4770      	bxne	lr
   d979a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d979e:	0052      	lsls	r2, r2, #1
   d97a0:	eb43 0303 	adc.w	r3, r3, r3
   d97a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d97a8:	bf08      	it	eq
   d97aa:	3d01      	subeq	r5, #1
   d97ac:	d0f7      	beq.n	d979e <__aeabi_dmul+0x1c6>
   d97ae:	ea43 0306 	orr.w	r3, r3, r6
   d97b2:	4770      	bx	lr
   d97b4:	ea94 0f0c 	teq	r4, ip
   d97b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d97bc:	bf18      	it	ne
   d97be:	ea95 0f0c 	teqne	r5, ip
   d97c2:	d00c      	beq.n	d97de <__aeabi_dmul+0x206>
   d97c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d97c8:	bf18      	it	ne
   d97ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97ce:	d1d1      	bne.n	d9774 <__aeabi_dmul+0x19c>
   d97d0:	ea81 0103 	eor.w	r1, r1, r3
   d97d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d97d8:	f04f 0000 	mov.w	r0, #0
   d97dc:	bd70      	pop	{r4, r5, r6, pc}
   d97de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d97e2:	bf06      	itte	eq
   d97e4:	4610      	moveq	r0, r2
   d97e6:	4619      	moveq	r1, r3
   d97e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97ec:	d019      	beq.n	d9822 <__aeabi_dmul+0x24a>
   d97ee:	ea94 0f0c 	teq	r4, ip
   d97f2:	d102      	bne.n	d97fa <__aeabi_dmul+0x222>
   d97f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d97f8:	d113      	bne.n	d9822 <__aeabi_dmul+0x24a>
   d97fa:	ea95 0f0c 	teq	r5, ip
   d97fe:	d105      	bne.n	d980c <__aeabi_dmul+0x234>
   d9800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9804:	bf1c      	itt	ne
   d9806:	4610      	movne	r0, r2
   d9808:	4619      	movne	r1, r3
   d980a:	d10a      	bne.n	d9822 <__aeabi_dmul+0x24a>
   d980c:	ea81 0103 	eor.w	r1, r1, r3
   d9810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9814:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d981c:	f04f 0000 	mov.w	r0, #0
   d9820:	bd70      	pop	{r4, r5, r6, pc}
   d9822:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9826:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d982a:	bd70      	pop	{r4, r5, r6, pc}

000d982c <__aeabi_ddiv>:
   d982c:	b570      	push	{r4, r5, r6, lr}
   d982e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d983a:	bf1d      	ittte	ne
   d983c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9840:	ea94 0f0c 	teqne	r4, ip
   d9844:	ea95 0f0c 	teqne	r5, ip
   d9848:	f000 f8a7 	bleq	d999a <__aeabi_ddiv+0x16e>
   d984c:	eba4 0405 	sub.w	r4, r4, r5
   d9850:	ea81 0e03 	eor.w	lr, r1, r3
   d9854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9858:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d985c:	f000 8088 	beq.w	d9970 <__aeabi_ddiv+0x144>
   d9860:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d986c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9870:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d987c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9880:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9884:	429d      	cmp	r5, r3
   d9886:	bf08      	it	eq
   d9888:	4296      	cmpeq	r6, r2
   d988a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d988e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9892:	d202      	bcs.n	d989a <__aeabi_ddiv+0x6e>
   d9894:	085b      	lsrs	r3, r3, #1
   d9896:	ea4f 0232 	mov.w	r2, r2, rrx
   d989a:	1ab6      	subs	r6, r6, r2
   d989c:	eb65 0503 	sbc.w	r5, r5, r3
   d98a0:	085b      	lsrs	r3, r3, #1
   d98a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d98a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d98aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d98ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d98b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98b6:	bf22      	ittt	cs
   d98b8:	1ab6      	subcs	r6, r6, r2
   d98ba:	4675      	movcs	r5, lr
   d98bc:	ea40 000c 	orrcs.w	r0, r0, ip
   d98c0:	085b      	lsrs	r3, r3, #1
   d98c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d98c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d98ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98ce:	bf22      	ittt	cs
   d98d0:	1ab6      	subcs	r6, r6, r2
   d98d2:	4675      	movcs	r5, lr
   d98d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d98d8:	085b      	lsrs	r3, r3, #1
   d98da:	ea4f 0232 	mov.w	r2, r2, rrx
   d98de:	ebb6 0e02 	subs.w	lr, r6, r2
   d98e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98e6:	bf22      	ittt	cs
   d98e8:	1ab6      	subcs	r6, r6, r2
   d98ea:	4675      	movcs	r5, lr
   d98ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d98f0:	085b      	lsrs	r3, r3, #1
   d98f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d98f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d98fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98fe:	bf22      	ittt	cs
   d9900:	1ab6      	subcs	r6, r6, r2
   d9902:	4675      	movcs	r5, lr
   d9904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9908:	ea55 0e06 	orrs.w	lr, r5, r6
   d990c:	d018      	beq.n	d9940 <__aeabi_ddiv+0x114>
   d990e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9916:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d991a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d991e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d992a:	d1c0      	bne.n	d98ae <__aeabi_ddiv+0x82>
   d992c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9930:	d10b      	bne.n	d994a <__aeabi_ddiv+0x11e>
   d9932:	ea41 0100 	orr.w	r1, r1, r0
   d9936:	f04f 0000 	mov.w	r0, #0
   d993a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d993e:	e7b6      	b.n	d98ae <__aeabi_ddiv+0x82>
   d9940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9944:	bf04      	itt	eq
   d9946:	4301      	orreq	r1, r0
   d9948:	2000      	moveq	r0, #0
   d994a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d994e:	bf88      	it	hi
   d9950:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9954:	f63f aeaf 	bhi.w	d96b6 <__aeabi_dmul+0xde>
   d9958:	ebb5 0c03 	subs.w	ip, r5, r3
   d995c:	bf04      	itt	eq
   d995e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9966:	f150 0000 	adcs.w	r0, r0, #0
   d996a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d996e:	bd70      	pop	{r4, r5, r6, pc}
   d9970:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d997c:	bfc2      	ittt	gt
   d997e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9986:	bd70      	popgt	{r4, r5, r6, pc}
   d9988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d998c:	f04f 0e00 	mov.w	lr, #0
   d9990:	3c01      	subs	r4, #1
   d9992:	e690      	b.n	d96b6 <__aeabi_dmul+0xde>
   d9994:	ea45 0e06 	orr.w	lr, r5, r6
   d9998:	e68d      	b.n	d96b6 <__aeabi_dmul+0xde>
   d999a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d999e:	ea94 0f0c 	teq	r4, ip
   d99a2:	bf08      	it	eq
   d99a4:	ea95 0f0c 	teqeq	r5, ip
   d99a8:	f43f af3b 	beq.w	d9822 <__aeabi_dmul+0x24a>
   d99ac:	ea94 0f0c 	teq	r4, ip
   d99b0:	d10a      	bne.n	d99c8 <__aeabi_ddiv+0x19c>
   d99b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d99b6:	f47f af34 	bne.w	d9822 <__aeabi_dmul+0x24a>
   d99ba:	ea95 0f0c 	teq	r5, ip
   d99be:	f47f af25 	bne.w	d980c <__aeabi_dmul+0x234>
   d99c2:	4610      	mov	r0, r2
   d99c4:	4619      	mov	r1, r3
   d99c6:	e72c      	b.n	d9822 <__aeabi_dmul+0x24a>
   d99c8:	ea95 0f0c 	teq	r5, ip
   d99cc:	d106      	bne.n	d99dc <__aeabi_ddiv+0x1b0>
   d99ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d99d2:	f43f aefd 	beq.w	d97d0 <__aeabi_dmul+0x1f8>
   d99d6:	4610      	mov	r0, r2
   d99d8:	4619      	mov	r1, r3
   d99da:	e722      	b.n	d9822 <__aeabi_dmul+0x24a>
   d99dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d99e0:	bf18      	it	ne
   d99e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d99e6:	f47f aec5 	bne.w	d9774 <__aeabi_dmul+0x19c>
   d99ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d99ee:	f47f af0d 	bne.w	d980c <__aeabi_dmul+0x234>
   d99f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d99f6:	f47f aeeb 	bne.w	d97d0 <__aeabi_dmul+0x1f8>
   d99fa:	e712      	b.n	d9822 <__aeabi_dmul+0x24a>

000d99fc <__gedf2>:
   d99fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9a00:	e006      	b.n	d9a10 <__cmpdf2+0x4>
   d9a02:	bf00      	nop

000d9a04 <__ledf2>:
   d9a04:	f04f 0c01 	mov.w	ip, #1
   d9a08:	e002      	b.n	d9a10 <__cmpdf2+0x4>
   d9a0a:	bf00      	nop

000d9a0c <__cmpdf2>:
   d9a0c:	f04f 0c01 	mov.w	ip, #1
   d9a10:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a20:	bf18      	it	ne
   d9a22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9a26:	d01b      	beq.n	d9a60 <__cmpdf2+0x54>
   d9a28:	b001      	add	sp, #4
   d9a2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9a2e:	bf0c      	ite	eq
   d9a30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9a34:	ea91 0f03 	teqne	r1, r3
   d9a38:	bf02      	ittt	eq
   d9a3a:	ea90 0f02 	teqeq	r0, r2
   d9a3e:	2000      	moveq	r0, #0
   d9a40:	4770      	bxeq	lr
   d9a42:	f110 0f00 	cmn.w	r0, #0
   d9a46:	ea91 0f03 	teq	r1, r3
   d9a4a:	bf58      	it	pl
   d9a4c:	4299      	cmppl	r1, r3
   d9a4e:	bf08      	it	eq
   d9a50:	4290      	cmpeq	r0, r2
   d9a52:	bf2c      	ite	cs
   d9a54:	17d8      	asrcs	r0, r3, #31
   d9a56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9a5a:	f040 0001 	orr.w	r0, r0, #1
   d9a5e:	4770      	bx	lr
   d9a60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a68:	d102      	bne.n	d9a70 <__cmpdf2+0x64>
   d9a6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9a6e:	d107      	bne.n	d9a80 <__cmpdf2+0x74>
   d9a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a78:	d1d6      	bne.n	d9a28 <__cmpdf2+0x1c>
   d9a7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9a7e:	d0d3      	beq.n	d9a28 <__cmpdf2+0x1c>
   d9a80:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9a84:	4770      	bx	lr
   d9a86:	bf00      	nop

000d9a88 <__aeabi_cdrcmple>:
   d9a88:	4684      	mov	ip, r0
   d9a8a:	4610      	mov	r0, r2
   d9a8c:	4662      	mov	r2, ip
   d9a8e:	468c      	mov	ip, r1
   d9a90:	4619      	mov	r1, r3
   d9a92:	4663      	mov	r3, ip
   d9a94:	e000      	b.n	d9a98 <__aeabi_cdcmpeq>
   d9a96:	bf00      	nop

000d9a98 <__aeabi_cdcmpeq>:
   d9a98:	b501      	push	{r0, lr}
   d9a9a:	f7ff ffb7 	bl	d9a0c <__cmpdf2>
   d9a9e:	2800      	cmp	r0, #0
   d9aa0:	bf48      	it	mi
   d9aa2:	f110 0f00 	cmnmi.w	r0, #0
   d9aa6:	bd01      	pop	{r0, pc}

000d9aa8 <__aeabi_dcmpeq>:
   d9aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9aac:	f7ff fff4 	bl	d9a98 <__aeabi_cdcmpeq>
   d9ab0:	bf0c      	ite	eq
   d9ab2:	2001      	moveq	r0, #1
   d9ab4:	2000      	movne	r0, #0
   d9ab6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9aba:	bf00      	nop

000d9abc <__aeabi_dcmplt>:
   d9abc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ac0:	f7ff ffea 	bl	d9a98 <__aeabi_cdcmpeq>
   d9ac4:	bf34      	ite	cc
   d9ac6:	2001      	movcc	r0, #1
   d9ac8:	2000      	movcs	r0, #0
   d9aca:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ace:	bf00      	nop

000d9ad0 <__aeabi_dcmple>:
   d9ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ad4:	f7ff ffe0 	bl	d9a98 <__aeabi_cdcmpeq>
   d9ad8:	bf94      	ite	ls
   d9ada:	2001      	movls	r0, #1
   d9adc:	2000      	movhi	r0, #0
   d9ade:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ae2:	bf00      	nop

000d9ae4 <__aeabi_dcmpge>:
   d9ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ae8:	f7ff ffce 	bl	d9a88 <__aeabi_cdrcmple>
   d9aec:	bf94      	ite	ls
   d9aee:	2001      	movls	r0, #1
   d9af0:	2000      	movhi	r0, #0
   d9af2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9af6:	bf00      	nop

000d9af8 <__aeabi_dcmpgt>:
   d9af8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9afc:	f7ff ffc4 	bl	d9a88 <__aeabi_cdrcmple>
   d9b00:	bf34      	ite	cc
   d9b02:	2001      	movcc	r0, #1
   d9b04:	2000      	movcs	r0, #0
   d9b06:	f85d fb08 	ldr.w	pc, [sp], #8
   d9b0a:	bf00      	nop

000d9b0c <__aeabi_dcmpun>:
   d9b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b14:	d102      	bne.n	d9b1c <__aeabi_dcmpun+0x10>
   d9b16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9b1a:	d10a      	bne.n	d9b32 <__aeabi_dcmpun+0x26>
   d9b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b24:	d102      	bne.n	d9b2c <__aeabi_dcmpun+0x20>
   d9b26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9b2a:	d102      	bne.n	d9b32 <__aeabi_dcmpun+0x26>
   d9b2c:	f04f 0000 	mov.w	r0, #0
   d9b30:	4770      	bx	lr
   d9b32:	f04f 0001 	mov.w	r0, #1
   d9b36:	4770      	bx	lr

000d9b38 <__aeabi_d2iz>:
   d9b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9b40:	d215      	bcs.n	d9b6e <__aeabi_d2iz+0x36>
   d9b42:	d511      	bpl.n	d9b68 <__aeabi_d2iz+0x30>
   d9b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9b4c:	d912      	bls.n	d9b74 <__aeabi_d2iz+0x3c>
   d9b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9b5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9b5e:	fa23 f002 	lsr.w	r0, r3, r2
   d9b62:	bf18      	it	ne
   d9b64:	4240      	negne	r0, r0
   d9b66:	4770      	bx	lr
   d9b68:	f04f 0000 	mov.w	r0, #0
   d9b6c:	4770      	bx	lr
   d9b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9b72:	d105      	bne.n	d9b80 <__aeabi_d2iz+0x48>
   d9b74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9b78:	bf08      	it	eq
   d9b7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9b7e:	4770      	bx	lr
   d9b80:	f04f 0000 	mov.w	r0, #0
   d9b84:	4770      	bx	lr
   d9b86:	bf00      	nop

000d9b88 <__aeabi_d2uiz>:
   d9b88:	004a      	lsls	r2, r1, #1
   d9b8a:	d211      	bcs.n	d9bb0 <__aeabi_d2uiz+0x28>
   d9b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9b90:	d211      	bcs.n	d9bb6 <__aeabi_d2uiz+0x2e>
   d9b92:	d50d      	bpl.n	d9bb0 <__aeabi_d2uiz+0x28>
   d9b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9b9c:	d40e      	bmi.n	d9bbc <__aeabi_d2uiz+0x34>
   d9b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9baa:	fa23 f002 	lsr.w	r0, r3, r2
   d9bae:	4770      	bx	lr
   d9bb0:	f04f 0000 	mov.w	r0, #0
   d9bb4:	4770      	bx	lr
   d9bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9bba:	d102      	bne.n	d9bc2 <__aeabi_d2uiz+0x3a>
   d9bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9bc0:	4770      	bx	lr
   d9bc2:	f04f 0000 	mov.w	r0, #0
   d9bc6:	4770      	bx	lr

000d9bc8 <__aeabi_d2f>:
   d9bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9bd0:	bf24      	itt	cs
   d9bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9bda:	d90d      	bls.n	d9bf8 <__aeabi_d2f+0x30>
   d9bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9bf0:	bf08      	it	eq
   d9bf2:	f020 0001 	biceq.w	r0, r0, #1
   d9bf6:	4770      	bx	lr
   d9bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9bfc:	d121      	bne.n	d9c42 <__aeabi_d2f+0x7a>
   d9bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9c02:	bfbc      	itt	lt
   d9c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9c08:	4770      	bxlt	lr
   d9c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9c12:	f1c2 0218 	rsb	r2, r2, #24
   d9c16:	f1c2 0c20 	rsb	ip, r2, #32
   d9c1a:	fa10 f30c 	lsls.w	r3, r0, ip
   d9c1e:	fa20 f002 	lsr.w	r0, r0, r2
   d9c22:	bf18      	it	ne
   d9c24:	f040 0001 	orrne.w	r0, r0, #1
   d9c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9c30:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9c34:	ea40 000c 	orr.w	r0, r0, ip
   d9c38:	fa23 f302 	lsr.w	r3, r3, r2
   d9c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9c40:	e7cc      	b.n	d9bdc <__aeabi_d2f+0x14>
   d9c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9c46:	d107      	bne.n	d9c58 <__aeabi_d2f+0x90>
   d9c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9c4c:	bf1e      	ittt	ne
   d9c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9c56:	4770      	bxne	lr
   d9c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9c64:	4770      	bx	lr
   d9c66:	bf00      	nop

000d9c68 <atoi>:
   d9c68:	220a      	movs	r2, #10
   d9c6a:	2100      	movs	r1, #0
   d9c6c:	f000 bf9a 	b.w	daba4 <strtol>

000d9c70 <atol>:
   d9c70:	220a      	movs	r2, #10
   d9c72:	2100      	movs	r1, #0
   d9c74:	f000 bf96 	b.w	daba4 <strtol>

000d9c78 <__cxa_atexit>:
   d9c78:	b510      	push	{r4, lr}
   d9c7a:	4c05      	ldr	r4, [pc, #20]	; (d9c90 <__cxa_atexit+0x18>)
   d9c7c:	4613      	mov	r3, r2
   d9c7e:	b12c      	cbz	r4, d9c8c <__cxa_atexit+0x14>
   d9c80:	460a      	mov	r2, r1
   d9c82:	4601      	mov	r1, r0
   d9c84:	2002      	movs	r0, #2
   d9c86:	f3af 8000 	nop.w
   d9c8a:	bd10      	pop	{r4, pc}
   d9c8c:	4620      	mov	r0, r4
   d9c8e:	bd10      	pop	{r4, pc}
   d9c90:	00000000 	.word	0x00000000

000d9c94 <_localeconv_r>:
   d9c94:	4800      	ldr	r0, [pc, #0]	; (d9c98 <_localeconv_r+0x4>)
   d9c96:	4770      	bx	lr
   d9c98:	2003d508 	.word	0x2003d508

000d9c9c <memcmp>:
   d9c9c:	b510      	push	{r4, lr}
   d9c9e:	3901      	subs	r1, #1
   d9ca0:	4402      	add	r2, r0
   d9ca2:	4290      	cmp	r0, r2
   d9ca4:	d007      	beq.n	d9cb6 <memcmp+0x1a>
   d9ca6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9caa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9cae:	42a3      	cmp	r3, r4
   d9cb0:	d0f7      	beq.n	d9ca2 <memcmp+0x6>
   d9cb2:	1b18      	subs	r0, r3, r4
   d9cb4:	bd10      	pop	{r4, pc}
   d9cb6:	2000      	movs	r0, #0
   d9cb8:	bd10      	pop	{r4, pc}

000d9cba <memcpy>:
   d9cba:	b510      	push	{r4, lr}
   d9cbc:	1e43      	subs	r3, r0, #1
   d9cbe:	440a      	add	r2, r1
   d9cc0:	4291      	cmp	r1, r2
   d9cc2:	d004      	beq.n	d9cce <memcpy+0x14>
   d9cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9ccc:	e7f8      	b.n	d9cc0 <memcpy+0x6>
   d9cce:	bd10      	pop	{r4, pc}

000d9cd0 <memset>:
   d9cd0:	4402      	add	r2, r0
   d9cd2:	4603      	mov	r3, r0
   d9cd4:	4293      	cmp	r3, r2
   d9cd6:	d002      	beq.n	d9cde <memset+0xe>
   d9cd8:	f803 1b01 	strb.w	r1, [r3], #1
   d9cdc:	e7fa      	b.n	d9cd4 <memset+0x4>
   d9cde:	4770      	bx	lr

000d9ce0 <srand>:
   d9ce0:	b538      	push	{r3, r4, r5, lr}
   d9ce2:	4b12      	ldr	r3, [pc, #72]	; (d9d2c <srand+0x4c>)
   d9ce4:	681c      	ldr	r4, [r3, #0]
   d9ce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9ce8:	4605      	mov	r5, r0
   d9cea:	b9d3      	cbnz	r3, d9d22 <srand+0x42>
   d9cec:	2018      	movs	r0, #24
   d9cee:	f7fc f935 	bl	d5f5c <malloc>
   d9cf2:	f243 330e 	movw	r3, #13070	; 0x330e
   d9cf6:	63a0      	str	r0, [r4, #56]	; 0x38
   d9cf8:	8003      	strh	r3, [r0, #0]
   d9cfa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9cfe:	8043      	strh	r3, [r0, #2]
   d9d00:	f241 2334 	movw	r3, #4660	; 0x1234
   d9d04:	8083      	strh	r3, [r0, #4]
   d9d06:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9d0a:	80c3      	strh	r3, [r0, #6]
   d9d0c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9d10:	8103      	strh	r3, [r0, #8]
   d9d12:	2305      	movs	r3, #5
   d9d14:	8143      	strh	r3, [r0, #10]
   d9d16:	230b      	movs	r3, #11
   d9d18:	8183      	strh	r3, [r0, #12]
   d9d1a:	2201      	movs	r2, #1
   d9d1c:	2300      	movs	r3, #0
   d9d1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9d24:	2200      	movs	r2, #0
   d9d26:	611d      	str	r5, [r3, #16]
   d9d28:	615a      	str	r2, [r3, #20]
   d9d2a:	bd38      	pop	{r3, r4, r5, pc}
   d9d2c:	2003d504 	.word	0x2003d504

000d9d30 <rand>:
   d9d30:	4b19      	ldr	r3, [pc, #100]	; (d9d98 <rand+0x68>)
   d9d32:	b510      	push	{r4, lr}
   d9d34:	681c      	ldr	r4, [r3, #0]
   d9d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9d38:	b9d3      	cbnz	r3, d9d70 <rand+0x40>
   d9d3a:	2018      	movs	r0, #24
   d9d3c:	f7fc f90e 	bl	d5f5c <malloc>
   d9d40:	f243 330e 	movw	r3, #13070	; 0x330e
   d9d44:	63a0      	str	r0, [r4, #56]	; 0x38
   d9d46:	8003      	strh	r3, [r0, #0]
   d9d48:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9d4c:	8043      	strh	r3, [r0, #2]
   d9d4e:	f241 2334 	movw	r3, #4660	; 0x1234
   d9d52:	8083      	strh	r3, [r0, #4]
   d9d54:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9d58:	80c3      	strh	r3, [r0, #6]
   d9d5a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9d5e:	8103      	strh	r3, [r0, #8]
   d9d60:	2305      	movs	r3, #5
   d9d62:	8143      	strh	r3, [r0, #10]
   d9d64:	230b      	movs	r3, #11
   d9d66:	8183      	strh	r3, [r0, #12]
   d9d68:	2201      	movs	r2, #1
   d9d6a:	2300      	movs	r3, #0
   d9d6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9d70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9d72:	4c0a      	ldr	r4, [pc, #40]	; (d9d9c <rand+0x6c>)
   d9d74:	690b      	ldr	r3, [r1, #16]
   d9d76:	6948      	ldr	r0, [r1, #20]
   d9d78:	4a09      	ldr	r2, [pc, #36]	; (d9da0 <rand+0x70>)
   d9d7a:	435c      	muls	r4, r3
   d9d7c:	fb02 4000 	mla	r0, r2, r0, r4
   d9d80:	fba3 2302 	umull	r2, r3, r3, r2
   d9d84:	3201      	adds	r2, #1
   d9d86:	4403      	add	r3, r0
   d9d88:	f143 0300 	adc.w	r3, r3, #0
   d9d8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d9d90:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9d94:	bd10      	pop	{r4, pc}
   d9d96:	bf00      	nop
   d9d98:	2003d504 	.word	0x2003d504
   d9d9c:	5851f42d 	.word	0x5851f42d
   d9da0:	4c957f2d 	.word	0x4c957f2d

000d9da4 <strcmp>:
   d9da4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9da8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9dac:	2a01      	cmp	r2, #1
   d9dae:	bf28      	it	cs
   d9db0:	429a      	cmpcs	r2, r3
   d9db2:	d0f7      	beq.n	d9da4 <strcmp>
   d9db4:	1ad0      	subs	r0, r2, r3
   d9db6:	4770      	bx	lr

000d9db8 <strcpy>:
   d9db8:	4603      	mov	r3, r0
   d9dba:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9dbe:	f803 2b01 	strb.w	r2, [r3], #1
   d9dc2:	2a00      	cmp	r2, #0
   d9dc4:	d1f9      	bne.n	d9dba <strcpy+0x2>
   d9dc6:	4770      	bx	lr

000d9dc8 <strdup>:
   d9dc8:	4b02      	ldr	r3, [pc, #8]	; (d9dd4 <strdup+0xc>)
   d9dca:	4601      	mov	r1, r0
   d9dcc:	6818      	ldr	r0, [r3, #0]
   d9dce:	f000 b803 	b.w	d9dd8 <_strdup_r>
   d9dd2:	bf00      	nop
   d9dd4:	2003d504 	.word	0x2003d504

000d9dd8 <_strdup_r>:
   d9dd8:	b570      	push	{r4, r5, r6, lr}
   d9dda:	4606      	mov	r6, r0
   d9ddc:	4608      	mov	r0, r1
   d9dde:	460c      	mov	r4, r1
   d9de0:	f000 f80d 	bl	d9dfe <strlen>
   d9de4:	1c45      	adds	r5, r0, #1
   d9de6:	4629      	mov	r1, r5
   d9de8:	4630      	mov	r0, r6
   d9dea:	f7fc f8df 	bl	d5fac <_malloc_r>
   d9dee:	4606      	mov	r6, r0
   d9df0:	b118      	cbz	r0, d9dfa <_strdup_r+0x22>
   d9df2:	462a      	mov	r2, r5
   d9df4:	4621      	mov	r1, r4
   d9df6:	f7ff ff60 	bl	d9cba <memcpy>
   d9dfa:	4630      	mov	r0, r6
   d9dfc:	bd70      	pop	{r4, r5, r6, pc}

000d9dfe <strlen>:
   d9dfe:	4603      	mov	r3, r0
   d9e00:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9e04:	2a00      	cmp	r2, #0
   d9e06:	d1fb      	bne.n	d9e00 <strlen+0x2>
   d9e08:	1a18      	subs	r0, r3, r0
   d9e0a:	3801      	subs	r0, #1
   d9e0c:	4770      	bx	lr

000d9e0e <strncmp>:
   d9e0e:	b530      	push	{r4, r5, lr}
   d9e10:	b182      	cbz	r2, d9e34 <strncmp+0x26>
   d9e12:	1e45      	subs	r5, r0, #1
   d9e14:	3901      	subs	r1, #1
   d9e16:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9e1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9e1e:	42a3      	cmp	r3, r4
   d9e20:	d106      	bne.n	d9e30 <strncmp+0x22>
   d9e22:	43ec      	mvns	r4, r5
   d9e24:	4414      	add	r4, r2
   d9e26:	42e0      	cmn	r0, r4
   d9e28:	d001      	beq.n	d9e2e <strncmp+0x20>
   d9e2a:	2b00      	cmp	r3, #0
   d9e2c:	d1f3      	bne.n	d9e16 <strncmp+0x8>
   d9e2e:	461c      	mov	r4, r3
   d9e30:	1b18      	subs	r0, r3, r4
   d9e32:	bd30      	pop	{r4, r5, pc}
   d9e34:	4610      	mov	r0, r2
   d9e36:	bd30      	pop	{r4, r5, pc}

000d9e38 <strnlen>:
   d9e38:	b510      	push	{r4, lr}
   d9e3a:	4603      	mov	r3, r0
   d9e3c:	4401      	add	r1, r0
   d9e3e:	428b      	cmp	r3, r1
   d9e40:	d004      	beq.n	d9e4c <strnlen+0x14>
   d9e42:	781a      	ldrb	r2, [r3, #0]
   d9e44:	1c5c      	adds	r4, r3, #1
   d9e46:	b10a      	cbz	r2, d9e4c <strnlen+0x14>
   d9e48:	4623      	mov	r3, r4
   d9e4a:	e7f8      	b.n	d9e3e <strnlen+0x6>
   d9e4c:	1a18      	subs	r0, r3, r0
   d9e4e:	bd10      	pop	{r4, pc}

000d9e50 <sulp>:
   d9e50:	b570      	push	{r4, r5, r6, lr}
   d9e52:	4604      	mov	r4, r0
   d9e54:	460d      	mov	r5, r1
   d9e56:	ec45 4b10 	vmov	d0, r4, r5
   d9e5a:	4616      	mov	r6, r2
   d9e5c:	f001 fc90 	bl	db780 <__ulp>
   d9e60:	ec51 0b10 	vmov	r0, r1, d0
   d9e64:	b17e      	cbz	r6, d9e86 <sulp+0x36>
   d9e66:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9e6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9e6e:	2b00      	cmp	r3, #0
   d9e70:	dd09      	ble.n	d9e86 <sulp+0x36>
   d9e72:	051b      	lsls	r3, r3, #20
   d9e74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9e78:	2400      	movs	r4, #0
   d9e7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9e7e:	4622      	mov	r2, r4
   d9e80:	462b      	mov	r3, r5
   d9e82:	f7ff fba9 	bl	d95d8 <__aeabi_dmul>
   d9e86:	bd70      	pop	{r4, r5, r6, pc}

000d9e88 <_strtod_r>:
   d9e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e8c:	b09d      	sub	sp, #116	; 0x74
   d9e8e:	2300      	movs	r3, #0
   d9e90:	9002      	str	r0, [sp, #8]
   d9e92:	460c      	mov	r4, r1
   d9e94:	9213      	str	r2, [sp, #76]	; 0x4c
   d9e96:	9318      	str	r3, [sp, #96]	; 0x60
   d9e98:	f04f 0a00 	mov.w	sl, #0
   d9e9c:	f04f 0b00 	mov.w	fp, #0
   d9ea0:	9117      	str	r1, [sp, #92]	; 0x5c
   d9ea2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9ea4:	781a      	ldrb	r2, [r3, #0]
   d9ea6:	2a0d      	cmp	r2, #13
   d9ea8:	d805      	bhi.n	d9eb6 <_strtod_r+0x2e>
   d9eaa:	2a09      	cmp	r2, #9
   d9eac:	d213      	bcs.n	d9ed6 <_strtod_r+0x4e>
   d9eae:	2a00      	cmp	r2, #0
   d9eb0:	f000 81ac 	beq.w	da20c <_strtod_r+0x384>
   d9eb4:	e012      	b.n	d9edc <_strtod_r+0x54>
   d9eb6:	2a2b      	cmp	r2, #43	; 0x2b
   d9eb8:	d004      	beq.n	d9ec4 <_strtod_r+0x3c>
   d9eba:	2a2d      	cmp	r2, #45	; 0x2d
   d9ebc:	d004      	beq.n	d9ec8 <_strtod_r+0x40>
   d9ebe:	2a20      	cmp	r2, #32
   d9ec0:	d10c      	bne.n	d9edc <_strtod_r+0x54>
   d9ec2:	e008      	b.n	d9ed6 <_strtod_r+0x4e>
   d9ec4:	2200      	movs	r2, #0
   d9ec6:	e000      	b.n	d9eca <_strtod_r+0x42>
   d9ec8:	2201      	movs	r2, #1
   d9eca:	920c      	str	r2, [sp, #48]	; 0x30
   d9ecc:	1c5a      	adds	r2, r3, #1
   d9ece:	9217      	str	r2, [sp, #92]	; 0x5c
   d9ed0:	785b      	ldrb	r3, [r3, #1]
   d9ed2:	b92b      	cbnz	r3, d9ee0 <_strtod_r+0x58>
   d9ed4:	e19a      	b.n	da20c <_strtod_r+0x384>
   d9ed6:	3301      	adds	r3, #1
   d9ed8:	9317      	str	r3, [sp, #92]	; 0x5c
   d9eda:	e7e2      	b.n	d9ea2 <_strtod_r+0x1a>
   d9edc:	2300      	movs	r3, #0
   d9ede:	930c      	str	r3, [sp, #48]	; 0x30
   d9ee0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9ee2:	782b      	ldrb	r3, [r5, #0]
   d9ee4:	2b30      	cmp	r3, #48	; 0x30
   d9ee6:	d15c      	bne.n	d9fa2 <_strtod_r+0x11a>
   d9ee8:	786b      	ldrb	r3, [r5, #1]
   d9eea:	2b58      	cmp	r3, #88	; 0x58
   d9eec:	d001      	beq.n	d9ef2 <_strtod_r+0x6a>
   d9eee:	2b78      	cmp	r3, #120	; 0x78
   d9ef0:	d14c      	bne.n	d9f8c <_strtod_r+0x104>
   d9ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9ef4:	9301      	str	r3, [sp, #4]
   d9ef6:	ab18      	add	r3, sp, #96	; 0x60
   d9ef8:	9300      	str	r3, [sp, #0]
   d9efa:	4aa9      	ldr	r2, [pc, #676]	; (da1a0 <_strtod_r+0x318>)
   d9efc:	9802      	ldr	r0, [sp, #8]
   d9efe:	ab19      	add	r3, sp, #100	; 0x64
   d9f00:	a917      	add	r1, sp, #92	; 0x5c
   d9f02:	f000 fea4 	bl	dac4e <__gethex>
   d9f06:	f010 0607 	ands.w	r6, r0, #7
   d9f0a:	4604      	mov	r4, r0
   d9f0c:	f000 8587 	beq.w	daa1e <_strtod_r+0xb96>
   d9f10:	2e06      	cmp	r6, #6
   d9f12:	d105      	bne.n	d9f20 <_strtod_r+0x98>
   d9f14:	3501      	adds	r5, #1
   d9f16:	2300      	movs	r3, #0
   d9f18:	9517      	str	r5, [sp, #92]	; 0x5c
   d9f1a:	930c      	str	r3, [sp, #48]	; 0x30
   d9f1c:	f000 bd7f 	b.w	daa1e <_strtod_r+0xb96>
   d9f20:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9f22:	b13a      	cbz	r2, d9f34 <_strtod_r+0xac>
   d9f24:	2135      	movs	r1, #53	; 0x35
   d9f26:	a81a      	add	r0, sp, #104	; 0x68
   d9f28:	f001 fd17 	bl	db95a <__copybits>
   d9f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9f2e:	9802      	ldr	r0, [sp, #8]
   d9f30:	f001 f994 	bl	db25c <_Bfree>
   d9f34:	2e06      	cmp	r6, #6
   d9f36:	d822      	bhi.n	d9f7e <_strtod_r+0xf6>
   d9f38:	e8df f006 	tbb	[pc, r6]
   d9f3c:	18080d04 	.word	0x18080d04
   d9f40:	0d1d      	.short	0x0d1d
   d9f42:	04          	.byte	0x04
   d9f43:	00          	.byte	0x00
   d9f44:	f04f 0b00 	mov.w	fp, #0
   d9f48:	46da      	mov	sl, fp
   d9f4a:	e018      	b.n	d9f7e <_strtod_r+0xf6>
   d9f4c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9f50:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d9f54:	e013      	b.n	d9f7e <_strtod_r+0xf6>
   d9f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9f5a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9f5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9f62:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9f66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9f6a:	e008      	b.n	d9f7e <_strtod_r+0xf6>
   d9f6c:	f8df b234 	ldr.w	fp, [pc, #564]	; da1a4 <_strtod_r+0x31c>
   d9f70:	f04f 0a00 	mov.w	sl, #0
   d9f74:	e003      	b.n	d9f7e <_strtod_r+0xf6>
   d9f76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9f7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9f7e:	0721      	lsls	r1, r4, #28
   d9f80:	f140 854d 	bpl.w	daa1e <_strtod_r+0xb96>
   d9f84:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9f88:	f000 bd49 	b.w	daa1e <_strtod_r+0xb96>
   d9f8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9f8e:	1c5a      	adds	r2, r3, #1
   d9f90:	9217      	str	r2, [sp, #92]	; 0x5c
   d9f92:	785b      	ldrb	r3, [r3, #1]
   d9f94:	2b30      	cmp	r3, #48	; 0x30
   d9f96:	d0f9      	beq.n	d9f8c <_strtod_r+0x104>
   d9f98:	2b00      	cmp	r3, #0
   d9f9a:	f000 8540 	beq.w	daa1e <_strtod_r+0xb96>
   d9f9e:	2301      	movs	r3, #1
   d9fa0:	e000      	b.n	d9fa4 <_strtod_r+0x11c>
   d9fa2:	2300      	movs	r3, #0
   d9fa4:	f04f 0800 	mov.w	r8, #0
   d9fa8:	9306      	str	r3, [sp, #24]
   d9faa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9fac:	9307      	str	r3, [sp, #28]
   d9fae:	f8cd 8014 	str.w	r8, [sp, #20]
   d9fb2:	f8cd 8010 	str.w	r8, [sp, #16]
   d9fb6:	220a      	movs	r2, #10
   d9fb8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9fba:	782e      	ldrb	r6, [r5, #0]
   d9fbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9fc0:	b2d9      	uxtb	r1, r3
   d9fc2:	2909      	cmp	r1, #9
   d9fc4:	d80e      	bhi.n	d9fe4 <_strtod_r+0x15c>
   d9fc6:	9904      	ldr	r1, [sp, #16]
   d9fc8:	2908      	cmp	r1, #8
   d9fca:	bfdd      	ittte	le
   d9fcc:	9905      	ldrle	r1, [sp, #20]
   d9fce:	fb02 3301 	mlale	r3, r2, r1, r3
   d9fd2:	9305      	strle	r3, [sp, #20]
   d9fd4:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9fd8:	9b04      	ldr	r3, [sp, #16]
   d9fda:	3501      	adds	r5, #1
   d9fdc:	3301      	adds	r3, #1
   d9fde:	9304      	str	r3, [sp, #16]
   d9fe0:	9517      	str	r5, [sp, #92]	; 0x5c
   d9fe2:	e7e9      	b.n	d9fb8 <_strtod_r+0x130>
   d9fe4:	9802      	ldr	r0, [sp, #8]
   d9fe6:	f7ff fe55 	bl	d9c94 <_localeconv_r>
   d9fea:	6807      	ldr	r7, [r0, #0]
   d9fec:	9802      	ldr	r0, [sp, #8]
   d9fee:	f7ff fe51 	bl	d9c94 <_localeconv_r>
   d9ff2:	6800      	ldr	r0, [r0, #0]
   d9ff4:	f7ff ff03 	bl	d9dfe <strlen>
   d9ff8:	4639      	mov	r1, r7
   d9ffa:	4602      	mov	r2, r0
   d9ffc:	4628      	mov	r0, r5
   d9ffe:	f7ff ff06 	bl	d9e0e <strncmp>
   da002:	4607      	mov	r7, r0
   da004:	b128      	cbz	r0, da012 <_strtod_r+0x18a>
   da006:	2000      	movs	r0, #0
   da008:	4633      	mov	r3, r6
   da00a:	9d04      	ldr	r5, [sp, #16]
   da00c:	4602      	mov	r2, r0
   da00e:	4601      	mov	r1, r0
   da010:	e057      	b.n	da0c2 <_strtod_r+0x23a>
   da012:	9802      	ldr	r0, [sp, #8]
   da014:	f7ff fe3e 	bl	d9c94 <_localeconv_r>
   da018:	6800      	ldr	r0, [r0, #0]
   da01a:	f7ff fef0 	bl	d9dfe <strlen>
   da01e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da020:	181a      	adds	r2, r3, r0
   da022:	9217      	str	r2, [sp, #92]	; 0x5c
   da024:	9a04      	ldr	r2, [sp, #16]
   da026:	5c1b      	ldrb	r3, [r3, r0]
   da028:	2a00      	cmp	r2, #0
   da02a:	d142      	bne.n	da0b2 <_strtod_r+0x22a>
   da02c:	4610      	mov	r0, r2
   da02e:	2b30      	cmp	r3, #48	; 0x30
   da030:	d105      	bne.n	da03e <_strtod_r+0x1b6>
   da032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da034:	1c5a      	adds	r2, r3, #1
   da036:	9217      	str	r2, [sp, #92]	; 0x5c
   da038:	3001      	adds	r0, #1
   da03a:	785b      	ldrb	r3, [r3, #1]
   da03c:	e7f7      	b.n	da02e <_strtod_r+0x1a6>
   da03e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   da042:	2a08      	cmp	r2, #8
   da044:	d843      	bhi.n	da0ce <_strtod_r+0x246>
   da046:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   da048:	9207      	str	r2, [sp, #28]
   da04a:	4602      	mov	r2, r0
   da04c:	2000      	movs	r0, #0
   da04e:	4605      	mov	r5, r0
   da050:	3b30      	subs	r3, #48	; 0x30
   da052:	f100 0101 	add.w	r1, r0, #1
   da056:	d026      	beq.n	da0a6 <_strtod_r+0x21e>
   da058:	440a      	add	r2, r1
   da05a:	eb05 0c00 	add.w	ip, r5, r0
   da05e:	4629      	mov	r1, r5
   da060:	260a      	movs	r6, #10
   da062:	4561      	cmp	r1, ip
   da064:	d00e      	beq.n	da084 <_strtod_r+0x1fc>
   da066:	3101      	adds	r1, #1
   da068:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   da06c:	f1be 0f08 	cmp.w	lr, #8
   da070:	dc03      	bgt.n	da07a <_strtod_r+0x1f2>
   da072:	9f05      	ldr	r7, [sp, #20]
   da074:	4377      	muls	r7, r6
   da076:	9705      	str	r7, [sp, #20]
   da078:	e7f3      	b.n	da062 <_strtod_r+0x1da>
   da07a:	2910      	cmp	r1, #16
   da07c:	bfd8      	it	le
   da07e:	fb06 f808 	mulle.w	r8, r6, r8
   da082:	e7ee      	b.n	da062 <_strtod_r+0x1da>
   da084:	4428      	add	r0, r5
   da086:	2808      	cmp	r0, #8
   da088:	f100 0501 	add.w	r5, r0, #1
   da08c:	dc05      	bgt.n	da09a <_strtod_r+0x212>
   da08e:	9805      	ldr	r0, [sp, #20]
   da090:	210a      	movs	r1, #10
   da092:	fb01 3300 	mla	r3, r1, r0, r3
   da096:	9305      	str	r3, [sp, #20]
   da098:	e004      	b.n	da0a4 <_strtod_r+0x21c>
   da09a:	2d10      	cmp	r5, #16
   da09c:	bfdc      	itt	le
   da09e:	210a      	movle	r1, #10
   da0a0:	fb01 3808 	mlale	r8, r1, r8, r3
   da0a4:	2100      	movs	r1, #0
   da0a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0a8:	1c58      	adds	r0, r3, #1
   da0aa:	9017      	str	r0, [sp, #92]	; 0x5c
   da0ac:	785b      	ldrb	r3, [r3, #1]
   da0ae:	4608      	mov	r0, r1
   da0b0:	e002      	b.n	da0b8 <_strtod_r+0x230>
   da0b2:	9d04      	ldr	r5, [sp, #16]
   da0b4:	4638      	mov	r0, r7
   da0b6:	463a      	mov	r2, r7
   da0b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   da0bc:	2909      	cmp	r1, #9
   da0be:	d9c7      	bls.n	da050 <_strtod_r+0x1c8>
   da0c0:	2101      	movs	r1, #1
   da0c2:	2b65      	cmp	r3, #101	; 0x65
   da0c4:	d001      	beq.n	da0ca <_strtod_r+0x242>
   da0c6:	2b45      	cmp	r3, #69	; 0x45
   da0c8:	d151      	bne.n	da16e <_strtod_r+0x2e6>
   da0ca:	b96d      	cbnz	r5, da0e8 <_strtod_r+0x260>
   da0cc:	e004      	b.n	da0d8 <_strtod_r+0x250>
   da0ce:	2b65      	cmp	r3, #101	; 0x65
   da0d0:	f040 84b3 	bne.w	daa3a <_strtod_r+0xbb2>
   da0d4:	2200      	movs	r2, #0
   da0d6:	2101      	movs	r1, #1
   da0d8:	b928      	cbnz	r0, da0e6 <_strtod_r+0x25e>
   da0da:	9b06      	ldr	r3, [sp, #24]
   da0dc:	2b00      	cmp	r3, #0
   da0de:	f000 8095 	beq.w	da20c <_strtod_r+0x384>
   da0e2:	4605      	mov	r5, r0
   da0e4:	e000      	b.n	da0e8 <_strtod_r+0x260>
   da0e6:	2500      	movs	r5, #0
   da0e8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   da0ea:	1c63      	adds	r3, r4, #1
   da0ec:	9317      	str	r3, [sp, #92]	; 0x5c
   da0ee:	7863      	ldrb	r3, [r4, #1]
   da0f0:	2b2b      	cmp	r3, #43	; 0x2b
   da0f2:	d006      	beq.n	da102 <_strtod_r+0x27a>
   da0f4:	2b2d      	cmp	r3, #45	; 0x2d
   da0f6:	d002      	beq.n	da0fe <_strtod_r+0x276>
   da0f8:	2600      	movs	r6, #0
   da0fa:	9603      	str	r6, [sp, #12]
   da0fc:	e006      	b.n	da10c <_strtod_r+0x284>
   da0fe:	2301      	movs	r3, #1
   da100:	e000      	b.n	da104 <_strtod_r+0x27c>
   da102:	2300      	movs	r3, #0
   da104:	9303      	str	r3, [sp, #12]
   da106:	1ca3      	adds	r3, r4, #2
   da108:	9317      	str	r3, [sp, #92]	; 0x5c
   da10a:	78a3      	ldrb	r3, [r4, #2]
   da10c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   da110:	2e09      	cmp	r6, #9
   da112:	d82b      	bhi.n	da16c <_strtod_r+0x2e4>
   da114:	2b30      	cmp	r3, #48	; 0x30
   da116:	d104      	bne.n	da122 <_strtod_r+0x29a>
   da118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da11a:	1c5e      	adds	r6, r3, #1
   da11c:	9617      	str	r6, [sp, #92]	; 0x5c
   da11e:	785b      	ldrb	r3, [r3, #1]
   da120:	e7f8      	b.n	da114 <_strtod_r+0x28c>
   da122:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   da126:	2e08      	cmp	r6, #8
   da128:	d821      	bhi.n	da16e <_strtod_r+0x2e6>
   da12a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   da12e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da130:	f04f 0c0a 	mov.w	ip, #10
   da134:	461f      	mov	r7, r3
   da136:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da138:	1c5e      	adds	r6, r3, #1
   da13a:	9617      	str	r6, [sp, #92]	; 0x5c
   da13c:	785b      	ldrb	r3, [r3, #1]
   da13e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   da142:	f1b9 0f09 	cmp.w	r9, #9
   da146:	d804      	bhi.n	da152 <_strtod_r+0x2ca>
   da148:	fb0c 3e0e 	mla	lr, ip, lr, r3
   da14c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   da150:	e7f1      	b.n	da136 <_strtod_r+0x2ae>
   da152:	1bf6      	subs	r6, r6, r7
   da154:	2e08      	cmp	r6, #8
   da156:	f644 691f 	movw	r9, #19999	; 0x4e1f
   da15a:	dc02      	bgt.n	da162 <_strtod_r+0x2da>
   da15c:	45f1      	cmp	r9, lr
   da15e:	bfa8      	it	ge
   da160:	46f1      	movge	r9, lr
   da162:	9e03      	ldr	r6, [sp, #12]
   da164:	b12e      	cbz	r6, da172 <_strtod_r+0x2ea>
   da166:	f1c9 0900 	rsb	r9, r9, #0
   da16a:	e002      	b.n	da172 <_strtod_r+0x2ea>
   da16c:	9417      	str	r4, [sp, #92]	; 0x5c
   da16e:	f04f 0900 	mov.w	r9, #0
   da172:	2d00      	cmp	r5, #0
   da174:	d153      	bne.n	da21e <_strtod_r+0x396>
   da176:	2800      	cmp	r0, #0
   da178:	f040 8451 	bne.w	daa1e <_strtod_r+0xb96>
   da17c:	9a06      	ldr	r2, [sp, #24]
   da17e:	2a00      	cmp	r2, #0
   da180:	f040 844d 	bne.w	daa1e <_strtod_r+0xb96>
   da184:	2900      	cmp	r1, #0
   da186:	d141      	bne.n	da20c <_strtod_r+0x384>
   da188:	2b4e      	cmp	r3, #78	; 0x4e
   da18a:	d020      	beq.n	da1ce <_strtod_r+0x346>
   da18c:	dc02      	bgt.n	da194 <_strtod_r+0x30c>
   da18e:	2b49      	cmp	r3, #73	; 0x49
   da190:	d00a      	beq.n	da1a8 <_strtod_r+0x320>
   da192:	e03b      	b.n	da20c <_strtod_r+0x384>
   da194:	2b69      	cmp	r3, #105	; 0x69
   da196:	d007      	beq.n	da1a8 <_strtod_r+0x320>
   da198:	2b6e      	cmp	r3, #110	; 0x6e
   da19a:	d018      	beq.n	da1ce <_strtod_r+0x346>
   da19c:	e036      	b.n	da20c <_strtod_r+0x384>
   da19e:	bf00      	nop
   da1a0:	000dbf80 	.word	0x000dbf80
   da1a4:	7ff00000 	.word	0x7ff00000
   da1a8:	49a8      	ldr	r1, [pc, #672]	; (da44c <_strtod_r+0x5c4>)
   da1aa:	a817      	add	r0, sp, #92	; 0x5c
   da1ac:	f000 ff80 	bl	db0b0 <__match>
   da1b0:	b360      	cbz	r0, da20c <_strtod_r+0x384>
   da1b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da1b4:	49a6      	ldr	r1, [pc, #664]	; (da450 <_strtod_r+0x5c8>)
   da1b6:	3b01      	subs	r3, #1
   da1b8:	a817      	add	r0, sp, #92	; 0x5c
   da1ba:	9317      	str	r3, [sp, #92]	; 0x5c
   da1bc:	f000 ff78 	bl	db0b0 <__match>
   da1c0:	b910      	cbnz	r0, da1c8 <_strtod_r+0x340>
   da1c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da1c4:	3301      	adds	r3, #1
   da1c6:	9317      	str	r3, [sp, #92]	; 0x5c
   da1c8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; da46c <_strtod_r+0x5e4>
   da1cc:	e01a      	b.n	da204 <_strtod_r+0x37c>
   da1ce:	49a1      	ldr	r1, [pc, #644]	; (da454 <_strtod_r+0x5cc>)
   da1d0:	a817      	add	r0, sp, #92	; 0x5c
   da1d2:	f000 ff6d 	bl	db0b0 <__match>
   da1d6:	b1c8      	cbz	r0, da20c <_strtod_r+0x384>
   da1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da1da:	781b      	ldrb	r3, [r3, #0]
   da1dc:	2b28      	cmp	r3, #40	; 0x28
   da1de:	d10f      	bne.n	da200 <_strtod_r+0x378>
   da1e0:	aa1a      	add	r2, sp, #104	; 0x68
   da1e2:	499d      	ldr	r1, [pc, #628]	; (da458 <_strtod_r+0x5d0>)
   da1e4:	a817      	add	r0, sp, #92	; 0x5c
   da1e6:	f000 ff76 	bl	db0d6 <__hexnan>
   da1ea:	2805      	cmp	r0, #5
   da1ec:	d108      	bne.n	da200 <_strtod_r+0x378>
   da1ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   da1f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   da1f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   da1f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   da1fc:	f000 bc0f 	b.w	daa1e <_strtod_r+0xb96>
   da200:	f8df b26c 	ldr.w	fp, [pc, #620]	; da470 <_strtod_r+0x5e8>
   da204:	f04f 0a00 	mov.w	sl, #0
   da208:	f000 bc09 	b.w	daa1e <_strtod_r+0xb96>
   da20c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da20e:	9417      	str	r4, [sp, #92]	; 0x5c
   da210:	2b00      	cmp	r3, #0
   da212:	f000 840f 	beq.w	daa34 <_strtod_r+0xbac>
   da216:	2300      	movs	r3, #0
   da218:	930c      	str	r3, [sp, #48]	; 0x30
   da21a:	f000 bc02 	b.w	daa22 <_strtod_r+0xb9a>
   da21e:	9b04      	ldr	r3, [sp, #16]
   da220:	9805      	ldr	r0, [sp, #20]
   da222:	2b00      	cmp	r3, #0
   da224:	bf08      	it	eq
   da226:	462b      	moveq	r3, r5
   da228:	2d10      	cmp	r5, #16
   da22a:	462c      	mov	r4, r5
   da22c:	ebc2 0909 	rsb	r9, r2, r9
   da230:	bfa8      	it	ge
   da232:	2410      	movge	r4, #16
   da234:	9304      	str	r3, [sp, #16]
   da236:	f7ff f959 	bl	d94ec <__aeabi_ui2d>
   da23a:	2c09      	cmp	r4, #9
   da23c:	4682      	mov	sl, r0
   da23e:	468b      	mov	fp, r1
   da240:	dd13      	ble.n	da26a <_strtod_r+0x3e2>
   da242:	4b86      	ldr	r3, [pc, #536]	; (da45c <_strtod_r+0x5d4>)
   da244:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   da248:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   da24c:	f7ff f9c4 	bl	d95d8 <__aeabi_dmul>
   da250:	4606      	mov	r6, r0
   da252:	4640      	mov	r0, r8
   da254:	460f      	mov	r7, r1
   da256:	f7ff f949 	bl	d94ec <__aeabi_ui2d>
   da25a:	4602      	mov	r2, r0
   da25c:	460b      	mov	r3, r1
   da25e:	4630      	mov	r0, r6
   da260:	4639      	mov	r1, r7
   da262:	f7ff f807 	bl	d9274 <__adddf3>
   da266:	4682      	mov	sl, r0
   da268:	468b      	mov	fp, r1
   da26a:	2d0f      	cmp	r5, #15
   da26c:	dc36      	bgt.n	da2dc <_strtod_r+0x454>
   da26e:	f1b9 0f00 	cmp.w	r9, #0
   da272:	f000 83d4 	beq.w	daa1e <_strtod_r+0xb96>
   da276:	dd24      	ble.n	da2c2 <_strtod_r+0x43a>
   da278:	f1b9 0f16 	cmp.w	r9, #22
   da27c:	dc07      	bgt.n	da28e <_strtod_r+0x406>
   da27e:	4d77      	ldr	r5, [pc, #476]	; (da45c <_strtod_r+0x5d4>)
   da280:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   da284:	4652      	mov	r2, sl
   da286:	465b      	mov	r3, fp
   da288:	e9d9 0100 	ldrd	r0, r1, [r9]
   da28c:	e014      	b.n	da2b8 <_strtod_r+0x430>
   da28e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   da292:	4599      	cmp	r9, r3
   da294:	dc22      	bgt.n	da2dc <_strtod_r+0x454>
   da296:	4c71      	ldr	r4, [pc, #452]	; (da45c <_strtod_r+0x5d4>)
   da298:	f1c5 050f 	rsb	r5, r5, #15
   da29c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   da2a0:	ebc5 0509 	rsb	r5, r5, r9
   da2a4:	4652      	mov	r2, sl
   da2a6:	465b      	mov	r3, fp
   da2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   da2ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   da2b0:	f7ff f992 	bl	d95d8 <__aeabi_dmul>
   da2b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   da2b8:	f7ff f98e 	bl	d95d8 <__aeabi_dmul>
   da2bc:	4682      	mov	sl, r0
   da2be:	468b      	mov	fp, r1
   da2c0:	e3ad      	b.n	daa1e <_strtod_r+0xb96>
   da2c2:	f119 0f16 	cmn.w	r9, #22
   da2c6:	db09      	blt.n	da2dc <_strtod_r+0x454>
   da2c8:	4d64      	ldr	r5, [pc, #400]	; (da45c <_strtod_r+0x5d4>)
   da2ca:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   da2ce:	e9d9 2300 	ldrd	r2, r3, [r9]
   da2d2:	4650      	mov	r0, sl
   da2d4:	4659      	mov	r1, fp
   da2d6:	f7ff faa9 	bl	d982c <__aeabi_ddiv>
   da2da:	e7ef      	b.n	da2bc <_strtod_r+0x434>
   da2dc:	1b2c      	subs	r4, r5, r4
   da2de:	444c      	add	r4, r9
   da2e0:	2c00      	cmp	r4, #0
   da2e2:	dd57      	ble.n	da394 <_strtod_r+0x50c>
   da2e4:	f014 010f 	ands.w	r1, r4, #15
   da2e8:	d00a      	beq.n	da300 <_strtod_r+0x478>
   da2ea:	4b5c      	ldr	r3, [pc, #368]	; (da45c <_strtod_r+0x5d4>)
   da2ec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   da2f0:	4652      	mov	r2, sl
   da2f2:	465b      	mov	r3, fp
   da2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   da2f8:	f7ff f96e 	bl	d95d8 <__aeabi_dmul>
   da2fc:	4682      	mov	sl, r0
   da2fe:	468b      	mov	fp, r1
   da300:	f034 040f 	bics.w	r4, r4, #15
   da304:	f000 80b8 	beq.w	da478 <_strtod_r+0x5f0>
   da308:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   da30c:	dd0b      	ble.n	da326 <_strtod_r+0x49e>
   da30e:	2400      	movs	r4, #0
   da310:	4625      	mov	r5, r4
   da312:	9405      	str	r4, [sp, #20]
   da314:	9404      	str	r4, [sp, #16]
   da316:	9a02      	ldr	r2, [sp, #8]
   da318:	f8df b150 	ldr.w	fp, [pc, #336]	; da46c <_strtod_r+0x5e4>
   da31c:	2322      	movs	r3, #34	; 0x22
   da31e:	6013      	str	r3, [r2, #0]
   da320:	f04f 0a00 	mov.w	sl, #0
   da324:	e187      	b.n	da636 <_strtod_r+0x7ae>
   da326:	4e4e      	ldr	r6, [pc, #312]	; (da460 <_strtod_r+0x5d8>)
   da328:	2300      	movs	r3, #0
   da32a:	1124      	asrs	r4, r4, #4
   da32c:	4650      	mov	r0, sl
   da32e:	4659      	mov	r1, fp
   da330:	4698      	mov	r8, r3
   da332:	4637      	mov	r7, r6
   da334:	2c01      	cmp	r4, #1
   da336:	dd0b      	ble.n	da350 <_strtod_r+0x4c8>
   da338:	07e2      	lsls	r2, r4, #31
   da33a:	d504      	bpl.n	da346 <_strtod_r+0x4be>
   da33c:	e9d6 2300 	ldrd	r2, r3, [r6]
   da340:	f7ff f94a 	bl	d95d8 <__aeabi_dmul>
   da344:	2301      	movs	r3, #1
   da346:	f108 0801 	add.w	r8, r8, #1
   da34a:	1064      	asrs	r4, r4, #1
   da34c:	3608      	adds	r6, #8
   da34e:	e7f1      	b.n	da334 <_strtod_r+0x4ac>
   da350:	b10b      	cbz	r3, da356 <_strtod_r+0x4ce>
   da352:	4682      	mov	sl, r0
   da354:	468b      	mov	fp, r1
   da356:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da35a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   da35e:	4652      	mov	r2, sl
   da360:	465b      	mov	r3, fp
   da362:	e9d7 0100 	ldrd	r0, r1, [r7]
   da366:	f7ff f937 	bl	d95d8 <__aeabi_dmul>
   da36a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da36e:	468b      	mov	fp, r1
   da370:	460a      	mov	r2, r1
   da372:	0d1b      	lsrs	r3, r3, #20
   da374:	493b      	ldr	r1, [pc, #236]	; (da464 <_strtod_r+0x5dc>)
   da376:	051b      	lsls	r3, r3, #20
   da378:	428b      	cmp	r3, r1
   da37a:	4682      	mov	sl, r0
   da37c:	d8c7      	bhi.n	da30e <_strtod_r+0x486>
   da37e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   da382:	428b      	cmp	r3, r1
   da384:	bf86      	itte	hi
   da386:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; da474 <_strtod_r+0x5ec>
   da38a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   da38e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   da392:	e071      	b.n	da478 <_strtod_r+0x5f0>
   da394:	d070      	beq.n	da478 <_strtod_r+0x5f0>
   da396:	4264      	negs	r4, r4
   da398:	f014 020f 	ands.w	r2, r4, #15
   da39c:	d00a      	beq.n	da3b4 <_strtod_r+0x52c>
   da39e:	4b2f      	ldr	r3, [pc, #188]	; (da45c <_strtod_r+0x5d4>)
   da3a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   da3a4:	4650      	mov	r0, sl
   da3a6:	4659      	mov	r1, fp
   da3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da3ac:	f7ff fa3e 	bl	d982c <__aeabi_ddiv>
   da3b0:	4682      	mov	sl, r0
   da3b2:	468b      	mov	fp, r1
   da3b4:	1124      	asrs	r4, r4, #4
   da3b6:	d05f      	beq.n	da478 <_strtod_r+0x5f0>
   da3b8:	2c1f      	cmp	r4, #31
   da3ba:	dd04      	ble.n	da3c6 <_strtod_r+0x53e>
   da3bc:	2400      	movs	r4, #0
   da3be:	4625      	mov	r5, r4
   da3c0:	9405      	str	r4, [sp, #20]
   da3c2:	9404      	str	r4, [sp, #16]
   da3c4:	e130      	b.n	da628 <_strtod_r+0x7a0>
   da3c6:	f014 0f10 	tst.w	r4, #16
   da3ca:	bf0c      	ite	eq
   da3cc:	2300      	moveq	r3, #0
   da3ce:	236a      	movne	r3, #106	; 0x6a
   da3d0:	4e25      	ldr	r6, [pc, #148]	; (da468 <_strtod_r+0x5e0>)
   da3d2:	9303      	str	r3, [sp, #12]
   da3d4:	4650      	mov	r0, sl
   da3d6:	4659      	mov	r1, fp
   da3d8:	2300      	movs	r3, #0
   da3da:	2c00      	cmp	r4, #0
   da3dc:	dd09      	ble.n	da3f2 <_strtod_r+0x56a>
   da3de:	07e2      	lsls	r2, r4, #31
   da3e0:	d504      	bpl.n	da3ec <_strtod_r+0x564>
   da3e2:	e9d6 2300 	ldrd	r2, r3, [r6]
   da3e6:	f7ff f8f7 	bl	d95d8 <__aeabi_dmul>
   da3ea:	2301      	movs	r3, #1
   da3ec:	1064      	asrs	r4, r4, #1
   da3ee:	3608      	adds	r6, #8
   da3f0:	e7f3      	b.n	da3da <_strtod_r+0x552>
   da3f2:	b10b      	cbz	r3, da3f8 <_strtod_r+0x570>
   da3f4:	4682      	mov	sl, r0
   da3f6:	468b      	mov	fp, r1
   da3f8:	9b03      	ldr	r3, [sp, #12]
   da3fa:	b1eb      	cbz	r3, da438 <_strtod_r+0x5b0>
   da3fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   da400:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da404:	2b00      	cmp	r3, #0
   da406:	4659      	mov	r1, fp
   da408:	dd16      	ble.n	da438 <_strtod_r+0x5b0>
   da40a:	2b1f      	cmp	r3, #31
   da40c:	dd0e      	ble.n	da42c <_strtod_r+0x5a4>
   da40e:	2b34      	cmp	r3, #52	; 0x34
   da410:	bfde      	ittt	le
   da412:	3b20      	suble	r3, #32
   da414:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   da418:	fa02 f303 	lslle.w	r3, r2, r3
   da41c:	f04f 0a00 	mov.w	sl, #0
   da420:	bfcc      	ite	gt
   da422:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   da426:	ea03 0b01 	andle.w	fp, r3, r1
   da42a:	e005      	b.n	da438 <_strtod_r+0x5b0>
   da42c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da430:	fa02 f303 	lsl.w	r3, r2, r3
   da434:	ea03 0a0a 	and.w	sl, r3, sl
   da438:	2200      	movs	r2, #0
   da43a:	2300      	movs	r3, #0
   da43c:	4650      	mov	r0, sl
   da43e:	4659      	mov	r1, fp
   da440:	f7ff fb32 	bl	d9aa8 <__aeabi_dcmpeq>
   da444:	2800      	cmp	r0, #0
   da446:	d1b9      	bne.n	da3bc <_strtod_r+0x534>
   da448:	e018      	b.n	da47c <_strtod_r+0x5f4>
   da44a:	bf00      	nop
   da44c:	000dbfa8 	.word	0x000dbfa8
   da450:	000dbfab 	.word	0x000dbfab
   da454:	000dbfb1 	.word	0x000dbfb1
   da458:	000dbf94 	.word	0x000dbf94
   da45c:	000dbfe0 	.word	0x000dbfe0
   da460:	000dc0a8 	.word	0x000dc0a8
   da464:	7ca00000 	.word	0x7ca00000
   da468:	000dbfb8 	.word	0x000dbfb8
   da46c:	7ff00000 	.word	0x7ff00000
   da470:	fff80000 	.word	0xfff80000
   da474:	7fefffff 	.word	0x7fefffff
   da478:	2300      	movs	r3, #0
   da47a:	9303      	str	r3, [sp, #12]
   da47c:	9b05      	ldr	r3, [sp, #20]
   da47e:	9300      	str	r3, [sp, #0]
   da480:	9a04      	ldr	r2, [sp, #16]
   da482:	9907      	ldr	r1, [sp, #28]
   da484:	9802      	ldr	r0, [sp, #8]
   da486:	462b      	mov	r3, r5
   da488:	f000 ff3a 	bl	db300 <__s2b>
   da48c:	9005      	str	r0, [sp, #20]
   da48e:	2800      	cmp	r0, #0
   da490:	f43f af3d 	beq.w	da30e <_strtod_r+0x486>
   da494:	f1b9 0f00 	cmp.w	r9, #0
   da498:	f1c9 0300 	rsb	r3, r9, #0
   da49c:	bfa8      	it	ge
   da49e:	2300      	movge	r3, #0
   da4a0:	930d      	str	r3, [sp, #52]	; 0x34
   da4a2:	2400      	movs	r4, #0
   da4a4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   da4a8:	9312      	str	r3, [sp, #72]	; 0x48
   da4aa:	4625      	mov	r5, r4
   da4ac:	9b05      	ldr	r3, [sp, #20]
   da4ae:	9802      	ldr	r0, [sp, #8]
   da4b0:	6859      	ldr	r1, [r3, #4]
   da4b2:	f000 fe9e 	bl	db1f2 <_Balloc>
   da4b6:	9004      	str	r0, [sp, #16]
   da4b8:	2800      	cmp	r0, #0
   da4ba:	f43f af2c 	beq.w	da316 <_strtod_r+0x48e>
   da4be:	9b05      	ldr	r3, [sp, #20]
   da4c0:	691a      	ldr	r2, [r3, #16]
   da4c2:	3202      	adds	r2, #2
   da4c4:	f103 010c 	add.w	r1, r3, #12
   da4c8:	0092      	lsls	r2, r2, #2
   da4ca:	300c      	adds	r0, #12
   da4cc:	f7ff fbf5 	bl	d9cba <memcpy>
   da4d0:	aa1a      	add	r2, sp, #104	; 0x68
   da4d2:	a919      	add	r1, sp, #100	; 0x64
   da4d4:	ec4b ab10 	vmov	d0, sl, fp
   da4d8:	9802      	ldr	r0, [sp, #8]
   da4da:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da4de:	f001 f9c4 	bl	db86a <__d2b>
   da4e2:	9018      	str	r0, [sp, #96]	; 0x60
   da4e4:	2800      	cmp	r0, #0
   da4e6:	f43f af16 	beq.w	da316 <_strtod_r+0x48e>
   da4ea:	2101      	movs	r1, #1
   da4ec:	9802      	ldr	r0, [sp, #8]
   da4ee:	f000 ff92 	bl	db416 <__i2b>
   da4f2:	4605      	mov	r5, r0
   da4f4:	2800      	cmp	r0, #0
   da4f6:	f43f af0e 	beq.w	da316 <_strtod_r+0x48e>
   da4fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da4fc:	9903      	ldr	r1, [sp, #12]
   da4fe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   da500:	2b00      	cmp	r3, #0
   da502:	bfad      	iteet	ge
   da504:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   da506:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   da508:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   da50c:	eb02 0803 	addge.w	r8, r2, r3
   da510:	bfb8      	it	lt
   da512:	1ad2      	sublt	r2, r2, r3
   da514:	eba3 0301 	sub.w	r3, r3, r1
   da518:	4433      	add	r3, r6
   da51a:	49b5      	ldr	r1, [pc, #724]	; (da7f0 <_strtod_r+0x968>)
   da51c:	bfa8      	it	ge
   da51e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   da520:	3b01      	subs	r3, #1
   da522:	428b      	cmp	r3, r1
   da524:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   da528:	f280 808a 	bge.w	da640 <_strtod_r+0x7b8>
   da52c:	1ac9      	subs	r1, r1, r3
   da52e:	291f      	cmp	r1, #31
   da530:	bfc8      	it	gt
   da532:	4fb0      	ldrgt	r7, [pc, #704]	; (da7f4 <_strtod_r+0x96c>)
   da534:	f04f 0901 	mov.w	r9, #1
   da538:	bfd4      	ite	le
   da53a:	fa09 f301 	lslle.w	r3, r9, r1
   da53e:	1aff      	subgt	r7, r7, r3
   da540:	eba6 0601 	sub.w	r6, r6, r1
   da544:	bfd9      	ittee	le
   da546:	9306      	strle	r3, [sp, #24]
   da548:	2700      	movle	r7, #0
   da54a:	fa09 f707 	lslgt.w	r7, r9, r7
   da54e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   da552:	eb08 0906 	add.w	r9, r8, r6
   da556:	9b03      	ldr	r3, [sp, #12]
   da558:	45c8      	cmp	r8, r9
   da55a:	4416      	add	r6, r2
   da55c:	441e      	add	r6, r3
   da55e:	4643      	mov	r3, r8
   da560:	bfa8      	it	ge
   da562:	464b      	movge	r3, r9
   da564:	42b3      	cmp	r3, r6
   da566:	bfa8      	it	ge
   da568:	4633      	movge	r3, r6
   da56a:	2b00      	cmp	r3, #0
   da56c:	bfc2      	ittt	gt
   da56e:	ebc3 0909 	rsbgt	r9, r3, r9
   da572:	1af6      	subgt	r6, r6, r3
   da574:	ebc3 0808 	rsbgt	r8, r3, r8
   da578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da57a:	2b00      	cmp	r3, #0
   da57c:	d164      	bne.n	da648 <_strtod_r+0x7c0>
   da57e:	f1b9 0f00 	cmp.w	r9, #0
   da582:	dc7a      	bgt.n	da67a <_strtod_r+0x7f2>
   da584:	9b12      	ldr	r3, [sp, #72]	; 0x48
   da586:	2b00      	cmp	r3, #0
   da588:	f040 8081 	bne.w	da68e <_strtod_r+0x806>
   da58c:	2e00      	cmp	r6, #0
   da58e:	f300 8088 	bgt.w	da6a2 <_strtod_r+0x81a>
   da592:	f1b8 0f00 	cmp.w	r8, #0
   da596:	f300 808e 	bgt.w	da6b6 <_strtod_r+0x82e>
   da59a:	9a04      	ldr	r2, [sp, #16]
   da59c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da59e:	9802      	ldr	r0, [sp, #8]
   da5a0:	f001 f88f 	bl	db6c2 <__mdiff>
   da5a4:	4604      	mov	r4, r0
   da5a6:	2800      	cmp	r0, #0
   da5a8:	f43f aeb5 	beq.w	da316 <_strtod_r+0x48e>
   da5ac:	68c3      	ldr	r3, [r0, #12]
   da5ae:	9307      	str	r3, [sp, #28]
   da5b0:	2300      	movs	r3, #0
   da5b2:	60c3      	str	r3, [r0, #12]
   da5b4:	4629      	mov	r1, r5
   da5b6:	f001 f868 	bl	db68a <__mcmp>
   da5ba:	2800      	cmp	r0, #0
   da5bc:	f280 8089 	bge.w	da6d2 <_strtod_r+0x84a>
   da5c0:	9b07      	ldr	r3, [sp, #28]
   da5c2:	2b00      	cmp	r3, #0
   da5c4:	f040 8204 	bne.w	da9d0 <_strtod_r+0xb48>
   da5c8:	f1ba 0f00 	cmp.w	sl, #0
   da5cc:	f040 8200 	bne.w	da9d0 <_strtod_r+0xb48>
   da5d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da5d4:	2b00      	cmp	r3, #0
   da5d6:	f040 81fb 	bne.w	da9d0 <_strtod_r+0xb48>
   da5da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da5de:	0d1b      	lsrs	r3, r3, #20
   da5e0:	051b      	lsls	r3, r3, #20
   da5e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da5e6:	f240 81f3 	bls.w	da9d0 <_strtod_r+0xb48>
   da5ea:	6963      	ldr	r3, [r4, #20]
   da5ec:	2b00      	cmp	r3, #0
   da5ee:	d06c      	beq.n	da6ca <_strtod_r+0x842>
   da5f0:	4621      	mov	r1, r4
   da5f2:	2201      	movs	r2, #1
   da5f4:	9802      	ldr	r0, [sp, #8]
   da5f6:	f000 fff7 	bl	db5e8 <__lshift>
   da5fa:	4629      	mov	r1, r5
   da5fc:	4604      	mov	r4, r0
   da5fe:	f001 f844 	bl	db68a <__mcmp>
   da602:	2800      	cmp	r0, #0
   da604:	f340 81e4 	ble.w	da9d0 <_strtod_r+0xb48>
   da608:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da60c:	9a03      	ldr	r2, [sp, #12]
   da60e:	0d1b      	lsrs	r3, r3, #20
   da610:	051b      	lsls	r3, r3, #20
   da612:	2a00      	cmp	r2, #0
   da614:	f000 808c 	beq.w	da730 <_strtod_r+0x8a8>
   da618:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da61c:	f300 8088 	bgt.w	da730 <_strtod_r+0x8a8>
   da620:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   da624:	f300 81d6 	bgt.w	da9d4 <_strtod_r+0xb4c>
   da628:	9a02      	ldr	r2, [sp, #8]
   da62a:	2322      	movs	r3, #34	; 0x22
   da62c:	f04f 0a00 	mov.w	sl, #0
   da630:	f04f 0b00 	mov.w	fp, #0
   da634:	6013      	str	r3, [r2, #0]
   da636:	9b05      	ldr	r3, [sp, #20]
   da638:	2b00      	cmp	r3, #0
   da63a:	f040 81dc 	bne.w	da9f6 <_strtod_r+0xb6e>
   da63e:	e1ee      	b.n	daa1e <_strtod_r+0xb96>
   da640:	2301      	movs	r3, #1
   da642:	2700      	movs	r7, #0
   da644:	9306      	str	r3, [sp, #24]
   da646:	e784      	b.n	da552 <_strtod_r+0x6ca>
   da648:	4629      	mov	r1, r5
   da64a:	461a      	mov	r2, r3
   da64c:	9802      	ldr	r0, [sp, #8]
   da64e:	f000 ff7d 	bl	db54c <__pow5mult>
   da652:	4605      	mov	r5, r0
   da654:	2800      	cmp	r0, #0
   da656:	f43f ae5e 	beq.w	da316 <_strtod_r+0x48e>
   da65a:	4601      	mov	r1, r0
   da65c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da65e:	9802      	ldr	r0, [sp, #8]
   da660:	f000 fee2 	bl	db428 <__multiply>
   da664:	9007      	str	r0, [sp, #28]
   da666:	2800      	cmp	r0, #0
   da668:	f43f ae55 	beq.w	da316 <_strtod_r+0x48e>
   da66c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da66e:	9802      	ldr	r0, [sp, #8]
   da670:	f000 fdf4 	bl	db25c <_Bfree>
   da674:	9b07      	ldr	r3, [sp, #28]
   da676:	9318      	str	r3, [sp, #96]	; 0x60
   da678:	e781      	b.n	da57e <_strtod_r+0x6f6>
   da67a:	464a      	mov	r2, r9
   da67c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da67e:	9802      	ldr	r0, [sp, #8]
   da680:	f000 ffb2 	bl	db5e8 <__lshift>
   da684:	9018      	str	r0, [sp, #96]	; 0x60
   da686:	2800      	cmp	r0, #0
   da688:	f47f af7c 	bne.w	da584 <_strtod_r+0x6fc>
   da68c:	e643      	b.n	da316 <_strtod_r+0x48e>
   da68e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da690:	9904      	ldr	r1, [sp, #16]
   da692:	9802      	ldr	r0, [sp, #8]
   da694:	f000 ff5a 	bl	db54c <__pow5mult>
   da698:	9004      	str	r0, [sp, #16]
   da69a:	2800      	cmp	r0, #0
   da69c:	f47f af76 	bne.w	da58c <_strtod_r+0x704>
   da6a0:	e639      	b.n	da316 <_strtod_r+0x48e>
   da6a2:	4632      	mov	r2, r6
   da6a4:	9904      	ldr	r1, [sp, #16]
   da6a6:	9802      	ldr	r0, [sp, #8]
   da6a8:	f000 ff9e 	bl	db5e8 <__lshift>
   da6ac:	9004      	str	r0, [sp, #16]
   da6ae:	2800      	cmp	r0, #0
   da6b0:	f47f af6f 	bne.w	da592 <_strtod_r+0x70a>
   da6b4:	e62f      	b.n	da316 <_strtod_r+0x48e>
   da6b6:	4629      	mov	r1, r5
   da6b8:	4642      	mov	r2, r8
   da6ba:	9802      	ldr	r0, [sp, #8]
   da6bc:	f000 ff94 	bl	db5e8 <__lshift>
   da6c0:	4605      	mov	r5, r0
   da6c2:	2800      	cmp	r0, #0
   da6c4:	f47f af69 	bne.w	da59a <_strtod_r+0x712>
   da6c8:	e625      	b.n	da316 <_strtod_r+0x48e>
   da6ca:	6923      	ldr	r3, [r4, #16]
   da6cc:	2b01      	cmp	r3, #1
   da6ce:	dc8f      	bgt.n	da5f0 <_strtod_r+0x768>
   da6d0:	e17e      	b.n	da9d0 <_strtod_r+0xb48>
   da6d2:	d161      	bne.n	da798 <_strtod_r+0x910>
   da6d4:	9a07      	ldr	r2, [sp, #28]
   da6d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da6da:	b322      	cbz	r2, da726 <_strtod_r+0x89e>
   da6dc:	4946      	ldr	r1, [pc, #280]	; (da7f8 <_strtod_r+0x970>)
   da6de:	428b      	cmp	r3, r1
   da6e0:	465a      	mov	r2, fp
   da6e2:	d12e      	bne.n	da742 <_strtod_r+0x8ba>
   da6e4:	9b03      	ldr	r3, [sp, #12]
   da6e6:	4651      	mov	r1, sl
   da6e8:	b163      	cbz	r3, da704 <_strtod_r+0x87c>
   da6ea:	4b44      	ldr	r3, [pc, #272]	; (da7fc <_strtod_r+0x974>)
   da6ec:	4013      	ands	r3, r2
   da6ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da6f2:	d807      	bhi.n	da704 <_strtod_r+0x87c>
   da6f4:	0d1b      	lsrs	r3, r3, #20
   da6f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da6fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da6fe:	fa00 f303 	lsl.w	r3, r0, r3
   da702:	e001      	b.n	da708 <_strtod_r+0x880>
   da704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da708:	428b      	cmp	r3, r1
   da70a:	d11a      	bne.n	da742 <_strtod_r+0x8ba>
   da70c:	493c      	ldr	r1, [pc, #240]	; (da800 <_strtod_r+0x978>)
   da70e:	428a      	cmp	r2, r1
   da710:	d102      	bne.n	da718 <_strtod_r+0x890>
   da712:	3301      	adds	r3, #1
   da714:	f43f adff 	beq.w	da316 <_strtod_r+0x48e>
   da718:	4b38      	ldr	r3, [pc, #224]	; (da7fc <_strtod_r+0x974>)
   da71a:	4013      	ands	r3, r2
   da71c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da720:	f04f 0a00 	mov.w	sl, #0
   da724:	e154      	b.n	da9d0 <_strtod_r+0xb48>
   da726:	b963      	cbnz	r3, da742 <_strtod_r+0x8ba>
   da728:	f1ba 0f00 	cmp.w	sl, #0
   da72c:	d109      	bne.n	da742 <_strtod_r+0x8ba>
   da72e:	e76b      	b.n	da608 <_strtod_r+0x780>
   da730:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da734:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da738:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da73c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da740:	e146      	b.n	da9d0 <_strtod_r+0xb48>
   da742:	b117      	cbz	r7, da74a <_strtod_r+0x8c2>
   da744:	ea17 0f0b 	tst.w	r7, fp
   da748:	e002      	b.n	da750 <_strtod_r+0x8c8>
   da74a:	9b06      	ldr	r3, [sp, #24]
   da74c:	ea13 0f0a 	tst.w	r3, sl
   da750:	f000 813e 	beq.w	da9d0 <_strtod_r+0xb48>
   da754:	9b07      	ldr	r3, [sp, #28]
   da756:	9a03      	ldr	r2, [sp, #12]
   da758:	4650      	mov	r0, sl
   da75a:	4659      	mov	r1, fp
   da75c:	b153      	cbz	r3, da774 <_strtod_r+0x8ec>
   da75e:	f7ff fb77 	bl	d9e50 <sulp>
   da762:	4602      	mov	r2, r0
   da764:	460b      	mov	r3, r1
   da766:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da76a:	f7fe fd83 	bl	d9274 <__adddf3>
   da76e:	4682      	mov	sl, r0
   da770:	468b      	mov	fp, r1
   da772:	e12d      	b.n	da9d0 <_strtod_r+0xb48>
   da774:	f7ff fb6c 	bl	d9e50 <sulp>
   da778:	4602      	mov	r2, r0
   da77a:	460b      	mov	r3, r1
   da77c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da780:	f7fe fd76 	bl	d9270 <__aeabi_dsub>
   da784:	2200      	movs	r2, #0
   da786:	2300      	movs	r3, #0
   da788:	4682      	mov	sl, r0
   da78a:	468b      	mov	fp, r1
   da78c:	f7ff f98c 	bl	d9aa8 <__aeabi_dcmpeq>
   da790:	2800      	cmp	r0, #0
   da792:	f47f af49 	bne.w	da628 <_strtod_r+0x7a0>
   da796:	e11b      	b.n	da9d0 <_strtod_r+0xb48>
   da798:	4629      	mov	r1, r5
   da79a:	4620      	mov	r0, r4
   da79c:	f001 f8b3 	bl	db906 <__ratio>
   da7a0:	ec57 6b10 	vmov	r6, r7, d0
   da7a4:	2200      	movs	r2, #0
   da7a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da7aa:	ee10 0a10 	vmov	r0, s0
   da7ae:	4639      	mov	r1, r7
   da7b0:	f7ff f98e 	bl	d9ad0 <__aeabi_dcmple>
   da7b4:	2800      	cmp	r0, #0
   da7b6:	d042      	beq.n	da83e <_strtod_r+0x9b6>
   da7b8:	9b07      	ldr	r3, [sp, #28]
   da7ba:	b123      	cbz	r3, da7c6 <_strtod_r+0x93e>
   da7bc:	f04f 0800 	mov.w	r8, #0
   da7c0:	f8df 9040 	ldr.w	r9, [pc, #64]	; da804 <_strtod_r+0x97c>
   da7c4:	e011      	b.n	da7ea <_strtod_r+0x962>
   da7c6:	f1ba 0f00 	cmp.w	sl, #0
   da7ca:	d103      	bne.n	da7d4 <_strtod_r+0x94c>
   da7cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da7d0:	b93b      	cbnz	r3, da7e2 <_strtod_r+0x95a>
   da7d2:	e01b      	b.n	da80c <_strtod_r+0x984>
   da7d4:	f1ba 0f01 	cmp.w	sl, #1
   da7d8:	d103      	bne.n	da7e2 <_strtod_r+0x95a>
   da7da:	f1bb 0f00 	cmp.w	fp, #0
   da7de:	f43f af23 	beq.w	da628 <_strtod_r+0x7a0>
   da7e2:	f8df 9024 	ldr.w	r9, [pc, #36]	; da808 <_strtod_r+0x980>
   da7e6:	f04f 0800 	mov.w	r8, #0
   da7ea:	2600      	movs	r6, #0
   da7ec:	4f05      	ldr	r7, [pc, #20]	; (da804 <_strtod_r+0x97c>)
   da7ee:	e039      	b.n	da864 <_strtod_r+0x9dc>
   da7f0:	fffffc02 	.word	0xfffffc02
   da7f4:	fffffbe2 	.word	0xfffffbe2
   da7f8:	000fffff 	.word	0x000fffff
   da7fc:	7ff00000 	.word	0x7ff00000
   da800:	7fefffff 	.word	0x7fefffff
   da804:	3ff00000 	.word	0x3ff00000
   da808:	bff00000 	.word	0xbff00000
   da80c:	2200      	movs	r2, #0
   da80e:	4b98      	ldr	r3, [pc, #608]	; (daa70 <_strtod_r+0xbe8>)
   da810:	4630      	mov	r0, r6
   da812:	4639      	mov	r1, r7
   da814:	f7ff f952 	bl	d9abc <__aeabi_dcmplt>
   da818:	b940      	cbnz	r0, da82c <_strtod_r+0x9a4>
   da81a:	4630      	mov	r0, r6
   da81c:	4639      	mov	r1, r7
   da81e:	2200      	movs	r2, #0
   da820:	4b94      	ldr	r3, [pc, #592]	; (daa74 <_strtod_r+0xbec>)
   da822:	f7fe fed9 	bl	d95d8 <__aeabi_dmul>
   da826:	4606      	mov	r6, r0
   da828:	460f      	mov	r7, r1
   da82a:	e001      	b.n	da830 <_strtod_r+0x9a8>
   da82c:	4f91      	ldr	r7, [pc, #580]	; (daa74 <_strtod_r+0xbec>)
   da82e:	2600      	movs	r6, #0
   da830:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da834:	9614      	str	r6, [sp, #80]	; 0x50
   da836:	9315      	str	r3, [sp, #84]	; 0x54
   da838:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   da83c:	e012      	b.n	da864 <_strtod_r+0x9dc>
   da83e:	4b8d      	ldr	r3, [pc, #564]	; (daa74 <_strtod_r+0xbec>)
   da840:	4630      	mov	r0, r6
   da842:	4639      	mov	r1, r7
   da844:	2200      	movs	r2, #0
   da846:	f7fe fec7 	bl	d95d8 <__aeabi_dmul>
   da84a:	9b07      	ldr	r3, [sp, #28]
   da84c:	4606      	mov	r6, r0
   da84e:	460f      	mov	r7, r1
   da850:	b923      	cbnz	r3, da85c <_strtod_r+0x9d4>
   da852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da856:	900e      	str	r0, [sp, #56]	; 0x38
   da858:	930f      	str	r3, [sp, #60]	; 0x3c
   da85a:	e001      	b.n	da860 <_strtod_r+0x9d8>
   da85c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   da860:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   da864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da868:	0d1b      	lsrs	r3, r3, #20
   da86a:	051b      	lsls	r3, r3, #20
   da86c:	9306      	str	r3, [sp, #24]
   da86e:	9a06      	ldr	r2, [sp, #24]
   da870:	4b81      	ldr	r3, [pc, #516]	; (daa78 <_strtod_r+0xbf0>)
   da872:	429a      	cmp	r2, r3
   da874:	d12b      	bne.n	da8ce <_strtod_r+0xa46>
   da876:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da87a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da87e:	ec4b ab10 	vmov	d0, sl, fp
   da882:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   da886:	f000 ff7b 	bl	db780 <__ulp>
   da88a:	4640      	mov	r0, r8
   da88c:	ec53 2b10 	vmov	r2, r3, d0
   da890:	4649      	mov	r1, r9
   da892:	f7fe fea1 	bl	d95d8 <__aeabi_dmul>
   da896:	4652      	mov	r2, sl
   da898:	465b      	mov	r3, fp
   da89a:	f7fe fceb 	bl	d9274 <__adddf3>
   da89e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da8a2:	0d1b      	lsrs	r3, r3, #20
   da8a4:	4a75      	ldr	r2, [pc, #468]	; (daa7c <_strtod_r+0xbf4>)
   da8a6:	051b      	lsls	r3, r3, #20
   da8a8:	4293      	cmp	r3, r2
   da8aa:	4682      	mov	sl, r0
   da8ac:	d90c      	bls.n	da8c8 <_strtod_r+0xa40>
   da8ae:	4b74      	ldr	r3, [pc, #464]	; (daa80 <_strtod_r+0xbf8>)
   da8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da8b2:	429a      	cmp	r2, r3
   da8b4:	d103      	bne.n	da8be <_strtod_r+0xa36>
   da8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da8b8:	3301      	adds	r3, #1
   da8ba:	f43f ad2c 	beq.w	da316 <_strtod_r+0x48e>
   da8be:	f8df b1c0 	ldr.w	fp, [pc, #448]	; daa80 <_strtod_r+0xbf8>
   da8c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da8c6:	e072      	b.n	da9ae <_strtod_r+0xb26>
   da8c8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   da8cc:	e038      	b.n	da940 <_strtod_r+0xab8>
   da8ce:	9b03      	ldr	r3, [sp, #12]
   da8d0:	b333      	cbz	r3, da920 <_strtod_r+0xa98>
   da8d2:	9b06      	ldr	r3, [sp, #24]
   da8d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da8d8:	d822      	bhi.n	da920 <_strtod_r+0xa98>
   da8da:	a35d      	add	r3, pc, #372	; (adr r3, daa50 <_strtod_r+0xbc8>)
   da8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   da8e0:	4630      	mov	r0, r6
   da8e2:	4639      	mov	r1, r7
   da8e4:	f7ff f8f4 	bl	d9ad0 <__aeabi_dcmple>
   da8e8:	b1a8      	cbz	r0, da916 <_strtod_r+0xa8e>
   da8ea:	4639      	mov	r1, r7
   da8ec:	4630      	mov	r0, r6
   da8ee:	f7ff f94b 	bl	d9b88 <__aeabi_d2uiz>
   da8f2:	2800      	cmp	r0, #0
   da8f4:	bf08      	it	eq
   da8f6:	2001      	moveq	r0, #1
   da8f8:	f7fe fdf8 	bl	d94ec <__aeabi_ui2d>
   da8fc:	9b07      	ldr	r3, [sp, #28]
   da8fe:	4606      	mov	r6, r0
   da900:	460f      	mov	r7, r1
   da902:	b923      	cbnz	r3, da90e <_strtod_r+0xa86>
   da904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da908:	9010      	str	r0, [sp, #64]	; 0x40
   da90a:	9311      	str	r3, [sp, #68]	; 0x44
   da90c:	e001      	b.n	da912 <_strtod_r+0xa8a>
   da90e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   da912:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   da916:	9a06      	ldr	r2, [sp, #24]
   da918:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   da91c:	ebc2 0903 	rsb	r9, r2, r3
   da920:	ed9d 0b08 	vldr	d0, [sp, #32]
   da924:	f000 ff2c 	bl	db780 <__ulp>
   da928:	4640      	mov	r0, r8
   da92a:	ec53 2b10 	vmov	r2, r3, d0
   da92e:	4649      	mov	r1, r9
   da930:	f7fe fe52 	bl	d95d8 <__aeabi_dmul>
   da934:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da938:	f7fe fc9c 	bl	d9274 <__adddf3>
   da93c:	4682      	mov	sl, r0
   da93e:	468b      	mov	fp, r1
   da940:	9b03      	ldr	r3, [sp, #12]
   da942:	bba3      	cbnz	r3, da9ae <_strtod_r+0xb26>
   da944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da948:	0d1b      	lsrs	r3, r3, #20
   da94a:	9a06      	ldr	r2, [sp, #24]
   da94c:	051b      	lsls	r3, r3, #20
   da94e:	429a      	cmp	r2, r3
   da950:	46d8      	mov	r8, fp
   da952:	d12c      	bne.n	da9ae <_strtod_r+0xb26>
   da954:	4639      	mov	r1, r7
   da956:	4630      	mov	r0, r6
   da958:	f7ff f8ee 	bl	d9b38 <__aeabi_d2iz>
   da95c:	f7fe fdd6 	bl	d950c <__aeabi_i2d>
   da960:	460b      	mov	r3, r1
   da962:	4602      	mov	r2, r0
   da964:	4639      	mov	r1, r7
   da966:	4630      	mov	r0, r6
   da968:	f7fe fc82 	bl	d9270 <__aeabi_dsub>
   da96c:	9b07      	ldr	r3, [sp, #28]
   da96e:	4606      	mov	r6, r0
   da970:	460f      	mov	r7, r1
   da972:	b92b      	cbnz	r3, da980 <_strtod_r+0xaf8>
   da974:	f1ba 0f00 	cmp.w	sl, #0
   da978:	d102      	bne.n	da980 <_strtod_r+0xaf8>
   da97a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da97e:	b183      	cbz	r3, da9a2 <_strtod_r+0xb1a>
   da980:	a335      	add	r3, pc, #212	; (adr r3, daa58 <_strtod_r+0xbd0>)
   da982:	e9d3 2300 	ldrd	r2, r3, [r3]
   da986:	4630      	mov	r0, r6
   da988:	4639      	mov	r1, r7
   da98a:	f7ff f897 	bl	d9abc <__aeabi_dcmplt>
   da98e:	2800      	cmp	r0, #0
   da990:	d131      	bne.n	da9f6 <_strtod_r+0xb6e>
   da992:	a333      	add	r3, pc, #204	; (adr r3, daa60 <_strtod_r+0xbd8>)
   da994:	e9d3 2300 	ldrd	r2, r3, [r3]
   da998:	4630      	mov	r0, r6
   da99a:	4639      	mov	r1, r7
   da99c:	f7ff f8ac 	bl	d9af8 <__aeabi_dcmpgt>
   da9a0:	e004      	b.n	da9ac <_strtod_r+0xb24>
   da9a2:	a331      	add	r3, pc, #196	; (adr r3, daa68 <_strtod_r+0xbe0>)
   da9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   da9a8:	f7ff f888 	bl	d9abc <__aeabi_dcmplt>
   da9ac:	bb18      	cbnz	r0, da9f6 <_strtod_r+0xb6e>
   da9ae:	9918      	ldr	r1, [sp, #96]	; 0x60
   da9b0:	9802      	ldr	r0, [sp, #8]
   da9b2:	f000 fc53 	bl	db25c <_Bfree>
   da9b6:	9904      	ldr	r1, [sp, #16]
   da9b8:	9802      	ldr	r0, [sp, #8]
   da9ba:	f000 fc4f 	bl	db25c <_Bfree>
   da9be:	4629      	mov	r1, r5
   da9c0:	9802      	ldr	r0, [sp, #8]
   da9c2:	f000 fc4b 	bl	db25c <_Bfree>
   da9c6:	4621      	mov	r1, r4
   da9c8:	9802      	ldr	r0, [sp, #8]
   da9ca:	f000 fc47 	bl	db25c <_Bfree>
   da9ce:	e56d      	b.n	da4ac <_strtod_r+0x624>
   da9d0:	9b03      	ldr	r3, [sp, #12]
   da9d2:	b183      	cbz	r3, da9f6 <_strtod_r+0xb6e>
   da9d4:	4b2b      	ldr	r3, [pc, #172]	; (daa84 <_strtod_r+0xbfc>)
   da9d6:	930b      	str	r3, [sp, #44]	; 0x2c
   da9d8:	2300      	movs	r3, #0
   da9da:	930a      	str	r3, [sp, #40]	; 0x28
   da9dc:	4650      	mov	r0, sl
   da9de:	4659      	mov	r1, fp
   da9e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da9e4:	f7fe fdf8 	bl	d95d8 <__aeabi_dmul>
   da9e8:	4682      	mov	sl, r0
   da9ea:	468b      	mov	fp, r1
   da9ec:	b919      	cbnz	r1, da9f6 <_strtod_r+0xb6e>
   da9ee:	b910      	cbnz	r0, da9f6 <_strtod_r+0xb6e>
   da9f0:	9a02      	ldr	r2, [sp, #8]
   da9f2:	2322      	movs	r3, #34	; 0x22
   da9f4:	6013      	str	r3, [r2, #0]
   da9f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   da9f8:	9802      	ldr	r0, [sp, #8]
   da9fa:	f000 fc2f 	bl	db25c <_Bfree>
   da9fe:	9904      	ldr	r1, [sp, #16]
   daa00:	9802      	ldr	r0, [sp, #8]
   daa02:	f000 fc2b 	bl	db25c <_Bfree>
   daa06:	4629      	mov	r1, r5
   daa08:	9802      	ldr	r0, [sp, #8]
   daa0a:	f000 fc27 	bl	db25c <_Bfree>
   daa0e:	9905      	ldr	r1, [sp, #20]
   daa10:	9802      	ldr	r0, [sp, #8]
   daa12:	f000 fc23 	bl	db25c <_Bfree>
   daa16:	4621      	mov	r1, r4
   daa18:	9802      	ldr	r0, [sp, #8]
   daa1a:	f000 fc1f 	bl	db25c <_Bfree>
   daa1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   daa20:	b113      	cbz	r3, daa28 <_strtod_r+0xba0>
   daa22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   daa24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daa26:	6013      	str	r3, [r2, #0]
   daa28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daa2a:	b11b      	cbz	r3, daa34 <_strtod_r+0xbac>
   daa2c:	4652      	mov	r2, sl
   daa2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   daa32:	e007      	b.n	daa44 <_strtod_r+0xbbc>
   daa34:	4652      	mov	r2, sl
   daa36:	465b      	mov	r3, fp
   daa38:	e004      	b.n	daa44 <_strtod_r+0xbbc>
   daa3a:	2500      	movs	r5, #0
   daa3c:	462a      	mov	r2, r5
   daa3e:	2101      	movs	r1, #1
   daa40:	f7ff bb41 	b.w	da0c6 <_strtod_r+0x23e>
   daa44:	ec43 2b10 	vmov	d0, r2, r3
   daa48:	b01d      	add	sp, #116	; 0x74
   daa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa4e:	bf00      	nop
   daa50:	ffc00000 	.word	0xffc00000
   daa54:	41dfffff 	.word	0x41dfffff
   daa58:	94a03595 	.word	0x94a03595
   daa5c:	3fdfffff 	.word	0x3fdfffff
   daa60:	35afe535 	.word	0x35afe535
   daa64:	3fe00000 	.word	0x3fe00000
   daa68:	94a03595 	.word	0x94a03595
   daa6c:	3fcfffff 	.word	0x3fcfffff
   daa70:	3ff00000 	.word	0x3ff00000
   daa74:	3fe00000 	.word	0x3fe00000
   daa78:	7fe00000 	.word	0x7fe00000
   daa7c:	7c9fffff 	.word	0x7c9fffff
   daa80:	7fefffff 	.word	0x7fefffff
   daa84:	39500000 	.word	0x39500000

000daa88 <strtod>:
   daa88:	4b02      	ldr	r3, [pc, #8]	; (daa94 <strtod+0xc>)
   daa8a:	460a      	mov	r2, r1
   daa8c:	4601      	mov	r1, r0
   daa8e:	6818      	ldr	r0, [r3, #0]
   daa90:	f7ff b9fa 	b.w	d9e88 <_strtod_r>
   daa94:	2003d504 	.word	0x2003d504

000daa98 <_strtol_r>:
   daa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daa9c:	4680      	mov	r8, r0
   daa9e:	4840      	ldr	r0, [pc, #256]	; (daba0 <_strtol_r+0x108>)
   daaa0:	f8d0 9000 	ldr.w	r9, [r0]
   daaa4:	460f      	mov	r7, r1
   daaa6:	463d      	mov	r5, r7
   daaa8:	f815 4b01 	ldrb.w	r4, [r5], #1
   daaac:	eb09 0004 	add.w	r0, r9, r4
   daab0:	7840      	ldrb	r0, [r0, #1]
   daab2:	f000 0008 	and.w	r0, r0, #8
   daab6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   daaba:	b108      	cbz	r0, daac0 <_strtol_r+0x28>
   daabc:	462f      	mov	r7, r5
   daabe:	e7f2      	b.n	daaa6 <_strtol_r+0xe>
   daac0:	2c2d      	cmp	r4, #45	; 0x2d
   daac2:	d103      	bne.n	daacc <_strtol_r+0x34>
   daac4:	1cbd      	adds	r5, r7, #2
   daac6:	787c      	ldrb	r4, [r7, #1]
   daac8:	2601      	movs	r6, #1
   daaca:	e003      	b.n	daad4 <_strtol_r+0x3c>
   daacc:	2c2b      	cmp	r4, #43	; 0x2b
   daace:	bf04      	itt	eq
   daad0:	787c      	ldrbeq	r4, [r7, #1]
   daad2:	1cbd      	addeq	r5, r7, #2
   daad4:	b113      	cbz	r3, daadc <_strtol_r+0x44>
   daad6:	2b10      	cmp	r3, #16
   daad8:	d10a      	bne.n	daaf0 <_strtol_r+0x58>
   daada:	e05b      	b.n	dab94 <_strtol_r+0xfc>
   daadc:	2c30      	cmp	r4, #48	; 0x30
   daade:	d157      	bne.n	dab90 <_strtol_r+0xf8>
   daae0:	7828      	ldrb	r0, [r5, #0]
   daae2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daae6:	2858      	cmp	r0, #88	; 0x58
   daae8:	d14d      	bne.n	dab86 <_strtol_r+0xee>
   daaea:	786c      	ldrb	r4, [r5, #1]
   daaec:	2310      	movs	r3, #16
   daaee:	3502      	adds	r5, #2
   daaf0:	2e00      	cmp	r6, #0
   daaf2:	bf14      	ite	ne
   daaf4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   daaf8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   daafc:	2700      	movs	r7, #0
   daafe:	fbbc faf3 	udiv	sl, ip, r3
   dab02:	4638      	mov	r0, r7
   dab04:	fb03 cc1a 	mls	ip, r3, sl, ip
   dab08:	eb09 0e04 	add.w	lr, r9, r4
   dab0c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dab10:	f01e 0f04 	tst.w	lr, #4
   dab14:	d001      	beq.n	dab1a <_strtol_r+0x82>
   dab16:	3c30      	subs	r4, #48	; 0x30
   dab18:	e00b      	b.n	dab32 <_strtol_r+0x9a>
   dab1a:	f01e 0e03 	ands.w	lr, lr, #3
   dab1e:	d01b      	beq.n	dab58 <_strtol_r+0xc0>
   dab20:	f1be 0f01 	cmp.w	lr, #1
   dab24:	bf0c      	ite	eq
   dab26:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dab2a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dab2e:	ebce 0404 	rsb	r4, lr, r4
   dab32:	42a3      	cmp	r3, r4
   dab34:	dd10      	ble.n	dab58 <_strtol_r+0xc0>
   dab36:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dab3a:	d00a      	beq.n	dab52 <_strtol_r+0xba>
   dab3c:	4550      	cmp	r0, sl
   dab3e:	d806      	bhi.n	dab4e <_strtol_r+0xb6>
   dab40:	d101      	bne.n	dab46 <_strtol_r+0xae>
   dab42:	4564      	cmp	r4, ip
   dab44:	dc03      	bgt.n	dab4e <_strtol_r+0xb6>
   dab46:	fb03 4000 	mla	r0, r3, r0, r4
   dab4a:	2701      	movs	r7, #1
   dab4c:	e001      	b.n	dab52 <_strtol_r+0xba>
   dab4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dab52:	f815 4b01 	ldrb.w	r4, [r5], #1
   dab56:	e7d7      	b.n	dab08 <_strtol_r+0x70>
   dab58:	1c7b      	adds	r3, r7, #1
   dab5a:	d10c      	bne.n	dab76 <_strtol_r+0xde>
   dab5c:	2e00      	cmp	r6, #0
   dab5e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dab62:	bf14      	ite	ne
   dab64:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dab68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dab6c:	f8c8 3000 	str.w	r3, [r8]
   dab70:	b92a      	cbnz	r2, dab7e <_strtol_r+0xe6>
   dab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab76:	b106      	cbz	r6, dab7a <_strtol_r+0xe2>
   dab78:	4240      	negs	r0, r0
   dab7a:	b172      	cbz	r2, dab9a <_strtol_r+0x102>
   dab7c:	b107      	cbz	r7, dab80 <_strtol_r+0xe8>
   dab7e:	1e69      	subs	r1, r5, #1
   dab80:	6011      	str	r1, [r2, #0]
   dab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab86:	2430      	movs	r4, #48	; 0x30
   dab88:	2b00      	cmp	r3, #0
   dab8a:	d1b1      	bne.n	daaf0 <_strtol_r+0x58>
   dab8c:	2308      	movs	r3, #8
   dab8e:	e7af      	b.n	daaf0 <_strtol_r+0x58>
   dab90:	230a      	movs	r3, #10
   dab92:	e7ad      	b.n	daaf0 <_strtol_r+0x58>
   dab94:	2c30      	cmp	r4, #48	; 0x30
   dab96:	d0a3      	beq.n	daae0 <_strtol_r+0x48>
   dab98:	e7aa      	b.n	daaf0 <_strtol_r+0x58>
   dab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab9e:	bf00      	nop
   daba0:	2003d4a0 	.word	0x2003d4a0

000daba4 <strtol>:
   daba4:	4613      	mov	r3, r2
   daba6:	460a      	mov	r2, r1
   daba8:	4601      	mov	r1, r0
   dabaa:	4802      	ldr	r0, [pc, #8]	; (dabb4 <strtol+0x10>)
   dabac:	6800      	ldr	r0, [r0, #0]
   dabae:	f7ff bf73 	b.w	daa98 <_strtol_r>
   dabb2:	bf00      	nop
   dabb4:	2003d504 	.word	0x2003d504

000dabb8 <rshift>:
   dabb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dabba:	6906      	ldr	r6, [r0, #16]
   dabbc:	114b      	asrs	r3, r1, #5
   dabbe:	42b3      	cmp	r3, r6
   dabc0:	f100 0514 	add.w	r5, r0, #20
   dabc4:	da27      	bge.n	dac16 <rshift+0x5e>
   dabc6:	f011 011f 	ands.w	r1, r1, #31
   dabca:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dabce:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dabd2:	d101      	bne.n	dabd8 <rshift+0x20>
   dabd4:	4629      	mov	r1, r5
   dabd6:	e016      	b.n	dac06 <rshift+0x4e>
   dabd8:	1d14      	adds	r4, r2, #4
   dabda:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dabde:	f1c1 0e20 	rsb	lr, r1, #32
   dabe2:	40ca      	lsrs	r2, r1
   dabe4:	462b      	mov	r3, r5
   dabe6:	42b4      	cmp	r4, r6
   dabe8:	d209      	bcs.n	dabfe <rshift+0x46>
   dabea:	6827      	ldr	r7, [r4, #0]
   dabec:	fa07 f70e 	lsl.w	r7, r7, lr
   dabf0:	433a      	orrs	r2, r7
   dabf2:	f843 2b04 	str.w	r2, [r3], #4
   dabf6:	f854 2b04 	ldr.w	r2, [r4], #4
   dabfa:	40ca      	lsrs	r2, r1
   dabfc:	e7f3      	b.n	dabe6 <rshift+0x2e>
   dabfe:	601a      	str	r2, [r3, #0]
   dac00:	b152      	cbz	r2, dac18 <rshift+0x60>
   dac02:	3304      	adds	r3, #4
   dac04:	e008      	b.n	dac18 <rshift+0x60>
   dac06:	42b2      	cmp	r2, r6
   dac08:	460b      	mov	r3, r1
   dac0a:	d205      	bcs.n	dac18 <rshift+0x60>
   dac0c:	f852 3b04 	ldr.w	r3, [r2], #4
   dac10:	f841 3b04 	str.w	r3, [r1], #4
   dac14:	e7f7      	b.n	dac06 <rshift+0x4e>
   dac16:	462b      	mov	r3, r5
   dac18:	1b5b      	subs	r3, r3, r5
   dac1a:	109b      	asrs	r3, r3, #2
   dac1c:	6103      	str	r3, [r0, #16]
   dac1e:	b903      	cbnz	r3, dac22 <rshift+0x6a>
   dac20:	6143      	str	r3, [r0, #20]
   dac22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dac24 <__hexdig_fun>:
   dac24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dac28:	2b09      	cmp	r3, #9
   dac2a:	d801      	bhi.n	dac30 <__hexdig_fun+0xc>
   dac2c:	3820      	subs	r0, #32
   dac2e:	e00a      	b.n	dac46 <__hexdig_fun+0x22>
   dac30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dac34:	2b05      	cmp	r3, #5
   dac36:	d801      	bhi.n	dac3c <__hexdig_fun+0x18>
   dac38:	3847      	subs	r0, #71	; 0x47
   dac3a:	e004      	b.n	dac46 <__hexdig_fun+0x22>
   dac3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dac40:	2b05      	cmp	r3, #5
   dac42:	d802      	bhi.n	dac4a <__hexdig_fun+0x26>
   dac44:	3827      	subs	r0, #39	; 0x27
   dac46:	b2c0      	uxtb	r0, r0
   dac48:	4770      	bx	lr
   dac4a:	2000      	movs	r0, #0
   dac4c:	4770      	bx	lr

000dac4e <__gethex>:
   dac4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac52:	b08b      	sub	sp, #44	; 0x2c
   dac54:	468a      	mov	sl, r1
   dac56:	4690      	mov	r8, r2
   dac58:	9306      	str	r3, [sp, #24]
   dac5a:	9002      	str	r0, [sp, #8]
   dac5c:	f7ff f81a 	bl	d9c94 <_localeconv_r>
   dac60:	6803      	ldr	r3, [r0, #0]
   dac62:	9303      	str	r3, [sp, #12]
   dac64:	4618      	mov	r0, r3
   dac66:	f7ff f8ca 	bl	d9dfe <strlen>
   dac6a:	9b03      	ldr	r3, [sp, #12]
   dac6c:	9001      	str	r0, [sp, #4]
   dac6e:	4403      	add	r3, r0
   dac70:	f04f 0b00 	mov.w	fp, #0
   dac74:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dac78:	9307      	str	r3, [sp, #28]
   dac7a:	f8da 3000 	ldr.w	r3, [sl]
   dac7e:	3302      	adds	r3, #2
   dac80:	461f      	mov	r7, r3
   dac82:	f813 0b01 	ldrb.w	r0, [r3], #1
   dac86:	2830      	cmp	r0, #48	; 0x30
   dac88:	d102      	bne.n	dac90 <__gethex+0x42>
   dac8a:	f10b 0b01 	add.w	fp, fp, #1
   dac8e:	e7f7      	b.n	dac80 <__gethex+0x32>
   dac90:	f7ff ffc8 	bl	dac24 <__hexdig_fun>
   dac94:	4604      	mov	r4, r0
   dac96:	b9e0      	cbnz	r0, dacd2 <__gethex+0x84>
   dac98:	9a01      	ldr	r2, [sp, #4]
   dac9a:	9903      	ldr	r1, [sp, #12]
   dac9c:	4638      	mov	r0, r7
   dac9e:	f7ff f8b6 	bl	d9e0e <strncmp>
   daca2:	2800      	cmp	r0, #0
   daca4:	d134      	bne.n	dad10 <__gethex+0xc2>
   daca6:	9b01      	ldr	r3, [sp, #4]
   daca8:	5cf8      	ldrb	r0, [r7, r3]
   dacaa:	18fe      	adds	r6, r7, r3
   dacac:	f7ff ffba 	bl	dac24 <__hexdig_fun>
   dacb0:	b380      	cbz	r0, dad14 <__gethex+0xc6>
   dacb2:	4633      	mov	r3, r6
   dacb4:	7818      	ldrb	r0, [r3, #0]
   dacb6:	2830      	cmp	r0, #48	; 0x30
   dacb8:	461f      	mov	r7, r3
   dacba:	f103 0301 	add.w	r3, r3, #1
   dacbe:	d0f9      	beq.n	dacb4 <__gethex+0x66>
   dacc0:	f7ff ffb0 	bl	dac24 <__hexdig_fun>
   dacc4:	fab0 f580 	clz	r5, r0
   dacc8:	096d      	lsrs	r5, r5, #5
   dacca:	4634      	mov	r4, r6
   daccc:	f04f 0b01 	mov.w	fp, #1
   dacd0:	e001      	b.n	dacd6 <__gethex+0x88>
   dacd2:	2500      	movs	r5, #0
   dacd4:	462c      	mov	r4, r5
   dacd6:	463a      	mov	r2, r7
   dacd8:	4616      	mov	r6, r2
   dacda:	3201      	adds	r2, #1
   dacdc:	7830      	ldrb	r0, [r6, #0]
   dacde:	f7ff ffa1 	bl	dac24 <__hexdig_fun>
   dace2:	2800      	cmp	r0, #0
   dace4:	d1f8      	bne.n	dacd8 <__gethex+0x8a>
   dace6:	9a01      	ldr	r2, [sp, #4]
   dace8:	9903      	ldr	r1, [sp, #12]
   dacea:	4630      	mov	r0, r6
   dacec:	f7ff f88f 	bl	d9e0e <strncmp>
   dacf0:	b950      	cbnz	r0, dad08 <__gethex+0xba>
   dacf2:	b954      	cbnz	r4, dad0a <__gethex+0xbc>
   dacf4:	9b01      	ldr	r3, [sp, #4]
   dacf6:	18f4      	adds	r4, r6, r3
   dacf8:	4622      	mov	r2, r4
   dacfa:	4616      	mov	r6, r2
   dacfc:	3201      	adds	r2, #1
   dacfe:	7830      	ldrb	r0, [r6, #0]
   dad00:	f7ff ff90 	bl	dac24 <__hexdig_fun>
   dad04:	2800      	cmp	r0, #0
   dad06:	d1f8      	bne.n	dacfa <__gethex+0xac>
   dad08:	b134      	cbz	r4, dad18 <__gethex+0xca>
   dad0a:	1ba4      	subs	r4, r4, r6
   dad0c:	00a4      	lsls	r4, r4, #2
   dad0e:	e003      	b.n	dad18 <__gethex+0xca>
   dad10:	463e      	mov	r6, r7
   dad12:	e000      	b.n	dad16 <__gethex+0xc8>
   dad14:	4604      	mov	r4, r0
   dad16:	2501      	movs	r5, #1
   dad18:	7833      	ldrb	r3, [r6, #0]
   dad1a:	2b50      	cmp	r3, #80	; 0x50
   dad1c:	d001      	beq.n	dad22 <__gethex+0xd4>
   dad1e:	2b70      	cmp	r3, #112	; 0x70
   dad20:	d12a      	bne.n	dad78 <__gethex+0x12a>
   dad22:	7873      	ldrb	r3, [r6, #1]
   dad24:	2b2b      	cmp	r3, #43	; 0x2b
   dad26:	d008      	beq.n	dad3a <__gethex+0xec>
   dad28:	2b2d      	cmp	r3, #45	; 0x2d
   dad2a:	d003      	beq.n	dad34 <__gethex+0xe6>
   dad2c:	1c71      	adds	r1, r6, #1
   dad2e:	f04f 0900 	mov.w	r9, #0
   dad32:	e005      	b.n	dad40 <__gethex+0xf2>
   dad34:	f04f 0901 	mov.w	r9, #1
   dad38:	e001      	b.n	dad3e <__gethex+0xf0>
   dad3a:	f04f 0900 	mov.w	r9, #0
   dad3e:	1cb1      	adds	r1, r6, #2
   dad40:	7808      	ldrb	r0, [r1, #0]
   dad42:	f7ff ff6f 	bl	dac24 <__hexdig_fun>
   dad46:	1e43      	subs	r3, r0, #1
   dad48:	b2db      	uxtb	r3, r3
   dad4a:	2b18      	cmp	r3, #24
   dad4c:	d814      	bhi.n	dad78 <__gethex+0x12a>
   dad4e:	f1a0 0210 	sub.w	r2, r0, #16
   dad52:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dad56:	f7ff ff65 	bl	dac24 <__hexdig_fun>
   dad5a:	1e43      	subs	r3, r0, #1
   dad5c:	b2db      	uxtb	r3, r3
   dad5e:	2b18      	cmp	r3, #24
   dad60:	d804      	bhi.n	dad6c <__gethex+0x11e>
   dad62:	230a      	movs	r3, #10
   dad64:	fb03 0202 	mla	r2, r3, r2, r0
   dad68:	3a10      	subs	r2, #16
   dad6a:	e7f2      	b.n	dad52 <__gethex+0x104>
   dad6c:	f1b9 0f00 	cmp.w	r9, #0
   dad70:	d000      	beq.n	dad74 <__gethex+0x126>
   dad72:	4252      	negs	r2, r2
   dad74:	4414      	add	r4, r2
   dad76:	e000      	b.n	dad7a <__gethex+0x12c>
   dad78:	4631      	mov	r1, r6
   dad7a:	f8ca 1000 	str.w	r1, [sl]
   dad7e:	b12d      	cbz	r5, dad8c <__gethex+0x13e>
   dad80:	f1bb 0f00 	cmp.w	fp, #0
   dad84:	bf14      	ite	ne
   dad86:	2000      	movne	r0, #0
   dad88:	2006      	moveq	r0, #6
   dad8a:	e17c      	b.n	db086 <__gethex+0x438>
   dad8c:	1bf3      	subs	r3, r6, r7
   dad8e:	3b01      	subs	r3, #1
   dad90:	4629      	mov	r1, r5
   dad92:	2b07      	cmp	r3, #7
   dad94:	dd02      	ble.n	dad9c <__gethex+0x14e>
   dad96:	3101      	adds	r1, #1
   dad98:	105b      	asrs	r3, r3, #1
   dad9a:	e7fa      	b.n	dad92 <__gethex+0x144>
   dad9c:	9802      	ldr	r0, [sp, #8]
   dad9e:	f000 fa28 	bl	db1f2 <_Balloc>
   dada2:	9b01      	ldr	r3, [sp, #4]
   dada4:	f100 0a14 	add.w	sl, r0, #20
   dada8:	f04f 0900 	mov.w	r9, #0
   dadac:	f1c3 0301 	rsb	r3, r3, #1
   dadb0:	4605      	mov	r5, r0
   dadb2:	f8cd a010 	str.w	sl, [sp, #16]
   dadb6:	46cb      	mov	fp, r9
   dadb8:	9308      	str	r3, [sp, #32]
   dadba:	42b7      	cmp	r7, r6
   dadbc:	d22f      	bcs.n	dae1e <__gethex+0x1d0>
   dadbe:	1e73      	subs	r3, r6, #1
   dadc0:	9305      	str	r3, [sp, #20]
   dadc2:	9a07      	ldr	r2, [sp, #28]
   dadc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dadc8:	4293      	cmp	r3, r2
   dadca:	d00b      	beq.n	dade4 <__gethex+0x196>
   dadcc:	f1bb 0f20 	cmp.w	fp, #32
   dadd0:	d116      	bne.n	dae00 <__gethex+0x1b2>
   dadd2:	9b04      	ldr	r3, [sp, #16]
   dadd4:	f8c3 9000 	str.w	r9, [r3]
   dadd8:	3304      	adds	r3, #4
   dadda:	f04f 0900 	mov.w	r9, #0
   dadde:	9304      	str	r3, [sp, #16]
   dade0:	46cb      	mov	fp, r9
   dade2:	e00d      	b.n	dae00 <__gethex+0x1b2>
   dade4:	9b05      	ldr	r3, [sp, #20]
   dade6:	9a08      	ldr	r2, [sp, #32]
   dade8:	4413      	add	r3, r2
   dadea:	429f      	cmp	r7, r3
   dadec:	d8ee      	bhi.n	dadcc <__gethex+0x17e>
   dadee:	4618      	mov	r0, r3
   dadf0:	9a01      	ldr	r2, [sp, #4]
   dadf2:	9903      	ldr	r1, [sp, #12]
   dadf4:	9309      	str	r3, [sp, #36]	; 0x24
   dadf6:	f7ff f80a 	bl	d9e0e <strncmp>
   dadfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dadfc:	b168      	cbz	r0, dae1a <__gethex+0x1cc>
   dadfe:	e7e5      	b.n	dadcc <__gethex+0x17e>
   dae00:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dae04:	f7ff ff0e 	bl	dac24 <__hexdig_fun>
   dae08:	f000 000f 	and.w	r0, r0, #15
   dae0c:	fa00 f00b 	lsl.w	r0, r0, fp
   dae10:	9b05      	ldr	r3, [sp, #20]
   dae12:	ea49 0900 	orr.w	r9, r9, r0
   dae16:	f10b 0b04 	add.w	fp, fp, #4
   dae1a:	461e      	mov	r6, r3
   dae1c:	e7cd      	b.n	dadba <__gethex+0x16c>
   dae1e:	9804      	ldr	r0, [sp, #16]
   dae20:	f840 9b04 	str.w	r9, [r0], #4
   dae24:	ebca 0000 	rsb	r0, sl, r0
   dae28:	1080      	asrs	r0, r0, #2
   dae2a:	6128      	str	r0, [r5, #16]
   dae2c:	0147      	lsls	r7, r0, #5
   dae2e:	4648      	mov	r0, r9
   dae30:	f000 faa4 	bl	db37c <__hi0bits>
   dae34:	f8d8 6000 	ldr.w	r6, [r8]
   dae38:	1a38      	subs	r0, r7, r0
   dae3a:	42b0      	cmp	r0, r6
   dae3c:	dd26      	ble.n	dae8c <__gethex+0x23e>
   dae3e:	1b87      	subs	r7, r0, r6
   dae40:	4639      	mov	r1, r7
   dae42:	4628      	mov	r0, r5
   dae44:	f000 fda3 	bl	db98e <__any_on>
   dae48:	b1c8      	cbz	r0, dae7e <__gethex+0x230>
   dae4a:	1e7b      	subs	r3, r7, #1
   dae4c:	1159      	asrs	r1, r3, #5
   dae4e:	f003 021f 	and.w	r2, r3, #31
   dae52:	f04f 0901 	mov.w	r9, #1
   dae56:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dae5a:	fa09 f202 	lsl.w	r2, r9, r2
   dae5e:	420a      	tst	r2, r1
   dae60:	d00e      	beq.n	dae80 <__gethex+0x232>
   dae62:	454b      	cmp	r3, r9
   dae64:	dc02      	bgt.n	dae6c <__gethex+0x21e>
   dae66:	f04f 0902 	mov.w	r9, #2
   dae6a:	e009      	b.n	dae80 <__gethex+0x232>
   dae6c:	1eb9      	subs	r1, r7, #2
   dae6e:	4628      	mov	r0, r5
   dae70:	f000 fd8d 	bl	db98e <__any_on>
   dae74:	2800      	cmp	r0, #0
   dae76:	d0f6      	beq.n	dae66 <__gethex+0x218>
   dae78:	f04f 0903 	mov.w	r9, #3
   dae7c:	e000      	b.n	dae80 <__gethex+0x232>
   dae7e:	4681      	mov	r9, r0
   dae80:	4639      	mov	r1, r7
   dae82:	4628      	mov	r0, r5
   dae84:	f7ff fe98 	bl	dabb8 <rshift>
   dae88:	443c      	add	r4, r7
   dae8a:	e00c      	b.n	daea6 <__gethex+0x258>
   dae8c:	da09      	bge.n	daea2 <__gethex+0x254>
   dae8e:	1a37      	subs	r7, r6, r0
   dae90:	4629      	mov	r1, r5
   dae92:	463a      	mov	r2, r7
   dae94:	9802      	ldr	r0, [sp, #8]
   dae96:	f000 fba7 	bl	db5e8 <__lshift>
   dae9a:	1be4      	subs	r4, r4, r7
   dae9c:	4605      	mov	r5, r0
   dae9e:	f100 0a14 	add.w	sl, r0, #20
   daea2:	f04f 0900 	mov.w	r9, #0
   daea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daeaa:	429c      	cmp	r4, r3
   daeac:	dd08      	ble.n	daec0 <__gethex+0x272>
   daeae:	9802      	ldr	r0, [sp, #8]
   daeb0:	4629      	mov	r1, r5
   daeb2:	f000 f9d3 	bl	db25c <_Bfree>
   daeb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daeb8:	2300      	movs	r3, #0
   daeba:	6013      	str	r3, [r2, #0]
   daebc:	20a3      	movs	r0, #163	; 0xa3
   daebe:	e0e2      	b.n	db086 <__gethex+0x438>
   daec0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daec4:	4284      	cmp	r4, r0
   daec6:	da53      	bge.n	daf70 <__gethex+0x322>
   daec8:	1b04      	subs	r4, r0, r4
   daeca:	42a6      	cmp	r6, r4
   daecc:	dc2e      	bgt.n	daf2c <__gethex+0x2de>
   daece:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daed2:	2b02      	cmp	r3, #2
   daed4:	d01a      	beq.n	daf0c <__gethex+0x2be>
   daed6:	2b03      	cmp	r3, #3
   daed8:	d01c      	beq.n	daf14 <__gethex+0x2c6>
   daeda:	2b01      	cmp	r3, #1
   daedc:	d11d      	bne.n	daf1a <__gethex+0x2cc>
   daede:	42a6      	cmp	r6, r4
   daee0:	d11b      	bne.n	daf1a <__gethex+0x2cc>
   daee2:	2e01      	cmp	r6, #1
   daee4:	dc0b      	bgt.n	daefe <__gethex+0x2b0>
   daee6:	9a06      	ldr	r2, [sp, #24]
   daee8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daeec:	6013      	str	r3, [r2, #0]
   daeee:	2301      	movs	r3, #1
   daef0:	612b      	str	r3, [r5, #16]
   daef2:	f8ca 3000 	str.w	r3, [sl]
   daef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daef8:	2062      	movs	r0, #98	; 0x62
   daefa:	601d      	str	r5, [r3, #0]
   daefc:	e0c3      	b.n	db086 <__gethex+0x438>
   daefe:	1e71      	subs	r1, r6, #1
   daf00:	4628      	mov	r0, r5
   daf02:	f000 fd44 	bl	db98e <__any_on>
   daf06:	2800      	cmp	r0, #0
   daf08:	d1ed      	bne.n	daee6 <__gethex+0x298>
   daf0a:	e006      	b.n	daf1a <__gethex+0x2cc>
   daf0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daf0e:	2b00      	cmp	r3, #0
   daf10:	d0e9      	beq.n	daee6 <__gethex+0x298>
   daf12:	e002      	b.n	daf1a <__gethex+0x2cc>
   daf14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daf16:	2b00      	cmp	r3, #0
   daf18:	d1e5      	bne.n	daee6 <__gethex+0x298>
   daf1a:	9802      	ldr	r0, [sp, #8]
   daf1c:	4629      	mov	r1, r5
   daf1e:	f000 f99d 	bl	db25c <_Bfree>
   daf22:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daf24:	2300      	movs	r3, #0
   daf26:	6013      	str	r3, [r2, #0]
   daf28:	2050      	movs	r0, #80	; 0x50
   daf2a:	e0ac      	b.n	db086 <__gethex+0x438>
   daf2c:	1e67      	subs	r7, r4, #1
   daf2e:	f1b9 0f00 	cmp.w	r9, #0
   daf32:	d106      	bne.n	daf42 <__gethex+0x2f4>
   daf34:	b13f      	cbz	r7, daf46 <__gethex+0x2f8>
   daf36:	4639      	mov	r1, r7
   daf38:	4628      	mov	r0, r5
   daf3a:	f000 fd28 	bl	db98e <__any_on>
   daf3e:	4681      	mov	r9, r0
   daf40:	e001      	b.n	daf46 <__gethex+0x2f8>
   daf42:	f04f 0901 	mov.w	r9, #1
   daf46:	117a      	asrs	r2, r7, #5
   daf48:	2301      	movs	r3, #1
   daf4a:	f007 071f 	and.w	r7, r7, #31
   daf4e:	fa03 f707 	lsl.w	r7, r3, r7
   daf52:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   daf56:	4621      	mov	r1, r4
   daf58:	421f      	tst	r7, r3
   daf5a:	4628      	mov	r0, r5
   daf5c:	bf18      	it	ne
   daf5e:	f049 0902 	orrne.w	r9, r9, #2
   daf62:	1b36      	subs	r6, r6, r4
   daf64:	f7ff fe28 	bl	dabb8 <rshift>
   daf68:	2702      	movs	r7, #2
   daf6a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   daf6e:	e000      	b.n	daf72 <__gethex+0x324>
   daf70:	2701      	movs	r7, #1
   daf72:	f1b9 0f00 	cmp.w	r9, #0
   daf76:	f000 8081 	beq.w	db07c <__gethex+0x42e>
   daf7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daf7e:	2b02      	cmp	r3, #2
   daf80:	d00e      	beq.n	dafa0 <__gethex+0x352>
   daf82:	2b03      	cmp	r3, #3
   daf84:	d010      	beq.n	dafa8 <__gethex+0x35a>
   daf86:	2b01      	cmp	r3, #1
   daf88:	d176      	bne.n	db078 <__gethex+0x42a>
   daf8a:	f019 0f02 	tst.w	r9, #2
   daf8e:	d073      	beq.n	db078 <__gethex+0x42a>
   daf90:	f8da 0000 	ldr.w	r0, [sl]
   daf94:	ea49 0900 	orr.w	r9, r9, r0
   daf98:	f019 0f01 	tst.w	r9, #1
   daf9c:	d107      	bne.n	dafae <__gethex+0x360>
   daf9e:	e06b      	b.n	db078 <__gethex+0x42a>
   dafa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dafa2:	f1c3 0301 	rsb	r3, r3, #1
   dafa6:	9315      	str	r3, [sp, #84]	; 0x54
   dafa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dafaa:	2b00      	cmp	r3, #0
   dafac:	d064      	beq.n	db078 <__gethex+0x42a>
   dafae:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dafb2:	f105 0314 	add.w	r3, r5, #20
   dafb6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dafba:	eb03 0109 	add.w	r1, r3, r9
   dafbe:	2000      	movs	r0, #0
   dafc0:	681a      	ldr	r2, [r3, #0]
   dafc2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dafc6:	d002      	beq.n	dafce <__gethex+0x380>
   dafc8:	3201      	adds	r2, #1
   dafca:	601a      	str	r2, [r3, #0]
   dafcc:	e020      	b.n	db010 <__gethex+0x3c2>
   dafce:	f843 0b04 	str.w	r0, [r3], #4
   dafd2:	4299      	cmp	r1, r3
   dafd4:	d8f4      	bhi.n	dafc0 <__gethex+0x372>
   dafd6:	68ab      	ldr	r3, [r5, #8]
   dafd8:	459a      	cmp	sl, r3
   dafda:	db12      	blt.n	db002 <__gethex+0x3b4>
   dafdc:	6869      	ldr	r1, [r5, #4]
   dafde:	9802      	ldr	r0, [sp, #8]
   dafe0:	3101      	adds	r1, #1
   dafe2:	f000 f906 	bl	db1f2 <_Balloc>
   dafe6:	692a      	ldr	r2, [r5, #16]
   dafe8:	3202      	adds	r2, #2
   dafea:	f105 010c 	add.w	r1, r5, #12
   dafee:	4683      	mov	fp, r0
   daff0:	0092      	lsls	r2, r2, #2
   daff2:	300c      	adds	r0, #12
   daff4:	f7fe fe61 	bl	d9cba <memcpy>
   daff8:	4629      	mov	r1, r5
   daffa:	9802      	ldr	r0, [sp, #8]
   daffc:	f000 f92e 	bl	db25c <_Bfree>
   db000:	465d      	mov	r5, fp
   db002:	692b      	ldr	r3, [r5, #16]
   db004:	1c5a      	adds	r2, r3, #1
   db006:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   db00a:	612a      	str	r2, [r5, #16]
   db00c:	2201      	movs	r2, #1
   db00e:	615a      	str	r2, [r3, #20]
   db010:	2f02      	cmp	r7, #2
   db012:	f105 0214 	add.w	r2, r5, #20
   db016:	d111      	bne.n	db03c <__gethex+0x3ee>
   db018:	f8d8 3000 	ldr.w	r3, [r8]
   db01c:	3b01      	subs	r3, #1
   db01e:	429e      	cmp	r6, r3
   db020:	d127      	bne.n	db072 <__gethex+0x424>
   db022:	1171      	asrs	r1, r6, #5
   db024:	2301      	movs	r3, #1
   db026:	f006 061f 	and.w	r6, r6, #31
   db02a:	fa03 f606 	lsl.w	r6, r3, r6
   db02e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   db032:	421e      	tst	r6, r3
   db034:	bf0c      	ite	eq
   db036:	2702      	moveq	r7, #2
   db038:	2701      	movne	r7, #1
   db03a:	e01a      	b.n	db072 <__gethex+0x424>
   db03c:	692b      	ldr	r3, [r5, #16]
   db03e:	459a      	cmp	sl, r3
   db040:	da0a      	bge.n	db058 <__gethex+0x40a>
   db042:	2101      	movs	r1, #1
   db044:	4628      	mov	r0, r5
   db046:	f7ff fdb7 	bl	dabb8 <rshift>
   db04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db04e:	3401      	adds	r4, #1
   db050:	429c      	cmp	r4, r3
   db052:	f73f af2c 	bgt.w	daeae <__gethex+0x260>
   db056:	e00b      	b.n	db070 <__gethex+0x422>
   db058:	f016 061f 	ands.w	r6, r6, #31
   db05c:	d008      	beq.n	db070 <__gethex+0x422>
   db05e:	4491      	add	r9, r2
   db060:	f1c6 0620 	rsb	r6, r6, #32
   db064:	f859 0c04 	ldr.w	r0, [r9, #-4]
   db068:	f000 f988 	bl	db37c <__hi0bits>
   db06c:	42b0      	cmp	r0, r6
   db06e:	dbe8      	blt.n	db042 <__gethex+0x3f4>
   db070:	2701      	movs	r7, #1
   db072:	f047 0720 	orr.w	r7, r7, #32
   db076:	e001      	b.n	db07c <__gethex+0x42e>
   db078:	f047 0710 	orr.w	r7, r7, #16
   db07c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db07e:	601d      	str	r5, [r3, #0]
   db080:	9b06      	ldr	r3, [sp, #24]
   db082:	4638      	mov	r0, r7
   db084:	601c      	str	r4, [r3, #0]
   db086:	b00b      	add	sp, #44	; 0x2c
   db088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db08c <L_shift>:
   db08c:	f1c2 0208 	rsb	r2, r2, #8
   db090:	0092      	lsls	r2, r2, #2
   db092:	b570      	push	{r4, r5, r6, lr}
   db094:	f1c2 0620 	rsb	r6, r2, #32
   db098:	6843      	ldr	r3, [r0, #4]
   db09a:	6805      	ldr	r5, [r0, #0]
   db09c:	fa03 f406 	lsl.w	r4, r3, r6
   db0a0:	432c      	orrs	r4, r5
   db0a2:	40d3      	lsrs	r3, r2
   db0a4:	6004      	str	r4, [r0, #0]
   db0a6:	f840 3f04 	str.w	r3, [r0, #4]!
   db0aa:	4288      	cmp	r0, r1
   db0ac:	d3f4      	bcc.n	db098 <L_shift+0xc>
   db0ae:	bd70      	pop	{r4, r5, r6, pc}

000db0b0 <__match>:
   db0b0:	b530      	push	{r4, r5, lr}
   db0b2:	6803      	ldr	r3, [r0, #0]
   db0b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   db0b8:	3301      	adds	r3, #1
   db0ba:	b14c      	cbz	r4, db0d0 <__match+0x20>
   db0bc:	781a      	ldrb	r2, [r3, #0]
   db0be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   db0c2:	2d19      	cmp	r5, #25
   db0c4:	bf98      	it	ls
   db0c6:	3220      	addls	r2, #32
   db0c8:	42a2      	cmp	r2, r4
   db0ca:	d0f3      	beq.n	db0b4 <__match+0x4>
   db0cc:	2000      	movs	r0, #0
   db0ce:	bd30      	pop	{r4, r5, pc}
   db0d0:	6003      	str	r3, [r0, #0]
   db0d2:	2001      	movs	r0, #1
   db0d4:	bd30      	pop	{r4, r5, pc}

000db0d6 <__hexnan>:
   db0d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db0da:	680b      	ldr	r3, [r1, #0]
   db0dc:	f8d0 b000 	ldr.w	fp, [r0]
   db0e0:	115e      	asrs	r6, r3, #5
   db0e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   db0e6:	f013 031f 	ands.w	r3, r3, #31
   db0ea:	b085      	sub	sp, #20
   db0ec:	bf18      	it	ne
   db0ee:	3604      	addne	r6, #4
   db0f0:	1f35      	subs	r5, r6, #4
   db0f2:	4617      	mov	r7, r2
   db0f4:	2200      	movs	r2, #0
   db0f6:	4682      	mov	sl, r0
   db0f8:	9301      	str	r3, [sp, #4]
   db0fa:	f846 2c04 	str.w	r2, [r6, #-4]
   db0fe:	46a8      	mov	r8, r5
   db100:	462c      	mov	r4, r5
   db102:	9200      	str	r2, [sp, #0]
   db104:	4691      	mov	r9, r2
   db106:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   db10a:	2900      	cmp	r1, #0
   db10c:	d03c      	beq.n	db188 <__hexnan+0xb2>
   db10e:	4608      	mov	r0, r1
   db110:	9203      	str	r2, [sp, #12]
   db112:	9102      	str	r1, [sp, #8]
   db114:	f7ff fd86 	bl	dac24 <__hexdig_fun>
   db118:	9a03      	ldr	r2, [sp, #12]
   db11a:	bb00      	cbnz	r0, db15e <__hexnan+0x88>
   db11c:	9902      	ldr	r1, [sp, #8]
   db11e:	2920      	cmp	r1, #32
   db120:	d816      	bhi.n	db150 <__hexnan+0x7a>
   db122:	9b00      	ldr	r3, [sp, #0]
   db124:	4599      	cmp	r9, r3
   db126:	ddee      	ble.n	db106 <__hexnan+0x30>
   db128:	4544      	cmp	r4, r8
   db12a:	d205      	bcs.n	db138 <__hexnan+0x62>
   db12c:	2a07      	cmp	r2, #7
   db12e:	dc03      	bgt.n	db138 <__hexnan+0x62>
   db130:	4641      	mov	r1, r8
   db132:	4620      	mov	r0, r4
   db134:	f7ff ffaa 	bl	db08c <L_shift>
   db138:	42bc      	cmp	r4, r7
   db13a:	d923      	bls.n	db184 <__hexnan+0xae>
   db13c:	2300      	movs	r3, #0
   db13e:	f1a4 0804 	sub.w	r8, r4, #4
   db142:	f844 3c04 	str.w	r3, [r4, #-4]
   db146:	f8cd 9000 	str.w	r9, [sp]
   db14a:	4644      	mov	r4, r8
   db14c:	461a      	mov	r2, r3
   db14e:	e7da      	b.n	db106 <__hexnan+0x30>
   db150:	2929      	cmp	r1, #41	; 0x29
   db152:	d148      	bne.n	db1e6 <__hexnan+0x110>
   db154:	f10b 0301 	add.w	r3, fp, #1
   db158:	f8ca 3000 	str.w	r3, [sl]
   db15c:	e014      	b.n	db188 <__hexnan+0xb2>
   db15e:	3201      	adds	r2, #1
   db160:	2a08      	cmp	r2, #8
   db162:	f109 0901 	add.w	r9, r9, #1
   db166:	dd06      	ble.n	db176 <__hexnan+0xa0>
   db168:	42bc      	cmp	r4, r7
   db16a:	d9cc      	bls.n	db106 <__hexnan+0x30>
   db16c:	2300      	movs	r3, #0
   db16e:	f844 3c04 	str.w	r3, [r4, #-4]
   db172:	2201      	movs	r2, #1
   db174:	3c04      	subs	r4, #4
   db176:	6821      	ldr	r1, [r4, #0]
   db178:	f000 000f 	and.w	r0, r0, #15
   db17c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   db180:	6020      	str	r0, [r4, #0]
   db182:	e7c0      	b.n	db106 <__hexnan+0x30>
   db184:	2208      	movs	r2, #8
   db186:	e7be      	b.n	db106 <__hexnan+0x30>
   db188:	f1b9 0f00 	cmp.w	r9, #0
   db18c:	d02b      	beq.n	db1e6 <__hexnan+0x110>
   db18e:	4544      	cmp	r4, r8
   db190:	d205      	bcs.n	db19e <__hexnan+0xc8>
   db192:	2a07      	cmp	r2, #7
   db194:	dc03      	bgt.n	db19e <__hexnan+0xc8>
   db196:	4641      	mov	r1, r8
   db198:	4620      	mov	r0, r4
   db19a:	f7ff ff77 	bl	db08c <L_shift>
   db19e:	42bc      	cmp	r4, r7
   db1a0:	d90c      	bls.n	db1bc <__hexnan+0xe6>
   db1a2:	463b      	mov	r3, r7
   db1a4:	f854 2b04 	ldr.w	r2, [r4], #4
   db1a8:	f843 2b04 	str.w	r2, [r3], #4
   db1ac:	42a5      	cmp	r5, r4
   db1ae:	d2f9      	bcs.n	db1a4 <__hexnan+0xce>
   db1b0:	2200      	movs	r2, #0
   db1b2:	f843 2b04 	str.w	r2, [r3], #4
   db1b6:	429d      	cmp	r5, r3
   db1b8:	d2fb      	bcs.n	db1b2 <__hexnan+0xdc>
   db1ba:	e00b      	b.n	db1d4 <__hexnan+0xfe>
   db1bc:	9b01      	ldr	r3, [sp, #4]
   db1be:	b14b      	cbz	r3, db1d4 <__hexnan+0xfe>
   db1c0:	f1c3 0220 	rsb	r2, r3, #32
   db1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db1c8:	40d3      	lsrs	r3, r2
   db1ca:	f856 2c04 	ldr.w	r2, [r6, #-4]
   db1ce:	4013      	ands	r3, r2
   db1d0:	f846 3c04 	str.w	r3, [r6, #-4]
   db1d4:	682b      	ldr	r3, [r5, #0]
   db1d6:	b943      	cbnz	r3, db1ea <__hexnan+0x114>
   db1d8:	42bd      	cmp	r5, r7
   db1da:	d102      	bne.n	db1e2 <__hexnan+0x10c>
   db1dc:	2301      	movs	r3, #1
   db1de:	602b      	str	r3, [r5, #0]
   db1e0:	e003      	b.n	db1ea <__hexnan+0x114>
   db1e2:	3d04      	subs	r5, #4
   db1e4:	e7f6      	b.n	db1d4 <__hexnan+0xfe>
   db1e6:	2004      	movs	r0, #4
   db1e8:	e000      	b.n	db1ec <__hexnan+0x116>
   db1ea:	2005      	movs	r0, #5
   db1ec:	b005      	add	sp, #20
   db1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db1f2 <_Balloc>:
   db1f2:	b570      	push	{r4, r5, r6, lr}
   db1f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   db1f6:	4604      	mov	r4, r0
   db1f8:	460e      	mov	r6, r1
   db1fa:	b93d      	cbnz	r5, db20c <_Balloc+0x1a>
   db1fc:	2010      	movs	r0, #16
   db1fe:	f7fa fead 	bl	d5f5c <malloc>
   db202:	6260      	str	r0, [r4, #36]	; 0x24
   db204:	6045      	str	r5, [r0, #4]
   db206:	6085      	str	r5, [r0, #8]
   db208:	6005      	str	r5, [r0, #0]
   db20a:	60c5      	str	r5, [r0, #12]
   db20c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   db20e:	68eb      	ldr	r3, [r5, #12]
   db210:	b143      	cbz	r3, db224 <_Balloc+0x32>
   db212:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db214:	68db      	ldr	r3, [r3, #12]
   db216:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db21a:	b178      	cbz	r0, db23c <_Balloc+0x4a>
   db21c:	6802      	ldr	r2, [r0, #0]
   db21e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db222:	e017      	b.n	db254 <_Balloc+0x62>
   db224:	2221      	movs	r2, #33	; 0x21
   db226:	2104      	movs	r1, #4
   db228:	4620      	mov	r0, r4
   db22a:	f000 fbd2 	bl	db9d2 <_calloc_r>
   db22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db230:	60e8      	str	r0, [r5, #12]
   db232:	68db      	ldr	r3, [r3, #12]
   db234:	2b00      	cmp	r3, #0
   db236:	d1ec      	bne.n	db212 <_Balloc+0x20>
   db238:	2000      	movs	r0, #0
   db23a:	bd70      	pop	{r4, r5, r6, pc}
   db23c:	2101      	movs	r1, #1
   db23e:	fa01 f506 	lsl.w	r5, r1, r6
   db242:	1d6a      	adds	r2, r5, #5
   db244:	0092      	lsls	r2, r2, #2
   db246:	4620      	mov	r0, r4
   db248:	f000 fbc3 	bl	db9d2 <_calloc_r>
   db24c:	2800      	cmp	r0, #0
   db24e:	d0f3      	beq.n	db238 <_Balloc+0x46>
   db250:	6046      	str	r6, [r0, #4]
   db252:	6085      	str	r5, [r0, #8]
   db254:	2300      	movs	r3, #0
   db256:	6103      	str	r3, [r0, #16]
   db258:	60c3      	str	r3, [r0, #12]
   db25a:	bd70      	pop	{r4, r5, r6, pc}

000db25c <_Bfree>:
   db25c:	b570      	push	{r4, r5, r6, lr}
   db25e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db260:	4606      	mov	r6, r0
   db262:	460d      	mov	r5, r1
   db264:	b93c      	cbnz	r4, db276 <_Bfree+0x1a>
   db266:	2010      	movs	r0, #16
   db268:	f7fa fe78 	bl	d5f5c <malloc>
   db26c:	6270      	str	r0, [r6, #36]	; 0x24
   db26e:	6044      	str	r4, [r0, #4]
   db270:	6084      	str	r4, [r0, #8]
   db272:	6004      	str	r4, [r0, #0]
   db274:	60c4      	str	r4, [r0, #12]
   db276:	b13d      	cbz	r5, db288 <_Bfree+0x2c>
   db278:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db27a:	686a      	ldr	r2, [r5, #4]
   db27c:	68db      	ldr	r3, [r3, #12]
   db27e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db282:	6029      	str	r1, [r5, #0]
   db284:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db288:	bd70      	pop	{r4, r5, r6, pc}

000db28a <__multadd>:
   db28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db28e:	690d      	ldr	r5, [r1, #16]
   db290:	461f      	mov	r7, r3
   db292:	4606      	mov	r6, r0
   db294:	460c      	mov	r4, r1
   db296:	f101 0e14 	add.w	lr, r1, #20
   db29a:	2300      	movs	r3, #0
   db29c:	f8de 0000 	ldr.w	r0, [lr]
   db2a0:	b281      	uxth	r1, r0
   db2a2:	fb02 7101 	mla	r1, r2, r1, r7
   db2a6:	0c0f      	lsrs	r7, r1, #16
   db2a8:	0c00      	lsrs	r0, r0, #16
   db2aa:	fb02 7000 	mla	r0, r2, r0, r7
   db2ae:	b289      	uxth	r1, r1
   db2b0:	3301      	adds	r3, #1
   db2b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db2b6:	429d      	cmp	r5, r3
   db2b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db2bc:	f84e 1b04 	str.w	r1, [lr], #4
   db2c0:	dcec      	bgt.n	db29c <__multadd+0x12>
   db2c2:	b1d7      	cbz	r7, db2fa <__multadd+0x70>
   db2c4:	68a3      	ldr	r3, [r4, #8]
   db2c6:	429d      	cmp	r5, r3
   db2c8:	db12      	blt.n	db2f0 <__multadd+0x66>
   db2ca:	6861      	ldr	r1, [r4, #4]
   db2cc:	4630      	mov	r0, r6
   db2ce:	3101      	adds	r1, #1
   db2d0:	f7ff ff8f 	bl	db1f2 <_Balloc>
   db2d4:	6922      	ldr	r2, [r4, #16]
   db2d6:	3202      	adds	r2, #2
   db2d8:	f104 010c 	add.w	r1, r4, #12
   db2dc:	4680      	mov	r8, r0
   db2de:	0092      	lsls	r2, r2, #2
   db2e0:	300c      	adds	r0, #12
   db2e2:	f7fe fcea 	bl	d9cba <memcpy>
   db2e6:	4621      	mov	r1, r4
   db2e8:	4630      	mov	r0, r6
   db2ea:	f7ff ffb7 	bl	db25c <_Bfree>
   db2ee:	4644      	mov	r4, r8
   db2f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db2f4:	3501      	adds	r5, #1
   db2f6:	615f      	str	r7, [r3, #20]
   db2f8:	6125      	str	r5, [r4, #16]
   db2fa:	4620      	mov	r0, r4
   db2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db300 <__s2b>:
   db300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db304:	460c      	mov	r4, r1
   db306:	4615      	mov	r5, r2
   db308:	461f      	mov	r7, r3
   db30a:	2209      	movs	r2, #9
   db30c:	3308      	adds	r3, #8
   db30e:	4606      	mov	r6, r0
   db310:	fb93 f3f2 	sdiv	r3, r3, r2
   db314:	2100      	movs	r1, #0
   db316:	2201      	movs	r2, #1
   db318:	429a      	cmp	r2, r3
   db31a:	da02      	bge.n	db322 <__s2b+0x22>
   db31c:	0052      	lsls	r2, r2, #1
   db31e:	3101      	adds	r1, #1
   db320:	e7fa      	b.n	db318 <__s2b+0x18>
   db322:	4630      	mov	r0, r6
   db324:	f7ff ff65 	bl	db1f2 <_Balloc>
   db328:	9b08      	ldr	r3, [sp, #32]
   db32a:	6143      	str	r3, [r0, #20]
   db32c:	2d09      	cmp	r5, #9
   db32e:	f04f 0301 	mov.w	r3, #1
   db332:	6103      	str	r3, [r0, #16]
   db334:	dd11      	ble.n	db35a <__s2b+0x5a>
   db336:	f104 0809 	add.w	r8, r4, #9
   db33a:	46c1      	mov	r9, r8
   db33c:	442c      	add	r4, r5
   db33e:	f819 3b01 	ldrb.w	r3, [r9], #1
   db342:	4601      	mov	r1, r0
   db344:	3b30      	subs	r3, #48	; 0x30
   db346:	220a      	movs	r2, #10
   db348:	4630      	mov	r0, r6
   db34a:	f7ff ff9e 	bl	db28a <__multadd>
   db34e:	45a1      	cmp	r9, r4
   db350:	d1f5      	bne.n	db33e <__s2b+0x3e>
   db352:	eb08 0405 	add.w	r4, r8, r5
   db356:	3c08      	subs	r4, #8
   db358:	e001      	b.n	db35e <__s2b+0x5e>
   db35a:	340a      	adds	r4, #10
   db35c:	2509      	movs	r5, #9
   db35e:	1b2d      	subs	r5, r5, r4
   db360:	1963      	adds	r3, r4, r5
   db362:	429f      	cmp	r7, r3
   db364:	dd08      	ble.n	db378 <__s2b+0x78>
   db366:	f814 3b01 	ldrb.w	r3, [r4], #1
   db36a:	4601      	mov	r1, r0
   db36c:	3b30      	subs	r3, #48	; 0x30
   db36e:	220a      	movs	r2, #10
   db370:	4630      	mov	r0, r6
   db372:	f7ff ff8a 	bl	db28a <__multadd>
   db376:	e7f3      	b.n	db360 <__s2b+0x60>
   db378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db37c <__hi0bits>:
   db37c:	0c03      	lsrs	r3, r0, #16
   db37e:	041b      	lsls	r3, r3, #16
   db380:	b913      	cbnz	r3, db388 <__hi0bits+0xc>
   db382:	0400      	lsls	r0, r0, #16
   db384:	2310      	movs	r3, #16
   db386:	e000      	b.n	db38a <__hi0bits+0xe>
   db388:	2300      	movs	r3, #0
   db38a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db38e:	bf04      	itt	eq
   db390:	0200      	lsleq	r0, r0, #8
   db392:	3308      	addeq	r3, #8
   db394:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db398:	bf04      	itt	eq
   db39a:	0100      	lsleq	r0, r0, #4
   db39c:	3304      	addeq	r3, #4
   db39e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db3a2:	bf04      	itt	eq
   db3a4:	0080      	lsleq	r0, r0, #2
   db3a6:	3302      	addeq	r3, #2
   db3a8:	2800      	cmp	r0, #0
   db3aa:	db03      	blt.n	db3b4 <__hi0bits+0x38>
   db3ac:	0042      	lsls	r2, r0, #1
   db3ae:	d503      	bpl.n	db3b8 <__hi0bits+0x3c>
   db3b0:	1c58      	adds	r0, r3, #1
   db3b2:	4770      	bx	lr
   db3b4:	4618      	mov	r0, r3
   db3b6:	4770      	bx	lr
   db3b8:	2020      	movs	r0, #32
   db3ba:	4770      	bx	lr

000db3bc <__lo0bits>:
   db3bc:	6803      	ldr	r3, [r0, #0]
   db3be:	f013 0207 	ands.w	r2, r3, #7
   db3c2:	d00b      	beq.n	db3dc <__lo0bits+0x20>
   db3c4:	07d9      	lsls	r1, r3, #31
   db3c6:	d422      	bmi.n	db40e <__lo0bits+0x52>
   db3c8:	079a      	lsls	r2, r3, #30
   db3ca:	bf4b      	itete	mi
   db3cc:	085b      	lsrmi	r3, r3, #1
   db3ce:	089b      	lsrpl	r3, r3, #2
   db3d0:	6003      	strmi	r3, [r0, #0]
   db3d2:	6003      	strpl	r3, [r0, #0]
   db3d4:	bf4c      	ite	mi
   db3d6:	2001      	movmi	r0, #1
   db3d8:	2002      	movpl	r0, #2
   db3da:	4770      	bx	lr
   db3dc:	b299      	uxth	r1, r3
   db3de:	b909      	cbnz	r1, db3e4 <__lo0bits+0x28>
   db3e0:	0c1b      	lsrs	r3, r3, #16
   db3e2:	2210      	movs	r2, #16
   db3e4:	f013 0fff 	tst.w	r3, #255	; 0xff
   db3e8:	bf04      	itt	eq
   db3ea:	0a1b      	lsreq	r3, r3, #8
   db3ec:	3208      	addeq	r2, #8
   db3ee:	0719      	lsls	r1, r3, #28
   db3f0:	bf04      	itt	eq
   db3f2:	091b      	lsreq	r3, r3, #4
   db3f4:	3204      	addeq	r2, #4
   db3f6:	0799      	lsls	r1, r3, #30
   db3f8:	bf04      	itt	eq
   db3fa:	089b      	lsreq	r3, r3, #2
   db3fc:	3202      	addeq	r2, #2
   db3fe:	07d9      	lsls	r1, r3, #31
   db400:	d402      	bmi.n	db408 <__lo0bits+0x4c>
   db402:	085b      	lsrs	r3, r3, #1
   db404:	d005      	beq.n	db412 <__lo0bits+0x56>
   db406:	3201      	adds	r2, #1
   db408:	6003      	str	r3, [r0, #0]
   db40a:	4610      	mov	r0, r2
   db40c:	4770      	bx	lr
   db40e:	2000      	movs	r0, #0
   db410:	4770      	bx	lr
   db412:	2020      	movs	r0, #32
   db414:	4770      	bx	lr

000db416 <__i2b>:
   db416:	b510      	push	{r4, lr}
   db418:	460c      	mov	r4, r1
   db41a:	2101      	movs	r1, #1
   db41c:	f7ff fee9 	bl	db1f2 <_Balloc>
   db420:	2201      	movs	r2, #1
   db422:	6144      	str	r4, [r0, #20]
   db424:	6102      	str	r2, [r0, #16]
   db426:	bd10      	pop	{r4, pc}

000db428 <__multiply>:
   db428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db42c:	4614      	mov	r4, r2
   db42e:	690a      	ldr	r2, [r1, #16]
   db430:	6923      	ldr	r3, [r4, #16]
   db432:	429a      	cmp	r2, r3
   db434:	bfb8      	it	lt
   db436:	460b      	movlt	r3, r1
   db438:	4688      	mov	r8, r1
   db43a:	bfbc      	itt	lt
   db43c:	46a0      	movlt	r8, r4
   db43e:	461c      	movlt	r4, r3
   db440:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db444:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db448:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db44c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db450:	eb07 0609 	add.w	r6, r7, r9
   db454:	429e      	cmp	r6, r3
   db456:	bfc8      	it	gt
   db458:	3101      	addgt	r1, #1
   db45a:	f7ff feca 	bl	db1f2 <_Balloc>
   db45e:	f100 0514 	add.w	r5, r0, #20
   db462:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db466:	462b      	mov	r3, r5
   db468:	2200      	movs	r2, #0
   db46a:	4563      	cmp	r3, ip
   db46c:	d202      	bcs.n	db474 <__multiply+0x4c>
   db46e:	f843 2b04 	str.w	r2, [r3], #4
   db472:	e7fa      	b.n	db46a <__multiply+0x42>
   db474:	f104 0214 	add.w	r2, r4, #20
   db478:	f108 0114 	add.w	r1, r8, #20
   db47c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db480:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db484:	9300      	str	r3, [sp, #0]
   db486:	9b00      	ldr	r3, [sp, #0]
   db488:	9201      	str	r2, [sp, #4]
   db48a:	4293      	cmp	r3, r2
   db48c:	d957      	bls.n	db53e <__multiply+0x116>
   db48e:	f8b2 b000 	ldrh.w	fp, [r2]
   db492:	f1bb 0f00 	cmp.w	fp, #0
   db496:	d023      	beq.n	db4e0 <__multiply+0xb8>
   db498:	4689      	mov	r9, r1
   db49a:	46ae      	mov	lr, r5
   db49c:	f04f 0800 	mov.w	r8, #0
   db4a0:	f859 4b04 	ldr.w	r4, [r9], #4
   db4a4:	f8be a000 	ldrh.w	sl, [lr]
   db4a8:	b2a3      	uxth	r3, r4
   db4aa:	fb0b a303 	mla	r3, fp, r3, sl
   db4ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db4b2:	f8de 4000 	ldr.w	r4, [lr]
   db4b6:	4443      	add	r3, r8
   db4b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db4bc:	fb0b 840a 	mla	r4, fp, sl, r8
   db4c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db4c4:	46f2      	mov	sl, lr
   db4c6:	b29b      	uxth	r3, r3
   db4c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db4cc:	454f      	cmp	r7, r9
   db4ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db4d2:	f84a 3b04 	str.w	r3, [sl], #4
   db4d6:	d901      	bls.n	db4dc <__multiply+0xb4>
   db4d8:	46d6      	mov	lr, sl
   db4da:	e7e1      	b.n	db4a0 <__multiply+0x78>
   db4dc:	f8ce 8004 	str.w	r8, [lr, #4]
   db4e0:	9b01      	ldr	r3, [sp, #4]
   db4e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db4e6:	3204      	adds	r2, #4
   db4e8:	f1ba 0f00 	cmp.w	sl, #0
   db4ec:	d021      	beq.n	db532 <__multiply+0x10a>
   db4ee:	682b      	ldr	r3, [r5, #0]
   db4f0:	462c      	mov	r4, r5
   db4f2:	4689      	mov	r9, r1
   db4f4:	f04f 0800 	mov.w	r8, #0
   db4f8:	f8b9 e000 	ldrh.w	lr, [r9]
   db4fc:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db500:	fb0a be0e 	mla	lr, sl, lr, fp
   db504:	44f0      	add	r8, lr
   db506:	46a3      	mov	fp, r4
   db508:	b29b      	uxth	r3, r3
   db50a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db50e:	f84b 3b04 	str.w	r3, [fp], #4
   db512:	f859 3b04 	ldr.w	r3, [r9], #4
   db516:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db51a:	0c1b      	lsrs	r3, r3, #16
   db51c:	fb0a e303 	mla	r3, sl, r3, lr
   db520:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db524:	454f      	cmp	r7, r9
   db526:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db52a:	d901      	bls.n	db530 <__multiply+0x108>
   db52c:	465c      	mov	r4, fp
   db52e:	e7e3      	b.n	db4f8 <__multiply+0xd0>
   db530:	6063      	str	r3, [r4, #4]
   db532:	3504      	adds	r5, #4
   db534:	e7a7      	b.n	db486 <__multiply+0x5e>
   db536:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db53a:	b913      	cbnz	r3, db542 <__multiply+0x11a>
   db53c:	3e01      	subs	r6, #1
   db53e:	2e00      	cmp	r6, #0
   db540:	dcf9      	bgt.n	db536 <__multiply+0x10e>
   db542:	6106      	str	r6, [r0, #16]
   db544:	b003      	add	sp, #12
   db546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db54c <__pow5mult>:
   db54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db550:	4615      	mov	r5, r2
   db552:	f012 0203 	ands.w	r2, r2, #3
   db556:	4606      	mov	r6, r0
   db558:	460f      	mov	r7, r1
   db55a:	d007      	beq.n	db56c <__pow5mult+0x20>
   db55c:	3a01      	subs	r2, #1
   db55e:	4c21      	ldr	r4, [pc, #132]	; (db5e4 <__pow5mult+0x98>)
   db560:	2300      	movs	r3, #0
   db562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db566:	f7ff fe90 	bl	db28a <__multadd>
   db56a:	4607      	mov	r7, r0
   db56c:	10ad      	asrs	r5, r5, #2
   db56e:	d036      	beq.n	db5de <__pow5mult+0x92>
   db570:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db572:	b93c      	cbnz	r4, db584 <__pow5mult+0x38>
   db574:	2010      	movs	r0, #16
   db576:	f7fa fcf1 	bl	d5f5c <malloc>
   db57a:	6270      	str	r0, [r6, #36]	; 0x24
   db57c:	6044      	str	r4, [r0, #4]
   db57e:	6084      	str	r4, [r0, #8]
   db580:	6004      	str	r4, [r0, #0]
   db582:	60c4      	str	r4, [r0, #12]
   db584:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db588:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db58c:	b94c      	cbnz	r4, db5a2 <__pow5mult+0x56>
   db58e:	f240 2171 	movw	r1, #625	; 0x271
   db592:	4630      	mov	r0, r6
   db594:	f7ff ff3f 	bl	db416 <__i2b>
   db598:	2300      	movs	r3, #0
   db59a:	f8c8 0008 	str.w	r0, [r8, #8]
   db59e:	4604      	mov	r4, r0
   db5a0:	6003      	str	r3, [r0, #0]
   db5a2:	f04f 0800 	mov.w	r8, #0
   db5a6:	07eb      	lsls	r3, r5, #31
   db5a8:	d50a      	bpl.n	db5c0 <__pow5mult+0x74>
   db5aa:	4639      	mov	r1, r7
   db5ac:	4622      	mov	r2, r4
   db5ae:	4630      	mov	r0, r6
   db5b0:	f7ff ff3a 	bl	db428 <__multiply>
   db5b4:	4639      	mov	r1, r7
   db5b6:	4681      	mov	r9, r0
   db5b8:	4630      	mov	r0, r6
   db5ba:	f7ff fe4f 	bl	db25c <_Bfree>
   db5be:	464f      	mov	r7, r9
   db5c0:	106d      	asrs	r5, r5, #1
   db5c2:	d00c      	beq.n	db5de <__pow5mult+0x92>
   db5c4:	6820      	ldr	r0, [r4, #0]
   db5c6:	b108      	cbz	r0, db5cc <__pow5mult+0x80>
   db5c8:	4604      	mov	r4, r0
   db5ca:	e7ec      	b.n	db5a6 <__pow5mult+0x5a>
   db5cc:	4622      	mov	r2, r4
   db5ce:	4621      	mov	r1, r4
   db5d0:	4630      	mov	r0, r6
   db5d2:	f7ff ff29 	bl	db428 <__multiply>
   db5d6:	6020      	str	r0, [r4, #0]
   db5d8:	f8c0 8000 	str.w	r8, [r0]
   db5dc:	e7f4      	b.n	db5c8 <__pow5mult+0x7c>
   db5de:	4638      	mov	r0, r7
   db5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db5e4:	000dc0d0 	.word	0x000dc0d0

000db5e8 <__lshift>:
   db5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db5ec:	460c      	mov	r4, r1
   db5ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db5f2:	6926      	ldr	r6, [r4, #16]
   db5f4:	6849      	ldr	r1, [r1, #4]
   db5f6:	68a3      	ldr	r3, [r4, #8]
   db5f8:	4456      	add	r6, sl
   db5fa:	4607      	mov	r7, r0
   db5fc:	4691      	mov	r9, r2
   db5fe:	1c75      	adds	r5, r6, #1
   db600:	42ab      	cmp	r3, r5
   db602:	da02      	bge.n	db60a <__lshift+0x22>
   db604:	3101      	adds	r1, #1
   db606:	005b      	lsls	r3, r3, #1
   db608:	e7fa      	b.n	db600 <__lshift+0x18>
   db60a:	4638      	mov	r0, r7
   db60c:	f7ff fdf1 	bl	db1f2 <_Balloc>
   db610:	2300      	movs	r3, #0
   db612:	4680      	mov	r8, r0
   db614:	f100 0114 	add.w	r1, r0, #20
   db618:	461a      	mov	r2, r3
   db61a:	4553      	cmp	r3, sl
   db61c:	da03      	bge.n	db626 <__lshift+0x3e>
   db61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db622:	3301      	adds	r3, #1
   db624:	e7f9      	b.n	db61a <__lshift+0x32>
   db626:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db62a:	6920      	ldr	r0, [r4, #16]
   db62c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db630:	f019 091f 	ands.w	r9, r9, #31
   db634:	f104 0114 	add.w	r1, r4, #20
   db638:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db63c:	d014      	beq.n	db668 <__lshift+0x80>
   db63e:	f1c9 0c20 	rsb	ip, r9, #32
   db642:	2200      	movs	r2, #0
   db644:	6808      	ldr	r0, [r1, #0]
   db646:	fa00 f009 	lsl.w	r0, r0, r9
   db64a:	4302      	orrs	r2, r0
   db64c:	469a      	mov	sl, r3
   db64e:	f843 2b04 	str.w	r2, [r3], #4
   db652:	f851 2b04 	ldr.w	r2, [r1], #4
   db656:	458e      	cmp	lr, r1
   db658:	fa22 f20c 	lsr.w	r2, r2, ip
   db65c:	d8f2      	bhi.n	db644 <__lshift+0x5c>
   db65e:	f8ca 2004 	str.w	r2, [sl, #4]
   db662:	b142      	cbz	r2, db676 <__lshift+0x8e>
   db664:	1cb5      	adds	r5, r6, #2
   db666:	e006      	b.n	db676 <__lshift+0x8e>
   db668:	3b04      	subs	r3, #4
   db66a:	f851 2b04 	ldr.w	r2, [r1], #4
   db66e:	f843 2f04 	str.w	r2, [r3, #4]!
   db672:	458e      	cmp	lr, r1
   db674:	d8f9      	bhi.n	db66a <__lshift+0x82>
   db676:	3d01      	subs	r5, #1
   db678:	4638      	mov	r0, r7
   db67a:	f8c8 5010 	str.w	r5, [r8, #16]
   db67e:	4621      	mov	r1, r4
   db680:	f7ff fdec 	bl	db25c <_Bfree>
   db684:	4640      	mov	r0, r8
   db686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db68a <__mcmp>:
   db68a:	6903      	ldr	r3, [r0, #16]
   db68c:	690a      	ldr	r2, [r1, #16]
   db68e:	1a9b      	subs	r3, r3, r2
   db690:	b510      	push	{r4, lr}
   db692:	d111      	bne.n	db6b8 <__mcmp+0x2e>
   db694:	0092      	lsls	r2, r2, #2
   db696:	3014      	adds	r0, #20
   db698:	3114      	adds	r1, #20
   db69a:	1883      	adds	r3, r0, r2
   db69c:	440a      	add	r2, r1
   db69e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db6a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db6a6:	428c      	cmp	r4, r1
   db6a8:	d002      	beq.n	db6b0 <__mcmp+0x26>
   db6aa:	d307      	bcc.n	db6bc <__mcmp+0x32>
   db6ac:	2001      	movs	r0, #1
   db6ae:	bd10      	pop	{r4, pc}
   db6b0:	4298      	cmp	r0, r3
   db6b2:	d3f4      	bcc.n	db69e <__mcmp+0x14>
   db6b4:	2000      	movs	r0, #0
   db6b6:	bd10      	pop	{r4, pc}
   db6b8:	4618      	mov	r0, r3
   db6ba:	bd10      	pop	{r4, pc}
   db6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db6c0:	bd10      	pop	{r4, pc}

000db6c2 <__mdiff>:
   db6c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db6c6:	460c      	mov	r4, r1
   db6c8:	4607      	mov	r7, r0
   db6ca:	4611      	mov	r1, r2
   db6cc:	4620      	mov	r0, r4
   db6ce:	4615      	mov	r5, r2
   db6d0:	f7ff ffdb 	bl	db68a <__mcmp>
   db6d4:	1e06      	subs	r6, r0, #0
   db6d6:	d108      	bne.n	db6ea <__mdiff+0x28>
   db6d8:	4631      	mov	r1, r6
   db6da:	4638      	mov	r0, r7
   db6dc:	f7ff fd89 	bl	db1f2 <_Balloc>
   db6e0:	2301      	movs	r3, #1
   db6e2:	6103      	str	r3, [r0, #16]
   db6e4:	6146      	str	r6, [r0, #20]
   db6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db6ea:	bfbc      	itt	lt
   db6ec:	4623      	movlt	r3, r4
   db6ee:	462c      	movlt	r4, r5
   db6f0:	4638      	mov	r0, r7
   db6f2:	6861      	ldr	r1, [r4, #4]
   db6f4:	bfba      	itte	lt
   db6f6:	461d      	movlt	r5, r3
   db6f8:	2601      	movlt	r6, #1
   db6fa:	2600      	movge	r6, #0
   db6fc:	f7ff fd79 	bl	db1f2 <_Balloc>
   db700:	692b      	ldr	r3, [r5, #16]
   db702:	60c6      	str	r6, [r0, #12]
   db704:	6926      	ldr	r6, [r4, #16]
   db706:	f105 0914 	add.w	r9, r5, #20
   db70a:	3414      	adds	r4, #20
   db70c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db710:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db714:	f100 0514 	add.w	r5, r0, #20
   db718:	f04f 0c00 	mov.w	ip, #0
   db71c:	f854 3b04 	ldr.w	r3, [r4], #4
   db720:	f859 2b04 	ldr.w	r2, [r9], #4
   db724:	fa1c f183 	uxtah	r1, ip, r3
   db728:	fa1f fe82 	uxth.w	lr, r2
   db72c:	0c12      	lsrs	r2, r2, #16
   db72e:	ebce 0101 	rsb	r1, lr, r1
   db732:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db736:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db73a:	b289      	uxth	r1, r1
   db73c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db740:	45c8      	cmp	r8, r9
   db742:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db746:	46a6      	mov	lr, r4
   db748:	f845 3b04 	str.w	r3, [r5], #4
   db74c:	d8e6      	bhi.n	db71c <__mdiff+0x5a>
   db74e:	45be      	cmp	lr, r7
   db750:	d20e      	bcs.n	db770 <__mdiff+0xae>
   db752:	f85e 1b04 	ldr.w	r1, [lr], #4
   db756:	fa1c f281 	uxtah	r2, ip, r1
   db75a:	1413      	asrs	r3, r2, #16
   db75c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db760:	b292      	uxth	r2, r2
   db762:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db766:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db76a:	f845 2b04 	str.w	r2, [r5], #4
   db76e:	e7ee      	b.n	db74e <__mdiff+0x8c>
   db770:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db774:	b90b      	cbnz	r3, db77a <__mdiff+0xb8>
   db776:	3e01      	subs	r6, #1
   db778:	e7fa      	b.n	db770 <__mdiff+0xae>
   db77a:	6106      	str	r6, [r0, #16]
   db77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db780 <__ulp>:
   db780:	4b12      	ldr	r3, [pc, #72]	; (db7cc <__ulp+0x4c>)
   db782:	ee10 2a90 	vmov	r2, s1
   db786:	401a      	ands	r2, r3
   db788:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db78c:	2b00      	cmp	r3, #0
   db78e:	dd02      	ble.n	db796 <__ulp+0x16>
   db790:	2000      	movs	r0, #0
   db792:	4619      	mov	r1, r3
   db794:	e017      	b.n	db7c6 <__ulp+0x46>
   db796:	425b      	negs	r3, r3
   db798:	151b      	asrs	r3, r3, #20
   db79a:	2b13      	cmp	r3, #19
   db79c:	f04f 0000 	mov.w	r0, #0
   db7a0:	f04f 0100 	mov.w	r1, #0
   db7a4:	dc04      	bgt.n	db7b0 <__ulp+0x30>
   db7a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db7aa:	fa42 f103 	asr.w	r1, r2, r3
   db7ae:	e00a      	b.n	db7c6 <__ulp+0x46>
   db7b0:	3b14      	subs	r3, #20
   db7b2:	2b1e      	cmp	r3, #30
   db7b4:	f04f 0201 	mov.w	r2, #1
   db7b8:	bfda      	itte	le
   db7ba:	f1c3 031f 	rsble	r3, r3, #31
   db7be:	fa02 f303 	lslle.w	r3, r2, r3
   db7c2:	4613      	movgt	r3, r2
   db7c4:	4618      	mov	r0, r3
   db7c6:	ec41 0b10 	vmov	d0, r0, r1
   db7ca:	4770      	bx	lr
   db7cc:	7ff00000 	.word	0x7ff00000

000db7d0 <__b2d>:
   db7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db7d2:	6905      	ldr	r5, [r0, #16]
   db7d4:	f100 0614 	add.w	r6, r0, #20
   db7d8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db7dc:	1f2f      	subs	r7, r5, #4
   db7de:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db7e2:	4620      	mov	r0, r4
   db7e4:	f7ff fdca 	bl	db37c <__hi0bits>
   db7e8:	f1c0 0320 	rsb	r3, r0, #32
   db7ec:	280a      	cmp	r0, #10
   db7ee:	600b      	str	r3, [r1, #0]
   db7f0:	dc14      	bgt.n	db81c <__b2d+0x4c>
   db7f2:	f1c0 0e0b 	rsb	lr, r0, #11
   db7f6:	fa24 f10e 	lsr.w	r1, r4, lr
   db7fa:	42be      	cmp	r6, r7
   db7fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db800:	bf34      	ite	cc
   db802:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db806:	2100      	movcs	r1, #0
   db808:	3015      	adds	r0, #21
   db80a:	fa04 f000 	lsl.w	r0, r4, r0
   db80e:	fa21 f10e 	lsr.w	r1, r1, lr
   db812:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db816:	ea40 0201 	orr.w	r2, r0, r1
   db81a:	e023      	b.n	db864 <__b2d+0x94>
   db81c:	42be      	cmp	r6, r7
   db81e:	bf3a      	itte	cc
   db820:	f1a5 0708 	subcc.w	r7, r5, #8
   db824:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db828:	2100      	movcs	r1, #0
   db82a:	380b      	subs	r0, #11
   db82c:	d015      	beq.n	db85a <__b2d+0x8a>
   db82e:	4084      	lsls	r4, r0
   db830:	f1c0 0520 	rsb	r5, r0, #32
   db834:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db838:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db83c:	42b7      	cmp	r7, r6
   db83e:	fa21 fe05 	lsr.w	lr, r1, r5
   db842:	ea44 030e 	orr.w	r3, r4, lr
   db846:	bf8c      	ite	hi
   db848:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db84c:	2400      	movls	r4, #0
   db84e:	fa01 f000 	lsl.w	r0, r1, r0
   db852:	40ec      	lsrs	r4, r5
   db854:	ea40 0204 	orr.w	r2, r0, r4
   db858:	e004      	b.n	db864 <__b2d+0x94>
   db85a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db85e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db862:	460a      	mov	r2, r1
   db864:	ec43 2b10 	vmov	d0, r2, r3
   db868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db86a <__d2b>:
   db86a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db86e:	460e      	mov	r6, r1
   db870:	2101      	movs	r1, #1
   db872:	ec59 8b10 	vmov	r8, r9, d0
   db876:	4615      	mov	r5, r2
   db878:	f7ff fcbb 	bl	db1f2 <_Balloc>
   db87c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db880:	4607      	mov	r7, r0
   db882:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db886:	b10c      	cbz	r4, db88c <__d2b+0x22>
   db888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db88c:	9301      	str	r3, [sp, #4]
   db88e:	f1b8 0f00 	cmp.w	r8, #0
   db892:	d019      	beq.n	db8c8 <__d2b+0x5e>
   db894:	a802      	add	r0, sp, #8
   db896:	f840 8d08 	str.w	r8, [r0, #-8]!
   db89a:	f7ff fd8f 	bl	db3bc <__lo0bits>
   db89e:	9b00      	ldr	r3, [sp, #0]
   db8a0:	b148      	cbz	r0, db8b6 <__d2b+0x4c>
   db8a2:	9a01      	ldr	r2, [sp, #4]
   db8a4:	f1c0 0120 	rsb	r1, r0, #32
   db8a8:	fa02 f101 	lsl.w	r1, r2, r1
   db8ac:	430b      	orrs	r3, r1
   db8ae:	40c2      	lsrs	r2, r0
   db8b0:	617b      	str	r3, [r7, #20]
   db8b2:	9201      	str	r2, [sp, #4]
   db8b4:	e000      	b.n	db8b8 <__d2b+0x4e>
   db8b6:	617b      	str	r3, [r7, #20]
   db8b8:	9b01      	ldr	r3, [sp, #4]
   db8ba:	61bb      	str	r3, [r7, #24]
   db8bc:	2b00      	cmp	r3, #0
   db8be:	bf14      	ite	ne
   db8c0:	2102      	movne	r1, #2
   db8c2:	2101      	moveq	r1, #1
   db8c4:	6139      	str	r1, [r7, #16]
   db8c6:	e007      	b.n	db8d8 <__d2b+0x6e>
   db8c8:	a801      	add	r0, sp, #4
   db8ca:	f7ff fd77 	bl	db3bc <__lo0bits>
   db8ce:	9b01      	ldr	r3, [sp, #4]
   db8d0:	617b      	str	r3, [r7, #20]
   db8d2:	2101      	movs	r1, #1
   db8d4:	6139      	str	r1, [r7, #16]
   db8d6:	3020      	adds	r0, #32
   db8d8:	b134      	cbz	r4, db8e8 <__d2b+0x7e>
   db8da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db8de:	4404      	add	r4, r0
   db8e0:	6034      	str	r4, [r6, #0]
   db8e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db8e6:	e009      	b.n	db8fc <__d2b+0x92>
   db8e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db8ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db8f0:	6030      	str	r0, [r6, #0]
   db8f2:	6918      	ldr	r0, [r3, #16]
   db8f4:	f7ff fd42 	bl	db37c <__hi0bits>
   db8f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db8fc:	6028      	str	r0, [r5, #0]
   db8fe:	4638      	mov	r0, r7
   db900:	b003      	add	sp, #12
   db902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db906 <__ratio>:
   db906:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db90a:	4688      	mov	r8, r1
   db90c:	4669      	mov	r1, sp
   db90e:	4681      	mov	r9, r0
   db910:	f7ff ff5e 	bl	db7d0 <__b2d>
   db914:	a901      	add	r1, sp, #4
   db916:	4640      	mov	r0, r8
   db918:	ec55 4b10 	vmov	r4, r5, d0
   db91c:	f7ff ff58 	bl	db7d0 <__b2d>
   db920:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db924:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db928:	1a9a      	subs	r2, r3, r2
   db92a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db92e:	1ac9      	subs	r1, r1, r3
   db930:	ec57 6b10 	vmov	r6, r7, d0
   db934:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db938:	2b00      	cmp	r3, #0
   db93a:	bfcc      	ite	gt
   db93c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db940:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db944:	4632      	mov	r2, r6
   db946:	463b      	mov	r3, r7
   db948:	4620      	mov	r0, r4
   db94a:	4629      	mov	r1, r5
   db94c:	f7fd ff6e 	bl	d982c <__aeabi_ddiv>
   db950:	ec41 0b10 	vmov	d0, r0, r1
   db954:	b003      	add	sp, #12
   db956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db95a <__copybits>:
   db95a:	3901      	subs	r1, #1
   db95c:	b510      	push	{r4, lr}
   db95e:	1149      	asrs	r1, r1, #5
   db960:	6914      	ldr	r4, [r2, #16]
   db962:	3101      	adds	r1, #1
   db964:	f102 0314 	add.w	r3, r2, #20
   db968:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db96c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db970:	42a3      	cmp	r3, r4
   db972:	4602      	mov	r2, r0
   db974:	d204      	bcs.n	db980 <__copybits+0x26>
   db976:	f853 2b04 	ldr.w	r2, [r3], #4
   db97a:	f840 2b04 	str.w	r2, [r0], #4
   db97e:	e7f7      	b.n	db970 <__copybits+0x16>
   db980:	2300      	movs	r3, #0
   db982:	428a      	cmp	r2, r1
   db984:	d202      	bcs.n	db98c <__copybits+0x32>
   db986:	f842 3b04 	str.w	r3, [r2], #4
   db98a:	e7fa      	b.n	db982 <__copybits+0x28>
   db98c:	bd10      	pop	{r4, pc}

000db98e <__any_on>:
   db98e:	f100 0214 	add.w	r2, r0, #20
   db992:	6900      	ldr	r0, [r0, #16]
   db994:	114b      	asrs	r3, r1, #5
   db996:	4298      	cmp	r0, r3
   db998:	b510      	push	{r4, lr}
   db99a:	db0c      	blt.n	db9b6 <__any_on+0x28>
   db99c:	dd0c      	ble.n	db9b8 <__any_on+0x2a>
   db99e:	f011 011f 	ands.w	r1, r1, #31
   db9a2:	d009      	beq.n	db9b8 <__any_on+0x2a>
   db9a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db9a8:	fa24 f001 	lsr.w	r0, r4, r1
   db9ac:	fa00 f101 	lsl.w	r1, r0, r1
   db9b0:	428c      	cmp	r4, r1
   db9b2:	d10c      	bne.n	db9ce <__any_on+0x40>
   db9b4:	e000      	b.n	db9b8 <__any_on+0x2a>
   db9b6:	4603      	mov	r3, r0
   db9b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db9bc:	4293      	cmp	r3, r2
   db9be:	d904      	bls.n	db9ca <__any_on+0x3c>
   db9c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db9c4:	2900      	cmp	r1, #0
   db9c6:	d0f9      	beq.n	db9bc <__any_on+0x2e>
   db9c8:	e001      	b.n	db9ce <__any_on+0x40>
   db9ca:	2000      	movs	r0, #0
   db9cc:	bd10      	pop	{r4, pc}
   db9ce:	2001      	movs	r0, #1
   db9d0:	bd10      	pop	{r4, pc}

000db9d2 <_calloc_r>:
   db9d2:	b538      	push	{r3, r4, r5, lr}
   db9d4:	fb02 f401 	mul.w	r4, r2, r1
   db9d8:	4621      	mov	r1, r4
   db9da:	f7fa fae7 	bl	d5fac <_malloc_r>
   db9de:	4605      	mov	r5, r0
   db9e0:	b118      	cbz	r0, db9ea <_calloc_r+0x18>
   db9e2:	4622      	mov	r2, r4
   db9e4:	2100      	movs	r1, #0
   db9e6:	f7fe f973 	bl	d9cd0 <memset>
   db9ea:	4628      	mov	r0, r5
   db9ec:	bd38      	pop	{r3, r4, r5, pc}

000db9ee <link_code_end>:
	...

000db9f0 <dynalib_user>:
   db9f0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   dba00:	0000 0000                                   ....

000dba04 <_ZTV16JsonParserStaticILj2048ELj100EE>:
	...
   dba0c:	454d 000d 4561 000d 7473 7261 4674 756f     ME..aE..startFou
   dba1c:	0072 6f6e 742d 6e6f 0065 6573 4d74 646f     r.no-tone.setMod
   dba2c:	0065 6f6d 6564 7300 6174 7472 6854 6572     e.mode.startThre
   dba3c:	0065 6573 4374 6c6f 726f 7200 6465 6700     e.setColor.red.g
   dba4c:	6572 6e65 6200 756c 0065 6170 7372 2d65     reen.blue.parse-
   dba5c:	6166 6c69 0000 0000                         fail....

000dba64 <_ZTV13JsonReference>:
	...
   dba6c:	4c79 000d 4c7b 000d                         yL..{L..

000dba74 <_ZTV10JsonBuffer>:
	...
   dba7c:	4c89 000d 4ca5 000d 6c25 0075 3025 7834     .L...L..%lu.%04x
   dba8c:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   dba9c:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   dbaac:	2500 666c 0000 0000                         .%lf....

000dbab4 <_ZTV10JsonParser>:
	...
   dbabc:	4cb9 000d 4cdd 000d c000 4001 1000 4002     .L...L.....@...@
   dbacc:	2000 4002                                   . .@

000dbad0 <CSWTCH.68>:
   dbad0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   dbae0:	0050 0000                                   P...

000dbae4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbaec:	5ff9 000d 5fff 000d 6027 000d 600b 000d     ._..._..'`...`..
   dbafc:	5ffb 000d                                   ._..

000dbb00 <_ZTVN5spark13EthernetClassE>:
	...
   dbb08:	6623 000d 6619 000d 660f 000d 6605 000d     #f...f...f...f..
   dbb18:	65f9 000d 65ed 000d 65e1 000d 65d9 000d     .e...e...e...e..
   dbb28:	65cf 000d 65c5 000d 6ea9 000d               .e...e...n..

000dbb34 <_ZTV7TwoWire>:
	...
   dbb3c:	6641 000d 668b 000d 6663 000d 6643 000d     Af...f..cf..Cf..
   dbb4c:	666b 000d 6673 000d 667b 000d 6683 000d     kf..sf..{f...f..

000dbb5c <_ZTV9IPAddress>:
	...
   dbb64:	66d3 000d 66c5 000d 66c7 000d 6e6c 6600     .f...f...f..ln.f
   dbb74:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   dbb84:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   dbb94:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   dbba4:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   dbbb4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dbbc4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   dbbd4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   dbbe4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   dbbf4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   dbc04:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   dbc14:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   dbc24:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   dbc34:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   dbc44:	696e 0063 6c61 006c                         nic.all.

000dbc4c <_ZTVN5spark9MeshClassE>:
	...
   dbc54:	686d 000d 6863 000d 6859 000d 684f 000d     mh..ch..Yh..Oh..
   dbc64:	6843 000d 6837 000d 682b 000d 6823 000d     Ch..7h..+h..#h..
   dbc74:	6819 000d 680f 000d 6ea9 000d 6666 3330     .h...h...n..ff03
   dbc84:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   dbc94:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   dbca4:	2065 6170 6b63 7465 2520 0064               e packet %d.

000dbcb0 <_ZTVN5spark12NetworkClassE>:
	...
   dbcb8:	6e41 000d 6e4b 000d 6e55 000d 6e5f 000d     An..Kn..Un.._n..
   dbcc8:	6e69 000d 6e75 000d 6e81 000d 6e8d 000d     in..un...n...n..
   dbcd8:	6e95 000d 6e9f 000d 6ea9 000d               .n...n...n..

000dbce4 <_ZTV8SPIClass>:
	...
   dbcec:	7045 000d 7047 000d 005a 2b25 3330 3a64     Ep..Gp..Z.%+03d:
   dbcfc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   dbd0c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   dbd1c:	0000 0000                                   ....

000dbd20 <_ZTV3UDP>:
	...
   dbd28:	786d 000d 7891 000d 7251 000d 737b 000d     mx...x..Qr..{s..
   dbd38:	7249 000d 7267 000d 7285 000d 729f 000d     Ir..gr...r...r..
   dbd48:	72c3 000d 735f 000d 7661 000d 7401 000d     .r.._s..av...t..
   dbd58:	7581 000d 7231 000d 7807 000d 7505 000d     .u..1r...x...u..
   dbd68:	7439 000d 7835 000d 73a5 000d 723f 000d     9t..5x...s..?r..
   dbd78:	73e1 000d 7245 000d 72a1 000d fff0 ffff     .s..Er...r......
   dbd88:	0000 0000 72bb 000d                         .....r..

000dbd90 <_ZTV11USARTSerial>:
	...
   dbd98:	78bb 000d 78df 000d 78eb 000d 6f41 000d     .x...x...x..Ao..
   dbda8:	78c7 000d 78d3 000d 78cd 000d 78d9 000d     .x...x...x...x..
   dbdb8:	78bd 000d 78c1 000d                         .x...x..

000dbdc0 <_ZTV9USBSerial>:
	...
   dbdc8:	7995 000d 79d9 000d 79b3 000d 6f41 000d     .y...y...y..Ao..
   dbdd8:	79ad 000d 7997 000d 799f 000d 79d3 000d     .y...y...y...y..
   dbde8:	79a7 000d 7991 000d                         .y...y..

000dbdf0 <_ZSt7nothrow>:
   dbdf0:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000dbe00 <TWO52>:
   dbe00:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dbe10 <_ctype_>:
   dbe10:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dbe20:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dbe30:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dbe40:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dbe50:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dbe60:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dbe70:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dbe80:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dbe90:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dbf14 <__sf_fake_stdin>:
	...

000dbf34 <__sf_fake_stdout>:
	...

000dbf54 <__sf_fake_stderr>:
	...
   dbf74:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000dbf80 <fpi.5344>:
   dbf80:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dbf90:	0000 0000                                   ....

000dbf94 <fpinan.5380>:
   dbf94:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dbfa4:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dbfb4:	0000 0000                                   ....

000dbfb8 <tinytens>:
   dbfb8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dbfc8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dbfd8:	6f43 64ac 0628 1168                         Co.d(.h.

000dbfe0 <__mprec_tens>:
   dbfe0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dbff0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc000:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc010:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc020:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc030:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc040:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc050:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc060:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc070:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc080:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc090:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc0a0:	9db4 79d9 7843 44ea                         ...yCx.D

000dc0a8 <__mprec_bigtens>:
   dc0a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc0b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc0c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc0d0 <p05.5387>:
   dc0d0:	0005 0000 0019 0000 007d 0000               ........}...

000dc0dc <link_const_variable_data_end>:
   dc0dc:	000d4af5 	.word	0x000d4af5
   dc0e0:	000d54b9 	.word	0x000d54b9
   dc0e4:	000d5a1d 	.word	0x000d5a1d
   dc0e8:	000d662d 	.word	0x000d662d
   dc0ec:	000d67d5 	.word	0x000d67d5
   dc0f0:	000d6df5 	.word	0x000d6df5
   dc0f4:	000d6f2d 	.word	0x000d6f2d
   dc0f8:	000d7029 	.word	0x000d7029
   dc0fc:	000d7205 	.word	0x000d7205
   dc100:	000d721d 	.word	0x000d721d
   dc104:	000d7c31 	.word	0x000d7c31
   dc108:	000d7cb9 	.word	0x000d7cb9
   dc10c:	000d7d7d 	.word	0x000d7d7d
   dc110:	000d7e01 	.word	0x000d7e01
   dc114:	000d7e85 	.word	0x000d7e85

000dc118 <link_constructors_end>:
	...
